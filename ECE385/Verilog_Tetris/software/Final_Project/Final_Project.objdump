
Final_Project.elf:     file format elf32-littlenios2
Final_Project.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x10000230

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x00005774 memsz 0x00005774 flags r-x
    LOAD off    0x00006794 vaddr 0x10005794 paddr 0x10007200 align 2**12
         filesz 0x00001a6c memsz 0x00001a6c flags rw-
    LOAD off    0x00008c6c vaddr 0x10008c6c paddr 0x10008c6c align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005514  10000230  10000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000050  10005744  10005744  00006744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a6c  10005794  10007200  00006794  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  10008c6c  10008c6c  00008c6c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00008200  2**0
                  CONTENTS
  7 .sdram        00000000  10008dc0  10008dc0  00008200  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00008200  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000a10  00000000  00000000  00008228  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00016250  00000000  00000000  00008c38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00005ed1  00000000  00000000  0001ee88  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000678a  00000000  00000000  00024d59  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001540  00000000  00000000  0002b4e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002719  00000000  00000000  0002ca24  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00004ada  00000000  00000000  0002f13d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  00033c18  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000680  00000000  00000000  00033c28  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0003680e  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00036811  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0003681d  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0003681e  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0003681f  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00036823  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00036827  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0003682b  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  00036836  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  00036841  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000008  00000000  00000000  0003684c  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000001e  00000000  00000000  00036854  2**0
                  CONTENTS, READONLY
 30 .jdi          000051fa  00000000  00000000  00036872  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00072649  00000000  00000000  0003ba6c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
10000230 l    d  .text	00000000 .text
10005744 l    d  .rodata	00000000 .rodata
10005794 l    d  .rwdata	00000000 .rwdata
10008c6c l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
10008dc0 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Final_Project_bsp//obj/HAL/src/crt0.o
10000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
1000040c l     F .text	00000008 __fp_unlock
10000420 l     F .text	0000019c __sinit.part.1
100005bc l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
10005794 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
100030ac l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
100031c0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
100031ec l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
100032e0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
100033c8 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
100034b4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
10003690 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
100071f0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
10003904 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
10003a40 l     F .text	00000034 alt_dev_reg
10006168 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
10003d1c l     F .text	0000020c altera_avalon_jtag_uart_irq
10003f28 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
100046ac l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
10004b0c l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
10004c6c l     F .text	0000003c alt_get_errno
10004ca8 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
10008c94 g     O .bss	00000004 alt_instruction_exception_handler
10002e7c g     F .text	00000054 _isatty_r
100035cc g     F .text	0000007c alt_main
100002a0 g     F .text	000000c0 _puts_r
10008cc0 g     O .bss	00000100 alt_irq
10002ba4 g     F .text	00000060 _lseek_r
10007200 g       *ABS*	00000000 __flash_rwdata_start
10008dc0 g       *ABS*	00000000 __alt_heap_start
10002158 g     F .text	0000005c __sseek
1000076c g     F .text	00000010 __sinit
100005c4 g     F .text	00000078 __sfmoreglue
1000366c g     F .text	00000024 __malloc_unlock
10001844 g     F .text	0000015c memmove
10000754 g     F .text	00000018 _cleanup
10005094 g     F .text	00000024 altera_nios2_gen2_irq_init
10000000 g     F .entry	0000000c __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
10002e20 g     F .text	0000005c _fstat_r
10008c78 g     O .bss	00000004 errno
100020d4 g     F .text	00000008 __seofread
10008c80 g     O .bss	00000004 alt_argv
1000f1c8 g       *ABS*	00000000 _gp
10005fe8 g     O .rwdata	00000180 alt_fd_list
100050b8 g     F .text	00000090 alt_find_dev
100016fc g     F .text	00000148 memcpy
10000414 g     F .text	0000000c _cleanup_r
10004bf0 g     F .text	0000007c alt_io_redirect
10005744 g       *ABS*	00000000 __DTOR_END__
10000360 g     F .text	00000014 puts
10005314 g     F .text	0000009c alt_exception_cause_generated_bad_addr
10004120 g     F .text	0000021c altera_avalon_jtag_uart_read
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
10002fc8 g     F .text	00000064 .hidden __udivsi3
1000331c g     F .text	000000ac isatty
10008c74 g     O .bss	00000004 __malloc_top_pad
100007bc g     F .text	000004c8 __sfvwrite_r
1000202c g     F .text	00000054 _sbrk_r
10002dc0 g     F .text	00000060 _read_r
100071e8 g     O .rwdata	00000004 alt_max_fd
100023c4 g     F .text	000000f0 _fclose_r
10002740 g     F .text	00000030 fflush
10008c70 g     O .bss	00000004 __malloc_max_sbrked_mem
100034f0 g     F .text	000000dc lseek
100071c8 g     O .rwdata	00000004 _global_impure_ptr
10001ac8 g     F .text	00000564 _realloc_r
10008dc0 g       *ABS*	00000000 __bss_end
10004a1c g     F .text	000000f0 alt_iic_isr_register
10004f8c g     F .text	00000108 alt_tick
1000078c g     F .text	00000018 __fp_lock_all
100049d0 g     F .text	0000004c alt_ic_irq_enabled
10004ef0 g     F .text	0000009c alt_alarm_stop
10008c88 g     O .bss	00000004 alt_irq_active
100000fc g     F .exceptions	000000d4 alt_irq_handler
10005fc0 g     O .rwdata	00000028 alt_dev_null
1000468c g     F .text	00000020 alt_dcache_flush_all
10007200 g       *ABS*	00000000 __ram_rwdata_end
100071e0 g     O .rwdata	00000008 alt_dev_list
10003940 g     F .text	00000100 write
10005794 g       *ABS*	00000000 __ram_rodata_end
10003228 g     F .text	000000b8 fstat
1000302c g     F .text	00000058 .hidden __umodsi3
10008dc0 g       *ABS*	00000000 end
10003c5c g     F .text	000000c0 altera_avalon_jtag_uart_init
100001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
10005744 g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
1000433c g     F .text	00000224 altera_avalon_jtag_uart_write
1000077c g     F .text	00000004 __sfp_lock_acquire
10001618 g     F .text	000000e4 memchr
10002894 g     F .text	00000310 _free_r
10005590 g     F .text	00000180 __call_exitprocs
100071d0 g     O .rwdata	00000004 __malloc_sbrk_base
10000230 g     F .text	0000003c _start
10008c8c g     O .bss	00000004 _alt_tick_rate
10008c90 g     O .bss	00000004 _alt_nticks
100036cc g     F .text	00000104 read
10003aac g     F .text	0000004c alt_sys_init
10005478 g     F .text	00000118 __register_exitproc
10003fc8 g     F .text	00000068 altera_avalon_jtag_uart_close
10003084 g     F .text	00000028 .hidden __mulsi3
10005794 g       *ABS*	00000000 __ram_rwdata_start
10005744 g       *ABS*	00000000 __ram_rodata_start
10008c98 g     O .bss	00000028 __malloc_current_mallinfo
10003af8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
10005250 g     F .text	000000c4 alt_get_fd
10002370 g     F .text	00000054 _close_r
100053fc g     F .text	0000007c memcmp
10003bb8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
10008dc0 g       *ABS*	00000000 __alt_stack_base
10003c08 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
1000221c g     F .text	00000154 __swsetup_r
1000063c g     F .text	00000118 __sfp
10005bb8 g     O .rwdata	00000408 __malloc_av_
10000788 g     F .text	00000004 __sinit_lock_release
10002080 g     F .text	00000054 __sread
10005148 g     F .text	00000108 alt_find_file
100046e8 g     F .text	000000a4 alt_dev_llist_insert
10003648 g     F .text	00000024 __malloc_lock
10003854 g     F .text	000000b0 sbrk
100026e4 g     F .text	0000005c _fflush_r
10008c6c g       *ABS*	00000000 __bss_start
100019a0 g     F .text	00000128 memset
1000026c g     F .text	00000034 main
10008c84 g     O .bss	00000004 alt_envp
10008c6c g     O .bss	00000004 __malloc_max_total_mem
10003b58 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
100021b4 g     F .text	00000008 __sclose
18000000 g       *ABS*	00000000 __alt_heap_limit
100024b4 g     F .text	00000014 fclose
10000e0c g     F .text	0000080c _malloc_r
100071ec g     O .rwdata	00000004 alt_errno
10000c84 g     F .text	000000c4 _fwalk
10002ed0 g     F .text	00000084 .hidden __divsi3
10002770 g     F .text	00000124 _malloc_trim_r
10005744 g       *ABS*	00000000 __CTOR_END__
10005744 g       *ABS*	00000000 __flash_rodata_start
10005744 g       *ABS*	00000000 __DTOR_LIST__
10003a74 g     F .text	00000038 alt_irq_init
100037d0 g     F .text	00000084 alt_release_fd
100053b0 g     F .text	00000014 atexit
100021bc g     F .text	00000060 _write_r
100071cc g     O .rwdata	00000004 _impure_ptr
10008c7c g     O .bss	00000004 alt_argc
100024c8 g     F .text	0000021c __sflush_r
100047ec g     F .text	00000060 _do_dtors
10000020 g       .exceptions	00000000 alt_irq_entry
100007a4 g     F .text	00000018 __fp_unlock_all
100071d8 g     O .rwdata	00000008 alt_fs_list
10000020 g       *ABS*	00000000 __ram_exceptions_start
1000486c g     F .text	00000050 alt_ic_isr_register
10007200 g       *ABS*	00000000 _edata
10008dc0 g       *ABS*	00000000 _end
10000230 g       *ABS*	00000000 __ram_exceptions_end
10004030 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
10004944 g     F .text	0000008c alt_ic_irq_disable
100020dc g     F .text	0000007c __swrite
100071d4 g     O .rwdata	00000004 __malloc_trim_threshold
100053c4 g     F .text	00000038 exit
10000d48 g     F .text	000000c4 _fwalk_reent
10002f54 g     F .text	00000074 .hidden __modsi3
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
10000780 g     F .text	00000004 __sfp_lock_release
10000000 g       *ABS*	00000000 __alt_mem_sdram
10005710 g     F .text	00000034 _exit
10004560 g     F .text	0000012c alt_alarm_start
10002c04 g     F .text	000001bc __smakebuf_r
10000374 g     F .text	00000098 strlen
10004d94 g     F .text	0000015c open
1000484c g     F .text	00000020 alt_icache_flush_all
100071f4 g     O .rwdata	00000004 alt_priority_mask
100048bc g     F .text	00000088 alt_ic_irq_enable
100071f8 g     O .rwdata	00000008 alt_alarm_list
1000478c g     F .text	00000060 _do_ctors
100030e8 g     F .text	000000d8 close
10003430 g     F .text	00000084 alt_load
10000784 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08408c14 	ori	at,at,560
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000fc0 	call	100000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000706 	br	100000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
1000008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10000098:	00001d00 	call	100001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1000009c:	1000021e 	bne	r2,zero,100000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
100000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
100000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
100000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
100000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000f8:	ef80083a 	eret

100000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000fc:	defff904 	addi	sp,sp,-28
10000100:	dfc00615 	stw	ra,24(sp)
10000104:	df000515 	stw	fp,20(sp)
10000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1000010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000110:	0005313a 	rdctl	r2,ipending
10000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000124:	00800044 	movi	r2,1
10000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000012c:	e0fffb17 	ldw	r3,-20(fp)
10000130:	e0bffc17 	ldw	r2,-16(fp)
10000134:	1884703a 	and	r2,r3,r2
10000138:	10001426 	beq	r2,zero,1000018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000013c:	00840074 	movhi	r2,4097
10000140:	10a33004 	addi	r2,r2,-29504
10000144:	e0fffd17 	ldw	r3,-12(fp)
10000148:	180690fa 	slli	r3,r3,3
1000014c:	10c5883a 	add	r2,r2,r3
10000150:	10c00017 	ldw	r3,0(r2)
10000154:	00840074 	movhi	r2,4097
10000158:	10a33004 	addi	r2,r2,-29504
1000015c:	e13ffd17 	ldw	r4,-12(fp)
10000160:	200890fa 	slli	r4,r4,3
10000164:	1105883a 	add	r2,r2,r4
10000168:	10800104 	addi	r2,r2,4
1000016c:	10800017 	ldw	r2,0(r2)
10000170:	1009883a 	mov	r4,r2
10000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000017c:	0005313a 	rdctl	r2,ipending
10000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000184:	e0bfff17 	ldw	r2,-4(fp)
10000188:	00000706 	br	100001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1000018c:	e0bffc17 	ldw	r2,-16(fp)
10000190:	1085883a 	add	r2,r2,r2
10000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000198:	e0bffd17 	ldw	r2,-12(fp)
1000019c:	10800044 	addi	r2,r2,1
100001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
100001a4:	003fe106 	br	1000012c <__alt_data_end+0xf800012c>

    active = alt_irq_pending ();
100001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
100001ac:	e0bffb17 	ldw	r2,-20(fp)
100001b0:	103fdb1e 	bne	r2,zero,10000120 <__alt_data_end+0xf8000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001b4:	0001883a 	nop
}
100001b8:	0001883a 	nop
100001bc:	e037883a 	mov	sp,fp
100001c0:	dfc00117 	ldw	ra,4(sp)
100001c4:	df000017 	ldw	fp,0(sp)
100001c8:	dec00204 	addi	sp,sp,8
100001cc:	f800283a 	ret

100001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
100001d0:	defffb04 	addi	sp,sp,-20
100001d4:	dfc00415 	stw	ra,16(sp)
100001d8:	df000315 	stw	fp,12(sp)
100001dc:	df000304 	addi	fp,sp,12
100001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
100001e4:	00bfffc4 	movi	r2,-1
100001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
100001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
100001f0:	d0a6b317 	ldw	r2,-25908(gp)
100001f4:	10000726 	beq	r2,zero,10000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
100001f8:	d0a6b317 	ldw	r2,-25908(gp)
100001fc:	e0fffd17 	ldw	r3,-12(fp)
10000200:	e1bffe17 	ldw	r6,-8(fp)
10000204:	e17fff17 	ldw	r5,-4(fp)
10000208:	1809883a 	mov	r4,r3
1000020c:	103ee83a 	callr	r2
10000210:	00000206 	br	1000021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
10000218:	0005883a 	mov	r2,zero
}
1000021c:	e037883a 	mov	sp,fp
10000220:	dfc00117 	ldw	ra,4(sp)
10000224:	df000017 	ldw	fp,0(sp)
10000228:	dec00204 	addi	sp,sp,8
1000022c:	f800283a 	ret

Disassembly of section .text:

10000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
10000230:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
10000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
10000238:	06840034 	movhi	gp,4096
    ori gp, gp, %lo(_gp)
1000023c:	d6bc7214 	ori	gp,gp,61896
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
10000240:	00840034 	movhi	r2,4096
    ori r2, r2, %lo(__bss_start)
10000244:	10a31b14 	ori	r2,r2,35948

    movhi r3, %hi(__bss_end)
10000248:	00c40034 	movhi	r3,4096
    ori r3, r3, %lo(__bss_end)
1000024c:	18e37014 	ori	r3,r3,36288

    beq r2, r3, 1f
10000250:	10c00326 	beq	r2,r3,10000260 <_start+0x30>

0:
    stw zero, (r2)
10000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
10000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
1000025c:	10fffd36 	bltu	r2,r3,10000254 <__alt_data_end+0xf8000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
10000260:	00034300 	call	10003430 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10000264:	00035cc0 	call	100035cc <alt_main>

10000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
10000268:	003fff06 	br	10000268 <__alt_data_end+0xf8000268>

1000026c <main>:
 */

#include <stdio.h>

int main()
{
1000026c:	defffe04 	addi	sp,sp,-8
10000270:	dfc00115 	stw	ra,4(sp)
10000274:	df000015 	stw	fp,0(sp)
10000278:	d839883a 	mov	fp,sp
  printf("Hello from Nios II!\n");
1000027c:	01040034 	movhi	r4,4096
10000280:	2115d104 	addi	r4,r4,22340
10000284:	00003600 	call	10000360 <puts>

  return 0;
10000288:	0005883a 	mov	r2,zero
}
1000028c:	e037883a 	mov	sp,fp
10000290:	dfc00117 	ldw	ra,4(sp)
10000294:	df000017 	ldw	fp,0(sp)
10000298:	dec00204 	addi	sp,sp,8
1000029c:	f800283a 	ret

100002a0 <_puts_r>:
100002a0:	defff604 	addi	sp,sp,-40
100002a4:	dc000715 	stw	r16,28(sp)
100002a8:	2021883a 	mov	r16,r4
100002ac:	2809883a 	mov	r4,r5
100002b0:	dc400815 	stw	r17,32(sp)
100002b4:	dfc00915 	stw	ra,36(sp)
100002b8:	2823883a 	mov	r17,r5
100002bc:	00003740 	call	10000374 <strlen>
100002c0:	10c00044 	addi	r3,r2,1
100002c4:	d8800115 	stw	r2,4(sp)
100002c8:	00840034 	movhi	r2,4096
100002cc:	1095d604 	addi	r2,r2,22360
100002d0:	d8800215 	stw	r2,8(sp)
100002d4:	00800044 	movi	r2,1
100002d8:	d8800315 	stw	r2,12(sp)
100002dc:	00800084 	movi	r2,2
100002e0:	dc400015 	stw	r17,0(sp)
100002e4:	d8c00615 	stw	r3,24(sp)
100002e8:	dec00415 	stw	sp,16(sp)
100002ec:	d8800515 	stw	r2,20(sp)
100002f0:	80000226 	beq	r16,zero,100002fc <_puts_r+0x5c>
100002f4:	80800e17 	ldw	r2,56(r16)
100002f8:	10001426 	beq	r2,zero,1000034c <_puts_r+0xac>
100002fc:	81400217 	ldw	r5,8(r16)
10000300:	2880030b 	ldhu	r2,12(r5)
10000304:	10c8000c 	andi	r3,r2,8192
10000308:	1800061e 	bne	r3,zero,10000324 <_puts_r+0x84>
1000030c:	29001917 	ldw	r4,100(r5)
10000310:	00f7ffc4 	movi	r3,-8193
10000314:	10880014 	ori	r2,r2,8192
10000318:	20c6703a 	and	r3,r4,r3
1000031c:	2880030d 	sth	r2,12(r5)
10000320:	28c01915 	stw	r3,100(r5)
10000324:	d9800404 	addi	r6,sp,16
10000328:	8009883a 	mov	r4,r16
1000032c:	00007bc0 	call	100007bc <__sfvwrite_r>
10000330:	1000091e 	bne	r2,zero,10000358 <_puts_r+0xb8>
10000334:	00800284 	movi	r2,10
10000338:	dfc00917 	ldw	ra,36(sp)
1000033c:	dc400817 	ldw	r17,32(sp)
10000340:	dc000717 	ldw	r16,28(sp)
10000344:	dec00a04 	addi	sp,sp,40
10000348:	f800283a 	ret
1000034c:	8009883a 	mov	r4,r16
10000350:	000076c0 	call	1000076c <__sinit>
10000354:	003fe906 	br	100002fc <__alt_data_end+0xf80002fc>
10000358:	00bfffc4 	movi	r2,-1
1000035c:	003ff606 	br	10000338 <__alt_data_end+0xf8000338>

10000360 <puts>:
10000360:	00840034 	movhi	r2,4096
10000364:	109c7304 	addi	r2,r2,29132
10000368:	200b883a 	mov	r5,r4
1000036c:	11000017 	ldw	r4,0(r2)
10000370:	00002a01 	jmpi	100002a0 <_puts_r>

10000374 <strlen>:
10000374:	208000cc 	andi	r2,r4,3
10000378:	10002026 	beq	r2,zero,100003fc <strlen+0x88>
1000037c:	20800007 	ldb	r2,0(r4)
10000380:	10002026 	beq	r2,zero,10000404 <strlen+0x90>
10000384:	2005883a 	mov	r2,r4
10000388:	00000206 	br	10000394 <strlen+0x20>
1000038c:	10c00007 	ldb	r3,0(r2)
10000390:	18001826 	beq	r3,zero,100003f4 <strlen+0x80>
10000394:	10800044 	addi	r2,r2,1
10000398:	10c000cc 	andi	r3,r2,3
1000039c:	183ffb1e 	bne	r3,zero,1000038c <__alt_data_end+0xf800038c>
100003a0:	10c00017 	ldw	r3,0(r2)
100003a4:	01ffbff4 	movhi	r7,65279
100003a8:	39ffbfc4 	addi	r7,r7,-257
100003ac:	00ca303a 	nor	r5,zero,r3
100003b0:	01a02074 	movhi	r6,32897
100003b4:	19c7883a 	add	r3,r3,r7
100003b8:	31a02004 	addi	r6,r6,-32640
100003bc:	1946703a 	and	r3,r3,r5
100003c0:	1986703a 	and	r3,r3,r6
100003c4:	1800091e 	bne	r3,zero,100003ec <strlen+0x78>
100003c8:	10800104 	addi	r2,r2,4
100003cc:	10c00017 	ldw	r3,0(r2)
100003d0:	19cb883a 	add	r5,r3,r7
100003d4:	00c6303a 	nor	r3,zero,r3
100003d8:	28c6703a 	and	r3,r5,r3
100003dc:	1986703a 	and	r3,r3,r6
100003e0:	183ff926 	beq	r3,zero,100003c8 <__alt_data_end+0xf80003c8>
100003e4:	00000106 	br	100003ec <strlen+0x78>
100003e8:	10800044 	addi	r2,r2,1
100003ec:	10c00007 	ldb	r3,0(r2)
100003f0:	183ffd1e 	bne	r3,zero,100003e8 <__alt_data_end+0xf80003e8>
100003f4:	1105c83a 	sub	r2,r2,r4
100003f8:	f800283a 	ret
100003fc:	2005883a 	mov	r2,r4
10000400:	003fe706 	br	100003a0 <__alt_data_end+0xf80003a0>
10000404:	0005883a 	mov	r2,zero
10000408:	f800283a 	ret

1000040c <__fp_unlock>:
1000040c:	0005883a 	mov	r2,zero
10000410:	f800283a 	ret

10000414 <_cleanup_r>:
10000414:	01440034 	movhi	r5,4096
10000418:	2948f104 	addi	r5,r5,9156
1000041c:	0000d481 	jmpi	10000d48 <_fwalk_reent>

10000420 <__sinit.part.1>:
10000420:	defff704 	addi	sp,sp,-36
10000424:	00c40034 	movhi	r3,4096
10000428:	dfc00815 	stw	ra,32(sp)
1000042c:	ddc00715 	stw	r23,28(sp)
10000430:	dd800615 	stw	r22,24(sp)
10000434:	dd400515 	stw	r21,20(sp)
10000438:	dd000415 	stw	r20,16(sp)
1000043c:	dcc00315 	stw	r19,12(sp)
10000440:	dc800215 	stw	r18,8(sp)
10000444:	dc400115 	stw	r17,4(sp)
10000448:	dc000015 	stw	r16,0(sp)
1000044c:	18c10504 	addi	r3,r3,1044
10000450:	24000117 	ldw	r16,4(r4)
10000454:	20c00f15 	stw	r3,60(r4)
10000458:	2080bb04 	addi	r2,r4,748
1000045c:	00c000c4 	movi	r3,3
10000460:	20c0b915 	stw	r3,740(r4)
10000464:	2080ba15 	stw	r2,744(r4)
10000468:	2000b815 	stw	zero,736(r4)
1000046c:	05c00204 	movi	r23,8
10000470:	00800104 	movi	r2,4
10000474:	2025883a 	mov	r18,r4
10000478:	b80d883a 	mov	r6,r23
1000047c:	81001704 	addi	r4,r16,92
10000480:	000b883a 	mov	r5,zero
10000484:	80000015 	stw	zero,0(r16)
10000488:	80000115 	stw	zero,4(r16)
1000048c:	80000215 	stw	zero,8(r16)
10000490:	8080030d 	sth	r2,12(r16)
10000494:	80001915 	stw	zero,100(r16)
10000498:	8000038d 	sth	zero,14(r16)
1000049c:	80000415 	stw	zero,16(r16)
100004a0:	80000515 	stw	zero,20(r16)
100004a4:	80000615 	stw	zero,24(r16)
100004a8:	00019a00 	call	100019a0 <memset>
100004ac:	05840034 	movhi	r22,4096
100004b0:	94400217 	ldw	r17,8(r18)
100004b4:	05440034 	movhi	r21,4096
100004b8:	05040034 	movhi	r20,4096
100004bc:	04c40034 	movhi	r19,4096
100004c0:	b5882004 	addi	r22,r22,8320
100004c4:	ad483704 	addi	r21,r21,8412
100004c8:	a5085604 	addi	r20,r20,8536
100004cc:	9cc86d04 	addi	r19,r19,8628
100004d0:	85800815 	stw	r22,32(r16)
100004d4:	85400915 	stw	r21,36(r16)
100004d8:	85000a15 	stw	r20,40(r16)
100004dc:	84c00b15 	stw	r19,44(r16)
100004e0:	84000715 	stw	r16,28(r16)
100004e4:	00800284 	movi	r2,10
100004e8:	8880030d 	sth	r2,12(r17)
100004ec:	00800044 	movi	r2,1
100004f0:	b80d883a 	mov	r6,r23
100004f4:	89001704 	addi	r4,r17,92
100004f8:	000b883a 	mov	r5,zero
100004fc:	88000015 	stw	zero,0(r17)
10000500:	88000115 	stw	zero,4(r17)
10000504:	88000215 	stw	zero,8(r17)
10000508:	88001915 	stw	zero,100(r17)
1000050c:	8880038d 	sth	r2,14(r17)
10000510:	88000415 	stw	zero,16(r17)
10000514:	88000515 	stw	zero,20(r17)
10000518:	88000615 	stw	zero,24(r17)
1000051c:	00019a00 	call	100019a0 <memset>
10000520:	94000317 	ldw	r16,12(r18)
10000524:	00800484 	movi	r2,18
10000528:	8c400715 	stw	r17,28(r17)
1000052c:	8d800815 	stw	r22,32(r17)
10000530:	8d400915 	stw	r21,36(r17)
10000534:	8d000a15 	stw	r20,40(r17)
10000538:	8cc00b15 	stw	r19,44(r17)
1000053c:	8080030d 	sth	r2,12(r16)
10000540:	00800084 	movi	r2,2
10000544:	80000015 	stw	zero,0(r16)
10000548:	80000115 	stw	zero,4(r16)
1000054c:	80000215 	stw	zero,8(r16)
10000550:	80001915 	stw	zero,100(r16)
10000554:	8080038d 	sth	r2,14(r16)
10000558:	80000415 	stw	zero,16(r16)
1000055c:	80000515 	stw	zero,20(r16)
10000560:	80000615 	stw	zero,24(r16)
10000564:	b80d883a 	mov	r6,r23
10000568:	000b883a 	mov	r5,zero
1000056c:	81001704 	addi	r4,r16,92
10000570:	00019a00 	call	100019a0 <memset>
10000574:	00800044 	movi	r2,1
10000578:	84000715 	stw	r16,28(r16)
1000057c:	85800815 	stw	r22,32(r16)
10000580:	85400915 	stw	r21,36(r16)
10000584:	85000a15 	stw	r20,40(r16)
10000588:	84c00b15 	stw	r19,44(r16)
1000058c:	90800e15 	stw	r2,56(r18)
10000590:	dfc00817 	ldw	ra,32(sp)
10000594:	ddc00717 	ldw	r23,28(sp)
10000598:	dd800617 	ldw	r22,24(sp)
1000059c:	dd400517 	ldw	r21,20(sp)
100005a0:	dd000417 	ldw	r20,16(sp)
100005a4:	dcc00317 	ldw	r19,12(sp)
100005a8:	dc800217 	ldw	r18,8(sp)
100005ac:	dc400117 	ldw	r17,4(sp)
100005b0:	dc000017 	ldw	r16,0(sp)
100005b4:	dec00904 	addi	sp,sp,36
100005b8:	f800283a 	ret

100005bc <__fp_lock>:
100005bc:	0005883a 	mov	r2,zero
100005c0:	f800283a 	ret

100005c4 <__sfmoreglue>:
100005c4:	defffc04 	addi	sp,sp,-16
100005c8:	dc800215 	stw	r18,8(sp)
100005cc:	2825883a 	mov	r18,r5
100005d0:	dc000015 	stw	r16,0(sp)
100005d4:	01401a04 	movi	r5,104
100005d8:	2021883a 	mov	r16,r4
100005dc:	913fffc4 	addi	r4,r18,-1
100005e0:	dfc00315 	stw	ra,12(sp)
100005e4:	dc400115 	stw	r17,4(sp)
100005e8:	00030840 	call	10003084 <__mulsi3>
100005ec:	8009883a 	mov	r4,r16
100005f0:	11401d04 	addi	r5,r2,116
100005f4:	1023883a 	mov	r17,r2
100005f8:	0000e0c0 	call	10000e0c <_malloc_r>
100005fc:	1021883a 	mov	r16,r2
10000600:	10000726 	beq	r2,zero,10000620 <__sfmoreglue+0x5c>
10000604:	11000304 	addi	r4,r2,12
10000608:	10000015 	stw	zero,0(r2)
1000060c:	14800115 	stw	r18,4(r2)
10000610:	11000215 	stw	r4,8(r2)
10000614:	89801a04 	addi	r6,r17,104
10000618:	000b883a 	mov	r5,zero
1000061c:	00019a00 	call	100019a0 <memset>
10000620:	8005883a 	mov	r2,r16
10000624:	dfc00317 	ldw	ra,12(sp)
10000628:	dc800217 	ldw	r18,8(sp)
1000062c:	dc400117 	ldw	r17,4(sp)
10000630:	dc000017 	ldw	r16,0(sp)
10000634:	dec00404 	addi	sp,sp,16
10000638:	f800283a 	ret

1000063c <__sfp>:
1000063c:	defffb04 	addi	sp,sp,-20
10000640:	dc000015 	stw	r16,0(sp)
10000644:	04040034 	movhi	r16,4096
10000648:	841c7204 	addi	r16,r16,29128
1000064c:	dcc00315 	stw	r19,12(sp)
10000650:	2027883a 	mov	r19,r4
10000654:	81000017 	ldw	r4,0(r16)
10000658:	dfc00415 	stw	ra,16(sp)
1000065c:	dc800215 	stw	r18,8(sp)
10000660:	20800e17 	ldw	r2,56(r4)
10000664:	dc400115 	stw	r17,4(sp)
10000668:	1000021e 	bne	r2,zero,10000674 <__sfp+0x38>
1000066c:	00004200 	call	10000420 <__sinit.part.1>
10000670:	81000017 	ldw	r4,0(r16)
10000674:	2480b804 	addi	r18,r4,736
10000678:	047fffc4 	movi	r17,-1
1000067c:	91000117 	ldw	r4,4(r18)
10000680:	94000217 	ldw	r16,8(r18)
10000684:	213fffc4 	addi	r4,r4,-1
10000688:	20000a16 	blt	r4,zero,100006b4 <__sfp+0x78>
1000068c:	8080030f 	ldh	r2,12(r16)
10000690:	10000c26 	beq	r2,zero,100006c4 <__sfp+0x88>
10000694:	80c01d04 	addi	r3,r16,116
10000698:	00000206 	br	100006a4 <__sfp+0x68>
1000069c:	18bfe60f 	ldh	r2,-104(r3)
100006a0:	10000826 	beq	r2,zero,100006c4 <__sfp+0x88>
100006a4:	213fffc4 	addi	r4,r4,-1
100006a8:	1c3ffd04 	addi	r16,r3,-12
100006ac:	18c01a04 	addi	r3,r3,104
100006b0:	247ffa1e 	bne	r4,r17,1000069c <__alt_data_end+0xf800069c>
100006b4:	90800017 	ldw	r2,0(r18)
100006b8:	10001d26 	beq	r2,zero,10000730 <__sfp+0xf4>
100006bc:	1025883a 	mov	r18,r2
100006c0:	003fee06 	br	1000067c <__alt_data_end+0xf800067c>
100006c4:	00bfffc4 	movi	r2,-1
100006c8:	8080038d 	sth	r2,14(r16)
100006cc:	00800044 	movi	r2,1
100006d0:	8080030d 	sth	r2,12(r16)
100006d4:	80001915 	stw	zero,100(r16)
100006d8:	80000015 	stw	zero,0(r16)
100006dc:	80000215 	stw	zero,8(r16)
100006e0:	80000115 	stw	zero,4(r16)
100006e4:	80000415 	stw	zero,16(r16)
100006e8:	80000515 	stw	zero,20(r16)
100006ec:	80000615 	stw	zero,24(r16)
100006f0:	01800204 	movi	r6,8
100006f4:	000b883a 	mov	r5,zero
100006f8:	81001704 	addi	r4,r16,92
100006fc:	00019a00 	call	100019a0 <memset>
10000700:	8005883a 	mov	r2,r16
10000704:	80000c15 	stw	zero,48(r16)
10000708:	80000d15 	stw	zero,52(r16)
1000070c:	80001115 	stw	zero,68(r16)
10000710:	80001215 	stw	zero,72(r16)
10000714:	dfc00417 	ldw	ra,16(sp)
10000718:	dcc00317 	ldw	r19,12(sp)
1000071c:	dc800217 	ldw	r18,8(sp)
10000720:	dc400117 	ldw	r17,4(sp)
10000724:	dc000017 	ldw	r16,0(sp)
10000728:	dec00504 	addi	sp,sp,20
1000072c:	f800283a 	ret
10000730:	01400104 	movi	r5,4
10000734:	9809883a 	mov	r4,r19
10000738:	00005c40 	call	100005c4 <__sfmoreglue>
1000073c:	90800015 	stw	r2,0(r18)
10000740:	103fde1e 	bne	r2,zero,100006bc <__alt_data_end+0xf80006bc>
10000744:	00800304 	movi	r2,12
10000748:	98800015 	stw	r2,0(r19)
1000074c:	0005883a 	mov	r2,zero
10000750:	003ff006 	br	10000714 <__alt_data_end+0xf8000714>

10000754 <_cleanup>:
10000754:	00840034 	movhi	r2,4096
10000758:	109c7204 	addi	r2,r2,29128
1000075c:	11000017 	ldw	r4,0(r2)
10000760:	01440034 	movhi	r5,4096
10000764:	2948f104 	addi	r5,r5,9156
10000768:	0000d481 	jmpi	10000d48 <_fwalk_reent>

1000076c <__sinit>:
1000076c:	20800e17 	ldw	r2,56(r4)
10000770:	10000126 	beq	r2,zero,10000778 <__sinit+0xc>
10000774:	f800283a 	ret
10000778:	00004201 	jmpi	10000420 <__sinit.part.1>

1000077c <__sfp_lock_acquire>:
1000077c:	f800283a 	ret

10000780 <__sfp_lock_release>:
10000780:	f800283a 	ret

10000784 <__sinit_lock_acquire>:
10000784:	f800283a 	ret

10000788 <__sinit_lock_release>:
10000788:	f800283a 	ret

1000078c <__fp_lock_all>:
1000078c:	00840034 	movhi	r2,4096
10000790:	109c7304 	addi	r2,r2,29132
10000794:	11000017 	ldw	r4,0(r2)
10000798:	01440034 	movhi	r5,4096
1000079c:	29416f04 	addi	r5,r5,1468
100007a0:	0000c841 	jmpi	10000c84 <_fwalk>

100007a4 <__fp_unlock_all>:
100007a4:	00840034 	movhi	r2,4096
100007a8:	109c7304 	addi	r2,r2,29132
100007ac:	11000017 	ldw	r4,0(r2)
100007b0:	01440034 	movhi	r5,4096
100007b4:	29410304 	addi	r5,r5,1036
100007b8:	0000c841 	jmpi	10000c84 <_fwalk>

100007bc <__sfvwrite_r>:
100007bc:	30800217 	ldw	r2,8(r6)
100007c0:	10006726 	beq	r2,zero,10000960 <__sfvwrite_r+0x1a4>
100007c4:	28c0030b 	ldhu	r3,12(r5)
100007c8:	defff404 	addi	sp,sp,-48
100007cc:	dd400715 	stw	r21,28(sp)
100007d0:	dd000615 	stw	r20,24(sp)
100007d4:	dc000215 	stw	r16,8(sp)
100007d8:	dfc00b15 	stw	ra,44(sp)
100007dc:	df000a15 	stw	fp,40(sp)
100007e0:	ddc00915 	stw	r23,36(sp)
100007e4:	dd800815 	stw	r22,32(sp)
100007e8:	dcc00515 	stw	r19,20(sp)
100007ec:	dc800415 	stw	r18,16(sp)
100007f0:	dc400315 	stw	r17,12(sp)
100007f4:	1880020c 	andi	r2,r3,8
100007f8:	2821883a 	mov	r16,r5
100007fc:	202b883a 	mov	r21,r4
10000800:	3029883a 	mov	r20,r6
10000804:	10002726 	beq	r2,zero,100008a4 <__sfvwrite_r+0xe8>
10000808:	28800417 	ldw	r2,16(r5)
1000080c:	10002526 	beq	r2,zero,100008a4 <__sfvwrite_r+0xe8>
10000810:	1880008c 	andi	r2,r3,2
10000814:	a4400017 	ldw	r17,0(r20)
10000818:	10002a26 	beq	r2,zero,100008c4 <__sfvwrite_r+0x108>
1000081c:	05a00034 	movhi	r22,32768
10000820:	0027883a 	mov	r19,zero
10000824:	0025883a 	mov	r18,zero
10000828:	b5bf0004 	addi	r22,r22,-1024
1000082c:	980d883a 	mov	r6,r19
10000830:	a809883a 	mov	r4,r21
10000834:	90004626 	beq	r18,zero,10000950 <__sfvwrite_r+0x194>
10000838:	900f883a 	mov	r7,r18
1000083c:	b480022e 	bgeu	r22,r18,10000848 <__sfvwrite_r+0x8c>
10000840:	01e00034 	movhi	r7,32768
10000844:	39ff0004 	addi	r7,r7,-1024
10000848:	80800917 	ldw	r2,36(r16)
1000084c:	81400717 	ldw	r5,28(r16)
10000850:	103ee83a 	callr	r2
10000854:	00805a0e 	bge	zero,r2,100009c0 <__sfvwrite_r+0x204>
10000858:	a0c00217 	ldw	r3,8(r20)
1000085c:	98a7883a 	add	r19,r19,r2
10000860:	90a5c83a 	sub	r18,r18,r2
10000864:	1885c83a 	sub	r2,r3,r2
10000868:	a0800215 	stw	r2,8(r20)
1000086c:	103fef1e 	bne	r2,zero,1000082c <__alt_data_end+0xf800082c>
10000870:	0005883a 	mov	r2,zero
10000874:	dfc00b17 	ldw	ra,44(sp)
10000878:	df000a17 	ldw	fp,40(sp)
1000087c:	ddc00917 	ldw	r23,36(sp)
10000880:	dd800817 	ldw	r22,32(sp)
10000884:	dd400717 	ldw	r21,28(sp)
10000888:	dd000617 	ldw	r20,24(sp)
1000088c:	dcc00517 	ldw	r19,20(sp)
10000890:	dc800417 	ldw	r18,16(sp)
10000894:	dc400317 	ldw	r17,12(sp)
10000898:	dc000217 	ldw	r16,8(sp)
1000089c:	dec00c04 	addi	sp,sp,48
100008a0:	f800283a 	ret
100008a4:	800b883a 	mov	r5,r16
100008a8:	a809883a 	mov	r4,r21
100008ac:	000221c0 	call	1000221c <__swsetup_r>
100008b0:	1000ee1e 	bne	r2,zero,10000c6c <__sfvwrite_r+0x4b0>
100008b4:	80c0030b 	ldhu	r3,12(r16)
100008b8:	a4400017 	ldw	r17,0(r20)
100008bc:	1880008c 	andi	r2,r3,2
100008c0:	103fd61e 	bne	r2,zero,1000081c <__alt_data_end+0xf800081c>
100008c4:	1880004c 	andi	r2,r3,1
100008c8:	1000421e 	bne	r2,zero,100009d4 <__sfvwrite_r+0x218>
100008cc:	0039883a 	mov	fp,zero
100008d0:	0025883a 	mov	r18,zero
100008d4:	90001a26 	beq	r18,zero,10000940 <__sfvwrite_r+0x184>
100008d8:	1880800c 	andi	r2,r3,512
100008dc:	84c00217 	ldw	r19,8(r16)
100008e0:	10002126 	beq	r2,zero,10000968 <__sfvwrite_r+0x1ac>
100008e4:	982f883a 	mov	r23,r19
100008e8:	94c09636 	bltu	r18,r19,10000b44 <__sfvwrite_r+0x388>
100008ec:	1881200c 	andi	r2,r3,1152
100008f0:	1000a11e 	bne	r2,zero,10000b78 <__sfvwrite_r+0x3bc>
100008f4:	81000017 	ldw	r4,0(r16)
100008f8:	b80d883a 	mov	r6,r23
100008fc:	e00b883a 	mov	r5,fp
10000900:	00018440 	call	10001844 <memmove>
10000904:	80c00217 	ldw	r3,8(r16)
10000908:	81000017 	ldw	r4,0(r16)
1000090c:	9005883a 	mov	r2,r18
10000910:	1ce7c83a 	sub	r19,r3,r19
10000914:	25cf883a 	add	r7,r4,r23
10000918:	84c00215 	stw	r19,8(r16)
1000091c:	81c00015 	stw	r7,0(r16)
10000920:	a0c00217 	ldw	r3,8(r20)
10000924:	e0b9883a 	add	fp,fp,r2
10000928:	90a5c83a 	sub	r18,r18,r2
1000092c:	18a7c83a 	sub	r19,r3,r2
10000930:	a4c00215 	stw	r19,8(r20)
10000934:	983fce26 	beq	r19,zero,10000870 <__alt_data_end+0xf8000870>
10000938:	80c0030b 	ldhu	r3,12(r16)
1000093c:	903fe61e 	bne	r18,zero,100008d8 <__alt_data_end+0xf80008d8>
10000940:	8f000017 	ldw	fp,0(r17)
10000944:	8c800117 	ldw	r18,4(r17)
10000948:	8c400204 	addi	r17,r17,8
1000094c:	003fe106 	br	100008d4 <__alt_data_end+0xf80008d4>
10000950:	8cc00017 	ldw	r19,0(r17)
10000954:	8c800117 	ldw	r18,4(r17)
10000958:	8c400204 	addi	r17,r17,8
1000095c:	003fb306 	br	1000082c <__alt_data_end+0xf800082c>
10000960:	0005883a 	mov	r2,zero
10000964:	f800283a 	ret
10000968:	81000017 	ldw	r4,0(r16)
1000096c:	80800417 	ldw	r2,16(r16)
10000970:	11005a36 	bltu	r2,r4,10000adc <__sfvwrite_r+0x320>
10000974:	85c00517 	ldw	r23,20(r16)
10000978:	95c05836 	bltu	r18,r23,10000adc <__sfvwrite_r+0x320>
1000097c:	00a00034 	movhi	r2,32768
10000980:	10bfffc4 	addi	r2,r2,-1
10000984:	9009883a 	mov	r4,r18
10000988:	1480012e 	bgeu	r2,r18,10000990 <__sfvwrite_r+0x1d4>
1000098c:	1009883a 	mov	r4,r2
10000990:	b80b883a 	mov	r5,r23
10000994:	0002ed00 	call	10002ed0 <__divsi3>
10000998:	b80b883a 	mov	r5,r23
1000099c:	1009883a 	mov	r4,r2
100009a0:	00030840 	call	10003084 <__mulsi3>
100009a4:	81400717 	ldw	r5,28(r16)
100009a8:	80c00917 	ldw	r3,36(r16)
100009ac:	100f883a 	mov	r7,r2
100009b0:	e00d883a 	mov	r6,fp
100009b4:	a809883a 	mov	r4,r21
100009b8:	183ee83a 	callr	r3
100009bc:	00bfd816 	blt	zero,r2,10000920 <__alt_data_end+0xf8000920>
100009c0:	8080030b 	ldhu	r2,12(r16)
100009c4:	10801014 	ori	r2,r2,64
100009c8:	8080030d 	sth	r2,12(r16)
100009cc:	00bfffc4 	movi	r2,-1
100009d0:	003fa806 	br	10000874 <__alt_data_end+0xf8000874>
100009d4:	0027883a 	mov	r19,zero
100009d8:	0011883a 	mov	r8,zero
100009dc:	0039883a 	mov	fp,zero
100009e0:	0025883a 	mov	r18,zero
100009e4:	90001f26 	beq	r18,zero,10000a64 <__sfvwrite_r+0x2a8>
100009e8:	40005a26 	beq	r8,zero,10000b54 <__sfvwrite_r+0x398>
100009ec:	982d883a 	mov	r22,r19
100009f0:	94c0012e 	bgeu	r18,r19,100009f8 <__sfvwrite_r+0x23c>
100009f4:	902d883a 	mov	r22,r18
100009f8:	81000017 	ldw	r4,0(r16)
100009fc:	80800417 	ldw	r2,16(r16)
10000a00:	b02f883a 	mov	r23,r22
10000a04:	81c00517 	ldw	r7,20(r16)
10000a08:	1100032e 	bgeu	r2,r4,10000a18 <__sfvwrite_r+0x25c>
10000a0c:	80c00217 	ldw	r3,8(r16)
10000a10:	38c7883a 	add	r3,r7,r3
10000a14:	1d801816 	blt	r3,r22,10000a78 <__sfvwrite_r+0x2bc>
10000a18:	b1c03e16 	blt	r22,r7,10000b14 <__sfvwrite_r+0x358>
10000a1c:	80800917 	ldw	r2,36(r16)
10000a20:	81400717 	ldw	r5,28(r16)
10000a24:	e00d883a 	mov	r6,fp
10000a28:	da000115 	stw	r8,4(sp)
10000a2c:	a809883a 	mov	r4,r21
10000a30:	103ee83a 	callr	r2
10000a34:	102f883a 	mov	r23,r2
10000a38:	da000117 	ldw	r8,4(sp)
10000a3c:	00bfe00e 	bge	zero,r2,100009c0 <__alt_data_end+0xf80009c0>
10000a40:	9de7c83a 	sub	r19,r19,r23
10000a44:	98001f26 	beq	r19,zero,10000ac4 <__sfvwrite_r+0x308>
10000a48:	a0800217 	ldw	r2,8(r20)
10000a4c:	e5f9883a 	add	fp,fp,r23
10000a50:	95e5c83a 	sub	r18,r18,r23
10000a54:	15efc83a 	sub	r23,r2,r23
10000a58:	a5c00215 	stw	r23,8(r20)
10000a5c:	b83f8426 	beq	r23,zero,10000870 <__alt_data_end+0xf8000870>
10000a60:	903fe11e 	bne	r18,zero,100009e8 <__alt_data_end+0xf80009e8>
10000a64:	8f000017 	ldw	fp,0(r17)
10000a68:	8c800117 	ldw	r18,4(r17)
10000a6c:	0011883a 	mov	r8,zero
10000a70:	8c400204 	addi	r17,r17,8
10000a74:	003fdb06 	br	100009e4 <__alt_data_end+0xf80009e4>
10000a78:	180d883a 	mov	r6,r3
10000a7c:	e00b883a 	mov	r5,fp
10000a80:	da000115 	stw	r8,4(sp)
10000a84:	d8c00015 	stw	r3,0(sp)
10000a88:	00018440 	call	10001844 <memmove>
10000a8c:	d8c00017 	ldw	r3,0(sp)
10000a90:	80800017 	ldw	r2,0(r16)
10000a94:	800b883a 	mov	r5,r16
10000a98:	a809883a 	mov	r4,r21
10000a9c:	10c5883a 	add	r2,r2,r3
10000aa0:	80800015 	stw	r2,0(r16)
10000aa4:	d8c00015 	stw	r3,0(sp)
10000aa8:	00026e40 	call	100026e4 <_fflush_r>
10000aac:	d8c00017 	ldw	r3,0(sp)
10000ab0:	da000117 	ldw	r8,4(sp)
10000ab4:	103fc21e 	bne	r2,zero,100009c0 <__alt_data_end+0xf80009c0>
10000ab8:	182f883a 	mov	r23,r3
10000abc:	9de7c83a 	sub	r19,r19,r23
10000ac0:	983fe11e 	bne	r19,zero,10000a48 <__alt_data_end+0xf8000a48>
10000ac4:	800b883a 	mov	r5,r16
10000ac8:	a809883a 	mov	r4,r21
10000acc:	00026e40 	call	100026e4 <_fflush_r>
10000ad0:	103fbb1e 	bne	r2,zero,100009c0 <__alt_data_end+0xf80009c0>
10000ad4:	0011883a 	mov	r8,zero
10000ad8:	003fdb06 	br	10000a48 <__alt_data_end+0xf8000a48>
10000adc:	94c0012e 	bgeu	r18,r19,10000ae4 <__sfvwrite_r+0x328>
10000ae0:	9027883a 	mov	r19,r18
10000ae4:	980d883a 	mov	r6,r19
10000ae8:	e00b883a 	mov	r5,fp
10000aec:	00018440 	call	10001844 <memmove>
10000af0:	80800217 	ldw	r2,8(r16)
10000af4:	80c00017 	ldw	r3,0(r16)
10000af8:	14c5c83a 	sub	r2,r2,r19
10000afc:	1cc7883a 	add	r3,r3,r19
10000b00:	80800215 	stw	r2,8(r16)
10000b04:	80c00015 	stw	r3,0(r16)
10000b08:	10004326 	beq	r2,zero,10000c18 <__sfvwrite_r+0x45c>
10000b0c:	9805883a 	mov	r2,r19
10000b10:	003f8306 	br	10000920 <__alt_data_end+0xf8000920>
10000b14:	b00d883a 	mov	r6,r22
10000b18:	e00b883a 	mov	r5,fp
10000b1c:	da000115 	stw	r8,4(sp)
10000b20:	00018440 	call	10001844 <memmove>
10000b24:	80800217 	ldw	r2,8(r16)
10000b28:	80c00017 	ldw	r3,0(r16)
10000b2c:	da000117 	ldw	r8,4(sp)
10000b30:	1585c83a 	sub	r2,r2,r22
10000b34:	1dad883a 	add	r22,r3,r22
10000b38:	80800215 	stw	r2,8(r16)
10000b3c:	85800015 	stw	r22,0(r16)
10000b40:	003fbf06 	br	10000a40 <__alt_data_end+0xf8000a40>
10000b44:	81000017 	ldw	r4,0(r16)
10000b48:	9027883a 	mov	r19,r18
10000b4c:	902f883a 	mov	r23,r18
10000b50:	003f6906 	br	100008f8 <__alt_data_end+0xf80008f8>
10000b54:	900d883a 	mov	r6,r18
10000b58:	01400284 	movi	r5,10
10000b5c:	e009883a 	mov	r4,fp
10000b60:	00016180 	call	10001618 <memchr>
10000b64:	10003e26 	beq	r2,zero,10000c60 <__sfvwrite_r+0x4a4>
10000b68:	10800044 	addi	r2,r2,1
10000b6c:	1727c83a 	sub	r19,r2,fp
10000b70:	02000044 	movi	r8,1
10000b74:	003f9d06 	br	100009ec <__alt_data_end+0xf80009ec>
10000b78:	80800517 	ldw	r2,20(r16)
10000b7c:	81400417 	ldw	r5,16(r16)
10000b80:	81c00017 	ldw	r7,0(r16)
10000b84:	10a7883a 	add	r19,r2,r2
10000b88:	9885883a 	add	r2,r19,r2
10000b8c:	1026d7fa 	srli	r19,r2,31
10000b90:	396dc83a 	sub	r22,r7,r5
10000b94:	b1000044 	addi	r4,r22,1
10000b98:	9885883a 	add	r2,r19,r2
10000b9c:	1027d07a 	srai	r19,r2,1
10000ba0:	2485883a 	add	r2,r4,r18
10000ba4:	980d883a 	mov	r6,r19
10000ba8:	9880022e 	bgeu	r19,r2,10000bb4 <__sfvwrite_r+0x3f8>
10000bac:	1027883a 	mov	r19,r2
10000bb0:	100d883a 	mov	r6,r2
10000bb4:	18c1000c 	andi	r3,r3,1024
10000bb8:	18001c26 	beq	r3,zero,10000c2c <__sfvwrite_r+0x470>
10000bbc:	300b883a 	mov	r5,r6
10000bc0:	a809883a 	mov	r4,r21
10000bc4:	0000e0c0 	call	10000e0c <_malloc_r>
10000bc8:	102f883a 	mov	r23,r2
10000bcc:	10002926 	beq	r2,zero,10000c74 <__sfvwrite_r+0x4b8>
10000bd0:	81400417 	ldw	r5,16(r16)
10000bd4:	b00d883a 	mov	r6,r22
10000bd8:	1009883a 	mov	r4,r2
10000bdc:	00016fc0 	call	100016fc <memcpy>
10000be0:	8080030b 	ldhu	r2,12(r16)
10000be4:	00fedfc4 	movi	r3,-1153
10000be8:	10c4703a 	and	r2,r2,r3
10000bec:	10802014 	ori	r2,r2,128
10000bf0:	8080030d 	sth	r2,12(r16)
10000bf4:	bd89883a 	add	r4,r23,r22
10000bf8:	9d8fc83a 	sub	r7,r19,r22
10000bfc:	85c00415 	stw	r23,16(r16)
10000c00:	84c00515 	stw	r19,20(r16)
10000c04:	81000015 	stw	r4,0(r16)
10000c08:	9027883a 	mov	r19,r18
10000c0c:	81c00215 	stw	r7,8(r16)
10000c10:	902f883a 	mov	r23,r18
10000c14:	003f3806 	br	100008f8 <__alt_data_end+0xf80008f8>
10000c18:	800b883a 	mov	r5,r16
10000c1c:	a809883a 	mov	r4,r21
10000c20:	00026e40 	call	100026e4 <_fflush_r>
10000c24:	103fb926 	beq	r2,zero,10000b0c <__alt_data_end+0xf8000b0c>
10000c28:	003f6506 	br	100009c0 <__alt_data_end+0xf80009c0>
10000c2c:	a809883a 	mov	r4,r21
10000c30:	0001ac80 	call	10001ac8 <_realloc_r>
10000c34:	102f883a 	mov	r23,r2
10000c38:	103fee1e 	bne	r2,zero,10000bf4 <__alt_data_end+0xf8000bf4>
10000c3c:	81400417 	ldw	r5,16(r16)
10000c40:	a809883a 	mov	r4,r21
10000c44:	00028940 	call	10002894 <_free_r>
10000c48:	8080030b 	ldhu	r2,12(r16)
10000c4c:	00ffdfc4 	movi	r3,-129
10000c50:	1884703a 	and	r2,r3,r2
10000c54:	00c00304 	movi	r3,12
10000c58:	a8c00015 	stw	r3,0(r21)
10000c5c:	003f5906 	br	100009c4 <__alt_data_end+0xf80009c4>
10000c60:	94c00044 	addi	r19,r18,1
10000c64:	02000044 	movi	r8,1
10000c68:	003f6006 	br	100009ec <__alt_data_end+0xf80009ec>
10000c6c:	00bfffc4 	movi	r2,-1
10000c70:	003f0006 	br	10000874 <__alt_data_end+0xf8000874>
10000c74:	00800304 	movi	r2,12
10000c78:	a8800015 	stw	r2,0(r21)
10000c7c:	8080030b 	ldhu	r2,12(r16)
10000c80:	003f5006 	br	100009c4 <__alt_data_end+0xf80009c4>

10000c84 <_fwalk>:
10000c84:	defff704 	addi	sp,sp,-36
10000c88:	dd000415 	stw	r20,16(sp)
10000c8c:	dfc00815 	stw	ra,32(sp)
10000c90:	ddc00715 	stw	r23,28(sp)
10000c94:	dd800615 	stw	r22,24(sp)
10000c98:	dd400515 	stw	r21,20(sp)
10000c9c:	dcc00315 	stw	r19,12(sp)
10000ca0:	dc800215 	stw	r18,8(sp)
10000ca4:	dc400115 	stw	r17,4(sp)
10000ca8:	dc000015 	stw	r16,0(sp)
10000cac:	2500b804 	addi	r20,r4,736
10000cb0:	a0002326 	beq	r20,zero,10000d40 <_fwalk+0xbc>
10000cb4:	282b883a 	mov	r21,r5
10000cb8:	002f883a 	mov	r23,zero
10000cbc:	05800044 	movi	r22,1
10000cc0:	04ffffc4 	movi	r19,-1
10000cc4:	a4400117 	ldw	r17,4(r20)
10000cc8:	a4800217 	ldw	r18,8(r20)
10000ccc:	8c7fffc4 	addi	r17,r17,-1
10000cd0:	88000d16 	blt	r17,zero,10000d08 <_fwalk+0x84>
10000cd4:	94000304 	addi	r16,r18,12
10000cd8:	94800384 	addi	r18,r18,14
10000cdc:	8080000b 	ldhu	r2,0(r16)
10000ce0:	8c7fffc4 	addi	r17,r17,-1
10000ce4:	813ffd04 	addi	r4,r16,-12
10000ce8:	b080042e 	bgeu	r22,r2,10000cfc <_fwalk+0x78>
10000cec:	9080000f 	ldh	r2,0(r18)
10000cf0:	14c00226 	beq	r2,r19,10000cfc <_fwalk+0x78>
10000cf4:	a83ee83a 	callr	r21
10000cf8:	b8aeb03a 	or	r23,r23,r2
10000cfc:	84001a04 	addi	r16,r16,104
10000d00:	94801a04 	addi	r18,r18,104
10000d04:	8cfff51e 	bne	r17,r19,10000cdc <__alt_data_end+0xf8000cdc>
10000d08:	a5000017 	ldw	r20,0(r20)
10000d0c:	a03fed1e 	bne	r20,zero,10000cc4 <__alt_data_end+0xf8000cc4>
10000d10:	b805883a 	mov	r2,r23
10000d14:	dfc00817 	ldw	ra,32(sp)
10000d18:	ddc00717 	ldw	r23,28(sp)
10000d1c:	dd800617 	ldw	r22,24(sp)
10000d20:	dd400517 	ldw	r21,20(sp)
10000d24:	dd000417 	ldw	r20,16(sp)
10000d28:	dcc00317 	ldw	r19,12(sp)
10000d2c:	dc800217 	ldw	r18,8(sp)
10000d30:	dc400117 	ldw	r17,4(sp)
10000d34:	dc000017 	ldw	r16,0(sp)
10000d38:	dec00904 	addi	sp,sp,36
10000d3c:	f800283a 	ret
10000d40:	002f883a 	mov	r23,zero
10000d44:	003ff206 	br	10000d10 <__alt_data_end+0xf8000d10>

10000d48 <_fwalk_reent>:
10000d48:	defff704 	addi	sp,sp,-36
10000d4c:	dd000415 	stw	r20,16(sp)
10000d50:	dfc00815 	stw	ra,32(sp)
10000d54:	ddc00715 	stw	r23,28(sp)
10000d58:	dd800615 	stw	r22,24(sp)
10000d5c:	dd400515 	stw	r21,20(sp)
10000d60:	dcc00315 	stw	r19,12(sp)
10000d64:	dc800215 	stw	r18,8(sp)
10000d68:	dc400115 	stw	r17,4(sp)
10000d6c:	dc000015 	stw	r16,0(sp)
10000d70:	2500b804 	addi	r20,r4,736
10000d74:	a0002326 	beq	r20,zero,10000e04 <_fwalk_reent+0xbc>
10000d78:	282b883a 	mov	r21,r5
10000d7c:	2027883a 	mov	r19,r4
10000d80:	002f883a 	mov	r23,zero
10000d84:	05800044 	movi	r22,1
10000d88:	04bfffc4 	movi	r18,-1
10000d8c:	a4400117 	ldw	r17,4(r20)
10000d90:	a4000217 	ldw	r16,8(r20)
10000d94:	8c7fffc4 	addi	r17,r17,-1
10000d98:	88000c16 	blt	r17,zero,10000dcc <_fwalk_reent+0x84>
10000d9c:	84000304 	addi	r16,r16,12
10000da0:	8080000b 	ldhu	r2,0(r16)
10000da4:	8c7fffc4 	addi	r17,r17,-1
10000da8:	817ffd04 	addi	r5,r16,-12
10000dac:	b080052e 	bgeu	r22,r2,10000dc4 <_fwalk_reent+0x7c>
10000db0:	8080008f 	ldh	r2,2(r16)
10000db4:	9809883a 	mov	r4,r19
10000db8:	14800226 	beq	r2,r18,10000dc4 <_fwalk_reent+0x7c>
10000dbc:	a83ee83a 	callr	r21
10000dc0:	b8aeb03a 	or	r23,r23,r2
10000dc4:	84001a04 	addi	r16,r16,104
10000dc8:	8cbff51e 	bne	r17,r18,10000da0 <__alt_data_end+0xf8000da0>
10000dcc:	a5000017 	ldw	r20,0(r20)
10000dd0:	a03fee1e 	bne	r20,zero,10000d8c <__alt_data_end+0xf8000d8c>
10000dd4:	b805883a 	mov	r2,r23
10000dd8:	dfc00817 	ldw	ra,32(sp)
10000ddc:	ddc00717 	ldw	r23,28(sp)
10000de0:	dd800617 	ldw	r22,24(sp)
10000de4:	dd400517 	ldw	r21,20(sp)
10000de8:	dd000417 	ldw	r20,16(sp)
10000dec:	dcc00317 	ldw	r19,12(sp)
10000df0:	dc800217 	ldw	r18,8(sp)
10000df4:	dc400117 	ldw	r17,4(sp)
10000df8:	dc000017 	ldw	r16,0(sp)
10000dfc:	dec00904 	addi	sp,sp,36
10000e00:	f800283a 	ret
10000e04:	002f883a 	mov	r23,zero
10000e08:	003ff206 	br	10000dd4 <__alt_data_end+0xf8000dd4>

10000e0c <_malloc_r>:
10000e0c:	defff504 	addi	sp,sp,-44
10000e10:	dc800315 	stw	r18,12(sp)
10000e14:	dfc00a15 	stw	ra,40(sp)
10000e18:	df000915 	stw	fp,36(sp)
10000e1c:	ddc00815 	stw	r23,32(sp)
10000e20:	dd800715 	stw	r22,28(sp)
10000e24:	dd400615 	stw	r21,24(sp)
10000e28:	dd000515 	stw	r20,20(sp)
10000e2c:	dcc00415 	stw	r19,16(sp)
10000e30:	dc400215 	stw	r17,8(sp)
10000e34:	dc000115 	stw	r16,4(sp)
10000e38:	288002c4 	addi	r2,r5,11
10000e3c:	00c00584 	movi	r3,22
10000e40:	2025883a 	mov	r18,r4
10000e44:	18807f2e 	bgeu	r3,r2,10001044 <_malloc_r+0x238>
10000e48:	047ffe04 	movi	r17,-8
10000e4c:	1462703a 	and	r17,r2,r17
10000e50:	8800a316 	blt	r17,zero,100010e0 <_malloc_r+0x2d4>
10000e54:	8940a236 	bltu	r17,r5,100010e0 <_malloc_r+0x2d4>
10000e58:	00036480 	call	10003648 <__malloc_lock>
10000e5c:	00807dc4 	movi	r2,503
10000e60:	1441e92e 	bgeu	r2,r17,10001608 <_malloc_r+0x7fc>
10000e64:	8804d27a 	srli	r2,r17,9
10000e68:	1000a126 	beq	r2,zero,100010f0 <_malloc_r+0x2e4>
10000e6c:	00c00104 	movi	r3,4
10000e70:	18811e36 	bltu	r3,r2,100012ec <_malloc_r+0x4e0>
10000e74:	8804d1ba 	srli	r2,r17,6
10000e78:	12000e44 	addi	r8,r2,57
10000e7c:	11c00e04 	addi	r7,r2,56
10000e80:	4209883a 	add	r4,r8,r8
10000e84:	04c40034 	movhi	r19,4096
10000e88:	2109883a 	add	r4,r4,r4
10000e8c:	9cd6ee04 	addi	r19,r19,23480
10000e90:	2109883a 	add	r4,r4,r4
10000e94:	9909883a 	add	r4,r19,r4
10000e98:	24000117 	ldw	r16,4(r4)
10000e9c:	213ffe04 	addi	r4,r4,-8
10000ea0:	24009726 	beq	r4,r16,10001100 <_malloc_r+0x2f4>
10000ea4:	80800117 	ldw	r2,4(r16)
10000ea8:	01bfff04 	movi	r6,-4
10000eac:	014003c4 	movi	r5,15
10000eb0:	1184703a 	and	r2,r2,r6
10000eb4:	1447c83a 	sub	r3,r2,r17
10000eb8:	28c00716 	blt	r5,r3,10000ed8 <_malloc_r+0xcc>
10000ebc:	1800920e 	bge	r3,zero,10001108 <_malloc_r+0x2fc>
10000ec0:	84000317 	ldw	r16,12(r16)
10000ec4:	24008e26 	beq	r4,r16,10001100 <_malloc_r+0x2f4>
10000ec8:	80800117 	ldw	r2,4(r16)
10000ecc:	1184703a 	and	r2,r2,r6
10000ed0:	1447c83a 	sub	r3,r2,r17
10000ed4:	28fff90e 	bge	r5,r3,10000ebc <__alt_data_end+0xf8000ebc>
10000ed8:	3809883a 	mov	r4,r7
10000edc:	01840034 	movhi	r6,4096
10000ee0:	9c000417 	ldw	r16,16(r19)
10000ee4:	3196ee04 	addi	r6,r6,23480
10000ee8:	32000204 	addi	r8,r6,8
10000eec:	82013426 	beq	r16,r8,100013c0 <_malloc_r+0x5b4>
10000ef0:	80c00117 	ldw	r3,4(r16)
10000ef4:	00bfff04 	movi	r2,-4
10000ef8:	188e703a 	and	r7,r3,r2
10000efc:	3c45c83a 	sub	r2,r7,r17
10000f00:	00c003c4 	movi	r3,15
10000f04:	18811f16 	blt	r3,r2,10001384 <_malloc_r+0x578>
10000f08:	32000515 	stw	r8,20(r6)
10000f0c:	32000415 	stw	r8,16(r6)
10000f10:	10007f0e 	bge	r2,zero,10001110 <_malloc_r+0x304>
10000f14:	00807fc4 	movi	r2,511
10000f18:	11c0fd36 	bltu	r2,r7,10001310 <_malloc_r+0x504>
10000f1c:	3806d0fa 	srli	r3,r7,3
10000f20:	01c00044 	movi	r7,1
10000f24:	30800117 	ldw	r2,4(r6)
10000f28:	19400044 	addi	r5,r3,1
10000f2c:	294b883a 	add	r5,r5,r5
10000f30:	1807d0ba 	srai	r3,r3,2
10000f34:	294b883a 	add	r5,r5,r5
10000f38:	294b883a 	add	r5,r5,r5
10000f3c:	298b883a 	add	r5,r5,r6
10000f40:	38c6983a 	sll	r3,r7,r3
10000f44:	29c00017 	ldw	r7,0(r5)
10000f48:	2a7ffe04 	addi	r9,r5,-8
10000f4c:	1886b03a 	or	r3,r3,r2
10000f50:	82400315 	stw	r9,12(r16)
10000f54:	81c00215 	stw	r7,8(r16)
10000f58:	30c00115 	stw	r3,4(r6)
10000f5c:	2c000015 	stw	r16,0(r5)
10000f60:	3c000315 	stw	r16,12(r7)
10000f64:	2005d0ba 	srai	r2,r4,2
10000f68:	01400044 	movi	r5,1
10000f6c:	288a983a 	sll	r5,r5,r2
10000f70:	19406f36 	bltu	r3,r5,10001130 <_malloc_r+0x324>
10000f74:	28c4703a 	and	r2,r5,r3
10000f78:	10000a1e 	bne	r2,zero,10000fa4 <_malloc_r+0x198>
10000f7c:	00bfff04 	movi	r2,-4
10000f80:	294b883a 	add	r5,r5,r5
10000f84:	2088703a 	and	r4,r4,r2
10000f88:	28c4703a 	and	r2,r5,r3
10000f8c:	21000104 	addi	r4,r4,4
10000f90:	1000041e 	bne	r2,zero,10000fa4 <_malloc_r+0x198>
10000f94:	294b883a 	add	r5,r5,r5
10000f98:	28c4703a 	and	r2,r5,r3
10000f9c:	21000104 	addi	r4,r4,4
10000fa0:	103ffc26 	beq	r2,zero,10000f94 <__alt_data_end+0xf8000f94>
10000fa4:	02bfff04 	movi	r10,-4
10000fa8:	024003c4 	movi	r9,15
10000fac:	21800044 	addi	r6,r4,1
10000fb0:	318d883a 	add	r6,r6,r6
10000fb4:	318d883a 	add	r6,r6,r6
10000fb8:	318d883a 	add	r6,r6,r6
10000fbc:	998d883a 	add	r6,r19,r6
10000fc0:	333ffe04 	addi	r12,r6,-8
10000fc4:	2017883a 	mov	r11,r4
10000fc8:	31800104 	addi	r6,r6,4
10000fcc:	34000017 	ldw	r16,0(r6)
10000fd0:	31fffd04 	addi	r7,r6,-12
10000fd4:	81c0041e 	bne	r16,r7,10000fe8 <_malloc_r+0x1dc>
10000fd8:	0000fb06 	br	100013c8 <_malloc_r+0x5bc>
10000fdc:	1801030e 	bge	r3,zero,100013ec <_malloc_r+0x5e0>
10000fe0:	84000317 	ldw	r16,12(r16)
10000fe4:	81c0f826 	beq	r16,r7,100013c8 <_malloc_r+0x5bc>
10000fe8:	80800117 	ldw	r2,4(r16)
10000fec:	1284703a 	and	r2,r2,r10
10000ff0:	1447c83a 	sub	r3,r2,r17
10000ff4:	48fff90e 	bge	r9,r3,10000fdc <__alt_data_end+0xf8000fdc>
10000ff8:	80800317 	ldw	r2,12(r16)
10000ffc:	81000217 	ldw	r4,8(r16)
10001000:	89400054 	ori	r5,r17,1
10001004:	81400115 	stw	r5,4(r16)
10001008:	20800315 	stw	r2,12(r4)
1000100c:	11000215 	stw	r4,8(r2)
10001010:	8463883a 	add	r17,r16,r17
10001014:	9c400515 	stw	r17,20(r19)
10001018:	9c400415 	stw	r17,16(r19)
1000101c:	18800054 	ori	r2,r3,1
10001020:	88800115 	stw	r2,4(r17)
10001024:	8a000315 	stw	r8,12(r17)
10001028:	8a000215 	stw	r8,8(r17)
1000102c:	88e3883a 	add	r17,r17,r3
10001030:	88c00015 	stw	r3,0(r17)
10001034:	9009883a 	mov	r4,r18
10001038:	000366c0 	call	1000366c <__malloc_unlock>
1000103c:	80800204 	addi	r2,r16,8
10001040:	00001b06 	br	100010b0 <_malloc_r+0x2a4>
10001044:	04400404 	movi	r17,16
10001048:	89402536 	bltu	r17,r5,100010e0 <_malloc_r+0x2d4>
1000104c:	00036480 	call	10003648 <__malloc_lock>
10001050:	00800184 	movi	r2,6
10001054:	01000084 	movi	r4,2
10001058:	04c40034 	movhi	r19,4096
1000105c:	1085883a 	add	r2,r2,r2
10001060:	9cd6ee04 	addi	r19,r19,23480
10001064:	1085883a 	add	r2,r2,r2
10001068:	9885883a 	add	r2,r19,r2
1000106c:	14000117 	ldw	r16,4(r2)
10001070:	10fffe04 	addi	r3,r2,-8
10001074:	80c0d926 	beq	r16,r3,100013dc <_malloc_r+0x5d0>
10001078:	80c00117 	ldw	r3,4(r16)
1000107c:	81000317 	ldw	r4,12(r16)
10001080:	00bfff04 	movi	r2,-4
10001084:	1884703a 	and	r2,r3,r2
10001088:	81400217 	ldw	r5,8(r16)
1000108c:	8085883a 	add	r2,r16,r2
10001090:	10c00117 	ldw	r3,4(r2)
10001094:	29000315 	stw	r4,12(r5)
10001098:	21400215 	stw	r5,8(r4)
1000109c:	18c00054 	ori	r3,r3,1
100010a0:	10c00115 	stw	r3,4(r2)
100010a4:	9009883a 	mov	r4,r18
100010a8:	000366c0 	call	1000366c <__malloc_unlock>
100010ac:	80800204 	addi	r2,r16,8
100010b0:	dfc00a17 	ldw	ra,40(sp)
100010b4:	df000917 	ldw	fp,36(sp)
100010b8:	ddc00817 	ldw	r23,32(sp)
100010bc:	dd800717 	ldw	r22,28(sp)
100010c0:	dd400617 	ldw	r21,24(sp)
100010c4:	dd000517 	ldw	r20,20(sp)
100010c8:	dcc00417 	ldw	r19,16(sp)
100010cc:	dc800317 	ldw	r18,12(sp)
100010d0:	dc400217 	ldw	r17,8(sp)
100010d4:	dc000117 	ldw	r16,4(sp)
100010d8:	dec00b04 	addi	sp,sp,44
100010dc:	f800283a 	ret
100010e0:	00800304 	movi	r2,12
100010e4:	90800015 	stw	r2,0(r18)
100010e8:	0005883a 	mov	r2,zero
100010ec:	003ff006 	br	100010b0 <__alt_data_end+0xf80010b0>
100010f0:	01002004 	movi	r4,128
100010f4:	02001004 	movi	r8,64
100010f8:	01c00fc4 	movi	r7,63
100010fc:	003f6106 	br	10000e84 <__alt_data_end+0xf8000e84>
10001100:	4009883a 	mov	r4,r8
10001104:	003f7506 	br	10000edc <__alt_data_end+0xf8000edc>
10001108:	81000317 	ldw	r4,12(r16)
1000110c:	003fde06 	br	10001088 <__alt_data_end+0xf8001088>
10001110:	81c5883a 	add	r2,r16,r7
10001114:	11400117 	ldw	r5,4(r2)
10001118:	9009883a 	mov	r4,r18
1000111c:	29400054 	ori	r5,r5,1
10001120:	11400115 	stw	r5,4(r2)
10001124:	000366c0 	call	1000366c <__malloc_unlock>
10001128:	80800204 	addi	r2,r16,8
1000112c:	003fe006 	br	100010b0 <__alt_data_end+0xf80010b0>
10001130:	9c000217 	ldw	r16,8(r19)
10001134:	00bfff04 	movi	r2,-4
10001138:	85800117 	ldw	r22,4(r16)
1000113c:	b0ac703a 	and	r22,r22,r2
10001140:	b4400336 	bltu	r22,r17,10001150 <_malloc_r+0x344>
10001144:	b445c83a 	sub	r2,r22,r17
10001148:	00c003c4 	movi	r3,15
1000114c:	18805d16 	blt	r3,r2,100012c4 <_malloc_r+0x4b8>
10001150:	05c40034 	movhi	r23,4096
10001154:	00840074 	movhi	r2,4097
10001158:	10a31d04 	addi	r2,r2,-29580
1000115c:	bddc7404 	addi	r23,r23,29136
10001160:	15400017 	ldw	r21,0(r2)
10001164:	b8c00017 	ldw	r3,0(r23)
10001168:	00bfffc4 	movi	r2,-1
1000116c:	858d883a 	add	r6,r16,r22
10001170:	8d6b883a 	add	r21,r17,r21
10001174:	1880ea26 	beq	r3,r2,10001520 <_malloc_r+0x714>
10001178:	ad4403c4 	addi	r21,r21,4111
1000117c:	00bc0004 	movi	r2,-4096
10001180:	a8aa703a 	and	r21,r21,r2
10001184:	a80b883a 	mov	r5,r21
10001188:	9009883a 	mov	r4,r18
1000118c:	d9800015 	stw	r6,0(sp)
10001190:	000202c0 	call	1000202c <_sbrk_r>
10001194:	1029883a 	mov	r20,r2
10001198:	00bfffc4 	movi	r2,-1
1000119c:	d9800017 	ldw	r6,0(sp)
100011a0:	a080e826 	beq	r20,r2,10001544 <_malloc_r+0x738>
100011a4:	a180a636 	bltu	r20,r6,10001440 <_malloc_r+0x634>
100011a8:	07040074 	movhi	fp,4097
100011ac:	e7232604 	addi	fp,fp,-29544
100011b0:	e0800017 	ldw	r2,0(fp)
100011b4:	a887883a 	add	r3,r21,r2
100011b8:	e0c00015 	stw	r3,0(fp)
100011bc:	3500e626 	beq	r6,r20,10001558 <_malloc_r+0x74c>
100011c0:	b9000017 	ldw	r4,0(r23)
100011c4:	00bfffc4 	movi	r2,-1
100011c8:	2080ee26 	beq	r4,r2,10001584 <_malloc_r+0x778>
100011cc:	a185c83a 	sub	r2,r20,r6
100011d0:	10c5883a 	add	r2,r2,r3
100011d4:	e0800015 	stw	r2,0(fp)
100011d8:	a0c001cc 	andi	r3,r20,7
100011dc:	1800bc26 	beq	r3,zero,100014d0 <_malloc_r+0x6c4>
100011e0:	a0e9c83a 	sub	r20,r20,r3
100011e4:	00840204 	movi	r2,4104
100011e8:	a5000204 	addi	r20,r20,8
100011ec:	10c7c83a 	sub	r3,r2,r3
100011f0:	a545883a 	add	r2,r20,r21
100011f4:	1083ffcc 	andi	r2,r2,4095
100011f8:	18abc83a 	sub	r21,r3,r2
100011fc:	a80b883a 	mov	r5,r21
10001200:	9009883a 	mov	r4,r18
10001204:	000202c0 	call	1000202c <_sbrk_r>
10001208:	00ffffc4 	movi	r3,-1
1000120c:	10c0e126 	beq	r2,r3,10001594 <_malloc_r+0x788>
10001210:	1505c83a 	sub	r2,r2,r20
10001214:	1545883a 	add	r2,r2,r21
10001218:	10800054 	ori	r2,r2,1
1000121c:	e0c00017 	ldw	r3,0(fp)
10001220:	9d000215 	stw	r20,8(r19)
10001224:	a0800115 	stw	r2,4(r20)
10001228:	a8c7883a 	add	r3,r21,r3
1000122c:	e0c00015 	stw	r3,0(fp)
10001230:	84c00e26 	beq	r16,r19,1000126c <_malloc_r+0x460>
10001234:	018003c4 	movi	r6,15
10001238:	3580a72e 	bgeu	r6,r22,100014d8 <_malloc_r+0x6cc>
1000123c:	81400117 	ldw	r5,4(r16)
10001240:	013ffe04 	movi	r4,-8
10001244:	b0bffd04 	addi	r2,r22,-12
10001248:	1104703a 	and	r2,r2,r4
1000124c:	2900004c 	andi	r4,r5,1
10001250:	2088b03a 	or	r4,r4,r2
10001254:	81000115 	stw	r4,4(r16)
10001258:	01400144 	movi	r5,5
1000125c:	8089883a 	add	r4,r16,r2
10001260:	21400115 	stw	r5,4(r4)
10001264:	21400215 	stw	r5,8(r4)
10001268:	3080cd36 	bltu	r6,r2,100015a0 <_malloc_r+0x794>
1000126c:	00840074 	movhi	r2,4097
10001270:	10a31c04 	addi	r2,r2,-29584
10001274:	11000017 	ldw	r4,0(r2)
10001278:	20c0012e 	bgeu	r4,r3,10001280 <_malloc_r+0x474>
1000127c:	10c00015 	stw	r3,0(r2)
10001280:	00840074 	movhi	r2,4097
10001284:	10a31b04 	addi	r2,r2,-29588
10001288:	11000017 	ldw	r4,0(r2)
1000128c:	9c000217 	ldw	r16,8(r19)
10001290:	20c0012e 	bgeu	r4,r3,10001298 <_malloc_r+0x48c>
10001294:	10c00015 	stw	r3,0(r2)
10001298:	80c00117 	ldw	r3,4(r16)
1000129c:	00bfff04 	movi	r2,-4
100012a0:	1886703a 	and	r3,r3,r2
100012a4:	1c45c83a 	sub	r2,r3,r17
100012a8:	1c400236 	bltu	r3,r17,100012b4 <_malloc_r+0x4a8>
100012ac:	00c003c4 	movi	r3,15
100012b0:	18800416 	blt	r3,r2,100012c4 <_malloc_r+0x4b8>
100012b4:	9009883a 	mov	r4,r18
100012b8:	000366c0 	call	1000366c <__malloc_unlock>
100012bc:	0005883a 	mov	r2,zero
100012c0:	003f7b06 	br	100010b0 <__alt_data_end+0xf80010b0>
100012c4:	88c00054 	ori	r3,r17,1
100012c8:	80c00115 	stw	r3,4(r16)
100012cc:	8463883a 	add	r17,r16,r17
100012d0:	10800054 	ori	r2,r2,1
100012d4:	9c400215 	stw	r17,8(r19)
100012d8:	88800115 	stw	r2,4(r17)
100012dc:	9009883a 	mov	r4,r18
100012e0:	000366c0 	call	1000366c <__malloc_unlock>
100012e4:	80800204 	addi	r2,r16,8
100012e8:	003f7106 	br	100010b0 <__alt_data_end+0xf80010b0>
100012ec:	00c00504 	movi	r3,20
100012f0:	18804a2e 	bgeu	r3,r2,1000141c <_malloc_r+0x610>
100012f4:	00c01504 	movi	r3,84
100012f8:	18806e36 	bltu	r3,r2,100014b4 <_malloc_r+0x6a8>
100012fc:	8804d33a 	srli	r2,r17,12
10001300:	12001bc4 	addi	r8,r2,111
10001304:	11c01b84 	addi	r7,r2,110
10001308:	4209883a 	add	r4,r8,r8
1000130c:	003edd06 	br	10000e84 <__alt_data_end+0xf8000e84>
10001310:	3804d27a 	srli	r2,r7,9
10001314:	00c00104 	movi	r3,4
10001318:	1880442e 	bgeu	r3,r2,1000142c <_malloc_r+0x620>
1000131c:	00c00504 	movi	r3,20
10001320:	18808136 	bltu	r3,r2,10001528 <_malloc_r+0x71c>
10001324:	11401704 	addi	r5,r2,92
10001328:	10c016c4 	addi	r3,r2,91
1000132c:	294b883a 	add	r5,r5,r5
10001330:	294b883a 	add	r5,r5,r5
10001334:	294b883a 	add	r5,r5,r5
10001338:	994b883a 	add	r5,r19,r5
1000133c:	28800017 	ldw	r2,0(r5)
10001340:	01840034 	movhi	r6,4096
10001344:	297ffe04 	addi	r5,r5,-8
10001348:	3196ee04 	addi	r6,r6,23480
1000134c:	28806526 	beq	r5,r2,100014e4 <_malloc_r+0x6d8>
10001350:	01bfff04 	movi	r6,-4
10001354:	10c00117 	ldw	r3,4(r2)
10001358:	1986703a 	and	r3,r3,r6
1000135c:	38c0022e 	bgeu	r7,r3,10001368 <_malloc_r+0x55c>
10001360:	10800217 	ldw	r2,8(r2)
10001364:	28bffb1e 	bne	r5,r2,10001354 <__alt_data_end+0xf8001354>
10001368:	11400317 	ldw	r5,12(r2)
1000136c:	98c00117 	ldw	r3,4(r19)
10001370:	81400315 	stw	r5,12(r16)
10001374:	80800215 	stw	r2,8(r16)
10001378:	2c000215 	stw	r16,8(r5)
1000137c:	14000315 	stw	r16,12(r2)
10001380:	003ef806 	br	10000f64 <__alt_data_end+0xf8000f64>
10001384:	88c00054 	ori	r3,r17,1
10001388:	80c00115 	stw	r3,4(r16)
1000138c:	8463883a 	add	r17,r16,r17
10001390:	34400515 	stw	r17,20(r6)
10001394:	34400415 	stw	r17,16(r6)
10001398:	10c00054 	ori	r3,r2,1
1000139c:	8a000315 	stw	r8,12(r17)
100013a0:	8a000215 	stw	r8,8(r17)
100013a4:	88c00115 	stw	r3,4(r17)
100013a8:	88a3883a 	add	r17,r17,r2
100013ac:	88800015 	stw	r2,0(r17)
100013b0:	9009883a 	mov	r4,r18
100013b4:	000366c0 	call	1000366c <__malloc_unlock>
100013b8:	80800204 	addi	r2,r16,8
100013bc:	003f3c06 	br	100010b0 <__alt_data_end+0xf80010b0>
100013c0:	30c00117 	ldw	r3,4(r6)
100013c4:	003ee706 	br	10000f64 <__alt_data_end+0xf8000f64>
100013c8:	5ac00044 	addi	r11,r11,1
100013cc:	588000cc 	andi	r2,r11,3
100013d0:	31800204 	addi	r6,r6,8
100013d4:	103efd1e 	bne	r2,zero,10000fcc <__alt_data_end+0xf8000fcc>
100013d8:	00002406 	br	1000146c <_malloc_r+0x660>
100013dc:	14000317 	ldw	r16,12(r2)
100013e0:	143f251e 	bne	r2,r16,10001078 <__alt_data_end+0xf8001078>
100013e4:	21000084 	addi	r4,r4,2
100013e8:	003ebc06 	br	10000edc <__alt_data_end+0xf8000edc>
100013ec:	8085883a 	add	r2,r16,r2
100013f0:	10c00117 	ldw	r3,4(r2)
100013f4:	81000317 	ldw	r4,12(r16)
100013f8:	81400217 	ldw	r5,8(r16)
100013fc:	18c00054 	ori	r3,r3,1
10001400:	10c00115 	stw	r3,4(r2)
10001404:	29000315 	stw	r4,12(r5)
10001408:	21400215 	stw	r5,8(r4)
1000140c:	9009883a 	mov	r4,r18
10001410:	000366c0 	call	1000366c <__malloc_unlock>
10001414:	80800204 	addi	r2,r16,8
10001418:	003f2506 	br	100010b0 <__alt_data_end+0xf80010b0>
1000141c:	12001704 	addi	r8,r2,92
10001420:	11c016c4 	addi	r7,r2,91
10001424:	4209883a 	add	r4,r8,r8
10001428:	003e9606 	br	10000e84 <__alt_data_end+0xf8000e84>
1000142c:	3804d1ba 	srli	r2,r7,6
10001430:	11400e44 	addi	r5,r2,57
10001434:	10c00e04 	addi	r3,r2,56
10001438:	294b883a 	add	r5,r5,r5
1000143c:	003fbc06 	br	10001330 <__alt_data_end+0xf8001330>
10001440:	84ff5926 	beq	r16,r19,100011a8 <__alt_data_end+0xf80011a8>
10001444:	00840034 	movhi	r2,4096
10001448:	1096ee04 	addi	r2,r2,23480
1000144c:	14000217 	ldw	r16,8(r2)
10001450:	00bfff04 	movi	r2,-4
10001454:	80c00117 	ldw	r3,4(r16)
10001458:	1886703a 	and	r3,r3,r2
1000145c:	003f9106 	br	100012a4 <__alt_data_end+0xf80012a4>
10001460:	60800217 	ldw	r2,8(r12)
10001464:	213fffc4 	addi	r4,r4,-1
10001468:	1300651e 	bne	r2,r12,10001600 <_malloc_r+0x7f4>
1000146c:	208000cc 	andi	r2,r4,3
10001470:	633ffe04 	addi	r12,r12,-8
10001474:	103ffa1e 	bne	r2,zero,10001460 <__alt_data_end+0xf8001460>
10001478:	98800117 	ldw	r2,4(r19)
1000147c:	0146303a 	nor	r3,zero,r5
10001480:	1884703a 	and	r2,r3,r2
10001484:	98800115 	stw	r2,4(r19)
10001488:	294b883a 	add	r5,r5,r5
1000148c:	117f2836 	bltu	r2,r5,10001130 <__alt_data_end+0xf8001130>
10001490:	283f2726 	beq	r5,zero,10001130 <__alt_data_end+0xf8001130>
10001494:	2886703a 	and	r3,r5,r2
10001498:	5809883a 	mov	r4,r11
1000149c:	183ec31e 	bne	r3,zero,10000fac <__alt_data_end+0xf8000fac>
100014a0:	294b883a 	add	r5,r5,r5
100014a4:	2886703a 	and	r3,r5,r2
100014a8:	21000104 	addi	r4,r4,4
100014ac:	183ffc26 	beq	r3,zero,100014a0 <__alt_data_end+0xf80014a0>
100014b0:	003ebe06 	br	10000fac <__alt_data_end+0xf8000fac>
100014b4:	00c05504 	movi	r3,340
100014b8:	18801236 	bltu	r3,r2,10001504 <_malloc_r+0x6f8>
100014bc:	8804d3fa 	srli	r2,r17,15
100014c0:	12001e04 	addi	r8,r2,120
100014c4:	11c01dc4 	addi	r7,r2,119
100014c8:	4209883a 	add	r4,r8,r8
100014cc:	003e6d06 	br	10000e84 <__alt_data_end+0xf8000e84>
100014d0:	00c40004 	movi	r3,4096
100014d4:	003f4606 	br	100011f0 <__alt_data_end+0xf80011f0>
100014d8:	00800044 	movi	r2,1
100014dc:	a0800115 	stw	r2,4(r20)
100014e0:	003f7406 	br	100012b4 <__alt_data_end+0xf80012b4>
100014e4:	1805d0ba 	srai	r2,r3,2
100014e8:	01c00044 	movi	r7,1
100014ec:	30c00117 	ldw	r3,4(r6)
100014f0:	388e983a 	sll	r7,r7,r2
100014f4:	2805883a 	mov	r2,r5
100014f8:	38c6b03a 	or	r3,r7,r3
100014fc:	30c00115 	stw	r3,4(r6)
10001500:	003f9b06 	br	10001370 <__alt_data_end+0xf8001370>
10001504:	00c15504 	movi	r3,1364
10001508:	18801a36 	bltu	r3,r2,10001574 <_malloc_r+0x768>
1000150c:	8804d4ba 	srli	r2,r17,18
10001510:	12001f44 	addi	r8,r2,125
10001514:	11c01f04 	addi	r7,r2,124
10001518:	4209883a 	add	r4,r8,r8
1000151c:	003e5906 	br	10000e84 <__alt_data_end+0xf8000e84>
10001520:	ad400404 	addi	r21,r21,16
10001524:	003f1706 	br	10001184 <__alt_data_end+0xf8001184>
10001528:	00c01504 	movi	r3,84
1000152c:	18802336 	bltu	r3,r2,100015bc <_malloc_r+0x7b0>
10001530:	3804d33a 	srli	r2,r7,12
10001534:	11401bc4 	addi	r5,r2,111
10001538:	10c01b84 	addi	r3,r2,110
1000153c:	294b883a 	add	r5,r5,r5
10001540:	003f7b06 	br	10001330 <__alt_data_end+0xf8001330>
10001544:	9c000217 	ldw	r16,8(r19)
10001548:	00bfff04 	movi	r2,-4
1000154c:	80c00117 	ldw	r3,4(r16)
10001550:	1886703a 	and	r3,r3,r2
10001554:	003f5306 	br	100012a4 <__alt_data_end+0xf80012a4>
10001558:	3083ffcc 	andi	r2,r6,4095
1000155c:	103f181e 	bne	r2,zero,100011c0 <__alt_data_end+0xf80011c0>
10001560:	99000217 	ldw	r4,8(r19)
10001564:	b545883a 	add	r2,r22,r21
10001568:	10800054 	ori	r2,r2,1
1000156c:	20800115 	stw	r2,4(r4)
10001570:	003f3e06 	br	1000126c <__alt_data_end+0xf800126c>
10001574:	01003f84 	movi	r4,254
10001578:	02001fc4 	movi	r8,127
1000157c:	01c01f84 	movi	r7,126
10001580:	003e4006 	br	10000e84 <__alt_data_end+0xf8000e84>
10001584:	00840034 	movhi	r2,4096
10001588:	109c7404 	addi	r2,r2,29136
1000158c:	15000015 	stw	r20,0(r2)
10001590:	003f1106 	br	100011d8 <__alt_data_end+0xf80011d8>
10001594:	00800044 	movi	r2,1
10001598:	002b883a 	mov	r21,zero
1000159c:	003f1f06 	br	1000121c <__alt_data_end+0xf800121c>
100015a0:	81400204 	addi	r5,r16,8
100015a4:	9009883a 	mov	r4,r18
100015a8:	00028940 	call	10002894 <_free_r>
100015ac:	00840074 	movhi	r2,4097
100015b0:	10a32604 	addi	r2,r2,-29544
100015b4:	10c00017 	ldw	r3,0(r2)
100015b8:	003f2c06 	br	1000126c <__alt_data_end+0xf800126c>
100015bc:	00c05504 	movi	r3,340
100015c0:	18800536 	bltu	r3,r2,100015d8 <_malloc_r+0x7cc>
100015c4:	3804d3fa 	srli	r2,r7,15
100015c8:	11401e04 	addi	r5,r2,120
100015cc:	10c01dc4 	addi	r3,r2,119
100015d0:	294b883a 	add	r5,r5,r5
100015d4:	003f5606 	br	10001330 <__alt_data_end+0xf8001330>
100015d8:	00c15504 	movi	r3,1364
100015dc:	18800536 	bltu	r3,r2,100015f4 <_malloc_r+0x7e8>
100015e0:	3804d4ba 	srli	r2,r7,18
100015e4:	11401f44 	addi	r5,r2,125
100015e8:	10c01f04 	addi	r3,r2,124
100015ec:	294b883a 	add	r5,r5,r5
100015f0:	003f4f06 	br	10001330 <__alt_data_end+0xf8001330>
100015f4:	01403f84 	movi	r5,254
100015f8:	00c01f84 	movi	r3,126
100015fc:	003f4c06 	br	10001330 <__alt_data_end+0xf8001330>
10001600:	98800117 	ldw	r2,4(r19)
10001604:	003fa006 	br	10001488 <__alt_data_end+0xf8001488>
10001608:	8808d0fa 	srli	r4,r17,3
1000160c:	20800044 	addi	r2,r4,1
10001610:	1085883a 	add	r2,r2,r2
10001614:	003e9006 	br	10001058 <__alt_data_end+0xf8001058>

10001618 <memchr>:
10001618:	208000cc 	andi	r2,r4,3
1000161c:	280f883a 	mov	r7,r5
10001620:	10003426 	beq	r2,zero,100016f4 <memchr+0xdc>
10001624:	30bfffc4 	addi	r2,r6,-1
10001628:	30001a26 	beq	r6,zero,10001694 <memchr+0x7c>
1000162c:	20c00003 	ldbu	r3,0(r4)
10001630:	29803fcc 	andi	r6,r5,255
10001634:	30c0051e 	bne	r6,r3,1000164c <memchr+0x34>
10001638:	00001806 	br	1000169c <memchr+0x84>
1000163c:	10001526 	beq	r2,zero,10001694 <memchr+0x7c>
10001640:	20c00003 	ldbu	r3,0(r4)
10001644:	10bfffc4 	addi	r2,r2,-1
10001648:	30c01426 	beq	r6,r3,1000169c <memchr+0x84>
1000164c:	21000044 	addi	r4,r4,1
10001650:	20c000cc 	andi	r3,r4,3
10001654:	183ff91e 	bne	r3,zero,1000163c <__alt_data_end+0xf800163c>
10001658:	020000c4 	movi	r8,3
1000165c:	40801136 	bltu	r8,r2,100016a4 <memchr+0x8c>
10001660:	10000c26 	beq	r2,zero,10001694 <memchr+0x7c>
10001664:	20c00003 	ldbu	r3,0(r4)
10001668:	29403fcc 	andi	r5,r5,255
1000166c:	28c00b26 	beq	r5,r3,1000169c <memchr+0x84>
10001670:	20c00044 	addi	r3,r4,1
10001674:	39803fcc 	andi	r6,r7,255
10001678:	2089883a 	add	r4,r4,r2
1000167c:	00000306 	br	1000168c <memchr+0x74>
10001680:	18c00044 	addi	r3,r3,1
10001684:	197fffc3 	ldbu	r5,-1(r3)
10001688:	31400526 	beq	r6,r5,100016a0 <memchr+0x88>
1000168c:	1805883a 	mov	r2,r3
10001690:	20fffb1e 	bne	r4,r3,10001680 <__alt_data_end+0xf8001680>
10001694:	0005883a 	mov	r2,zero
10001698:	f800283a 	ret
1000169c:	2005883a 	mov	r2,r4
100016a0:	f800283a 	ret
100016a4:	28c03fcc 	andi	r3,r5,255
100016a8:	1812923a 	slli	r9,r3,8
100016ac:	02ffbff4 	movhi	r11,65279
100016b0:	02a02074 	movhi	r10,32897
100016b4:	48d2b03a 	or	r9,r9,r3
100016b8:	4806943a 	slli	r3,r9,16
100016bc:	5affbfc4 	addi	r11,r11,-257
100016c0:	52a02004 	addi	r10,r10,-32640
100016c4:	48d2b03a 	or	r9,r9,r3
100016c8:	20c00017 	ldw	r3,0(r4)
100016cc:	48c6f03a 	xor	r3,r9,r3
100016d0:	1acd883a 	add	r6,r3,r11
100016d4:	00c6303a 	nor	r3,zero,r3
100016d8:	30c6703a 	and	r3,r6,r3
100016dc:	1a86703a 	and	r3,r3,r10
100016e0:	183fe01e 	bne	r3,zero,10001664 <__alt_data_end+0xf8001664>
100016e4:	10bfff04 	addi	r2,r2,-4
100016e8:	21000104 	addi	r4,r4,4
100016ec:	40bff636 	bltu	r8,r2,100016c8 <__alt_data_end+0xf80016c8>
100016f0:	003fdb06 	br	10001660 <__alt_data_end+0xf8001660>
100016f4:	3005883a 	mov	r2,r6
100016f8:	003fd706 	br	10001658 <__alt_data_end+0xf8001658>

100016fc <memcpy>:
100016fc:	defffd04 	addi	sp,sp,-12
10001700:	dfc00215 	stw	ra,8(sp)
10001704:	dc400115 	stw	r17,4(sp)
10001708:	dc000015 	stw	r16,0(sp)
1000170c:	00c003c4 	movi	r3,15
10001710:	2005883a 	mov	r2,r4
10001714:	1980452e 	bgeu	r3,r6,1000182c <memcpy+0x130>
10001718:	2906b03a 	or	r3,r5,r4
1000171c:	18c000cc 	andi	r3,r3,3
10001720:	1800441e 	bne	r3,zero,10001834 <memcpy+0x138>
10001724:	347ffc04 	addi	r17,r6,-16
10001728:	8822d13a 	srli	r17,r17,4
1000172c:	28c00104 	addi	r3,r5,4
10001730:	23400104 	addi	r13,r4,4
10001734:	8820913a 	slli	r16,r17,4
10001738:	2b000204 	addi	r12,r5,8
1000173c:	22c00204 	addi	r11,r4,8
10001740:	84000504 	addi	r16,r16,20
10001744:	2a800304 	addi	r10,r5,12
10001748:	22400304 	addi	r9,r4,12
1000174c:	2c21883a 	add	r16,r5,r16
10001750:	2811883a 	mov	r8,r5
10001754:	200f883a 	mov	r7,r4
10001758:	41000017 	ldw	r4,0(r8)
1000175c:	1fc00017 	ldw	ra,0(r3)
10001760:	63c00017 	ldw	r15,0(r12)
10001764:	39000015 	stw	r4,0(r7)
10001768:	53800017 	ldw	r14,0(r10)
1000176c:	6fc00015 	stw	ra,0(r13)
10001770:	5bc00015 	stw	r15,0(r11)
10001774:	4b800015 	stw	r14,0(r9)
10001778:	18c00404 	addi	r3,r3,16
1000177c:	39c00404 	addi	r7,r7,16
10001780:	42000404 	addi	r8,r8,16
10001784:	6b400404 	addi	r13,r13,16
10001788:	63000404 	addi	r12,r12,16
1000178c:	5ac00404 	addi	r11,r11,16
10001790:	52800404 	addi	r10,r10,16
10001794:	4a400404 	addi	r9,r9,16
10001798:	1c3fef1e 	bne	r3,r16,10001758 <__alt_data_end+0xf8001758>
1000179c:	89c00044 	addi	r7,r17,1
100017a0:	380e913a 	slli	r7,r7,4
100017a4:	310003cc 	andi	r4,r6,15
100017a8:	02c000c4 	movi	r11,3
100017ac:	11c7883a 	add	r3,r2,r7
100017b0:	29cb883a 	add	r5,r5,r7
100017b4:	5900212e 	bgeu	r11,r4,1000183c <memcpy+0x140>
100017b8:	1813883a 	mov	r9,r3
100017bc:	2811883a 	mov	r8,r5
100017c0:	200f883a 	mov	r7,r4
100017c4:	42800017 	ldw	r10,0(r8)
100017c8:	4a400104 	addi	r9,r9,4
100017cc:	39ffff04 	addi	r7,r7,-4
100017d0:	4abfff15 	stw	r10,-4(r9)
100017d4:	42000104 	addi	r8,r8,4
100017d8:	59fffa36 	bltu	r11,r7,100017c4 <__alt_data_end+0xf80017c4>
100017dc:	213fff04 	addi	r4,r4,-4
100017e0:	2008d0ba 	srli	r4,r4,2
100017e4:	318000cc 	andi	r6,r6,3
100017e8:	21000044 	addi	r4,r4,1
100017ec:	2109883a 	add	r4,r4,r4
100017f0:	2109883a 	add	r4,r4,r4
100017f4:	1907883a 	add	r3,r3,r4
100017f8:	290b883a 	add	r5,r5,r4
100017fc:	30000626 	beq	r6,zero,10001818 <memcpy+0x11c>
10001800:	198d883a 	add	r6,r3,r6
10001804:	29c00003 	ldbu	r7,0(r5)
10001808:	18c00044 	addi	r3,r3,1
1000180c:	29400044 	addi	r5,r5,1
10001810:	19ffffc5 	stb	r7,-1(r3)
10001814:	19bffb1e 	bne	r3,r6,10001804 <__alt_data_end+0xf8001804>
10001818:	dfc00217 	ldw	ra,8(sp)
1000181c:	dc400117 	ldw	r17,4(sp)
10001820:	dc000017 	ldw	r16,0(sp)
10001824:	dec00304 	addi	sp,sp,12
10001828:	f800283a 	ret
1000182c:	2007883a 	mov	r3,r4
10001830:	003ff206 	br	100017fc <__alt_data_end+0xf80017fc>
10001834:	2007883a 	mov	r3,r4
10001838:	003ff106 	br	10001800 <__alt_data_end+0xf8001800>
1000183c:	200d883a 	mov	r6,r4
10001840:	003fee06 	br	100017fc <__alt_data_end+0xf80017fc>

10001844 <memmove>:
10001844:	2005883a 	mov	r2,r4
10001848:	29000b2e 	bgeu	r5,r4,10001878 <memmove+0x34>
1000184c:	298f883a 	add	r7,r5,r6
10001850:	21c0092e 	bgeu	r4,r7,10001878 <memmove+0x34>
10001854:	2187883a 	add	r3,r4,r6
10001858:	198bc83a 	sub	r5,r3,r6
1000185c:	30004826 	beq	r6,zero,10001980 <memmove+0x13c>
10001860:	39ffffc4 	addi	r7,r7,-1
10001864:	39000003 	ldbu	r4,0(r7)
10001868:	18ffffc4 	addi	r3,r3,-1
1000186c:	19000005 	stb	r4,0(r3)
10001870:	28fffb1e 	bne	r5,r3,10001860 <__alt_data_end+0xf8001860>
10001874:	f800283a 	ret
10001878:	00c003c4 	movi	r3,15
1000187c:	1980412e 	bgeu	r3,r6,10001984 <memmove+0x140>
10001880:	2886b03a 	or	r3,r5,r2
10001884:	18c000cc 	andi	r3,r3,3
10001888:	1800401e 	bne	r3,zero,1000198c <memmove+0x148>
1000188c:	33fffc04 	addi	r15,r6,-16
10001890:	781ed13a 	srli	r15,r15,4
10001894:	28c00104 	addi	r3,r5,4
10001898:	13400104 	addi	r13,r2,4
1000189c:	781c913a 	slli	r14,r15,4
100018a0:	2b000204 	addi	r12,r5,8
100018a4:	12c00204 	addi	r11,r2,8
100018a8:	73800504 	addi	r14,r14,20
100018ac:	2a800304 	addi	r10,r5,12
100018b0:	12400304 	addi	r9,r2,12
100018b4:	2b9d883a 	add	r14,r5,r14
100018b8:	2811883a 	mov	r8,r5
100018bc:	100f883a 	mov	r7,r2
100018c0:	41000017 	ldw	r4,0(r8)
100018c4:	39c00404 	addi	r7,r7,16
100018c8:	18c00404 	addi	r3,r3,16
100018cc:	393ffc15 	stw	r4,-16(r7)
100018d0:	193ffc17 	ldw	r4,-16(r3)
100018d4:	6b400404 	addi	r13,r13,16
100018d8:	5ac00404 	addi	r11,r11,16
100018dc:	693ffc15 	stw	r4,-16(r13)
100018e0:	61000017 	ldw	r4,0(r12)
100018e4:	4a400404 	addi	r9,r9,16
100018e8:	42000404 	addi	r8,r8,16
100018ec:	593ffc15 	stw	r4,-16(r11)
100018f0:	51000017 	ldw	r4,0(r10)
100018f4:	63000404 	addi	r12,r12,16
100018f8:	52800404 	addi	r10,r10,16
100018fc:	493ffc15 	stw	r4,-16(r9)
10001900:	1bbfef1e 	bne	r3,r14,100018c0 <__alt_data_end+0xf80018c0>
10001904:	79000044 	addi	r4,r15,1
10001908:	2008913a 	slli	r4,r4,4
1000190c:	328003cc 	andi	r10,r6,15
10001910:	02c000c4 	movi	r11,3
10001914:	1107883a 	add	r3,r2,r4
10001918:	290b883a 	add	r5,r5,r4
1000191c:	5a801e2e 	bgeu	r11,r10,10001998 <memmove+0x154>
10001920:	1813883a 	mov	r9,r3
10001924:	2811883a 	mov	r8,r5
10001928:	500f883a 	mov	r7,r10
1000192c:	41000017 	ldw	r4,0(r8)
10001930:	4a400104 	addi	r9,r9,4
10001934:	39ffff04 	addi	r7,r7,-4
10001938:	493fff15 	stw	r4,-4(r9)
1000193c:	42000104 	addi	r8,r8,4
10001940:	59fffa36 	bltu	r11,r7,1000192c <__alt_data_end+0xf800192c>
10001944:	513fff04 	addi	r4,r10,-4
10001948:	2008d0ba 	srli	r4,r4,2
1000194c:	318000cc 	andi	r6,r6,3
10001950:	21000044 	addi	r4,r4,1
10001954:	2109883a 	add	r4,r4,r4
10001958:	2109883a 	add	r4,r4,r4
1000195c:	1907883a 	add	r3,r3,r4
10001960:	290b883a 	add	r5,r5,r4
10001964:	30000b26 	beq	r6,zero,10001994 <memmove+0x150>
10001968:	198d883a 	add	r6,r3,r6
1000196c:	29c00003 	ldbu	r7,0(r5)
10001970:	18c00044 	addi	r3,r3,1
10001974:	29400044 	addi	r5,r5,1
10001978:	19ffffc5 	stb	r7,-1(r3)
1000197c:	19bffb1e 	bne	r3,r6,1000196c <__alt_data_end+0xf800196c>
10001980:	f800283a 	ret
10001984:	1007883a 	mov	r3,r2
10001988:	003ff606 	br	10001964 <__alt_data_end+0xf8001964>
1000198c:	1007883a 	mov	r3,r2
10001990:	003ff506 	br	10001968 <__alt_data_end+0xf8001968>
10001994:	f800283a 	ret
10001998:	500d883a 	mov	r6,r10
1000199c:	003ff106 	br	10001964 <__alt_data_end+0xf8001964>

100019a0 <memset>:
100019a0:	20c000cc 	andi	r3,r4,3
100019a4:	2005883a 	mov	r2,r4
100019a8:	18004426 	beq	r3,zero,10001abc <memset+0x11c>
100019ac:	31ffffc4 	addi	r7,r6,-1
100019b0:	30004026 	beq	r6,zero,10001ab4 <memset+0x114>
100019b4:	2813883a 	mov	r9,r5
100019b8:	200d883a 	mov	r6,r4
100019bc:	2007883a 	mov	r3,r4
100019c0:	00000406 	br	100019d4 <memset+0x34>
100019c4:	3a3fffc4 	addi	r8,r7,-1
100019c8:	31800044 	addi	r6,r6,1
100019cc:	38003926 	beq	r7,zero,10001ab4 <memset+0x114>
100019d0:	400f883a 	mov	r7,r8
100019d4:	18c00044 	addi	r3,r3,1
100019d8:	32400005 	stb	r9,0(r6)
100019dc:	1a0000cc 	andi	r8,r3,3
100019e0:	403ff81e 	bne	r8,zero,100019c4 <__alt_data_end+0xf80019c4>
100019e4:	010000c4 	movi	r4,3
100019e8:	21c02d2e 	bgeu	r4,r7,10001aa0 <memset+0x100>
100019ec:	29003fcc 	andi	r4,r5,255
100019f0:	200c923a 	slli	r6,r4,8
100019f4:	3108b03a 	or	r4,r6,r4
100019f8:	200c943a 	slli	r6,r4,16
100019fc:	218cb03a 	or	r6,r4,r6
10001a00:	010003c4 	movi	r4,15
10001a04:	21c0182e 	bgeu	r4,r7,10001a68 <memset+0xc8>
10001a08:	3b3ffc04 	addi	r12,r7,-16
10001a0c:	6018d13a 	srli	r12,r12,4
10001a10:	1a000104 	addi	r8,r3,4
10001a14:	1ac00204 	addi	r11,r3,8
10001a18:	6008913a 	slli	r4,r12,4
10001a1c:	1a800304 	addi	r10,r3,12
10001a20:	1813883a 	mov	r9,r3
10001a24:	21000504 	addi	r4,r4,20
10001a28:	1909883a 	add	r4,r3,r4
10001a2c:	49800015 	stw	r6,0(r9)
10001a30:	41800015 	stw	r6,0(r8)
10001a34:	59800015 	stw	r6,0(r11)
10001a38:	51800015 	stw	r6,0(r10)
10001a3c:	42000404 	addi	r8,r8,16
10001a40:	4a400404 	addi	r9,r9,16
10001a44:	5ac00404 	addi	r11,r11,16
10001a48:	52800404 	addi	r10,r10,16
10001a4c:	413ff71e 	bne	r8,r4,10001a2c <__alt_data_end+0xf8001a2c>
10001a50:	63000044 	addi	r12,r12,1
10001a54:	6018913a 	slli	r12,r12,4
10001a58:	39c003cc 	andi	r7,r7,15
10001a5c:	010000c4 	movi	r4,3
10001a60:	1b07883a 	add	r3,r3,r12
10001a64:	21c00e2e 	bgeu	r4,r7,10001aa0 <memset+0x100>
10001a68:	1813883a 	mov	r9,r3
10001a6c:	3811883a 	mov	r8,r7
10001a70:	010000c4 	movi	r4,3
10001a74:	49800015 	stw	r6,0(r9)
10001a78:	423fff04 	addi	r8,r8,-4
10001a7c:	4a400104 	addi	r9,r9,4
10001a80:	223ffc36 	bltu	r4,r8,10001a74 <__alt_data_end+0xf8001a74>
10001a84:	393fff04 	addi	r4,r7,-4
10001a88:	2008d0ba 	srli	r4,r4,2
10001a8c:	39c000cc 	andi	r7,r7,3
10001a90:	21000044 	addi	r4,r4,1
10001a94:	2109883a 	add	r4,r4,r4
10001a98:	2109883a 	add	r4,r4,r4
10001a9c:	1907883a 	add	r3,r3,r4
10001aa0:	38000526 	beq	r7,zero,10001ab8 <memset+0x118>
10001aa4:	19cf883a 	add	r7,r3,r7
10001aa8:	19400005 	stb	r5,0(r3)
10001aac:	18c00044 	addi	r3,r3,1
10001ab0:	38fffd1e 	bne	r7,r3,10001aa8 <__alt_data_end+0xf8001aa8>
10001ab4:	f800283a 	ret
10001ab8:	f800283a 	ret
10001abc:	2007883a 	mov	r3,r4
10001ac0:	300f883a 	mov	r7,r6
10001ac4:	003fc706 	br	100019e4 <__alt_data_end+0xf80019e4>

10001ac8 <_realloc_r>:
10001ac8:	defff604 	addi	sp,sp,-40
10001acc:	dc800215 	stw	r18,8(sp)
10001ad0:	dfc00915 	stw	ra,36(sp)
10001ad4:	df000815 	stw	fp,32(sp)
10001ad8:	ddc00715 	stw	r23,28(sp)
10001adc:	dd800615 	stw	r22,24(sp)
10001ae0:	dd400515 	stw	r21,20(sp)
10001ae4:	dd000415 	stw	r20,16(sp)
10001ae8:	dcc00315 	stw	r19,12(sp)
10001aec:	dc400115 	stw	r17,4(sp)
10001af0:	dc000015 	stw	r16,0(sp)
10001af4:	3025883a 	mov	r18,r6
10001af8:	2800b726 	beq	r5,zero,10001dd8 <_realloc_r+0x310>
10001afc:	282b883a 	mov	r21,r5
10001b00:	2029883a 	mov	r20,r4
10001b04:	00036480 	call	10003648 <__malloc_lock>
10001b08:	a8bfff17 	ldw	r2,-4(r21)
10001b0c:	043fff04 	movi	r16,-4
10001b10:	90c002c4 	addi	r3,r18,11
10001b14:	01000584 	movi	r4,22
10001b18:	acfffe04 	addi	r19,r21,-8
10001b1c:	1420703a 	and	r16,r2,r16
10001b20:	20c0332e 	bgeu	r4,r3,10001bf0 <_realloc_r+0x128>
10001b24:	047ffe04 	movi	r17,-8
10001b28:	1c62703a 	and	r17,r3,r17
10001b2c:	8807883a 	mov	r3,r17
10001b30:	88005816 	blt	r17,zero,10001c94 <_realloc_r+0x1cc>
10001b34:	8c805736 	bltu	r17,r18,10001c94 <_realloc_r+0x1cc>
10001b38:	80c0300e 	bge	r16,r3,10001bfc <_realloc_r+0x134>
10001b3c:	07040034 	movhi	fp,4096
10001b40:	e716ee04 	addi	fp,fp,23480
10001b44:	e1c00217 	ldw	r7,8(fp)
10001b48:	9c09883a 	add	r4,r19,r16
10001b4c:	22000117 	ldw	r8,4(r4)
10001b50:	21c06326 	beq	r4,r7,10001ce0 <_realloc_r+0x218>
10001b54:	017fff84 	movi	r5,-2
10001b58:	414a703a 	and	r5,r8,r5
10001b5c:	214b883a 	add	r5,r4,r5
10001b60:	29800117 	ldw	r6,4(r5)
10001b64:	3180004c 	andi	r6,r6,1
10001b68:	30003f26 	beq	r6,zero,10001c68 <_realloc_r+0x1a0>
10001b6c:	1080004c 	andi	r2,r2,1
10001b70:	10008326 	beq	r2,zero,10001d80 <_realloc_r+0x2b8>
10001b74:	900b883a 	mov	r5,r18
10001b78:	a009883a 	mov	r4,r20
10001b7c:	0000e0c0 	call	10000e0c <_malloc_r>
10001b80:	1025883a 	mov	r18,r2
10001b84:	10011e26 	beq	r2,zero,10002000 <_realloc_r+0x538>
10001b88:	a93fff17 	ldw	r4,-4(r21)
10001b8c:	10fffe04 	addi	r3,r2,-8
10001b90:	00bfff84 	movi	r2,-2
10001b94:	2084703a 	and	r2,r4,r2
10001b98:	9885883a 	add	r2,r19,r2
10001b9c:	1880ee26 	beq	r3,r2,10001f58 <_realloc_r+0x490>
10001ba0:	81bfff04 	addi	r6,r16,-4
10001ba4:	00800904 	movi	r2,36
10001ba8:	1180b836 	bltu	r2,r6,10001e8c <_realloc_r+0x3c4>
10001bac:	00c004c4 	movi	r3,19
10001bb0:	19809636 	bltu	r3,r6,10001e0c <_realloc_r+0x344>
10001bb4:	9005883a 	mov	r2,r18
10001bb8:	a807883a 	mov	r3,r21
10001bbc:	19000017 	ldw	r4,0(r3)
10001bc0:	11000015 	stw	r4,0(r2)
10001bc4:	19000117 	ldw	r4,4(r3)
10001bc8:	11000115 	stw	r4,4(r2)
10001bcc:	18c00217 	ldw	r3,8(r3)
10001bd0:	10c00215 	stw	r3,8(r2)
10001bd4:	a80b883a 	mov	r5,r21
10001bd8:	a009883a 	mov	r4,r20
10001bdc:	00028940 	call	10002894 <_free_r>
10001be0:	a009883a 	mov	r4,r20
10001be4:	000366c0 	call	1000366c <__malloc_unlock>
10001be8:	9005883a 	mov	r2,r18
10001bec:	00001206 	br	10001c38 <_realloc_r+0x170>
10001bf0:	00c00404 	movi	r3,16
10001bf4:	1823883a 	mov	r17,r3
10001bf8:	003fce06 	br	10001b34 <__alt_data_end+0xf8001b34>
10001bfc:	a825883a 	mov	r18,r21
10001c00:	8445c83a 	sub	r2,r16,r17
10001c04:	00c003c4 	movi	r3,15
10001c08:	18802636 	bltu	r3,r2,10001ca4 <_realloc_r+0x1dc>
10001c0c:	99800117 	ldw	r6,4(r19)
10001c10:	9c07883a 	add	r3,r19,r16
10001c14:	3180004c 	andi	r6,r6,1
10001c18:	3420b03a 	or	r16,r6,r16
10001c1c:	9c000115 	stw	r16,4(r19)
10001c20:	18800117 	ldw	r2,4(r3)
10001c24:	10800054 	ori	r2,r2,1
10001c28:	18800115 	stw	r2,4(r3)
10001c2c:	a009883a 	mov	r4,r20
10001c30:	000366c0 	call	1000366c <__malloc_unlock>
10001c34:	9005883a 	mov	r2,r18
10001c38:	dfc00917 	ldw	ra,36(sp)
10001c3c:	df000817 	ldw	fp,32(sp)
10001c40:	ddc00717 	ldw	r23,28(sp)
10001c44:	dd800617 	ldw	r22,24(sp)
10001c48:	dd400517 	ldw	r21,20(sp)
10001c4c:	dd000417 	ldw	r20,16(sp)
10001c50:	dcc00317 	ldw	r19,12(sp)
10001c54:	dc800217 	ldw	r18,8(sp)
10001c58:	dc400117 	ldw	r17,4(sp)
10001c5c:	dc000017 	ldw	r16,0(sp)
10001c60:	dec00a04 	addi	sp,sp,40
10001c64:	f800283a 	ret
10001c68:	017fff04 	movi	r5,-4
10001c6c:	414a703a 	and	r5,r8,r5
10001c70:	814d883a 	add	r6,r16,r5
10001c74:	30c01f16 	blt	r6,r3,10001cf4 <_realloc_r+0x22c>
10001c78:	20800317 	ldw	r2,12(r4)
10001c7c:	20c00217 	ldw	r3,8(r4)
10001c80:	a825883a 	mov	r18,r21
10001c84:	3021883a 	mov	r16,r6
10001c88:	18800315 	stw	r2,12(r3)
10001c8c:	10c00215 	stw	r3,8(r2)
10001c90:	003fdb06 	br	10001c00 <__alt_data_end+0xf8001c00>
10001c94:	00800304 	movi	r2,12
10001c98:	a0800015 	stw	r2,0(r20)
10001c9c:	0005883a 	mov	r2,zero
10001ca0:	003fe506 	br	10001c38 <__alt_data_end+0xf8001c38>
10001ca4:	98c00117 	ldw	r3,4(r19)
10001ca8:	9c4b883a 	add	r5,r19,r17
10001cac:	11000054 	ori	r4,r2,1
10001cb0:	18c0004c 	andi	r3,r3,1
10001cb4:	1c62b03a 	or	r17,r3,r17
10001cb8:	9c400115 	stw	r17,4(r19)
10001cbc:	29000115 	stw	r4,4(r5)
10001cc0:	2885883a 	add	r2,r5,r2
10001cc4:	10c00117 	ldw	r3,4(r2)
10001cc8:	29400204 	addi	r5,r5,8
10001ccc:	a009883a 	mov	r4,r20
10001cd0:	18c00054 	ori	r3,r3,1
10001cd4:	10c00115 	stw	r3,4(r2)
10001cd8:	00028940 	call	10002894 <_free_r>
10001cdc:	003fd306 	br	10001c2c <__alt_data_end+0xf8001c2c>
10001ce0:	017fff04 	movi	r5,-4
10001ce4:	414a703a 	and	r5,r8,r5
10001ce8:	89800404 	addi	r6,r17,16
10001cec:	8151883a 	add	r8,r16,r5
10001cf0:	4180590e 	bge	r8,r6,10001e58 <_realloc_r+0x390>
10001cf4:	1080004c 	andi	r2,r2,1
10001cf8:	103f9e1e 	bne	r2,zero,10001b74 <__alt_data_end+0xf8001b74>
10001cfc:	adbffe17 	ldw	r22,-8(r21)
10001d00:	00bfff04 	movi	r2,-4
10001d04:	9dadc83a 	sub	r22,r19,r22
10001d08:	b1800117 	ldw	r6,4(r22)
10001d0c:	3084703a 	and	r2,r6,r2
10001d10:	20002026 	beq	r4,zero,10001d94 <_realloc_r+0x2cc>
10001d14:	80af883a 	add	r23,r16,r2
10001d18:	b96f883a 	add	r23,r23,r5
10001d1c:	21c05f26 	beq	r4,r7,10001e9c <_realloc_r+0x3d4>
10001d20:	b8c01c16 	blt	r23,r3,10001d94 <_realloc_r+0x2cc>
10001d24:	20800317 	ldw	r2,12(r4)
10001d28:	20c00217 	ldw	r3,8(r4)
10001d2c:	81bfff04 	addi	r6,r16,-4
10001d30:	01000904 	movi	r4,36
10001d34:	18800315 	stw	r2,12(r3)
10001d38:	10c00215 	stw	r3,8(r2)
10001d3c:	b0c00217 	ldw	r3,8(r22)
10001d40:	b0800317 	ldw	r2,12(r22)
10001d44:	b4800204 	addi	r18,r22,8
10001d48:	18800315 	stw	r2,12(r3)
10001d4c:	10c00215 	stw	r3,8(r2)
10001d50:	21801b36 	bltu	r4,r6,10001dc0 <_realloc_r+0x2f8>
10001d54:	008004c4 	movi	r2,19
10001d58:	1180352e 	bgeu	r2,r6,10001e30 <_realloc_r+0x368>
10001d5c:	a8800017 	ldw	r2,0(r21)
10001d60:	b0800215 	stw	r2,8(r22)
10001d64:	a8800117 	ldw	r2,4(r21)
10001d68:	b0800315 	stw	r2,12(r22)
10001d6c:	008006c4 	movi	r2,27
10001d70:	11807f36 	bltu	r2,r6,10001f70 <_realloc_r+0x4a8>
10001d74:	b0800404 	addi	r2,r22,16
10001d78:	ad400204 	addi	r21,r21,8
10001d7c:	00002d06 	br	10001e34 <_realloc_r+0x36c>
10001d80:	adbffe17 	ldw	r22,-8(r21)
10001d84:	00bfff04 	movi	r2,-4
10001d88:	9dadc83a 	sub	r22,r19,r22
10001d8c:	b1000117 	ldw	r4,4(r22)
10001d90:	2084703a 	and	r2,r4,r2
10001d94:	b03f7726 	beq	r22,zero,10001b74 <__alt_data_end+0xf8001b74>
10001d98:	80af883a 	add	r23,r16,r2
10001d9c:	b8ff7516 	blt	r23,r3,10001b74 <__alt_data_end+0xf8001b74>
10001da0:	b0800317 	ldw	r2,12(r22)
10001da4:	b0c00217 	ldw	r3,8(r22)
10001da8:	81bfff04 	addi	r6,r16,-4
10001dac:	01000904 	movi	r4,36
10001db0:	18800315 	stw	r2,12(r3)
10001db4:	10c00215 	stw	r3,8(r2)
10001db8:	b4800204 	addi	r18,r22,8
10001dbc:	21bfe52e 	bgeu	r4,r6,10001d54 <__alt_data_end+0xf8001d54>
10001dc0:	a80b883a 	mov	r5,r21
10001dc4:	9009883a 	mov	r4,r18
10001dc8:	00018440 	call	10001844 <memmove>
10001dcc:	b821883a 	mov	r16,r23
10001dd0:	b027883a 	mov	r19,r22
10001dd4:	003f8a06 	br	10001c00 <__alt_data_end+0xf8001c00>
10001dd8:	300b883a 	mov	r5,r6
10001ddc:	dfc00917 	ldw	ra,36(sp)
10001de0:	df000817 	ldw	fp,32(sp)
10001de4:	ddc00717 	ldw	r23,28(sp)
10001de8:	dd800617 	ldw	r22,24(sp)
10001dec:	dd400517 	ldw	r21,20(sp)
10001df0:	dd000417 	ldw	r20,16(sp)
10001df4:	dcc00317 	ldw	r19,12(sp)
10001df8:	dc800217 	ldw	r18,8(sp)
10001dfc:	dc400117 	ldw	r17,4(sp)
10001e00:	dc000017 	ldw	r16,0(sp)
10001e04:	dec00a04 	addi	sp,sp,40
10001e08:	0000e0c1 	jmpi	10000e0c <_malloc_r>
10001e0c:	a8c00017 	ldw	r3,0(r21)
10001e10:	90c00015 	stw	r3,0(r18)
10001e14:	a8c00117 	ldw	r3,4(r21)
10001e18:	90c00115 	stw	r3,4(r18)
10001e1c:	00c006c4 	movi	r3,27
10001e20:	19804536 	bltu	r3,r6,10001f38 <_realloc_r+0x470>
10001e24:	90800204 	addi	r2,r18,8
10001e28:	a8c00204 	addi	r3,r21,8
10001e2c:	003f6306 	br	10001bbc <__alt_data_end+0xf8001bbc>
10001e30:	9005883a 	mov	r2,r18
10001e34:	a8c00017 	ldw	r3,0(r21)
10001e38:	b821883a 	mov	r16,r23
10001e3c:	b027883a 	mov	r19,r22
10001e40:	10c00015 	stw	r3,0(r2)
10001e44:	a8c00117 	ldw	r3,4(r21)
10001e48:	10c00115 	stw	r3,4(r2)
10001e4c:	a8c00217 	ldw	r3,8(r21)
10001e50:	10c00215 	stw	r3,8(r2)
10001e54:	003f6a06 	br	10001c00 <__alt_data_end+0xf8001c00>
10001e58:	9c67883a 	add	r19,r19,r17
10001e5c:	4445c83a 	sub	r2,r8,r17
10001e60:	e4c00215 	stw	r19,8(fp)
10001e64:	10800054 	ori	r2,r2,1
10001e68:	98800115 	stw	r2,4(r19)
10001e6c:	a8bfff17 	ldw	r2,-4(r21)
10001e70:	a009883a 	mov	r4,r20
10001e74:	1080004c 	andi	r2,r2,1
10001e78:	1462b03a 	or	r17,r2,r17
10001e7c:	ac7fff15 	stw	r17,-4(r21)
10001e80:	000366c0 	call	1000366c <__malloc_unlock>
10001e84:	a805883a 	mov	r2,r21
10001e88:	003f6b06 	br	10001c38 <__alt_data_end+0xf8001c38>
10001e8c:	a80b883a 	mov	r5,r21
10001e90:	9009883a 	mov	r4,r18
10001e94:	00018440 	call	10001844 <memmove>
10001e98:	003f4e06 	br	10001bd4 <__alt_data_end+0xf8001bd4>
10001e9c:	89000404 	addi	r4,r17,16
10001ea0:	b93fbc16 	blt	r23,r4,10001d94 <__alt_data_end+0xf8001d94>
10001ea4:	b0800317 	ldw	r2,12(r22)
10001ea8:	b0c00217 	ldw	r3,8(r22)
10001eac:	81bfff04 	addi	r6,r16,-4
10001eb0:	01000904 	movi	r4,36
10001eb4:	18800315 	stw	r2,12(r3)
10001eb8:	10c00215 	stw	r3,8(r2)
10001ebc:	b4800204 	addi	r18,r22,8
10001ec0:	21804336 	bltu	r4,r6,10001fd0 <_realloc_r+0x508>
10001ec4:	008004c4 	movi	r2,19
10001ec8:	11803f2e 	bgeu	r2,r6,10001fc8 <_realloc_r+0x500>
10001ecc:	a8800017 	ldw	r2,0(r21)
10001ed0:	b0800215 	stw	r2,8(r22)
10001ed4:	a8800117 	ldw	r2,4(r21)
10001ed8:	b0800315 	stw	r2,12(r22)
10001edc:	008006c4 	movi	r2,27
10001ee0:	11803f36 	bltu	r2,r6,10001fe0 <_realloc_r+0x518>
10001ee4:	b0800404 	addi	r2,r22,16
10001ee8:	ad400204 	addi	r21,r21,8
10001eec:	a8c00017 	ldw	r3,0(r21)
10001ef0:	10c00015 	stw	r3,0(r2)
10001ef4:	a8c00117 	ldw	r3,4(r21)
10001ef8:	10c00115 	stw	r3,4(r2)
10001efc:	a8c00217 	ldw	r3,8(r21)
10001f00:	10c00215 	stw	r3,8(r2)
10001f04:	b447883a 	add	r3,r22,r17
10001f08:	bc45c83a 	sub	r2,r23,r17
10001f0c:	e0c00215 	stw	r3,8(fp)
10001f10:	10800054 	ori	r2,r2,1
10001f14:	18800115 	stw	r2,4(r3)
10001f18:	b0800117 	ldw	r2,4(r22)
10001f1c:	a009883a 	mov	r4,r20
10001f20:	1080004c 	andi	r2,r2,1
10001f24:	1462b03a 	or	r17,r2,r17
10001f28:	b4400115 	stw	r17,4(r22)
10001f2c:	000366c0 	call	1000366c <__malloc_unlock>
10001f30:	9005883a 	mov	r2,r18
10001f34:	003f4006 	br	10001c38 <__alt_data_end+0xf8001c38>
10001f38:	a8c00217 	ldw	r3,8(r21)
10001f3c:	90c00215 	stw	r3,8(r18)
10001f40:	a8c00317 	ldw	r3,12(r21)
10001f44:	90c00315 	stw	r3,12(r18)
10001f48:	30801126 	beq	r6,r2,10001f90 <_realloc_r+0x4c8>
10001f4c:	90800404 	addi	r2,r18,16
10001f50:	a8c00404 	addi	r3,r21,16
10001f54:	003f1906 	br	10001bbc <__alt_data_end+0xf8001bbc>
10001f58:	90ffff17 	ldw	r3,-4(r18)
10001f5c:	00bfff04 	movi	r2,-4
10001f60:	a825883a 	mov	r18,r21
10001f64:	1884703a 	and	r2,r3,r2
10001f68:	80a1883a 	add	r16,r16,r2
10001f6c:	003f2406 	br	10001c00 <__alt_data_end+0xf8001c00>
10001f70:	a8800217 	ldw	r2,8(r21)
10001f74:	b0800415 	stw	r2,16(r22)
10001f78:	a8800317 	ldw	r2,12(r21)
10001f7c:	b0800515 	stw	r2,20(r22)
10001f80:	31000a26 	beq	r6,r4,10001fac <_realloc_r+0x4e4>
10001f84:	b0800604 	addi	r2,r22,24
10001f88:	ad400404 	addi	r21,r21,16
10001f8c:	003fa906 	br	10001e34 <__alt_data_end+0xf8001e34>
10001f90:	a9000417 	ldw	r4,16(r21)
10001f94:	90800604 	addi	r2,r18,24
10001f98:	a8c00604 	addi	r3,r21,24
10001f9c:	91000415 	stw	r4,16(r18)
10001fa0:	a9000517 	ldw	r4,20(r21)
10001fa4:	91000515 	stw	r4,20(r18)
10001fa8:	003f0406 	br	10001bbc <__alt_data_end+0xf8001bbc>
10001fac:	a8c00417 	ldw	r3,16(r21)
10001fb0:	ad400604 	addi	r21,r21,24
10001fb4:	b0800804 	addi	r2,r22,32
10001fb8:	b0c00615 	stw	r3,24(r22)
10001fbc:	a8ffff17 	ldw	r3,-4(r21)
10001fc0:	b0c00715 	stw	r3,28(r22)
10001fc4:	003f9b06 	br	10001e34 <__alt_data_end+0xf8001e34>
10001fc8:	9005883a 	mov	r2,r18
10001fcc:	003fc706 	br	10001eec <__alt_data_end+0xf8001eec>
10001fd0:	a80b883a 	mov	r5,r21
10001fd4:	9009883a 	mov	r4,r18
10001fd8:	00018440 	call	10001844 <memmove>
10001fdc:	003fc906 	br	10001f04 <__alt_data_end+0xf8001f04>
10001fe0:	a8800217 	ldw	r2,8(r21)
10001fe4:	b0800415 	stw	r2,16(r22)
10001fe8:	a8800317 	ldw	r2,12(r21)
10001fec:	b0800515 	stw	r2,20(r22)
10001ff0:	31000726 	beq	r6,r4,10002010 <_realloc_r+0x548>
10001ff4:	b0800604 	addi	r2,r22,24
10001ff8:	ad400404 	addi	r21,r21,16
10001ffc:	003fbb06 	br	10001eec <__alt_data_end+0xf8001eec>
10002000:	a009883a 	mov	r4,r20
10002004:	000366c0 	call	1000366c <__malloc_unlock>
10002008:	0005883a 	mov	r2,zero
1000200c:	003f0a06 	br	10001c38 <__alt_data_end+0xf8001c38>
10002010:	a8c00417 	ldw	r3,16(r21)
10002014:	ad400604 	addi	r21,r21,24
10002018:	b0800804 	addi	r2,r22,32
1000201c:	b0c00615 	stw	r3,24(r22)
10002020:	a8ffff17 	ldw	r3,-4(r21)
10002024:	b0c00715 	stw	r3,28(r22)
10002028:	003fb006 	br	10001eec <__alt_data_end+0xf8001eec>

1000202c <_sbrk_r>:
1000202c:	defffd04 	addi	sp,sp,-12
10002030:	dc000015 	stw	r16,0(sp)
10002034:	04040074 	movhi	r16,4097
10002038:	dc400115 	stw	r17,4(sp)
1000203c:	84231e04 	addi	r16,r16,-29576
10002040:	2023883a 	mov	r17,r4
10002044:	2809883a 	mov	r4,r5
10002048:	dfc00215 	stw	ra,8(sp)
1000204c:	80000015 	stw	zero,0(r16)
10002050:	00038540 	call	10003854 <sbrk>
10002054:	00ffffc4 	movi	r3,-1
10002058:	10c00526 	beq	r2,r3,10002070 <_sbrk_r+0x44>
1000205c:	dfc00217 	ldw	ra,8(sp)
10002060:	dc400117 	ldw	r17,4(sp)
10002064:	dc000017 	ldw	r16,0(sp)
10002068:	dec00304 	addi	sp,sp,12
1000206c:	f800283a 	ret
10002070:	80c00017 	ldw	r3,0(r16)
10002074:	183ff926 	beq	r3,zero,1000205c <__alt_data_end+0xf800205c>
10002078:	88c00015 	stw	r3,0(r17)
1000207c:	003ff706 	br	1000205c <__alt_data_end+0xf800205c>

10002080 <__sread>:
10002080:	defffe04 	addi	sp,sp,-8
10002084:	dc000015 	stw	r16,0(sp)
10002088:	2821883a 	mov	r16,r5
1000208c:	2940038f 	ldh	r5,14(r5)
10002090:	dfc00115 	stw	ra,4(sp)
10002094:	0002dc00 	call	10002dc0 <_read_r>
10002098:	10000716 	blt	r2,zero,100020b8 <__sread+0x38>
1000209c:	80c01417 	ldw	r3,80(r16)
100020a0:	1887883a 	add	r3,r3,r2
100020a4:	80c01415 	stw	r3,80(r16)
100020a8:	dfc00117 	ldw	ra,4(sp)
100020ac:	dc000017 	ldw	r16,0(sp)
100020b0:	dec00204 	addi	sp,sp,8
100020b4:	f800283a 	ret
100020b8:	80c0030b 	ldhu	r3,12(r16)
100020bc:	18fbffcc 	andi	r3,r3,61439
100020c0:	80c0030d 	sth	r3,12(r16)
100020c4:	dfc00117 	ldw	ra,4(sp)
100020c8:	dc000017 	ldw	r16,0(sp)
100020cc:	dec00204 	addi	sp,sp,8
100020d0:	f800283a 	ret

100020d4 <__seofread>:
100020d4:	0005883a 	mov	r2,zero
100020d8:	f800283a 	ret

100020dc <__swrite>:
100020dc:	2880030b 	ldhu	r2,12(r5)
100020e0:	defffb04 	addi	sp,sp,-20
100020e4:	dcc00315 	stw	r19,12(sp)
100020e8:	dc800215 	stw	r18,8(sp)
100020ec:	dc400115 	stw	r17,4(sp)
100020f0:	dc000015 	stw	r16,0(sp)
100020f4:	dfc00415 	stw	ra,16(sp)
100020f8:	10c0400c 	andi	r3,r2,256
100020fc:	2821883a 	mov	r16,r5
10002100:	2023883a 	mov	r17,r4
10002104:	3025883a 	mov	r18,r6
10002108:	3827883a 	mov	r19,r7
1000210c:	18000526 	beq	r3,zero,10002124 <__swrite+0x48>
10002110:	2940038f 	ldh	r5,14(r5)
10002114:	01c00084 	movi	r7,2
10002118:	000d883a 	mov	r6,zero
1000211c:	0002ba40 	call	10002ba4 <_lseek_r>
10002120:	8080030b 	ldhu	r2,12(r16)
10002124:	8140038f 	ldh	r5,14(r16)
10002128:	10bbffcc 	andi	r2,r2,61439
1000212c:	980f883a 	mov	r7,r19
10002130:	900d883a 	mov	r6,r18
10002134:	8809883a 	mov	r4,r17
10002138:	8080030d 	sth	r2,12(r16)
1000213c:	dfc00417 	ldw	ra,16(sp)
10002140:	dcc00317 	ldw	r19,12(sp)
10002144:	dc800217 	ldw	r18,8(sp)
10002148:	dc400117 	ldw	r17,4(sp)
1000214c:	dc000017 	ldw	r16,0(sp)
10002150:	dec00504 	addi	sp,sp,20
10002154:	00021bc1 	jmpi	100021bc <_write_r>

10002158 <__sseek>:
10002158:	defffe04 	addi	sp,sp,-8
1000215c:	dc000015 	stw	r16,0(sp)
10002160:	2821883a 	mov	r16,r5
10002164:	2940038f 	ldh	r5,14(r5)
10002168:	dfc00115 	stw	ra,4(sp)
1000216c:	0002ba40 	call	10002ba4 <_lseek_r>
10002170:	00ffffc4 	movi	r3,-1
10002174:	10c00826 	beq	r2,r3,10002198 <__sseek+0x40>
10002178:	80c0030b 	ldhu	r3,12(r16)
1000217c:	80801415 	stw	r2,80(r16)
10002180:	18c40014 	ori	r3,r3,4096
10002184:	80c0030d 	sth	r3,12(r16)
10002188:	dfc00117 	ldw	ra,4(sp)
1000218c:	dc000017 	ldw	r16,0(sp)
10002190:	dec00204 	addi	sp,sp,8
10002194:	f800283a 	ret
10002198:	80c0030b 	ldhu	r3,12(r16)
1000219c:	18fbffcc 	andi	r3,r3,61439
100021a0:	80c0030d 	sth	r3,12(r16)
100021a4:	dfc00117 	ldw	ra,4(sp)
100021a8:	dc000017 	ldw	r16,0(sp)
100021ac:	dec00204 	addi	sp,sp,8
100021b0:	f800283a 	ret

100021b4 <__sclose>:
100021b4:	2940038f 	ldh	r5,14(r5)
100021b8:	00023701 	jmpi	10002370 <_close_r>

100021bc <_write_r>:
100021bc:	defffd04 	addi	sp,sp,-12
100021c0:	2805883a 	mov	r2,r5
100021c4:	dc000015 	stw	r16,0(sp)
100021c8:	04040074 	movhi	r16,4097
100021cc:	dc400115 	stw	r17,4(sp)
100021d0:	300b883a 	mov	r5,r6
100021d4:	84231e04 	addi	r16,r16,-29576
100021d8:	2023883a 	mov	r17,r4
100021dc:	380d883a 	mov	r6,r7
100021e0:	1009883a 	mov	r4,r2
100021e4:	dfc00215 	stw	ra,8(sp)
100021e8:	80000015 	stw	zero,0(r16)
100021ec:	00039400 	call	10003940 <write>
100021f0:	00ffffc4 	movi	r3,-1
100021f4:	10c00526 	beq	r2,r3,1000220c <_write_r+0x50>
100021f8:	dfc00217 	ldw	ra,8(sp)
100021fc:	dc400117 	ldw	r17,4(sp)
10002200:	dc000017 	ldw	r16,0(sp)
10002204:	dec00304 	addi	sp,sp,12
10002208:	f800283a 	ret
1000220c:	80c00017 	ldw	r3,0(r16)
10002210:	183ff926 	beq	r3,zero,100021f8 <__alt_data_end+0xf80021f8>
10002214:	88c00015 	stw	r3,0(r17)
10002218:	003ff706 	br	100021f8 <__alt_data_end+0xf80021f8>

1000221c <__swsetup_r>:
1000221c:	00840034 	movhi	r2,4096
10002220:	defffd04 	addi	sp,sp,-12
10002224:	109c7304 	addi	r2,r2,29132
10002228:	dc400115 	stw	r17,4(sp)
1000222c:	2023883a 	mov	r17,r4
10002230:	11000017 	ldw	r4,0(r2)
10002234:	dc000015 	stw	r16,0(sp)
10002238:	dfc00215 	stw	ra,8(sp)
1000223c:	2821883a 	mov	r16,r5
10002240:	20000226 	beq	r4,zero,1000224c <__swsetup_r+0x30>
10002244:	20800e17 	ldw	r2,56(r4)
10002248:	10003126 	beq	r2,zero,10002310 <__swsetup_r+0xf4>
1000224c:	8080030b 	ldhu	r2,12(r16)
10002250:	10c0020c 	andi	r3,r2,8
10002254:	1009883a 	mov	r4,r2
10002258:	18000f26 	beq	r3,zero,10002298 <__swsetup_r+0x7c>
1000225c:	80c00417 	ldw	r3,16(r16)
10002260:	18001526 	beq	r3,zero,100022b8 <__swsetup_r+0x9c>
10002264:	1100004c 	andi	r4,r2,1
10002268:	20001c1e 	bne	r4,zero,100022dc <__swsetup_r+0xc0>
1000226c:	1080008c 	andi	r2,r2,2
10002270:	1000291e 	bne	r2,zero,10002318 <__swsetup_r+0xfc>
10002274:	80800517 	ldw	r2,20(r16)
10002278:	80800215 	stw	r2,8(r16)
1000227c:	18001c26 	beq	r3,zero,100022f0 <__swsetup_r+0xd4>
10002280:	0005883a 	mov	r2,zero
10002284:	dfc00217 	ldw	ra,8(sp)
10002288:	dc400117 	ldw	r17,4(sp)
1000228c:	dc000017 	ldw	r16,0(sp)
10002290:	dec00304 	addi	sp,sp,12
10002294:	f800283a 	ret
10002298:	2080040c 	andi	r2,r4,16
1000229c:	10002e26 	beq	r2,zero,10002358 <__swsetup_r+0x13c>
100022a0:	2080010c 	andi	r2,r4,4
100022a4:	10001e1e 	bne	r2,zero,10002320 <__swsetup_r+0x104>
100022a8:	80c00417 	ldw	r3,16(r16)
100022ac:	20800214 	ori	r2,r4,8
100022b0:	8080030d 	sth	r2,12(r16)
100022b4:	183feb1e 	bne	r3,zero,10002264 <__alt_data_end+0xf8002264>
100022b8:	1100a00c 	andi	r4,r2,640
100022bc:	01408004 	movi	r5,512
100022c0:	217fe826 	beq	r4,r5,10002264 <__alt_data_end+0xf8002264>
100022c4:	800b883a 	mov	r5,r16
100022c8:	8809883a 	mov	r4,r17
100022cc:	0002c040 	call	10002c04 <__smakebuf_r>
100022d0:	8080030b 	ldhu	r2,12(r16)
100022d4:	80c00417 	ldw	r3,16(r16)
100022d8:	003fe206 	br	10002264 <__alt_data_end+0xf8002264>
100022dc:	80800517 	ldw	r2,20(r16)
100022e0:	80000215 	stw	zero,8(r16)
100022e4:	0085c83a 	sub	r2,zero,r2
100022e8:	80800615 	stw	r2,24(r16)
100022ec:	183fe41e 	bne	r3,zero,10002280 <__alt_data_end+0xf8002280>
100022f0:	80c0030b 	ldhu	r3,12(r16)
100022f4:	0005883a 	mov	r2,zero
100022f8:	1900200c 	andi	r4,r3,128
100022fc:	203fe126 	beq	r4,zero,10002284 <__alt_data_end+0xf8002284>
10002300:	18c01014 	ori	r3,r3,64
10002304:	80c0030d 	sth	r3,12(r16)
10002308:	00bfffc4 	movi	r2,-1
1000230c:	003fdd06 	br	10002284 <__alt_data_end+0xf8002284>
10002310:	000076c0 	call	1000076c <__sinit>
10002314:	003fcd06 	br	1000224c <__alt_data_end+0xf800224c>
10002318:	0005883a 	mov	r2,zero
1000231c:	003fd606 	br	10002278 <__alt_data_end+0xf8002278>
10002320:	81400c17 	ldw	r5,48(r16)
10002324:	28000626 	beq	r5,zero,10002340 <__swsetup_r+0x124>
10002328:	80801004 	addi	r2,r16,64
1000232c:	28800326 	beq	r5,r2,1000233c <__swsetup_r+0x120>
10002330:	8809883a 	mov	r4,r17
10002334:	00028940 	call	10002894 <_free_r>
10002338:	8100030b 	ldhu	r4,12(r16)
1000233c:	80000c15 	stw	zero,48(r16)
10002340:	80c00417 	ldw	r3,16(r16)
10002344:	00bff6c4 	movi	r2,-37
10002348:	1108703a 	and	r4,r2,r4
1000234c:	80000115 	stw	zero,4(r16)
10002350:	80c00015 	stw	r3,0(r16)
10002354:	003fd506 	br	100022ac <__alt_data_end+0xf80022ac>
10002358:	00800244 	movi	r2,9
1000235c:	88800015 	stw	r2,0(r17)
10002360:	20801014 	ori	r2,r4,64
10002364:	8080030d 	sth	r2,12(r16)
10002368:	00bfffc4 	movi	r2,-1
1000236c:	003fc506 	br	10002284 <__alt_data_end+0xf8002284>

10002370 <_close_r>:
10002370:	defffd04 	addi	sp,sp,-12
10002374:	dc000015 	stw	r16,0(sp)
10002378:	04040074 	movhi	r16,4097
1000237c:	dc400115 	stw	r17,4(sp)
10002380:	84231e04 	addi	r16,r16,-29576
10002384:	2023883a 	mov	r17,r4
10002388:	2809883a 	mov	r4,r5
1000238c:	dfc00215 	stw	ra,8(sp)
10002390:	80000015 	stw	zero,0(r16)
10002394:	00030e80 	call	100030e8 <close>
10002398:	00ffffc4 	movi	r3,-1
1000239c:	10c00526 	beq	r2,r3,100023b4 <_close_r+0x44>
100023a0:	dfc00217 	ldw	ra,8(sp)
100023a4:	dc400117 	ldw	r17,4(sp)
100023a8:	dc000017 	ldw	r16,0(sp)
100023ac:	dec00304 	addi	sp,sp,12
100023b0:	f800283a 	ret
100023b4:	80c00017 	ldw	r3,0(r16)
100023b8:	183ff926 	beq	r3,zero,100023a0 <__alt_data_end+0xf80023a0>
100023bc:	88c00015 	stw	r3,0(r17)
100023c0:	003ff706 	br	100023a0 <__alt_data_end+0xf80023a0>

100023c4 <_fclose_r>:
100023c4:	28003926 	beq	r5,zero,100024ac <_fclose_r+0xe8>
100023c8:	defffc04 	addi	sp,sp,-16
100023cc:	dc400115 	stw	r17,4(sp)
100023d0:	dc000015 	stw	r16,0(sp)
100023d4:	dfc00315 	stw	ra,12(sp)
100023d8:	dc800215 	stw	r18,8(sp)
100023dc:	2023883a 	mov	r17,r4
100023e0:	2821883a 	mov	r16,r5
100023e4:	20000226 	beq	r4,zero,100023f0 <_fclose_r+0x2c>
100023e8:	20800e17 	ldw	r2,56(r4)
100023ec:	10002726 	beq	r2,zero,1000248c <_fclose_r+0xc8>
100023f0:	8080030f 	ldh	r2,12(r16)
100023f4:	1000071e 	bne	r2,zero,10002414 <_fclose_r+0x50>
100023f8:	0005883a 	mov	r2,zero
100023fc:	dfc00317 	ldw	ra,12(sp)
10002400:	dc800217 	ldw	r18,8(sp)
10002404:	dc400117 	ldw	r17,4(sp)
10002408:	dc000017 	ldw	r16,0(sp)
1000240c:	dec00404 	addi	sp,sp,16
10002410:	f800283a 	ret
10002414:	800b883a 	mov	r5,r16
10002418:	8809883a 	mov	r4,r17
1000241c:	00024c80 	call	100024c8 <__sflush_r>
10002420:	1025883a 	mov	r18,r2
10002424:	80800b17 	ldw	r2,44(r16)
10002428:	10000426 	beq	r2,zero,1000243c <_fclose_r+0x78>
1000242c:	81400717 	ldw	r5,28(r16)
10002430:	8809883a 	mov	r4,r17
10002434:	103ee83a 	callr	r2
10002438:	10001616 	blt	r2,zero,10002494 <_fclose_r+0xd0>
1000243c:	8080030b 	ldhu	r2,12(r16)
10002440:	1080200c 	andi	r2,r2,128
10002444:	1000151e 	bne	r2,zero,1000249c <_fclose_r+0xd8>
10002448:	81400c17 	ldw	r5,48(r16)
1000244c:	28000526 	beq	r5,zero,10002464 <_fclose_r+0xa0>
10002450:	80801004 	addi	r2,r16,64
10002454:	28800226 	beq	r5,r2,10002460 <_fclose_r+0x9c>
10002458:	8809883a 	mov	r4,r17
1000245c:	00028940 	call	10002894 <_free_r>
10002460:	80000c15 	stw	zero,48(r16)
10002464:	81401117 	ldw	r5,68(r16)
10002468:	28000326 	beq	r5,zero,10002478 <_fclose_r+0xb4>
1000246c:	8809883a 	mov	r4,r17
10002470:	00028940 	call	10002894 <_free_r>
10002474:	80001115 	stw	zero,68(r16)
10002478:	000077c0 	call	1000077c <__sfp_lock_acquire>
1000247c:	8000030d 	sth	zero,12(r16)
10002480:	00007800 	call	10000780 <__sfp_lock_release>
10002484:	9005883a 	mov	r2,r18
10002488:	003fdc06 	br	100023fc <__alt_data_end+0xf80023fc>
1000248c:	000076c0 	call	1000076c <__sinit>
10002490:	003fd706 	br	100023f0 <__alt_data_end+0xf80023f0>
10002494:	04bfffc4 	movi	r18,-1
10002498:	003fe806 	br	1000243c <__alt_data_end+0xf800243c>
1000249c:	81400417 	ldw	r5,16(r16)
100024a0:	8809883a 	mov	r4,r17
100024a4:	00028940 	call	10002894 <_free_r>
100024a8:	003fe706 	br	10002448 <__alt_data_end+0xf8002448>
100024ac:	0005883a 	mov	r2,zero
100024b0:	f800283a 	ret

100024b4 <fclose>:
100024b4:	00840034 	movhi	r2,4096
100024b8:	109c7304 	addi	r2,r2,29132
100024bc:	200b883a 	mov	r5,r4
100024c0:	11000017 	ldw	r4,0(r2)
100024c4:	00023c41 	jmpi	100023c4 <_fclose_r>

100024c8 <__sflush_r>:
100024c8:	2880030b 	ldhu	r2,12(r5)
100024cc:	defffb04 	addi	sp,sp,-20
100024d0:	dcc00315 	stw	r19,12(sp)
100024d4:	dc400115 	stw	r17,4(sp)
100024d8:	dfc00415 	stw	ra,16(sp)
100024dc:	dc800215 	stw	r18,8(sp)
100024e0:	dc000015 	stw	r16,0(sp)
100024e4:	10c0020c 	andi	r3,r2,8
100024e8:	2823883a 	mov	r17,r5
100024ec:	2027883a 	mov	r19,r4
100024f0:	1800311e 	bne	r3,zero,100025b8 <__sflush_r+0xf0>
100024f4:	28c00117 	ldw	r3,4(r5)
100024f8:	10820014 	ori	r2,r2,2048
100024fc:	2880030d 	sth	r2,12(r5)
10002500:	00c04b0e 	bge	zero,r3,10002630 <__sflush_r+0x168>
10002504:	8a000a17 	ldw	r8,40(r17)
10002508:	40002326 	beq	r8,zero,10002598 <__sflush_r+0xd0>
1000250c:	9c000017 	ldw	r16,0(r19)
10002510:	10c4000c 	andi	r3,r2,4096
10002514:	98000015 	stw	zero,0(r19)
10002518:	18004826 	beq	r3,zero,1000263c <__sflush_r+0x174>
1000251c:	89801417 	ldw	r6,80(r17)
10002520:	10c0010c 	andi	r3,r2,4
10002524:	18000626 	beq	r3,zero,10002540 <__sflush_r+0x78>
10002528:	88c00117 	ldw	r3,4(r17)
1000252c:	88800c17 	ldw	r2,48(r17)
10002530:	30cdc83a 	sub	r6,r6,r3
10002534:	10000226 	beq	r2,zero,10002540 <__sflush_r+0x78>
10002538:	88800f17 	ldw	r2,60(r17)
1000253c:	308dc83a 	sub	r6,r6,r2
10002540:	89400717 	ldw	r5,28(r17)
10002544:	000f883a 	mov	r7,zero
10002548:	9809883a 	mov	r4,r19
1000254c:	403ee83a 	callr	r8
10002550:	00ffffc4 	movi	r3,-1
10002554:	10c04426 	beq	r2,r3,10002668 <__sflush_r+0x1a0>
10002558:	88c0030b 	ldhu	r3,12(r17)
1000255c:	89000417 	ldw	r4,16(r17)
10002560:	88000115 	stw	zero,4(r17)
10002564:	197dffcc 	andi	r5,r3,63487
10002568:	8940030d 	sth	r5,12(r17)
1000256c:	89000015 	stw	r4,0(r17)
10002570:	18c4000c 	andi	r3,r3,4096
10002574:	18002c1e 	bne	r3,zero,10002628 <__sflush_r+0x160>
10002578:	89400c17 	ldw	r5,48(r17)
1000257c:	9c000015 	stw	r16,0(r19)
10002580:	28000526 	beq	r5,zero,10002598 <__sflush_r+0xd0>
10002584:	88801004 	addi	r2,r17,64
10002588:	28800226 	beq	r5,r2,10002594 <__sflush_r+0xcc>
1000258c:	9809883a 	mov	r4,r19
10002590:	00028940 	call	10002894 <_free_r>
10002594:	88000c15 	stw	zero,48(r17)
10002598:	0005883a 	mov	r2,zero
1000259c:	dfc00417 	ldw	ra,16(sp)
100025a0:	dcc00317 	ldw	r19,12(sp)
100025a4:	dc800217 	ldw	r18,8(sp)
100025a8:	dc400117 	ldw	r17,4(sp)
100025ac:	dc000017 	ldw	r16,0(sp)
100025b0:	dec00504 	addi	sp,sp,20
100025b4:	f800283a 	ret
100025b8:	2c800417 	ldw	r18,16(r5)
100025bc:	903ff626 	beq	r18,zero,10002598 <__alt_data_end+0xf8002598>
100025c0:	2c000017 	ldw	r16,0(r5)
100025c4:	108000cc 	andi	r2,r2,3
100025c8:	2c800015 	stw	r18,0(r5)
100025cc:	84a1c83a 	sub	r16,r16,r18
100025d0:	1000131e 	bne	r2,zero,10002620 <__sflush_r+0x158>
100025d4:	28800517 	ldw	r2,20(r5)
100025d8:	88800215 	stw	r2,8(r17)
100025dc:	04000316 	blt	zero,r16,100025ec <__sflush_r+0x124>
100025e0:	003fed06 	br	10002598 <__alt_data_end+0xf8002598>
100025e4:	90a5883a 	add	r18,r18,r2
100025e8:	043feb0e 	bge	zero,r16,10002598 <__alt_data_end+0xf8002598>
100025ec:	88800917 	ldw	r2,36(r17)
100025f0:	89400717 	ldw	r5,28(r17)
100025f4:	800f883a 	mov	r7,r16
100025f8:	900d883a 	mov	r6,r18
100025fc:	9809883a 	mov	r4,r19
10002600:	103ee83a 	callr	r2
10002604:	80a1c83a 	sub	r16,r16,r2
10002608:	00bff616 	blt	zero,r2,100025e4 <__alt_data_end+0xf80025e4>
1000260c:	88c0030b 	ldhu	r3,12(r17)
10002610:	00bfffc4 	movi	r2,-1
10002614:	18c01014 	ori	r3,r3,64
10002618:	88c0030d 	sth	r3,12(r17)
1000261c:	003fdf06 	br	1000259c <__alt_data_end+0xf800259c>
10002620:	0005883a 	mov	r2,zero
10002624:	003fec06 	br	100025d8 <__alt_data_end+0xf80025d8>
10002628:	88801415 	stw	r2,80(r17)
1000262c:	003fd206 	br	10002578 <__alt_data_end+0xf8002578>
10002630:	28c00f17 	ldw	r3,60(r5)
10002634:	00ffb316 	blt	zero,r3,10002504 <__alt_data_end+0xf8002504>
10002638:	003fd706 	br	10002598 <__alt_data_end+0xf8002598>
1000263c:	89400717 	ldw	r5,28(r17)
10002640:	000d883a 	mov	r6,zero
10002644:	01c00044 	movi	r7,1
10002648:	9809883a 	mov	r4,r19
1000264c:	403ee83a 	callr	r8
10002650:	100d883a 	mov	r6,r2
10002654:	00bfffc4 	movi	r2,-1
10002658:	30801426 	beq	r6,r2,100026ac <__sflush_r+0x1e4>
1000265c:	8880030b 	ldhu	r2,12(r17)
10002660:	8a000a17 	ldw	r8,40(r17)
10002664:	003fae06 	br	10002520 <__alt_data_end+0xf8002520>
10002668:	98c00017 	ldw	r3,0(r19)
1000266c:	183fba26 	beq	r3,zero,10002558 <__alt_data_end+0xf8002558>
10002670:	01000744 	movi	r4,29
10002674:	19000626 	beq	r3,r4,10002690 <__sflush_r+0x1c8>
10002678:	01000584 	movi	r4,22
1000267c:	19000426 	beq	r3,r4,10002690 <__sflush_r+0x1c8>
10002680:	88c0030b 	ldhu	r3,12(r17)
10002684:	18c01014 	ori	r3,r3,64
10002688:	88c0030d 	sth	r3,12(r17)
1000268c:	003fc306 	br	1000259c <__alt_data_end+0xf800259c>
10002690:	8880030b 	ldhu	r2,12(r17)
10002694:	88c00417 	ldw	r3,16(r17)
10002698:	88000115 	stw	zero,4(r17)
1000269c:	10bdffcc 	andi	r2,r2,63487
100026a0:	8880030d 	sth	r2,12(r17)
100026a4:	88c00015 	stw	r3,0(r17)
100026a8:	003fb306 	br	10002578 <__alt_data_end+0xf8002578>
100026ac:	98800017 	ldw	r2,0(r19)
100026b0:	103fea26 	beq	r2,zero,1000265c <__alt_data_end+0xf800265c>
100026b4:	00c00744 	movi	r3,29
100026b8:	10c00226 	beq	r2,r3,100026c4 <__sflush_r+0x1fc>
100026bc:	00c00584 	movi	r3,22
100026c0:	10c0031e 	bne	r2,r3,100026d0 <__sflush_r+0x208>
100026c4:	9c000015 	stw	r16,0(r19)
100026c8:	0005883a 	mov	r2,zero
100026cc:	003fb306 	br	1000259c <__alt_data_end+0xf800259c>
100026d0:	88c0030b 	ldhu	r3,12(r17)
100026d4:	3005883a 	mov	r2,r6
100026d8:	18c01014 	ori	r3,r3,64
100026dc:	88c0030d 	sth	r3,12(r17)
100026e0:	003fae06 	br	1000259c <__alt_data_end+0xf800259c>

100026e4 <_fflush_r>:
100026e4:	defffd04 	addi	sp,sp,-12
100026e8:	dc000115 	stw	r16,4(sp)
100026ec:	dfc00215 	stw	ra,8(sp)
100026f0:	2021883a 	mov	r16,r4
100026f4:	20000226 	beq	r4,zero,10002700 <_fflush_r+0x1c>
100026f8:	20800e17 	ldw	r2,56(r4)
100026fc:	10000c26 	beq	r2,zero,10002730 <_fflush_r+0x4c>
10002700:	2880030f 	ldh	r2,12(r5)
10002704:	1000051e 	bne	r2,zero,1000271c <_fflush_r+0x38>
10002708:	0005883a 	mov	r2,zero
1000270c:	dfc00217 	ldw	ra,8(sp)
10002710:	dc000117 	ldw	r16,4(sp)
10002714:	dec00304 	addi	sp,sp,12
10002718:	f800283a 	ret
1000271c:	8009883a 	mov	r4,r16
10002720:	dfc00217 	ldw	ra,8(sp)
10002724:	dc000117 	ldw	r16,4(sp)
10002728:	dec00304 	addi	sp,sp,12
1000272c:	00024c81 	jmpi	100024c8 <__sflush_r>
10002730:	d9400015 	stw	r5,0(sp)
10002734:	000076c0 	call	1000076c <__sinit>
10002738:	d9400017 	ldw	r5,0(sp)
1000273c:	003ff006 	br	10002700 <__alt_data_end+0xf8002700>

10002740 <fflush>:
10002740:	20000526 	beq	r4,zero,10002758 <fflush+0x18>
10002744:	00840034 	movhi	r2,4096
10002748:	109c7304 	addi	r2,r2,29132
1000274c:	200b883a 	mov	r5,r4
10002750:	11000017 	ldw	r4,0(r2)
10002754:	00026e41 	jmpi	100026e4 <_fflush_r>
10002758:	00840034 	movhi	r2,4096
1000275c:	109c7204 	addi	r2,r2,29128
10002760:	11000017 	ldw	r4,0(r2)
10002764:	01440034 	movhi	r5,4096
10002768:	2949b904 	addi	r5,r5,9956
1000276c:	0000d481 	jmpi	10000d48 <_fwalk_reent>

10002770 <_malloc_trim_r>:
10002770:	defffb04 	addi	sp,sp,-20
10002774:	dcc00315 	stw	r19,12(sp)
10002778:	04c40034 	movhi	r19,4096
1000277c:	dc800215 	stw	r18,8(sp)
10002780:	dc400115 	stw	r17,4(sp)
10002784:	dc000015 	stw	r16,0(sp)
10002788:	dfc00415 	stw	ra,16(sp)
1000278c:	2821883a 	mov	r16,r5
10002790:	9cd6ee04 	addi	r19,r19,23480
10002794:	2025883a 	mov	r18,r4
10002798:	00036480 	call	10003648 <__malloc_lock>
1000279c:	98800217 	ldw	r2,8(r19)
100027a0:	14400117 	ldw	r17,4(r2)
100027a4:	00bfff04 	movi	r2,-4
100027a8:	88a2703a 	and	r17,r17,r2
100027ac:	8c21c83a 	sub	r16,r17,r16
100027b0:	8403fbc4 	addi	r16,r16,4079
100027b4:	8020d33a 	srli	r16,r16,12
100027b8:	0083ffc4 	movi	r2,4095
100027bc:	843fffc4 	addi	r16,r16,-1
100027c0:	8020933a 	slli	r16,r16,12
100027c4:	1400060e 	bge	r2,r16,100027e0 <_malloc_trim_r+0x70>
100027c8:	000b883a 	mov	r5,zero
100027cc:	9009883a 	mov	r4,r18
100027d0:	000202c0 	call	1000202c <_sbrk_r>
100027d4:	98c00217 	ldw	r3,8(r19)
100027d8:	1c47883a 	add	r3,r3,r17
100027dc:	10c00a26 	beq	r2,r3,10002808 <_malloc_trim_r+0x98>
100027e0:	9009883a 	mov	r4,r18
100027e4:	000366c0 	call	1000366c <__malloc_unlock>
100027e8:	0005883a 	mov	r2,zero
100027ec:	dfc00417 	ldw	ra,16(sp)
100027f0:	dcc00317 	ldw	r19,12(sp)
100027f4:	dc800217 	ldw	r18,8(sp)
100027f8:	dc400117 	ldw	r17,4(sp)
100027fc:	dc000017 	ldw	r16,0(sp)
10002800:	dec00504 	addi	sp,sp,20
10002804:	f800283a 	ret
10002808:	040bc83a 	sub	r5,zero,r16
1000280c:	9009883a 	mov	r4,r18
10002810:	000202c0 	call	1000202c <_sbrk_r>
10002814:	00ffffc4 	movi	r3,-1
10002818:	10c00d26 	beq	r2,r3,10002850 <_malloc_trim_r+0xe0>
1000281c:	00c40074 	movhi	r3,4097
10002820:	18e32604 	addi	r3,r3,-29544
10002824:	18800017 	ldw	r2,0(r3)
10002828:	99000217 	ldw	r4,8(r19)
1000282c:	8c23c83a 	sub	r17,r17,r16
10002830:	8c400054 	ori	r17,r17,1
10002834:	1421c83a 	sub	r16,r2,r16
10002838:	24400115 	stw	r17,4(r4)
1000283c:	9009883a 	mov	r4,r18
10002840:	1c000015 	stw	r16,0(r3)
10002844:	000366c0 	call	1000366c <__malloc_unlock>
10002848:	00800044 	movi	r2,1
1000284c:	003fe706 	br	100027ec <__alt_data_end+0xf80027ec>
10002850:	000b883a 	mov	r5,zero
10002854:	9009883a 	mov	r4,r18
10002858:	000202c0 	call	1000202c <_sbrk_r>
1000285c:	99000217 	ldw	r4,8(r19)
10002860:	014003c4 	movi	r5,15
10002864:	1107c83a 	sub	r3,r2,r4
10002868:	28ffdd0e 	bge	r5,r3,100027e0 <__alt_data_end+0xf80027e0>
1000286c:	01440034 	movhi	r5,4096
10002870:	295c7404 	addi	r5,r5,29136
10002874:	29400017 	ldw	r5,0(r5)
10002878:	18c00054 	ori	r3,r3,1
1000287c:	20c00115 	stw	r3,4(r4)
10002880:	00c40074 	movhi	r3,4097
10002884:	1145c83a 	sub	r2,r2,r5
10002888:	18e32604 	addi	r3,r3,-29544
1000288c:	18800015 	stw	r2,0(r3)
10002890:	003fd306 	br	100027e0 <__alt_data_end+0xf80027e0>

10002894 <_free_r>:
10002894:	28004126 	beq	r5,zero,1000299c <_free_r+0x108>
10002898:	defffd04 	addi	sp,sp,-12
1000289c:	dc400115 	stw	r17,4(sp)
100028a0:	dc000015 	stw	r16,0(sp)
100028a4:	2023883a 	mov	r17,r4
100028a8:	2821883a 	mov	r16,r5
100028ac:	dfc00215 	stw	ra,8(sp)
100028b0:	00036480 	call	10003648 <__malloc_lock>
100028b4:	81ffff17 	ldw	r7,-4(r16)
100028b8:	00bfff84 	movi	r2,-2
100028bc:	01040034 	movhi	r4,4096
100028c0:	81bffe04 	addi	r6,r16,-8
100028c4:	3884703a 	and	r2,r7,r2
100028c8:	2116ee04 	addi	r4,r4,23480
100028cc:	308b883a 	add	r5,r6,r2
100028d0:	2a400117 	ldw	r9,4(r5)
100028d4:	22000217 	ldw	r8,8(r4)
100028d8:	00ffff04 	movi	r3,-4
100028dc:	48c6703a 	and	r3,r9,r3
100028e0:	2a005726 	beq	r5,r8,10002a40 <_free_r+0x1ac>
100028e4:	28c00115 	stw	r3,4(r5)
100028e8:	39c0004c 	andi	r7,r7,1
100028ec:	3800091e 	bne	r7,zero,10002914 <_free_r+0x80>
100028f0:	823ffe17 	ldw	r8,-8(r16)
100028f4:	22400204 	addi	r9,r4,8
100028f8:	320dc83a 	sub	r6,r6,r8
100028fc:	31c00217 	ldw	r7,8(r6)
10002900:	1205883a 	add	r2,r2,r8
10002904:	3a406526 	beq	r7,r9,10002a9c <_free_r+0x208>
10002908:	32000317 	ldw	r8,12(r6)
1000290c:	3a000315 	stw	r8,12(r7)
10002910:	41c00215 	stw	r7,8(r8)
10002914:	28cf883a 	add	r7,r5,r3
10002918:	39c00117 	ldw	r7,4(r7)
1000291c:	39c0004c 	andi	r7,r7,1
10002920:	38003a26 	beq	r7,zero,10002a0c <_free_r+0x178>
10002924:	10c00054 	ori	r3,r2,1
10002928:	30c00115 	stw	r3,4(r6)
1000292c:	3087883a 	add	r3,r6,r2
10002930:	18800015 	stw	r2,0(r3)
10002934:	00c07fc4 	movi	r3,511
10002938:	18801936 	bltu	r3,r2,100029a0 <_free_r+0x10c>
1000293c:	1004d0fa 	srli	r2,r2,3
10002940:	01c00044 	movi	r7,1
10002944:	21400117 	ldw	r5,4(r4)
10002948:	10c00044 	addi	r3,r2,1
1000294c:	18c7883a 	add	r3,r3,r3
10002950:	1005d0ba 	srai	r2,r2,2
10002954:	18c7883a 	add	r3,r3,r3
10002958:	18c7883a 	add	r3,r3,r3
1000295c:	1907883a 	add	r3,r3,r4
10002960:	3884983a 	sll	r2,r7,r2
10002964:	19c00017 	ldw	r7,0(r3)
10002968:	1a3ffe04 	addi	r8,r3,-8
1000296c:	1144b03a 	or	r2,r2,r5
10002970:	32000315 	stw	r8,12(r6)
10002974:	31c00215 	stw	r7,8(r6)
10002978:	20800115 	stw	r2,4(r4)
1000297c:	19800015 	stw	r6,0(r3)
10002980:	39800315 	stw	r6,12(r7)
10002984:	8809883a 	mov	r4,r17
10002988:	dfc00217 	ldw	ra,8(sp)
1000298c:	dc400117 	ldw	r17,4(sp)
10002990:	dc000017 	ldw	r16,0(sp)
10002994:	dec00304 	addi	sp,sp,12
10002998:	000366c1 	jmpi	1000366c <__malloc_unlock>
1000299c:	f800283a 	ret
100029a0:	100ad27a 	srli	r5,r2,9
100029a4:	00c00104 	movi	r3,4
100029a8:	19404a36 	bltu	r3,r5,10002ad4 <_free_r+0x240>
100029ac:	100ad1ba 	srli	r5,r2,6
100029b0:	28c00e44 	addi	r3,r5,57
100029b4:	18c7883a 	add	r3,r3,r3
100029b8:	29400e04 	addi	r5,r5,56
100029bc:	18c7883a 	add	r3,r3,r3
100029c0:	18c7883a 	add	r3,r3,r3
100029c4:	1909883a 	add	r4,r3,r4
100029c8:	20c00017 	ldw	r3,0(r4)
100029cc:	01c40034 	movhi	r7,4096
100029d0:	213ffe04 	addi	r4,r4,-8
100029d4:	39d6ee04 	addi	r7,r7,23480
100029d8:	20c04426 	beq	r4,r3,10002aec <_free_r+0x258>
100029dc:	01ffff04 	movi	r7,-4
100029e0:	19400117 	ldw	r5,4(r3)
100029e4:	29ca703a 	and	r5,r5,r7
100029e8:	1140022e 	bgeu	r2,r5,100029f4 <_free_r+0x160>
100029ec:	18c00217 	ldw	r3,8(r3)
100029f0:	20fffb1e 	bne	r4,r3,100029e0 <__alt_data_end+0xf80029e0>
100029f4:	19000317 	ldw	r4,12(r3)
100029f8:	31000315 	stw	r4,12(r6)
100029fc:	30c00215 	stw	r3,8(r6)
10002a00:	21800215 	stw	r6,8(r4)
10002a04:	19800315 	stw	r6,12(r3)
10002a08:	003fde06 	br	10002984 <__alt_data_end+0xf8002984>
10002a0c:	29c00217 	ldw	r7,8(r5)
10002a10:	10c5883a 	add	r2,r2,r3
10002a14:	00c40034 	movhi	r3,4096
10002a18:	18d6f004 	addi	r3,r3,23488
10002a1c:	38c03b26 	beq	r7,r3,10002b0c <_free_r+0x278>
10002a20:	2a000317 	ldw	r8,12(r5)
10002a24:	11400054 	ori	r5,r2,1
10002a28:	3087883a 	add	r3,r6,r2
10002a2c:	3a000315 	stw	r8,12(r7)
10002a30:	41c00215 	stw	r7,8(r8)
10002a34:	31400115 	stw	r5,4(r6)
10002a38:	18800015 	stw	r2,0(r3)
10002a3c:	003fbd06 	br	10002934 <__alt_data_end+0xf8002934>
10002a40:	39c0004c 	andi	r7,r7,1
10002a44:	10c5883a 	add	r2,r2,r3
10002a48:	3800071e 	bne	r7,zero,10002a68 <_free_r+0x1d4>
10002a4c:	81fffe17 	ldw	r7,-8(r16)
10002a50:	31cdc83a 	sub	r6,r6,r7
10002a54:	30c00317 	ldw	r3,12(r6)
10002a58:	31400217 	ldw	r5,8(r6)
10002a5c:	11c5883a 	add	r2,r2,r7
10002a60:	28c00315 	stw	r3,12(r5)
10002a64:	19400215 	stw	r5,8(r3)
10002a68:	10c00054 	ori	r3,r2,1
10002a6c:	30c00115 	stw	r3,4(r6)
10002a70:	00c40034 	movhi	r3,4096
10002a74:	18dc7504 	addi	r3,r3,29140
10002a78:	18c00017 	ldw	r3,0(r3)
10002a7c:	21800215 	stw	r6,8(r4)
10002a80:	10ffc036 	bltu	r2,r3,10002984 <__alt_data_end+0xf8002984>
10002a84:	00840074 	movhi	r2,4097
10002a88:	10a31d04 	addi	r2,r2,-29580
10002a8c:	11400017 	ldw	r5,0(r2)
10002a90:	8809883a 	mov	r4,r17
10002a94:	00027700 	call	10002770 <_malloc_trim_r>
10002a98:	003fba06 	br	10002984 <__alt_data_end+0xf8002984>
10002a9c:	28c9883a 	add	r4,r5,r3
10002aa0:	21000117 	ldw	r4,4(r4)
10002aa4:	2100004c 	andi	r4,r4,1
10002aa8:	2000391e 	bne	r4,zero,10002b90 <_free_r+0x2fc>
10002aac:	29c00217 	ldw	r7,8(r5)
10002ab0:	29000317 	ldw	r4,12(r5)
10002ab4:	1885883a 	add	r2,r3,r2
10002ab8:	10c00054 	ori	r3,r2,1
10002abc:	39000315 	stw	r4,12(r7)
10002ac0:	21c00215 	stw	r7,8(r4)
10002ac4:	30c00115 	stw	r3,4(r6)
10002ac8:	308d883a 	add	r6,r6,r2
10002acc:	30800015 	stw	r2,0(r6)
10002ad0:	003fac06 	br	10002984 <__alt_data_end+0xf8002984>
10002ad4:	00c00504 	movi	r3,20
10002ad8:	19401536 	bltu	r3,r5,10002b30 <_free_r+0x29c>
10002adc:	28c01704 	addi	r3,r5,92
10002ae0:	18c7883a 	add	r3,r3,r3
10002ae4:	294016c4 	addi	r5,r5,91
10002ae8:	003fb406 	br	100029bc <__alt_data_end+0xf80029bc>
10002aec:	280bd0ba 	srai	r5,r5,2
10002af0:	00c00044 	movi	r3,1
10002af4:	38800117 	ldw	r2,4(r7)
10002af8:	194a983a 	sll	r5,r3,r5
10002afc:	2007883a 	mov	r3,r4
10002b00:	2884b03a 	or	r2,r5,r2
10002b04:	38800115 	stw	r2,4(r7)
10002b08:	003fbb06 	br	100029f8 <__alt_data_end+0xf80029f8>
10002b0c:	21800515 	stw	r6,20(r4)
10002b10:	21800415 	stw	r6,16(r4)
10002b14:	10c00054 	ori	r3,r2,1
10002b18:	31c00315 	stw	r7,12(r6)
10002b1c:	31c00215 	stw	r7,8(r6)
10002b20:	30c00115 	stw	r3,4(r6)
10002b24:	308d883a 	add	r6,r6,r2
10002b28:	30800015 	stw	r2,0(r6)
10002b2c:	003f9506 	br	10002984 <__alt_data_end+0xf8002984>
10002b30:	00c01504 	movi	r3,84
10002b34:	19400536 	bltu	r3,r5,10002b4c <_free_r+0x2b8>
10002b38:	100ad33a 	srli	r5,r2,12
10002b3c:	28c01bc4 	addi	r3,r5,111
10002b40:	18c7883a 	add	r3,r3,r3
10002b44:	29401b84 	addi	r5,r5,110
10002b48:	003f9c06 	br	100029bc <__alt_data_end+0xf80029bc>
10002b4c:	00c05504 	movi	r3,340
10002b50:	19400536 	bltu	r3,r5,10002b68 <_free_r+0x2d4>
10002b54:	100ad3fa 	srli	r5,r2,15
10002b58:	28c01e04 	addi	r3,r5,120
10002b5c:	18c7883a 	add	r3,r3,r3
10002b60:	29401dc4 	addi	r5,r5,119
10002b64:	003f9506 	br	100029bc <__alt_data_end+0xf80029bc>
10002b68:	00c15504 	movi	r3,1364
10002b6c:	19400536 	bltu	r3,r5,10002b84 <_free_r+0x2f0>
10002b70:	100ad4ba 	srli	r5,r2,18
10002b74:	28c01f44 	addi	r3,r5,125
10002b78:	18c7883a 	add	r3,r3,r3
10002b7c:	29401f04 	addi	r5,r5,124
10002b80:	003f8e06 	br	100029bc <__alt_data_end+0xf80029bc>
10002b84:	00c03f84 	movi	r3,254
10002b88:	01401f84 	movi	r5,126
10002b8c:	003f8b06 	br	100029bc <__alt_data_end+0xf80029bc>
10002b90:	10c00054 	ori	r3,r2,1
10002b94:	30c00115 	stw	r3,4(r6)
10002b98:	308d883a 	add	r6,r6,r2
10002b9c:	30800015 	stw	r2,0(r6)
10002ba0:	003f7806 	br	10002984 <__alt_data_end+0xf8002984>

10002ba4 <_lseek_r>:
10002ba4:	defffd04 	addi	sp,sp,-12
10002ba8:	2805883a 	mov	r2,r5
10002bac:	dc000015 	stw	r16,0(sp)
10002bb0:	04040074 	movhi	r16,4097
10002bb4:	dc400115 	stw	r17,4(sp)
10002bb8:	300b883a 	mov	r5,r6
10002bbc:	84231e04 	addi	r16,r16,-29576
10002bc0:	2023883a 	mov	r17,r4
10002bc4:	380d883a 	mov	r6,r7
10002bc8:	1009883a 	mov	r4,r2
10002bcc:	dfc00215 	stw	ra,8(sp)
10002bd0:	80000015 	stw	zero,0(r16)
10002bd4:	00034f00 	call	100034f0 <lseek>
10002bd8:	00ffffc4 	movi	r3,-1
10002bdc:	10c00526 	beq	r2,r3,10002bf4 <_lseek_r+0x50>
10002be0:	dfc00217 	ldw	ra,8(sp)
10002be4:	dc400117 	ldw	r17,4(sp)
10002be8:	dc000017 	ldw	r16,0(sp)
10002bec:	dec00304 	addi	sp,sp,12
10002bf0:	f800283a 	ret
10002bf4:	80c00017 	ldw	r3,0(r16)
10002bf8:	183ff926 	beq	r3,zero,10002be0 <__alt_data_end+0xf8002be0>
10002bfc:	88c00015 	stw	r3,0(r17)
10002c00:	003ff706 	br	10002be0 <__alt_data_end+0xf8002be0>

10002c04 <__smakebuf_r>:
10002c04:	2880030b 	ldhu	r2,12(r5)
10002c08:	10c0008c 	andi	r3,r2,2
10002c0c:	1800411e 	bne	r3,zero,10002d14 <__smakebuf_r+0x110>
10002c10:	deffec04 	addi	sp,sp,-80
10002c14:	dc000f15 	stw	r16,60(sp)
10002c18:	2821883a 	mov	r16,r5
10002c1c:	2940038f 	ldh	r5,14(r5)
10002c20:	dc401015 	stw	r17,64(sp)
10002c24:	dfc01315 	stw	ra,76(sp)
10002c28:	dcc01215 	stw	r19,72(sp)
10002c2c:	dc801115 	stw	r18,68(sp)
10002c30:	2023883a 	mov	r17,r4
10002c34:	28001c16 	blt	r5,zero,10002ca8 <__smakebuf_r+0xa4>
10002c38:	d80d883a 	mov	r6,sp
10002c3c:	0002e200 	call	10002e20 <_fstat_r>
10002c40:	10001816 	blt	r2,zero,10002ca4 <__smakebuf_r+0xa0>
10002c44:	d8800117 	ldw	r2,4(sp)
10002c48:	00e00014 	movui	r3,32768
10002c4c:	10bc000c 	andi	r2,r2,61440
10002c50:	14c80020 	cmpeqi	r19,r2,8192
10002c54:	10c03726 	beq	r2,r3,10002d34 <__smakebuf_r+0x130>
10002c58:	80c0030b 	ldhu	r3,12(r16)
10002c5c:	18c20014 	ori	r3,r3,2048
10002c60:	80c0030d 	sth	r3,12(r16)
10002c64:	00c80004 	movi	r3,8192
10002c68:	10c0521e 	bne	r2,r3,10002db4 <__smakebuf_r+0x1b0>
10002c6c:	8140038f 	ldh	r5,14(r16)
10002c70:	8809883a 	mov	r4,r17
10002c74:	0002e7c0 	call	10002e7c <_isatty_r>
10002c78:	10004c26 	beq	r2,zero,10002dac <__smakebuf_r+0x1a8>
10002c7c:	8080030b 	ldhu	r2,12(r16)
10002c80:	80c010c4 	addi	r3,r16,67
10002c84:	80c00015 	stw	r3,0(r16)
10002c88:	10800054 	ori	r2,r2,1
10002c8c:	8080030d 	sth	r2,12(r16)
10002c90:	00800044 	movi	r2,1
10002c94:	80c00415 	stw	r3,16(r16)
10002c98:	80800515 	stw	r2,20(r16)
10002c9c:	04810004 	movi	r18,1024
10002ca0:	00000706 	br	10002cc0 <__smakebuf_r+0xbc>
10002ca4:	8080030b 	ldhu	r2,12(r16)
10002ca8:	10c0200c 	andi	r3,r2,128
10002cac:	18001f1e 	bne	r3,zero,10002d2c <__smakebuf_r+0x128>
10002cb0:	04810004 	movi	r18,1024
10002cb4:	10820014 	ori	r2,r2,2048
10002cb8:	8080030d 	sth	r2,12(r16)
10002cbc:	0027883a 	mov	r19,zero
10002cc0:	900b883a 	mov	r5,r18
10002cc4:	8809883a 	mov	r4,r17
10002cc8:	0000e0c0 	call	10000e0c <_malloc_r>
10002ccc:	10002c26 	beq	r2,zero,10002d80 <__smakebuf_r+0x17c>
10002cd0:	80c0030b 	ldhu	r3,12(r16)
10002cd4:	01040034 	movhi	r4,4096
10002cd8:	21010504 	addi	r4,r4,1044
10002cdc:	89000f15 	stw	r4,60(r17)
10002ce0:	18c02014 	ori	r3,r3,128
10002ce4:	80c0030d 	sth	r3,12(r16)
10002ce8:	80800015 	stw	r2,0(r16)
10002cec:	80800415 	stw	r2,16(r16)
10002cf0:	84800515 	stw	r18,20(r16)
10002cf4:	98001a1e 	bne	r19,zero,10002d60 <__smakebuf_r+0x15c>
10002cf8:	dfc01317 	ldw	ra,76(sp)
10002cfc:	dcc01217 	ldw	r19,72(sp)
10002d00:	dc801117 	ldw	r18,68(sp)
10002d04:	dc401017 	ldw	r17,64(sp)
10002d08:	dc000f17 	ldw	r16,60(sp)
10002d0c:	dec01404 	addi	sp,sp,80
10002d10:	f800283a 	ret
10002d14:	288010c4 	addi	r2,r5,67
10002d18:	28800015 	stw	r2,0(r5)
10002d1c:	28800415 	stw	r2,16(r5)
10002d20:	00800044 	movi	r2,1
10002d24:	28800515 	stw	r2,20(r5)
10002d28:	f800283a 	ret
10002d2c:	04801004 	movi	r18,64
10002d30:	003fe006 	br	10002cb4 <__alt_data_end+0xf8002cb4>
10002d34:	81000a17 	ldw	r4,40(r16)
10002d38:	00c40034 	movhi	r3,4096
10002d3c:	18c85604 	addi	r3,r3,8536
10002d40:	20ffc51e 	bne	r4,r3,10002c58 <__alt_data_end+0xf8002c58>
10002d44:	8080030b 	ldhu	r2,12(r16)
10002d48:	04810004 	movi	r18,1024
10002d4c:	84801315 	stw	r18,76(r16)
10002d50:	1484b03a 	or	r2,r2,r18
10002d54:	8080030d 	sth	r2,12(r16)
10002d58:	0027883a 	mov	r19,zero
10002d5c:	003fd806 	br	10002cc0 <__alt_data_end+0xf8002cc0>
10002d60:	8140038f 	ldh	r5,14(r16)
10002d64:	8809883a 	mov	r4,r17
10002d68:	0002e7c0 	call	10002e7c <_isatty_r>
10002d6c:	103fe226 	beq	r2,zero,10002cf8 <__alt_data_end+0xf8002cf8>
10002d70:	8080030b 	ldhu	r2,12(r16)
10002d74:	10800054 	ori	r2,r2,1
10002d78:	8080030d 	sth	r2,12(r16)
10002d7c:	003fde06 	br	10002cf8 <__alt_data_end+0xf8002cf8>
10002d80:	8080030b 	ldhu	r2,12(r16)
10002d84:	10c0800c 	andi	r3,r2,512
10002d88:	183fdb1e 	bne	r3,zero,10002cf8 <__alt_data_end+0xf8002cf8>
10002d8c:	10800094 	ori	r2,r2,2
10002d90:	80c010c4 	addi	r3,r16,67
10002d94:	8080030d 	sth	r2,12(r16)
10002d98:	00800044 	movi	r2,1
10002d9c:	80c00015 	stw	r3,0(r16)
10002da0:	80c00415 	stw	r3,16(r16)
10002da4:	80800515 	stw	r2,20(r16)
10002da8:	003fd306 	br	10002cf8 <__alt_data_end+0xf8002cf8>
10002dac:	04810004 	movi	r18,1024
10002db0:	003fc306 	br	10002cc0 <__alt_data_end+0xf8002cc0>
10002db4:	0027883a 	mov	r19,zero
10002db8:	04810004 	movi	r18,1024
10002dbc:	003fc006 	br	10002cc0 <__alt_data_end+0xf8002cc0>

10002dc0 <_read_r>:
10002dc0:	defffd04 	addi	sp,sp,-12
10002dc4:	2805883a 	mov	r2,r5
10002dc8:	dc000015 	stw	r16,0(sp)
10002dcc:	04040074 	movhi	r16,4097
10002dd0:	dc400115 	stw	r17,4(sp)
10002dd4:	300b883a 	mov	r5,r6
10002dd8:	84231e04 	addi	r16,r16,-29576
10002ddc:	2023883a 	mov	r17,r4
10002de0:	380d883a 	mov	r6,r7
10002de4:	1009883a 	mov	r4,r2
10002de8:	dfc00215 	stw	ra,8(sp)
10002dec:	80000015 	stw	zero,0(r16)
10002df0:	00036cc0 	call	100036cc <read>
10002df4:	00ffffc4 	movi	r3,-1
10002df8:	10c00526 	beq	r2,r3,10002e10 <_read_r+0x50>
10002dfc:	dfc00217 	ldw	ra,8(sp)
10002e00:	dc400117 	ldw	r17,4(sp)
10002e04:	dc000017 	ldw	r16,0(sp)
10002e08:	dec00304 	addi	sp,sp,12
10002e0c:	f800283a 	ret
10002e10:	80c00017 	ldw	r3,0(r16)
10002e14:	183ff926 	beq	r3,zero,10002dfc <__alt_data_end+0xf8002dfc>
10002e18:	88c00015 	stw	r3,0(r17)
10002e1c:	003ff706 	br	10002dfc <__alt_data_end+0xf8002dfc>

10002e20 <_fstat_r>:
10002e20:	defffd04 	addi	sp,sp,-12
10002e24:	2805883a 	mov	r2,r5
10002e28:	dc000015 	stw	r16,0(sp)
10002e2c:	04040074 	movhi	r16,4097
10002e30:	dc400115 	stw	r17,4(sp)
10002e34:	84231e04 	addi	r16,r16,-29576
10002e38:	2023883a 	mov	r17,r4
10002e3c:	300b883a 	mov	r5,r6
10002e40:	1009883a 	mov	r4,r2
10002e44:	dfc00215 	stw	ra,8(sp)
10002e48:	80000015 	stw	zero,0(r16)
10002e4c:	00032280 	call	10003228 <fstat>
10002e50:	00ffffc4 	movi	r3,-1
10002e54:	10c00526 	beq	r2,r3,10002e6c <_fstat_r+0x4c>
10002e58:	dfc00217 	ldw	ra,8(sp)
10002e5c:	dc400117 	ldw	r17,4(sp)
10002e60:	dc000017 	ldw	r16,0(sp)
10002e64:	dec00304 	addi	sp,sp,12
10002e68:	f800283a 	ret
10002e6c:	80c00017 	ldw	r3,0(r16)
10002e70:	183ff926 	beq	r3,zero,10002e58 <__alt_data_end+0xf8002e58>
10002e74:	88c00015 	stw	r3,0(r17)
10002e78:	003ff706 	br	10002e58 <__alt_data_end+0xf8002e58>

10002e7c <_isatty_r>:
10002e7c:	defffd04 	addi	sp,sp,-12
10002e80:	dc000015 	stw	r16,0(sp)
10002e84:	04040074 	movhi	r16,4097
10002e88:	dc400115 	stw	r17,4(sp)
10002e8c:	84231e04 	addi	r16,r16,-29576
10002e90:	2023883a 	mov	r17,r4
10002e94:	2809883a 	mov	r4,r5
10002e98:	dfc00215 	stw	ra,8(sp)
10002e9c:	80000015 	stw	zero,0(r16)
10002ea0:	000331c0 	call	1000331c <isatty>
10002ea4:	00ffffc4 	movi	r3,-1
10002ea8:	10c00526 	beq	r2,r3,10002ec0 <_isatty_r+0x44>
10002eac:	dfc00217 	ldw	ra,8(sp)
10002eb0:	dc400117 	ldw	r17,4(sp)
10002eb4:	dc000017 	ldw	r16,0(sp)
10002eb8:	dec00304 	addi	sp,sp,12
10002ebc:	f800283a 	ret
10002ec0:	80c00017 	ldw	r3,0(r16)
10002ec4:	183ff926 	beq	r3,zero,10002eac <__alt_data_end+0xf8002eac>
10002ec8:	88c00015 	stw	r3,0(r17)
10002ecc:	003ff706 	br	10002eac <__alt_data_end+0xf8002eac>

10002ed0 <__divsi3>:
10002ed0:	20001b16 	blt	r4,zero,10002f40 <__divsi3+0x70>
10002ed4:	000f883a 	mov	r7,zero
10002ed8:	28001616 	blt	r5,zero,10002f34 <__divsi3+0x64>
10002edc:	200d883a 	mov	r6,r4
10002ee0:	29001a2e 	bgeu	r5,r4,10002f4c <__divsi3+0x7c>
10002ee4:	00800804 	movi	r2,32
10002ee8:	00c00044 	movi	r3,1
10002eec:	00000106 	br	10002ef4 <__divsi3+0x24>
10002ef0:	10000d26 	beq	r2,zero,10002f28 <__divsi3+0x58>
10002ef4:	294b883a 	add	r5,r5,r5
10002ef8:	10bfffc4 	addi	r2,r2,-1
10002efc:	18c7883a 	add	r3,r3,r3
10002f00:	293ffb36 	bltu	r5,r4,10002ef0 <__alt_data_end+0xf8002ef0>
10002f04:	0005883a 	mov	r2,zero
10002f08:	18000726 	beq	r3,zero,10002f28 <__divsi3+0x58>
10002f0c:	0005883a 	mov	r2,zero
10002f10:	31400236 	bltu	r6,r5,10002f1c <__divsi3+0x4c>
10002f14:	314dc83a 	sub	r6,r6,r5
10002f18:	10c4b03a 	or	r2,r2,r3
10002f1c:	1806d07a 	srli	r3,r3,1
10002f20:	280ad07a 	srli	r5,r5,1
10002f24:	183ffa1e 	bne	r3,zero,10002f10 <__alt_data_end+0xf8002f10>
10002f28:	38000126 	beq	r7,zero,10002f30 <__divsi3+0x60>
10002f2c:	0085c83a 	sub	r2,zero,r2
10002f30:	f800283a 	ret
10002f34:	014bc83a 	sub	r5,zero,r5
10002f38:	39c0005c 	xori	r7,r7,1
10002f3c:	003fe706 	br	10002edc <__alt_data_end+0xf8002edc>
10002f40:	0109c83a 	sub	r4,zero,r4
10002f44:	01c00044 	movi	r7,1
10002f48:	003fe306 	br	10002ed8 <__alt_data_end+0xf8002ed8>
10002f4c:	00c00044 	movi	r3,1
10002f50:	003fee06 	br	10002f0c <__alt_data_end+0xf8002f0c>

10002f54 <__modsi3>:
10002f54:	20001716 	blt	r4,zero,10002fb4 <__modsi3+0x60>
10002f58:	000f883a 	mov	r7,zero
10002f5c:	2005883a 	mov	r2,r4
10002f60:	28001216 	blt	r5,zero,10002fac <__modsi3+0x58>
10002f64:	2900162e 	bgeu	r5,r4,10002fc0 <__modsi3+0x6c>
10002f68:	01800804 	movi	r6,32
10002f6c:	00c00044 	movi	r3,1
10002f70:	00000106 	br	10002f78 <__modsi3+0x24>
10002f74:	30000a26 	beq	r6,zero,10002fa0 <__modsi3+0x4c>
10002f78:	294b883a 	add	r5,r5,r5
10002f7c:	31bfffc4 	addi	r6,r6,-1
10002f80:	18c7883a 	add	r3,r3,r3
10002f84:	293ffb36 	bltu	r5,r4,10002f74 <__alt_data_end+0xf8002f74>
10002f88:	18000526 	beq	r3,zero,10002fa0 <__modsi3+0x4c>
10002f8c:	1806d07a 	srli	r3,r3,1
10002f90:	11400136 	bltu	r2,r5,10002f98 <__modsi3+0x44>
10002f94:	1145c83a 	sub	r2,r2,r5
10002f98:	280ad07a 	srli	r5,r5,1
10002f9c:	183ffb1e 	bne	r3,zero,10002f8c <__alt_data_end+0xf8002f8c>
10002fa0:	38000126 	beq	r7,zero,10002fa8 <__modsi3+0x54>
10002fa4:	0085c83a 	sub	r2,zero,r2
10002fa8:	f800283a 	ret
10002fac:	014bc83a 	sub	r5,zero,r5
10002fb0:	003fec06 	br	10002f64 <__alt_data_end+0xf8002f64>
10002fb4:	0109c83a 	sub	r4,zero,r4
10002fb8:	01c00044 	movi	r7,1
10002fbc:	003fe706 	br	10002f5c <__alt_data_end+0xf8002f5c>
10002fc0:	00c00044 	movi	r3,1
10002fc4:	003ff106 	br	10002f8c <__alt_data_end+0xf8002f8c>

10002fc8 <__udivsi3>:
10002fc8:	200d883a 	mov	r6,r4
10002fcc:	2900152e 	bgeu	r5,r4,10003024 <__udivsi3+0x5c>
10002fd0:	28001416 	blt	r5,zero,10003024 <__udivsi3+0x5c>
10002fd4:	00800804 	movi	r2,32
10002fd8:	00c00044 	movi	r3,1
10002fdc:	00000206 	br	10002fe8 <__udivsi3+0x20>
10002fe0:	10000e26 	beq	r2,zero,1000301c <__udivsi3+0x54>
10002fe4:	28000516 	blt	r5,zero,10002ffc <__udivsi3+0x34>
10002fe8:	294b883a 	add	r5,r5,r5
10002fec:	10bfffc4 	addi	r2,r2,-1
10002ff0:	18c7883a 	add	r3,r3,r3
10002ff4:	293ffa36 	bltu	r5,r4,10002fe0 <__alt_data_end+0xf8002fe0>
10002ff8:	18000826 	beq	r3,zero,1000301c <__udivsi3+0x54>
10002ffc:	0005883a 	mov	r2,zero
10003000:	31400236 	bltu	r6,r5,1000300c <__udivsi3+0x44>
10003004:	314dc83a 	sub	r6,r6,r5
10003008:	10c4b03a 	or	r2,r2,r3
1000300c:	1806d07a 	srli	r3,r3,1
10003010:	280ad07a 	srli	r5,r5,1
10003014:	183ffa1e 	bne	r3,zero,10003000 <__alt_data_end+0xf8003000>
10003018:	f800283a 	ret
1000301c:	0005883a 	mov	r2,zero
10003020:	f800283a 	ret
10003024:	00c00044 	movi	r3,1
10003028:	003ff406 	br	10002ffc <__alt_data_end+0xf8002ffc>

1000302c <__umodsi3>:
1000302c:	2005883a 	mov	r2,r4
10003030:	2900122e 	bgeu	r5,r4,1000307c <__umodsi3+0x50>
10003034:	28001116 	blt	r5,zero,1000307c <__umodsi3+0x50>
10003038:	01800804 	movi	r6,32
1000303c:	00c00044 	movi	r3,1
10003040:	00000206 	br	1000304c <__umodsi3+0x20>
10003044:	30000c26 	beq	r6,zero,10003078 <__umodsi3+0x4c>
10003048:	28000516 	blt	r5,zero,10003060 <__umodsi3+0x34>
1000304c:	294b883a 	add	r5,r5,r5
10003050:	31bfffc4 	addi	r6,r6,-1
10003054:	18c7883a 	add	r3,r3,r3
10003058:	293ffa36 	bltu	r5,r4,10003044 <__alt_data_end+0xf8003044>
1000305c:	18000626 	beq	r3,zero,10003078 <__umodsi3+0x4c>
10003060:	1806d07a 	srli	r3,r3,1
10003064:	11400136 	bltu	r2,r5,1000306c <__umodsi3+0x40>
10003068:	1145c83a 	sub	r2,r2,r5
1000306c:	280ad07a 	srli	r5,r5,1
10003070:	183ffb1e 	bne	r3,zero,10003060 <__alt_data_end+0xf8003060>
10003074:	f800283a 	ret
10003078:	f800283a 	ret
1000307c:	00c00044 	movi	r3,1
10003080:	003ff706 	br	10003060 <__alt_data_end+0xf8003060>

10003084 <__mulsi3>:
10003084:	0005883a 	mov	r2,zero
10003088:	20000726 	beq	r4,zero,100030a8 <__mulsi3+0x24>
1000308c:	20c0004c 	andi	r3,r4,1
10003090:	2008d07a 	srli	r4,r4,1
10003094:	18000126 	beq	r3,zero,1000309c <__mulsi3+0x18>
10003098:	1145883a 	add	r2,r2,r5
1000309c:	294b883a 	add	r5,r5,r5
100030a0:	203ffa1e 	bne	r4,zero,1000308c <__alt_data_end+0xf800308c>
100030a4:	f800283a 	ret
100030a8:	f800283a 	ret

100030ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100030ac:	defffe04 	addi	sp,sp,-8
100030b0:	dfc00115 	stw	ra,4(sp)
100030b4:	df000015 	stw	fp,0(sp)
100030b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100030bc:	d0a00917 	ldw	r2,-32732(gp)
100030c0:	10000326 	beq	r2,zero,100030d0 <alt_get_errno+0x24>
100030c4:	d0a00917 	ldw	r2,-32732(gp)
100030c8:	103ee83a 	callr	r2
100030cc:	00000106 	br	100030d4 <alt_get_errno+0x28>
100030d0:	d0a6ac04 	addi	r2,gp,-25936
}
100030d4:	e037883a 	mov	sp,fp
100030d8:	dfc00117 	ldw	ra,4(sp)
100030dc:	df000017 	ldw	fp,0(sp)
100030e0:	dec00204 	addi	sp,sp,8
100030e4:	f800283a 	ret

100030e8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
100030e8:	defffb04 	addi	sp,sp,-20
100030ec:	dfc00415 	stw	ra,16(sp)
100030f0:	df000315 	stw	fp,12(sp)
100030f4:	df000304 	addi	fp,sp,12
100030f8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
100030fc:	e0bfff17 	ldw	r2,-4(fp)
10003100:	10000816 	blt	r2,zero,10003124 <close+0x3c>
10003104:	01400304 	movi	r5,12
10003108:	e13fff17 	ldw	r4,-4(fp)
1000310c:	00030840 	call	10003084 <__mulsi3>
10003110:	1007883a 	mov	r3,r2
10003114:	00840034 	movhi	r2,4096
10003118:	1097fa04 	addi	r2,r2,24552
1000311c:	1885883a 	add	r2,r3,r2
10003120:	00000106 	br	10003128 <close+0x40>
10003124:	0005883a 	mov	r2,zero
10003128:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
1000312c:	e0bffd17 	ldw	r2,-12(fp)
10003130:	10001926 	beq	r2,zero,10003198 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
10003134:	e0bffd17 	ldw	r2,-12(fp)
10003138:	10800017 	ldw	r2,0(r2)
1000313c:	10800417 	ldw	r2,16(r2)
10003140:	10000626 	beq	r2,zero,1000315c <close+0x74>
10003144:	e0bffd17 	ldw	r2,-12(fp)
10003148:	10800017 	ldw	r2,0(r2)
1000314c:	10800417 	ldw	r2,16(r2)
10003150:	e13ffd17 	ldw	r4,-12(fp)
10003154:	103ee83a 	callr	r2
10003158:	00000106 	br	10003160 <close+0x78>
1000315c:	0005883a 	mov	r2,zero
10003160:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
10003164:	e13fff17 	ldw	r4,-4(fp)
10003168:	00037d00 	call	100037d0 <alt_release_fd>
    if (rval < 0)
1000316c:	e0bffe17 	ldw	r2,-8(fp)
10003170:	1000070e 	bge	r2,zero,10003190 <close+0xa8>
    {
      ALT_ERRNO = -rval;
10003174:	00030ac0 	call	100030ac <alt_get_errno>
10003178:	1007883a 	mov	r3,r2
1000317c:	e0bffe17 	ldw	r2,-8(fp)
10003180:	0085c83a 	sub	r2,zero,r2
10003184:	18800015 	stw	r2,0(r3)
      return -1;
10003188:	00bfffc4 	movi	r2,-1
1000318c:	00000706 	br	100031ac <close+0xc4>
    }
    return 0;
10003190:	0005883a 	mov	r2,zero
10003194:	00000506 	br	100031ac <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
10003198:	00030ac0 	call	100030ac <alt_get_errno>
1000319c:	1007883a 	mov	r3,r2
100031a0:	00801444 	movi	r2,81
100031a4:	18800015 	stw	r2,0(r3)
    return -1;
100031a8:	00bfffc4 	movi	r2,-1
  }
}
100031ac:	e037883a 	mov	sp,fp
100031b0:	dfc00117 	ldw	ra,4(sp)
100031b4:	df000017 	ldw	fp,0(sp)
100031b8:	dec00204 	addi	sp,sp,8
100031bc:	f800283a 	ret

100031c0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
100031c0:	defffc04 	addi	sp,sp,-16
100031c4:	df000315 	stw	fp,12(sp)
100031c8:	df000304 	addi	fp,sp,12
100031cc:	e13ffd15 	stw	r4,-12(fp)
100031d0:	e17ffe15 	stw	r5,-8(fp)
100031d4:	e1bfff15 	stw	r6,-4(fp)
  return len;
100031d8:	e0bfff17 	ldw	r2,-4(fp)
}
100031dc:	e037883a 	mov	sp,fp
100031e0:	df000017 	ldw	fp,0(sp)
100031e4:	dec00104 	addi	sp,sp,4
100031e8:	f800283a 	ret

100031ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100031ec:	defffe04 	addi	sp,sp,-8
100031f0:	dfc00115 	stw	ra,4(sp)
100031f4:	df000015 	stw	fp,0(sp)
100031f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100031fc:	d0a00917 	ldw	r2,-32732(gp)
10003200:	10000326 	beq	r2,zero,10003210 <alt_get_errno+0x24>
10003204:	d0a00917 	ldw	r2,-32732(gp)
10003208:	103ee83a 	callr	r2
1000320c:	00000106 	br	10003214 <alt_get_errno+0x28>
10003210:	d0a6ac04 	addi	r2,gp,-25936
}
10003214:	e037883a 	mov	sp,fp
10003218:	dfc00117 	ldw	ra,4(sp)
1000321c:	df000017 	ldw	fp,0(sp)
10003220:	dec00204 	addi	sp,sp,8
10003224:	f800283a 	ret

10003228 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
10003228:	defffb04 	addi	sp,sp,-20
1000322c:	dfc00415 	stw	ra,16(sp)
10003230:	df000315 	stw	fp,12(sp)
10003234:	df000304 	addi	fp,sp,12
10003238:	e13ffe15 	stw	r4,-8(fp)
1000323c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10003240:	e0bffe17 	ldw	r2,-8(fp)
10003244:	10000816 	blt	r2,zero,10003268 <fstat+0x40>
10003248:	01400304 	movi	r5,12
1000324c:	e13ffe17 	ldw	r4,-8(fp)
10003250:	00030840 	call	10003084 <__mulsi3>
10003254:	1007883a 	mov	r3,r2
10003258:	00840034 	movhi	r2,4096
1000325c:	1097fa04 	addi	r2,r2,24552
10003260:	1885883a 	add	r2,r3,r2
10003264:	00000106 	br	1000326c <fstat+0x44>
10003268:	0005883a 	mov	r2,zero
1000326c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
10003270:	e0bffd17 	ldw	r2,-12(fp)
10003274:	10001026 	beq	r2,zero,100032b8 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
10003278:	e0bffd17 	ldw	r2,-12(fp)
1000327c:	10800017 	ldw	r2,0(r2)
10003280:	10800817 	ldw	r2,32(r2)
10003284:	10000726 	beq	r2,zero,100032a4 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
10003288:	e0bffd17 	ldw	r2,-12(fp)
1000328c:	10800017 	ldw	r2,0(r2)
10003290:	10800817 	ldw	r2,32(r2)
10003294:	e17fff17 	ldw	r5,-4(fp)
10003298:	e13ffd17 	ldw	r4,-12(fp)
1000329c:	103ee83a 	callr	r2
100032a0:	00000a06 	br	100032cc <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
100032a4:	e0bfff17 	ldw	r2,-4(fp)
100032a8:	00c80004 	movi	r3,8192
100032ac:	10c00115 	stw	r3,4(r2)
      return 0;
100032b0:	0005883a 	mov	r2,zero
100032b4:	00000506 	br	100032cc <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
100032b8:	00031ec0 	call	100031ec <alt_get_errno>
100032bc:	1007883a 	mov	r3,r2
100032c0:	00801444 	movi	r2,81
100032c4:	18800015 	stw	r2,0(r3)
    return -1;
100032c8:	00bfffc4 	movi	r2,-1
  }
}
100032cc:	e037883a 	mov	sp,fp
100032d0:	dfc00117 	ldw	ra,4(sp)
100032d4:	df000017 	ldw	fp,0(sp)
100032d8:	dec00204 	addi	sp,sp,8
100032dc:	f800283a 	ret

100032e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100032e0:	defffe04 	addi	sp,sp,-8
100032e4:	dfc00115 	stw	ra,4(sp)
100032e8:	df000015 	stw	fp,0(sp)
100032ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100032f0:	d0a00917 	ldw	r2,-32732(gp)
100032f4:	10000326 	beq	r2,zero,10003304 <alt_get_errno+0x24>
100032f8:	d0a00917 	ldw	r2,-32732(gp)
100032fc:	103ee83a 	callr	r2
10003300:	00000106 	br	10003308 <alt_get_errno+0x28>
10003304:	d0a6ac04 	addi	r2,gp,-25936
}
10003308:	e037883a 	mov	sp,fp
1000330c:	dfc00117 	ldw	ra,4(sp)
10003310:	df000017 	ldw	fp,0(sp)
10003314:	dec00204 	addi	sp,sp,8
10003318:	f800283a 	ret

1000331c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
1000331c:	deffed04 	addi	sp,sp,-76
10003320:	dfc01215 	stw	ra,72(sp)
10003324:	df001115 	stw	fp,68(sp)
10003328:	df001104 	addi	fp,sp,68
1000332c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10003330:	e0bfff17 	ldw	r2,-4(fp)
10003334:	10000816 	blt	r2,zero,10003358 <isatty+0x3c>
10003338:	01400304 	movi	r5,12
1000333c:	e13fff17 	ldw	r4,-4(fp)
10003340:	00030840 	call	10003084 <__mulsi3>
10003344:	1007883a 	mov	r3,r2
10003348:	00840034 	movhi	r2,4096
1000334c:	1097fa04 	addi	r2,r2,24552
10003350:	1885883a 	add	r2,r3,r2
10003354:	00000106 	br	1000335c <isatty+0x40>
10003358:	0005883a 	mov	r2,zero
1000335c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
10003360:	e0bfef17 	ldw	r2,-68(fp)
10003364:	10000e26 	beq	r2,zero,100033a0 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
10003368:	e0bfef17 	ldw	r2,-68(fp)
1000336c:	10800017 	ldw	r2,0(r2)
10003370:	10800817 	ldw	r2,32(r2)
10003374:	1000021e 	bne	r2,zero,10003380 <isatty+0x64>
    {
      return 1;
10003378:	00800044 	movi	r2,1
1000337c:	00000d06 	br	100033b4 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
10003380:	e0bff004 	addi	r2,fp,-64
10003384:	100b883a 	mov	r5,r2
10003388:	e13fff17 	ldw	r4,-4(fp)
1000338c:	00032280 	call	10003228 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
10003390:	e0bff117 	ldw	r2,-60(fp)
10003394:	10880020 	cmpeqi	r2,r2,8192
10003398:	10803fcc 	andi	r2,r2,255
1000339c:	00000506 	br	100033b4 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
100033a0:	00032e00 	call	100032e0 <alt_get_errno>
100033a4:	1007883a 	mov	r3,r2
100033a8:	00801444 	movi	r2,81
100033ac:	18800015 	stw	r2,0(r3)
    return 0;
100033b0:	0005883a 	mov	r2,zero
  }
}
100033b4:	e037883a 	mov	sp,fp
100033b8:	dfc00117 	ldw	ra,4(sp)
100033bc:	df000017 	ldw	fp,0(sp)
100033c0:	dec00204 	addi	sp,sp,8
100033c4:	f800283a 	ret

100033c8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
100033c8:	defffc04 	addi	sp,sp,-16
100033cc:	df000315 	stw	fp,12(sp)
100033d0:	df000304 	addi	fp,sp,12
100033d4:	e13ffd15 	stw	r4,-12(fp)
100033d8:	e17ffe15 	stw	r5,-8(fp)
100033dc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
100033e0:	e0fffe17 	ldw	r3,-8(fp)
100033e4:	e0bffd17 	ldw	r2,-12(fp)
100033e8:	18800c26 	beq	r3,r2,1000341c <alt_load_section+0x54>
  {
    while( to != end )
100033ec:	00000806 	br	10003410 <alt_load_section+0x48>
    {
      *to++ = *from++;
100033f0:	e0bffe17 	ldw	r2,-8(fp)
100033f4:	10c00104 	addi	r3,r2,4
100033f8:	e0fffe15 	stw	r3,-8(fp)
100033fc:	e0fffd17 	ldw	r3,-12(fp)
10003400:	19000104 	addi	r4,r3,4
10003404:	e13ffd15 	stw	r4,-12(fp)
10003408:	18c00017 	ldw	r3,0(r3)
1000340c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
10003410:	e0fffe17 	ldw	r3,-8(fp)
10003414:	e0bfff17 	ldw	r2,-4(fp)
10003418:	18bff51e 	bne	r3,r2,100033f0 <__alt_data_end+0xf80033f0>
    {
      *to++ = *from++;
    }
  }
}
1000341c:	0001883a 	nop
10003420:	e037883a 	mov	sp,fp
10003424:	df000017 	ldw	fp,0(sp)
10003428:	dec00104 	addi	sp,sp,4
1000342c:	f800283a 	ret

10003430 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
10003430:	defffe04 	addi	sp,sp,-8
10003434:	dfc00115 	stw	ra,4(sp)
10003438:	df000015 	stw	fp,0(sp)
1000343c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
10003440:	01840034 	movhi	r6,4096
10003444:	319c8004 	addi	r6,r6,29184
10003448:	01440034 	movhi	r5,4096
1000344c:	2955e504 	addi	r5,r5,22420
10003450:	01040034 	movhi	r4,4096
10003454:	211c8004 	addi	r4,r4,29184
10003458:	00033c80 	call	100033c8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
1000345c:	01840034 	movhi	r6,4096
10003460:	31808c04 	addi	r6,r6,560
10003464:	01440034 	movhi	r5,4096
10003468:	29400804 	addi	r5,r5,32
1000346c:	01040034 	movhi	r4,4096
10003470:	21000804 	addi	r4,r4,32
10003474:	00033c80 	call	100033c8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
10003478:	01840034 	movhi	r6,4096
1000347c:	3195e504 	addi	r6,r6,22420
10003480:	01440034 	movhi	r5,4096
10003484:	2955d104 	addi	r5,r5,22340
10003488:	01040034 	movhi	r4,4096
1000348c:	2115d104 	addi	r4,r4,22340
10003490:	00033c80 	call	100033c8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
10003494:	000468c0 	call	1000468c <alt_dcache_flush_all>
  alt_icache_flush_all();
10003498:	000484c0 	call	1000484c <alt_icache_flush_all>
}
1000349c:	0001883a 	nop
100034a0:	e037883a 	mov	sp,fp
100034a4:	dfc00117 	ldw	ra,4(sp)
100034a8:	df000017 	ldw	fp,0(sp)
100034ac:	dec00204 	addi	sp,sp,8
100034b0:	f800283a 	ret

100034b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100034b4:	defffe04 	addi	sp,sp,-8
100034b8:	dfc00115 	stw	ra,4(sp)
100034bc:	df000015 	stw	fp,0(sp)
100034c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100034c4:	d0a00917 	ldw	r2,-32732(gp)
100034c8:	10000326 	beq	r2,zero,100034d8 <alt_get_errno+0x24>
100034cc:	d0a00917 	ldw	r2,-32732(gp)
100034d0:	103ee83a 	callr	r2
100034d4:	00000106 	br	100034dc <alt_get_errno+0x28>
100034d8:	d0a6ac04 	addi	r2,gp,-25936
}
100034dc:	e037883a 	mov	sp,fp
100034e0:	dfc00117 	ldw	ra,4(sp)
100034e4:	df000017 	ldw	fp,0(sp)
100034e8:	dec00204 	addi	sp,sp,8
100034ec:	f800283a 	ret

100034f0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
100034f0:	defff904 	addi	sp,sp,-28
100034f4:	dfc00615 	stw	ra,24(sp)
100034f8:	df000515 	stw	fp,20(sp)
100034fc:	df000504 	addi	fp,sp,20
10003500:	e13ffd15 	stw	r4,-12(fp)
10003504:	e17ffe15 	stw	r5,-8(fp)
10003508:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
1000350c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10003510:	e0bffd17 	ldw	r2,-12(fp)
10003514:	10000816 	blt	r2,zero,10003538 <lseek+0x48>
10003518:	01400304 	movi	r5,12
1000351c:	e13ffd17 	ldw	r4,-12(fp)
10003520:	00030840 	call	10003084 <__mulsi3>
10003524:	1007883a 	mov	r3,r2
10003528:	00840034 	movhi	r2,4096
1000352c:	1097fa04 	addi	r2,r2,24552
10003530:	1885883a 	add	r2,r3,r2
10003534:	00000106 	br	1000353c <lseek+0x4c>
10003538:	0005883a 	mov	r2,zero
1000353c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
10003540:	e0bffc17 	ldw	r2,-16(fp)
10003544:	10001026 	beq	r2,zero,10003588 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
10003548:	e0bffc17 	ldw	r2,-16(fp)
1000354c:	10800017 	ldw	r2,0(r2)
10003550:	10800717 	ldw	r2,28(r2)
10003554:	10000926 	beq	r2,zero,1000357c <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
10003558:	e0bffc17 	ldw	r2,-16(fp)
1000355c:	10800017 	ldw	r2,0(r2)
10003560:	10800717 	ldw	r2,28(r2)
10003564:	e1bfff17 	ldw	r6,-4(fp)
10003568:	e17ffe17 	ldw	r5,-8(fp)
1000356c:	e13ffc17 	ldw	r4,-16(fp)
10003570:	103ee83a 	callr	r2
10003574:	e0bffb15 	stw	r2,-20(fp)
10003578:	00000506 	br	10003590 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
1000357c:	00bfde84 	movi	r2,-134
10003580:	e0bffb15 	stw	r2,-20(fp)
10003584:	00000206 	br	10003590 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
10003588:	00bfebc4 	movi	r2,-81
1000358c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
10003590:	e0bffb17 	ldw	r2,-20(fp)
10003594:	1000070e 	bge	r2,zero,100035b4 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
10003598:	00034b40 	call	100034b4 <alt_get_errno>
1000359c:	1007883a 	mov	r3,r2
100035a0:	e0bffb17 	ldw	r2,-20(fp)
100035a4:	0085c83a 	sub	r2,zero,r2
100035a8:	18800015 	stw	r2,0(r3)
    rc = -1;
100035ac:	00bfffc4 	movi	r2,-1
100035b0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
100035b4:	e0bffb17 	ldw	r2,-20(fp)
}
100035b8:	e037883a 	mov	sp,fp
100035bc:	dfc00117 	ldw	ra,4(sp)
100035c0:	df000017 	ldw	fp,0(sp)
100035c4:	dec00204 	addi	sp,sp,8
100035c8:	f800283a 	ret

100035cc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
100035cc:	defffd04 	addi	sp,sp,-12
100035d0:	dfc00215 	stw	ra,8(sp)
100035d4:	df000115 	stw	fp,4(sp)
100035d8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
100035dc:	0009883a 	mov	r4,zero
100035e0:	0003a740 	call	10003a74 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
100035e4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
100035e8:	0003aac0 	call	10003aac <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
100035ec:	01840034 	movhi	r6,4096
100035f0:	3195db04 	addi	r6,r6,22380
100035f4:	01440034 	movhi	r5,4096
100035f8:	2955db04 	addi	r5,r5,22380
100035fc:	01040034 	movhi	r4,4096
10003600:	2115db04 	addi	r4,r4,22380
10003604:	0004bf00 	call	10004bf0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
10003608:	000478c0 	call	1000478c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
1000360c:	01040034 	movhi	r4,4096
10003610:	2111fb04 	addi	r4,r4,18412
10003614:	00053b00 	call	100053b0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
10003618:	d0a6ad17 	ldw	r2,-25932(gp)
1000361c:	d0e6ae17 	ldw	r3,-25928(gp)
10003620:	d126af17 	ldw	r4,-25924(gp)
10003624:	200d883a 	mov	r6,r4
10003628:	180b883a 	mov	r5,r3
1000362c:	1009883a 	mov	r4,r2
10003630:	000026c0 	call	1000026c <main>
10003634:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
10003638:	01000044 	movi	r4,1
1000363c:	00030e80 	call	100030e8 <close>
  exit (result);
10003640:	e13fff17 	ldw	r4,-4(fp)
10003644:	00053c40 	call	100053c4 <exit>

10003648 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
10003648:	defffe04 	addi	sp,sp,-8
1000364c:	df000115 	stw	fp,4(sp)
10003650:	df000104 	addi	fp,sp,4
10003654:	e13fff15 	stw	r4,-4(fp)
}
10003658:	0001883a 	nop
1000365c:	e037883a 	mov	sp,fp
10003660:	df000017 	ldw	fp,0(sp)
10003664:	dec00104 	addi	sp,sp,4
10003668:	f800283a 	ret

1000366c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
1000366c:	defffe04 	addi	sp,sp,-8
10003670:	df000115 	stw	fp,4(sp)
10003674:	df000104 	addi	fp,sp,4
10003678:	e13fff15 	stw	r4,-4(fp)
}
1000367c:	0001883a 	nop
10003680:	e037883a 	mov	sp,fp
10003684:	df000017 	ldw	fp,0(sp)
10003688:	dec00104 	addi	sp,sp,4
1000368c:	f800283a 	ret

10003690 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10003690:	defffe04 	addi	sp,sp,-8
10003694:	dfc00115 	stw	ra,4(sp)
10003698:	df000015 	stw	fp,0(sp)
1000369c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100036a0:	d0a00917 	ldw	r2,-32732(gp)
100036a4:	10000326 	beq	r2,zero,100036b4 <alt_get_errno+0x24>
100036a8:	d0a00917 	ldw	r2,-32732(gp)
100036ac:	103ee83a 	callr	r2
100036b0:	00000106 	br	100036b8 <alt_get_errno+0x28>
100036b4:	d0a6ac04 	addi	r2,gp,-25936
}
100036b8:	e037883a 	mov	sp,fp
100036bc:	dfc00117 	ldw	ra,4(sp)
100036c0:	df000017 	ldw	fp,0(sp)
100036c4:	dec00204 	addi	sp,sp,8
100036c8:	f800283a 	ret

100036cc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
100036cc:	defff904 	addi	sp,sp,-28
100036d0:	dfc00615 	stw	ra,24(sp)
100036d4:	df000515 	stw	fp,20(sp)
100036d8:	df000504 	addi	fp,sp,20
100036dc:	e13ffd15 	stw	r4,-12(fp)
100036e0:	e17ffe15 	stw	r5,-8(fp)
100036e4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
100036e8:	e0bffd17 	ldw	r2,-12(fp)
100036ec:	10000816 	blt	r2,zero,10003710 <read+0x44>
100036f0:	01400304 	movi	r5,12
100036f4:	e13ffd17 	ldw	r4,-12(fp)
100036f8:	00030840 	call	10003084 <__mulsi3>
100036fc:	1007883a 	mov	r3,r2
10003700:	00840034 	movhi	r2,4096
10003704:	1097fa04 	addi	r2,r2,24552
10003708:	1885883a 	add	r2,r3,r2
1000370c:	00000106 	br	10003714 <read+0x48>
10003710:	0005883a 	mov	r2,zero
10003714:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
10003718:	e0bffb17 	ldw	r2,-20(fp)
1000371c:	10002226 	beq	r2,zero,100037a8 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
10003720:	e0bffb17 	ldw	r2,-20(fp)
10003724:	10800217 	ldw	r2,8(r2)
10003728:	108000cc 	andi	r2,r2,3
1000372c:	10800060 	cmpeqi	r2,r2,1
10003730:	1000181e 	bne	r2,zero,10003794 <read+0xc8>
        (fd->dev->read))
10003734:	e0bffb17 	ldw	r2,-20(fp)
10003738:	10800017 	ldw	r2,0(r2)
1000373c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
10003740:	10001426 	beq	r2,zero,10003794 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
10003744:	e0bffb17 	ldw	r2,-20(fp)
10003748:	10800017 	ldw	r2,0(r2)
1000374c:	10800517 	ldw	r2,20(r2)
10003750:	e0ffff17 	ldw	r3,-4(fp)
10003754:	180d883a 	mov	r6,r3
10003758:	e17ffe17 	ldw	r5,-8(fp)
1000375c:	e13ffb17 	ldw	r4,-20(fp)
10003760:	103ee83a 	callr	r2
10003764:	e0bffc15 	stw	r2,-16(fp)
10003768:	e0bffc17 	ldw	r2,-16(fp)
1000376c:	1000070e 	bge	r2,zero,1000378c <read+0xc0>
        {
          ALT_ERRNO = -rval;
10003770:	00036900 	call	10003690 <alt_get_errno>
10003774:	1007883a 	mov	r3,r2
10003778:	e0bffc17 	ldw	r2,-16(fp)
1000377c:	0085c83a 	sub	r2,zero,r2
10003780:	18800015 	stw	r2,0(r3)
          return -1;
10003784:	00bfffc4 	movi	r2,-1
10003788:	00000c06 	br	100037bc <read+0xf0>
        }
        return rval;
1000378c:	e0bffc17 	ldw	r2,-16(fp)
10003790:	00000a06 	br	100037bc <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
10003794:	00036900 	call	10003690 <alt_get_errno>
10003798:	1007883a 	mov	r3,r2
1000379c:	00800344 	movi	r2,13
100037a0:	18800015 	stw	r2,0(r3)
100037a4:	00000406 	br	100037b8 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
100037a8:	00036900 	call	10003690 <alt_get_errno>
100037ac:	1007883a 	mov	r3,r2
100037b0:	00801444 	movi	r2,81
100037b4:	18800015 	stw	r2,0(r3)
  }
  return -1;
100037b8:	00bfffc4 	movi	r2,-1
}
100037bc:	e037883a 	mov	sp,fp
100037c0:	dfc00117 	ldw	ra,4(sp)
100037c4:	df000017 	ldw	fp,0(sp)
100037c8:	dec00204 	addi	sp,sp,8
100037cc:	f800283a 	ret

100037d0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
100037d0:	defffc04 	addi	sp,sp,-16
100037d4:	dfc00315 	stw	ra,12(sp)
100037d8:	df000215 	stw	fp,8(sp)
100037dc:	dc000115 	stw	r16,4(sp)
100037e0:	df000204 	addi	fp,sp,8
100037e4:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
100037e8:	e0bffe17 	ldw	r2,-8(fp)
100037ec:	108000d0 	cmplti	r2,r2,3
100037f0:	1000111e 	bne	r2,zero,10003838 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
100037f4:	04040034 	movhi	r16,4096
100037f8:	8417fa04 	addi	r16,r16,24552
100037fc:	e0bffe17 	ldw	r2,-8(fp)
10003800:	01400304 	movi	r5,12
10003804:	1009883a 	mov	r4,r2
10003808:	00030840 	call	10003084 <__mulsi3>
1000380c:	8085883a 	add	r2,r16,r2
10003810:	10800204 	addi	r2,r2,8
10003814:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
10003818:	04040034 	movhi	r16,4096
1000381c:	8417fa04 	addi	r16,r16,24552
10003820:	e0bffe17 	ldw	r2,-8(fp)
10003824:	01400304 	movi	r5,12
10003828:	1009883a 	mov	r4,r2
1000382c:	00030840 	call	10003084 <__mulsi3>
10003830:	8085883a 	add	r2,r16,r2
10003834:	10000015 	stw	zero,0(r2)
  }
}
10003838:	0001883a 	nop
1000383c:	e6ffff04 	addi	sp,fp,-4
10003840:	dfc00217 	ldw	ra,8(sp)
10003844:	df000117 	ldw	fp,4(sp)
10003848:	dc000017 	ldw	r16,0(sp)
1000384c:	dec00304 	addi	sp,sp,12
10003850:	f800283a 	ret

10003854 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
10003854:	defff904 	addi	sp,sp,-28
10003858:	df000615 	stw	fp,24(sp)
1000385c:	df000604 	addi	fp,sp,24
10003860:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10003864:	0005303a 	rdctl	r2,status
10003868:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000386c:	e0fffe17 	ldw	r3,-8(fp)
10003870:	00bfff84 	movi	r2,-2
10003874:	1884703a 	and	r2,r3,r2
10003878:	1001703a 	wrctl	status,r2
  
  return context;
1000387c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
10003880:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
10003884:	d0a00a17 	ldw	r2,-32728(gp)
10003888:	10c000c4 	addi	r3,r2,3
1000388c:	00bfff04 	movi	r2,-4
10003890:	1884703a 	and	r2,r3,r2
10003894:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
10003898:	d0e00a17 	ldw	r3,-32728(gp)
1000389c:	e0bfff17 	ldw	r2,-4(fp)
100038a0:	1887883a 	add	r3,r3,r2
100038a4:	00860034 	movhi	r2,6144
100038a8:	10800004 	addi	r2,r2,0
100038ac:	10c0062e 	bgeu	r2,r3,100038c8 <sbrk+0x74>
100038b0:	e0bffb17 	ldw	r2,-20(fp)
100038b4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100038b8:	e0bffa17 	ldw	r2,-24(fp)
100038bc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
100038c0:	00bfffc4 	movi	r2,-1
100038c4:	00000b06 	br	100038f4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
100038c8:	d0a00a17 	ldw	r2,-32728(gp)
100038cc:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
100038d0:	d0e00a17 	ldw	r3,-32728(gp)
100038d4:	e0bfff17 	ldw	r2,-4(fp)
100038d8:	1885883a 	add	r2,r3,r2
100038dc:	d0a00a15 	stw	r2,-32728(gp)
100038e0:	e0bffb17 	ldw	r2,-20(fp)
100038e4:	e0bffc15 	stw	r2,-16(fp)
100038e8:	e0bffc17 	ldw	r2,-16(fp)
100038ec:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
100038f0:	e0bffd17 	ldw	r2,-12(fp)
} 
100038f4:	e037883a 	mov	sp,fp
100038f8:	df000017 	ldw	fp,0(sp)
100038fc:	dec00104 	addi	sp,sp,4
10003900:	f800283a 	ret

10003904 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10003904:	defffe04 	addi	sp,sp,-8
10003908:	dfc00115 	stw	ra,4(sp)
1000390c:	df000015 	stw	fp,0(sp)
10003910:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10003914:	d0a00917 	ldw	r2,-32732(gp)
10003918:	10000326 	beq	r2,zero,10003928 <alt_get_errno+0x24>
1000391c:	d0a00917 	ldw	r2,-32732(gp)
10003920:	103ee83a 	callr	r2
10003924:	00000106 	br	1000392c <alt_get_errno+0x28>
10003928:	d0a6ac04 	addi	r2,gp,-25936
}
1000392c:	e037883a 	mov	sp,fp
10003930:	dfc00117 	ldw	ra,4(sp)
10003934:	df000017 	ldw	fp,0(sp)
10003938:	dec00204 	addi	sp,sp,8
1000393c:	f800283a 	ret

10003940 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
10003940:	defff904 	addi	sp,sp,-28
10003944:	dfc00615 	stw	ra,24(sp)
10003948:	df000515 	stw	fp,20(sp)
1000394c:	df000504 	addi	fp,sp,20
10003950:	e13ffd15 	stw	r4,-12(fp)
10003954:	e17ffe15 	stw	r5,-8(fp)
10003958:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000395c:	e0bffd17 	ldw	r2,-12(fp)
10003960:	10000816 	blt	r2,zero,10003984 <write+0x44>
10003964:	01400304 	movi	r5,12
10003968:	e13ffd17 	ldw	r4,-12(fp)
1000396c:	00030840 	call	10003084 <__mulsi3>
10003970:	1007883a 	mov	r3,r2
10003974:	00840034 	movhi	r2,4096
10003978:	1097fa04 	addi	r2,r2,24552
1000397c:	1885883a 	add	r2,r3,r2
10003980:	00000106 	br	10003988 <write+0x48>
10003984:	0005883a 	mov	r2,zero
10003988:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1000398c:	e0bffb17 	ldw	r2,-20(fp)
10003990:	10002126 	beq	r2,zero,10003a18 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
10003994:	e0bffb17 	ldw	r2,-20(fp)
10003998:	10800217 	ldw	r2,8(r2)
1000399c:	108000cc 	andi	r2,r2,3
100039a0:	10001826 	beq	r2,zero,10003a04 <write+0xc4>
100039a4:	e0bffb17 	ldw	r2,-20(fp)
100039a8:	10800017 	ldw	r2,0(r2)
100039ac:	10800617 	ldw	r2,24(r2)
100039b0:	10001426 	beq	r2,zero,10003a04 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
100039b4:	e0bffb17 	ldw	r2,-20(fp)
100039b8:	10800017 	ldw	r2,0(r2)
100039bc:	10800617 	ldw	r2,24(r2)
100039c0:	e0ffff17 	ldw	r3,-4(fp)
100039c4:	180d883a 	mov	r6,r3
100039c8:	e17ffe17 	ldw	r5,-8(fp)
100039cc:	e13ffb17 	ldw	r4,-20(fp)
100039d0:	103ee83a 	callr	r2
100039d4:	e0bffc15 	stw	r2,-16(fp)
100039d8:	e0bffc17 	ldw	r2,-16(fp)
100039dc:	1000070e 	bge	r2,zero,100039fc <write+0xbc>
      {
        ALT_ERRNO = -rval;
100039e0:	00039040 	call	10003904 <alt_get_errno>
100039e4:	1007883a 	mov	r3,r2
100039e8:	e0bffc17 	ldw	r2,-16(fp)
100039ec:	0085c83a 	sub	r2,zero,r2
100039f0:	18800015 	stw	r2,0(r3)
        return -1;
100039f4:	00bfffc4 	movi	r2,-1
100039f8:	00000c06 	br	10003a2c <write+0xec>
      }
      return rval;
100039fc:	e0bffc17 	ldw	r2,-16(fp)
10003a00:	00000a06 	br	10003a2c <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
10003a04:	00039040 	call	10003904 <alt_get_errno>
10003a08:	1007883a 	mov	r3,r2
10003a0c:	00800344 	movi	r2,13
10003a10:	18800015 	stw	r2,0(r3)
10003a14:	00000406 	br	10003a28 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
10003a18:	00039040 	call	10003904 <alt_get_errno>
10003a1c:	1007883a 	mov	r3,r2
10003a20:	00801444 	movi	r2,81
10003a24:	18800015 	stw	r2,0(r3)
  }
  return -1;
10003a28:	00bfffc4 	movi	r2,-1
}
10003a2c:	e037883a 	mov	sp,fp
10003a30:	dfc00117 	ldw	ra,4(sp)
10003a34:	df000017 	ldw	fp,0(sp)
10003a38:	dec00204 	addi	sp,sp,8
10003a3c:	f800283a 	ret

10003a40 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
10003a40:	defffd04 	addi	sp,sp,-12
10003a44:	dfc00215 	stw	ra,8(sp)
10003a48:	df000115 	stw	fp,4(sp)
10003a4c:	df000104 	addi	fp,sp,4
10003a50:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
10003a54:	d1600604 	addi	r5,gp,-32744
10003a58:	e13fff17 	ldw	r4,-4(fp)
10003a5c:	00046e80 	call	100046e8 <alt_dev_llist_insert>
}
10003a60:	e037883a 	mov	sp,fp
10003a64:	dfc00117 	ldw	ra,4(sp)
10003a68:	df000017 	ldw	fp,0(sp)
10003a6c:	dec00204 	addi	sp,sp,8
10003a70:	f800283a 	ret

10003a74 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
10003a74:	defffd04 	addi	sp,sp,-12
10003a78:	dfc00215 	stw	ra,8(sp)
10003a7c:	df000115 	stw	fp,4(sp)
10003a80:	df000104 	addi	fp,sp,4
10003a84:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
10003a88:	00050940 	call	10005094 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
10003a8c:	00800044 	movi	r2,1
10003a90:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
10003a94:	0001883a 	nop
10003a98:	e037883a 	mov	sp,fp
10003a9c:	dfc00117 	ldw	ra,4(sp)
10003aa0:	df000017 	ldw	fp,0(sp)
10003aa4:	dec00204 	addi	sp,sp,8
10003aa8:	f800283a 	ret

10003aac <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
10003aac:	defffe04 	addi	sp,sp,-8
10003ab0:	dfc00115 	stw	ra,4(sp)
10003ab4:	df000015 	stw	fp,0(sp)
10003ab8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
10003abc:	01800144 	movi	r6,5
10003ac0:	000b883a 	mov	r5,zero
10003ac4:	01040034 	movhi	r4,4096
10003ac8:	21186404 	addi	r4,r4,24976
10003acc:	0003c5c0 	call	10003c5c <altera_avalon_jtag_uart_init>
10003ad0:	01040034 	movhi	r4,4096
10003ad4:	21185a04 	addi	r4,r4,24936
10003ad8:	0003a400 	call	10003a40 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
10003adc:	0001883a 	nop
}
10003ae0:	0001883a 	nop
10003ae4:	e037883a 	mov	sp,fp
10003ae8:	dfc00117 	ldw	ra,4(sp)
10003aec:	df000017 	ldw	fp,0(sp)
10003af0:	dec00204 	addi	sp,sp,8
10003af4:	f800283a 	ret

10003af8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
10003af8:	defffa04 	addi	sp,sp,-24
10003afc:	dfc00515 	stw	ra,20(sp)
10003b00:	df000415 	stw	fp,16(sp)
10003b04:	df000404 	addi	fp,sp,16
10003b08:	e13ffd15 	stw	r4,-12(fp)
10003b0c:	e17ffe15 	stw	r5,-8(fp)
10003b10:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10003b14:	e0bffd17 	ldw	r2,-12(fp)
10003b18:	10800017 	ldw	r2,0(r2)
10003b1c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
10003b20:	e0bffc17 	ldw	r2,-16(fp)
10003b24:	10c00a04 	addi	r3,r2,40
10003b28:	e0bffd17 	ldw	r2,-12(fp)
10003b2c:	10800217 	ldw	r2,8(r2)
10003b30:	100f883a 	mov	r7,r2
10003b34:	e1bfff17 	ldw	r6,-4(fp)
10003b38:	e17ffe17 	ldw	r5,-8(fp)
10003b3c:	1809883a 	mov	r4,r3
10003b40:	00041200 	call	10004120 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
10003b44:	e037883a 	mov	sp,fp
10003b48:	dfc00117 	ldw	ra,4(sp)
10003b4c:	df000017 	ldw	fp,0(sp)
10003b50:	dec00204 	addi	sp,sp,8
10003b54:	f800283a 	ret

10003b58 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
10003b58:	defffa04 	addi	sp,sp,-24
10003b5c:	dfc00515 	stw	ra,20(sp)
10003b60:	df000415 	stw	fp,16(sp)
10003b64:	df000404 	addi	fp,sp,16
10003b68:	e13ffd15 	stw	r4,-12(fp)
10003b6c:	e17ffe15 	stw	r5,-8(fp)
10003b70:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10003b74:	e0bffd17 	ldw	r2,-12(fp)
10003b78:	10800017 	ldw	r2,0(r2)
10003b7c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
10003b80:	e0bffc17 	ldw	r2,-16(fp)
10003b84:	10c00a04 	addi	r3,r2,40
10003b88:	e0bffd17 	ldw	r2,-12(fp)
10003b8c:	10800217 	ldw	r2,8(r2)
10003b90:	100f883a 	mov	r7,r2
10003b94:	e1bfff17 	ldw	r6,-4(fp)
10003b98:	e17ffe17 	ldw	r5,-8(fp)
10003b9c:	1809883a 	mov	r4,r3
10003ba0:	000433c0 	call	1000433c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
10003ba4:	e037883a 	mov	sp,fp
10003ba8:	dfc00117 	ldw	ra,4(sp)
10003bac:	df000017 	ldw	fp,0(sp)
10003bb0:	dec00204 	addi	sp,sp,8
10003bb4:	f800283a 	ret

10003bb8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
10003bb8:	defffc04 	addi	sp,sp,-16
10003bbc:	dfc00315 	stw	ra,12(sp)
10003bc0:	df000215 	stw	fp,8(sp)
10003bc4:	df000204 	addi	fp,sp,8
10003bc8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10003bcc:	e0bfff17 	ldw	r2,-4(fp)
10003bd0:	10800017 	ldw	r2,0(r2)
10003bd4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
10003bd8:	e0bffe17 	ldw	r2,-8(fp)
10003bdc:	10c00a04 	addi	r3,r2,40
10003be0:	e0bfff17 	ldw	r2,-4(fp)
10003be4:	10800217 	ldw	r2,8(r2)
10003be8:	100b883a 	mov	r5,r2
10003bec:	1809883a 	mov	r4,r3
10003bf0:	0003fc80 	call	10003fc8 <altera_avalon_jtag_uart_close>
}
10003bf4:	e037883a 	mov	sp,fp
10003bf8:	dfc00117 	ldw	ra,4(sp)
10003bfc:	df000017 	ldw	fp,0(sp)
10003c00:	dec00204 	addi	sp,sp,8
10003c04:	f800283a 	ret

10003c08 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
10003c08:	defffa04 	addi	sp,sp,-24
10003c0c:	dfc00515 	stw	ra,20(sp)
10003c10:	df000415 	stw	fp,16(sp)
10003c14:	df000404 	addi	fp,sp,16
10003c18:	e13ffd15 	stw	r4,-12(fp)
10003c1c:	e17ffe15 	stw	r5,-8(fp)
10003c20:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
10003c24:	e0bffd17 	ldw	r2,-12(fp)
10003c28:	10800017 	ldw	r2,0(r2)
10003c2c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
10003c30:	e0bffc17 	ldw	r2,-16(fp)
10003c34:	10800a04 	addi	r2,r2,40
10003c38:	e1bfff17 	ldw	r6,-4(fp)
10003c3c:	e17ffe17 	ldw	r5,-8(fp)
10003c40:	1009883a 	mov	r4,r2
10003c44:	00040300 	call	10004030 <altera_avalon_jtag_uart_ioctl>
}
10003c48:	e037883a 	mov	sp,fp
10003c4c:	dfc00117 	ldw	ra,4(sp)
10003c50:	df000017 	ldw	fp,0(sp)
10003c54:	dec00204 	addi	sp,sp,8
10003c58:	f800283a 	ret

10003c5c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
10003c5c:	defffa04 	addi	sp,sp,-24
10003c60:	dfc00515 	stw	ra,20(sp)
10003c64:	df000415 	stw	fp,16(sp)
10003c68:	df000404 	addi	fp,sp,16
10003c6c:	e13ffd15 	stw	r4,-12(fp)
10003c70:	e17ffe15 	stw	r5,-8(fp)
10003c74:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10003c78:	e0bffd17 	ldw	r2,-12(fp)
10003c7c:	00c00044 	movi	r3,1
10003c80:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
10003c84:	e0bffd17 	ldw	r2,-12(fp)
10003c88:	10800017 	ldw	r2,0(r2)
10003c8c:	10800104 	addi	r2,r2,4
10003c90:	1007883a 	mov	r3,r2
10003c94:	e0bffd17 	ldw	r2,-12(fp)
10003c98:	10800817 	ldw	r2,32(r2)
10003c9c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
10003ca0:	e0bffe17 	ldw	r2,-8(fp)
10003ca4:	e0ffff17 	ldw	r3,-4(fp)
10003ca8:	d8000015 	stw	zero,0(sp)
10003cac:	e1fffd17 	ldw	r7,-12(fp)
10003cb0:	01840034 	movhi	r6,4096
10003cb4:	318f4704 	addi	r6,r6,15644
10003cb8:	180b883a 	mov	r5,r3
10003cbc:	1009883a 	mov	r4,r2
10003cc0:	000486c0 	call	1000486c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
10003cc4:	e0bffd17 	ldw	r2,-12(fp)
10003cc8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
10003ccc:	e0bffd17 	ldw	r2,-12(fp)
10003cd0:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
10003cd4:	d0e6b117 	ldw	r3,-25916(gp)
10003cd8:	e1fffd17 	ldw	r7,-12(fp)
10003cdc:	01840034 	movhi	r6,4096
10003ce0:	318fca04 	addi	r6,r6,16168
10003ce4:	180b883a 	mov	r5,r3
10003ce8:	1009883a 	mov	r4,r2
10003cec:	00045600 	call	10004560 <alt_alarm_start>
10003cf0:	1000040e 	bge	r2,zero,10003d04 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
10003cf4:	e0fffd17 	ldw	r3,-12(fp)
10003cf8:	00a00034 	movhi	r2,32768
10003cfc:	10bfffc4 	addi	r2,r2,-1
10003d00:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
10003d04:	0001883a 	nop
10003d08:	e037883a 	mov	sp,fp
10003d0c:	dfc00117 	ldw	ra,4(sp)
10003d10:	df000017 	ldw	fp,0(sp)
10003d14:	dec00204 	addi	sp,sp,8
10003d18:	f800283a 	ret

10003d1c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
10003d1c:	defff804 	addi	sp,sp,-32
10003d20:	df000715 	stw	fp,28(sp)
10003d24:	df000704 	addi	fp,sp,28
10003d28:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
10003d2c:	e0bfff17 	ldw	r2,-4(fp)
10003d30:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
10003d34:	e0bffb17 	ldw	r2,-20(fp)
10003d38:	10800017 	ldw	r2,0(r2)
10003d3c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10003d40:	e0bffc17 	ldw	r2,-16(fp)
10003d44:	10800104 	addi	r2,r2,4
10003d48:	10800037 	ldwio	r2,0(r2)
10003d4c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
10003d50:	e0bffd17 	ldw	r2,-12(fp)
10003d54:	1080c00c 	andi	r2,r2,768
10003d58:	10006d26 	beq	r2,zero,10003f10 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
10003d5c:	e0bffd17 	ldw	r2,-12(fp)
10003d60:	1080400c 	andi	r2,r2,256
10003d64:	10003526 	beq	r2,zero,10003e3c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
10003d68:	00800074 	movhi	r2,1
10003d6c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10003d70:	e0bffb17 	ldw	r2,-20(fp)
10003d74:	10800a17 	ldw	r2,40(r2)
10003d78:	10800044 	addi	r2,r2,1
10003d7c:	1081ffcc 	andi	r2,r2,2047
10003d80:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
10003d84:	e0bffb17 	ldw	r2,-20(fp)
10003d88:	10c00b17 	ldw	r3,44(r2)
10003d8c:	e0bffe17 	ldw	r2,-8(fp)
10003d90:	18801526 	beq	r3,r2,10003de8 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
10003d94:	e0bffc17 	ldw	r2,-16(fp)
10003d98:	10800037 	ldwio	r2,0(r2)
10003d9c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
10003da0:	e0bff917 	ldw	r2,-28(fp)
10003da4:	10a0000c 	andi	r2,r2,32768
10003da8:	10001126 	beq	r2,zero,10003df0 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
10003dac:	e0bffb17 	ldw	r2,-20(fp)
10003db0:	10800a17 	ldw	r2,40(r2)
10003db4:	e0fff917 	ldw	r3,-28(fp)
10003db8:	1809883a 	mov	r4,r3
10003dbc:	e0fffb17 	ldw	r3,-20(fp)
10003dc0:	1885883a 	add	r2,r3,r2
10003dc4:	10800e04 	addi	r2,r2,56
10003dc8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10003dcc:	e0bffb17 	ldw	r2,-20(fp)
10003dd0:	10800a17 	ldw	r2,40(r2)
10003dd4:	10800044 	addi	r2,r2,1
10003dd8:	10c1ffcc 	andi	r3,r2,2047
10003ddc:	e0bffb17 	ldw	r2,-20(fp)
10003de0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
10003de4:	003fe206 	br	10003d70 <__alt_data_end+0xf8003d70>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
10003de8:	0001883a 	nop
10003dec:	00000106 	br	10003df4 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
10003df0:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
10003df4:	e0bff917 	ldw	r2,-28(fp)
10003df8:	10bfffec 	andhi	r2,r2,65535
10003dfc:	10000f26 	beq	r2,zero,10003e3c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10003e00:	e0bffb17 	ldw	r2,-20(fp)
10003e04:	10c00817 	ldw	r3,32(r2)
10003e08:	00bfff84 	movi	r2,-2
10003e0c:	1886703a 	and	r3,r3,r2
10003e10:	e0bffb17 	ldw	r2,-20(fp)
10003e14:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
10003e18:	e0bffc17 	ldw	r2,-16(fp)
10003e1c:	10800104 	addi	r2,r2,4
10003e20:	1007883a 	mov	r3,r2
10003e24:	e0bffb17 	ldw	r2,-20(fp)
10003e28:	10800817 	ldw	r2,32(r2)
10003e2c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10003e30:	e0bffc17 	ldw	r2,-16(fp)
10003e34:	10800104 	addi	r2,r2,4
10003e38:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
10003e3c:	e0bffd17 	ldw	r2,-12(fp)
10003e40:	1080800c 	andi	r2,r2,512
10003e44:	103fbe26 	beq	r2,zero,10003d40 <__alt_data_end+0xf8003d40>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
10003e48:	e0bffd17 	ldw	r2,-12(fp)
10003e4c:	1004d43a 	srli	r2,r2,16
10003e50:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
10003e54:	00001406 	br	10003ea8 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
10003e58:	e0bffc17 	ldw	r2,-16(fp)
10003e5c:	e0fffb17 	ldw	r3,-20(fp)
10003e60:	18c00d17 	ldw	r3,52(r3)
10003e64:	e13ffb17 	ldw	r4,-20(fp)
10003e68:	20c7883a 	add	r3,r4,r3
10003e6c:	18c20e04 	addi	r3,r3,2104
10003e70:	18c00003 	ldbu	r3,0(r3)
10003e74:	18c03fcc 	andi	r3,r3,255
10003e78:	18c0201c 	xori	r3,r3,128
10003e7c:	18ffe004 	addi	r3,r3,-128
10003e80:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10003e84:	e0bffb17 	ldw	r2,-20(fp)
10003e88:	10800d17 	ldw	r2,52(r2)
10003e8c:	10800044 	addi	r2,r2,1
10003e90:	10c1ffcc 	andi	r3,r2,2047
10003e94:	e0bffb17 	ldw	r2,-20(fp)
10003e98:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
10003e9c:	e0bffa17 	ldw	r2,-24(fp)
10003ea0:	10bfffc4 	addi	r2,r2,-1
10003ea4:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
10003ea8:	e0bffa17 	ldw	r2,-24(fp)
10003eac:	10000526 	beq	r2,zero,10003ec4 <altera_avalon_jtag_uart_irq+0x1a8>
10003eb0:	e0bffb17 	ldw	r2,-20(fp)
10003eb4:	10c00d17 	ldw	r3,52(r2)
10003eb8:	e0bffb17 	ldw	r2,-20(fp)
10003ebc:	10800c17 	ldw	r2,48(r2)
10003ec0:	18bfe51e 	bne	r3,r2,10003e58 <__alt_data_end+0xf8003e58>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
10003ec4:	e0bffa17 	ldw	r2,-24(fp)
10003ec8:	103f9d26 	beq	r2,zero,10003d40 <__alt_data_end+0xf8003d40>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10003ecc:	e0bffb17 	ldw	r2,-20(fp)
10003ed0:	10c00817 	ldw	r3,32(r2)
10003ed4:	00bfff44 	movi	r2,-3
10003ed8:	1886703a 	and	r3,r3,r2
10003edc:	e0bffb17 	ldw	r2,-20(fp)
10003ee0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10003ee4:	e0bffb17 	ldw	r2,-20(fp)
10003ee8:	10800017 	ldw	r2,0(r2)
10003eec:	10800104 	addi	r2,r2,4
10003ef0:	1007883a 	mov	r3,r2
10003ef4:	e0bffb17 	ldw	r2,-20(fp)
10003ef8:	10800817 	ldw	r2,32(r2)
10003efc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10003f00:	e0bffc17 	ldw	r2,-16(fp)
10003f04:	10800104 	addi	r2,r2,4
10003f08:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
10003f0c:	003f8c06 	br	10003d40 <__alt_data_end+0xf8003d40>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
10003f10:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
10003f14:	0001883a 	nop
10003f18:	e037883a 	mov	sp,fp
10003f1c:	df000017 	ldw	fp,0(sp)
10003f20:	dec00104 	addi	sp,sp,4
10003f24:	f800283a 	ret

10003f28 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
10003f28:	defff804 	addi	sp,sp,-32
10003f2c:	df000715 	stw	fp,28(sp)
10003f30:	df000704 	addi	fp,sp,28
10003f34:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
10003f38:	e0bffb17 	ldw	r2,-20(fp)
10003f3c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
10003f40:	e0bff917 	ldw	r2,-28(fp)
10003f44:	10800017 	ldw	r2,0(r2)
10003f48:	10800104 	addi	r2,r2,4
10003f4c:	10800037 	ldwio	r2,0(r2)
10003f50:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
10003f54:	e0bffa17 	ldw	r2,-24(fp)
10003f58:	1081000c 	andi	r2,r2,1024
10003f5c:	10000b26 	beq	r2,zero,10003f8c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
10003f60:	e0bff917 	ldw	r2,-28(fp)
10003f64:	10800017 	ldw	r2,0(r2)
10003f68:	10800104 	addi	r2,r2,4
10003f6c:	1007883a 	mov	r3,r2
10003f70:	e0bff917 	ldw	r2,-28(fp)
10003f74:	10800817 	ldw	r2,32(r2)
10003f78:	10810014 	ori	r2,r2,1024
10003f7c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
10003f80:	e0bff917 	ldw	r2,-28(fp)
10003f84:	10000915 	stw	zero,36(r2)
10003f88:	00000a06 	br	10003fb4 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
10003f8c:	e0bff917 	ldw	r2,-28(fp)
10003f90:	10c00917 	ldw	r3,36(r2)
10003f94:	00a00034 	movhi	r2,32768
10003f98:	10bfff04 	addi	r2,r2,-4
10003f9c:	10c00536 	bltu	r2,r3,10003fb4 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
10003fa0:	e0bff917 	ldw	r2,-28(fp)
10003fa4:	10800917 	ldw	r2,36(r2)
10003fa8:	10c00044 	addi	r3,r2,1
10003fac:	e0bff917 	ldw	r2,-28(fp)
10003fb0:	10c00915 	stw	r3,36(r2)
10003fb4:	d0a6b117 	ldw	r2,-25916(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
10003fb8:	e037883a 	mov	sp,fp
10003fbc:	df000017 	ldw	fp,0(sp)
10003fc0:	dec00104 	addi	sp,sp,4
10003fc4:	f800283a 	ret

10003fc8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
10003fc8:	defffd04 	addi	sp,sp,-12
10003fcc:	df000215 	stw	fp,8(sp)
10003fd0:	df000204 	addi	fp,sp,8
10003fd4:	e13ffe15 	stw	r4,-8(fp)
10003fd8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10003fdc:	00000506 	br	10003ff4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
10003fe0:	e0bfff17 	ldw	r2,-4(fp)
10003fe4:	1090000c 	andi	r2,r2,16384
10003fe8:	10000226 	beq	r2,zero,10003ff4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
10003fec:	00bffd44 	movi	r2,-11
10003ff0:	00000b06 	br	10004020 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10003ff4:	e0bffe17 	ldw	r2,-8(fp)
10003ff8:	10c00d17 	ldw	r3,52(r2)
10003ffc:	e0bffe17 	ldw	r2,-8(fp)
10004000:	10800c17 	ldw	r2,48(r2)
10004004:	18800526 	beq	r3,r2,1000401c <altera_avalon_jtag_uart_close+0x54>
10004008:	e0bffe17 	ldw	r2,-8(fp)
1000400c:	10c00917 	ldw	r3,36(r2)
10004010:	e0bffe17 	ldw	r2,-8(fp)
10004014:	10800117 	ldw	r2,4(r2)
10004018:	18bff136 	bltu	r3,r2,10003fe0 <__alt_data_end+0xf8003fe0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
1000401c:	0005883a 	mov	r2,zero
}
10004020:	e037883a 	mov	sp,fp
10004024:	df000017 	ldw	fp,0(sp)
10004028:	dec00104 	addi	sp,sp,4
1000402c:	f800283a 	ret

10004030 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
10004030:	defffa04 	addi	sp,sp,-24
10004034:	df000515 	stw	fp,20(sp)
10004038:	df000504 	addi	fp,sp,20
1000403c:	e13ffd15 	stw	r4,-12(fp)
10004040:	e17ffe15 	stw	r5,-8(fp)
10004044:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
10004048:	00bff9c4 	movi	r2,-25
1000404c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
10004050:	e0bffe17 	ldw	r2,-8(fp)
10004054:	10da8060 	cmpeqi	r3,r2,27137
10004058:	1800031e 	bne	r3,zero,10004068 <altera_avalon_jtag_uart_ioctl+0x38>
1000405c:	109a80a0 	cmpeqi	r2,r2,27138
10004060:	1000181e 	bne	r2,zero,100040c4 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
10004064:	00002906 	br	1000410c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
10004068:	e0bffd17 	ldw	r2,-12(fp)
1000406c:	10c00117 	ldw	r3,4(r2)
10004070:	00a00034 	movhi	r2,32768
10004074:	10bfffc4 	addi	r2,r2,-1
10004078:	18802126 	beq	r3,r2,10004100 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
1000407c:	e0bfff17 	ldw	r2,-4(fp)
10004080:	10800017 	ldw	r2,0(r2)
10004084:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
10004088:	e0bffc17 	ldw	r2,-16(fp)
1000408c:	10800090 	cmplti	r2,r2,2
10004090:	1000061e 	bne	r2,zero,100040ac <altera_avalon_jtag_uart_ioctl+0x7c>
10004094:	e0fffc17 	ldw	r3,-16(fp)
10004098:	00a00034 	movhi	r2,32768
1000409c:	10bfffc4 	addi	r2,r2,-1
100040a0:	18800226 	beq	r3,r2,100040ac <altera_avalon_jtag_uart_ioctl+0x7c>
100040a4:	e0bffc17 	ldw	r2,-16(fp)
100040a8:	00000206 	br	100040b4 <altera_avalon_jtag_uart_ioctl+0x84>
100040ac:	00a00034 	movhi	r2,32768
100040b0:	10bfff84 	addi	r2,r2,-2
100040b4:	e0fffd17 	ldw	r3,-12(fp)
100040b8:	18800115 	stw	r2,4(r3)
      rc = 0;
100040bc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
100040c0:	00000f06 	br	10004100 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
100040c4:	e0bffd17 	ldw	r2,-12(fp)
100040c8:	10c00117 	ldw	r3,4(r2)
100040cc:	00a00034 	movhi	r2,32768
100040d0:	10bfffc4 	addi	r2,r2,-1
100040d4:	18800c26 	beq	r3,r2,10004108 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
100040d8:	e0bffd17 	ldw	r2,-12(fp)
100040dc:	10c00917 	ldw	r3,36(r2)
100040e0:	e0bffd17 	ldw	r2,-12(fp)
100040e4:	10800117 	ldw	r2,4(r2)
100040e8:	1885803a 	cmpltu	r2,r3,r2
100040ec:	10c03fcc 	andi	r3,r2,255
100040f0:	e0bfff17 	ldw	r2,-4(fp)
100040f4:	10c00015 	stw	r3,0(r2)
      rc = 0;
100040f8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
100040fc:	00000206 	br	10004108 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
10004100:	0001883a 	nop
10004104:	00000106 	br	1000410c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
10004108:	0001883a 	nop

  default:
    break;
  }

  return rc;
1000410c:	e0bffb17 	ldw	r2,-20(fp)
}
10004110:	e037883a 	mov	sp,fp
10004114:	df000017 	ldw	fp,0(sp)
10004118:	dec00104 	addi	sp,sp,4
1000411c:	f800283a 	ret

10004120 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
10004120:	defff304 	addi	sp,sp,-52
10004124:	dfc00c15 	stw	ra,48(sp)
10004128:	df000b15 	stw	fp,44(sp)
1000412c:	df000b04 	addi	fp,sp,44
10004130:	e13ffc15 	stw	r4,-16(fp)
10004134:	e17ffd15 	stw	r5,-12(fp)
10004138:	e1bffe15 	stw	r6,-8(fp)
1000413c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
10004140:	e0bffd17 	ldw	r2,-12(fp)
10004144:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10004148:	00004706 	br	10004268 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
1000414c:	e0bffc17 	ldw	r2,-16(fp)
10004150:	10800a17 	ldw	r2,40(r2)
10004154:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
10004158:	e0bffc17 	ldw	r2,-16(fp)
1000415c:	10800b17 	ldw	r2,44(r2)
10004160:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
10004164:	e0fff717 	ldw	r3,-36(fp)
10004168:	e0bff817 	ldw	r2,-32(fp)
1000416c:	18800536 	bltu	r3,r2,10004184 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
10004170:	e0fff717 	ldw	r3,-36(fp)
10004174:	e0bff817 	ldw	r2,-32(fp)
10004178:	1885c83a 	sub	r2,r3,r2
1000417c:	e0bff615 	stw	r2,-40(fp)
10004180:	00000406 	br	10004194 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
10004184:	00c20004 	movi	r3,2048
10004188:	e0bff817 	ldw	r2,-32(fp)
1000418c:	1885c83a 	sub	r2,r3,r2
10004190:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10004194:	e0bff617 	ldw	r2,-40(fp)
10004198:	10001e26 	beq	r2,zero,10004214 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
1000419c:	e0fffe17 	ldw	r3,-8(fp)
100041a0:	e0bff617 	ldw	r2,-40(fp)
100041a4:	1880022e 	bgeu	r3,r2,100041b0 <altera_avalon_jtag_uart_read+0x90>
        n = space;
100041a8:	e0bffe17 	ldw	r2,-8(fp)
100041ac:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
100041b0:	e0bffc17 	ldw	r2,-16(fp)
100041b4:	10c00e04 	addi	r3,r2,56
100041b8:	e0bff817 	ldw	r2,-32(fp)
100041bc:	1885883a 	add	r2,r3,r2
100041c0:	e1bff617 	ldw	r6,-40(fp)
100041c4:	100b883a 	mov	r5,r2
100041c8:	e13ff517 	ldw	r4,-44(fp)
100041cc:	00016fc0 	call	100016fc <memcpy>
      ptr   += n;
100041d0:	e0fff517 	ldw	r3,-44(fp)
100041d4:	e0bff617 	ldw	r2,-40(fp)
100041d8:	1885883a 	add	r2,r3,r2
100041dc:	e0bff515 	stw	r2,-44(fp)
      space -= n;
100041e0:	e0fffe17 	ldw	r3,-8(fp)
100041e4:	e0bff617 	ldw	r2,-40(fp)
100041e8:	1885c83a 	sub	r2,r3,r2
100041ec:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
100041f0:	e0fff817 	ldw	r3,-32(fp)
100041f4:	e0bff617 	ldw	r2,-40(fp)
100041f8:	1885883a 	add	r2,r3,r2
100041fc:	10c1ffcc 	andi	r3,r2,2047
10004200:	e0bffc17 	ldw	r2,-16(fp)
10004204:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
10004208:	e0bffe17 	ldw	r2,-8(fp)
1000420c:	00bfcf16 	blt	zero,r2,1000414c <__alt_data_end+0xf800414c>
10004210:	00000106 	br	10004218 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
10004214:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
10004218:	e0fff517 	ldw	r3,-44(fp)
1000421c:	e0bffd17 	ldw	r2,-12(fp)
10004220:	1880141e 	bne	r3,r2,10004274 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
10004224:	e0bfff17 	ldw	r2,-4(fp)
10004228:	1090000c 	andi	r2,r2,16384
1000422c:	1000131e 	bne	r2,zero,1000427c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
10004230:	0001883a 	nop
10004234:	e0bffc17 	ldw	r2,-16(fp)
10004238:	10c00a17 	ldw	r3,40(r2)
1000423c:	e0bff717 	ldw	r2,-36(fp)
10004240:	1880051e 	bne	r3,r2,10004258 <altera_avalon_jtag_uart_read+0x138>
10004244:	e0bffc17 	ldw	r2,-16(fp)
10004248:	10c00917 	ldw	r3,36(r2)
1000424c:	e0bffc17 	ldw	r2,-16(fp)
10004250:	10800117 	ldw	r2,4(r2)
10004254:	18bff736 	bltu	r3,r2,10004234 <__alt_data_end+0xf8004234>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
10004258:	e0bffc17 	ldw	r2,-16(fp)
1000425c:	10c00a17 	ldw	r3,40(r2)
10004260:	e0bff717 	ldw	r2,-36(fp)
10004264:	18800726 	beq	r3,r2,10004284 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10004268:	e0bffe17 	ldw	r2,-8(fp)
1000426c:	00bfb716 	blt	zero,r2,1000414c <__alt_data_end+0xf800414c>
10004270:	00000506 	br	10004288 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
10004274:	0001883a 	nop
10004278:	00000306 	br	10004288 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
1000427c:	0001883a 	nop
10004280:	00000106 	br	10004288 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
10004284:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
10004288:	e0fff517 	ldw	r3,-44(fp)
1000428c:	e0bffd17 	ldw	r2,-12(fp)
10004290:	18801826 	beq	r3,r2,100042f4 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10004294:	0005303a 	rdctl	r2,status
10004298:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000429c:	e0fffb17 	ldw	r3,-20(fp)
100042a0:	00bfff84 	movi	r2,-2
100042a4:	1884703a 	and	r2,r3,r2
100042a8:	1001703a 	wrctl	status,r2
  
  return context;
100042ac:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
100042b0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
100042b4:	e0bffc17 	ldw	r2,-16(fp)
100042b8:	10800817 	ldw	r2,32(r2)
100042bc:	10c00054 	ori	r3,r2,1
100042c0:	e0bffc17 	ldw	r2,-16(fp)
100042c4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
100042c8:	e0bffc17 	ldw	r2,-16(fp)
100042cc:	10800017 	ldw	r2,0(r2)
100042d0:	10800104 	addi	r2,r2,4
100042d4:	1007883a 	mov	r3,r2
100042d8:	e0bffc17 	ldw	r2,-16(fp)
100042dc:	10800817 	ldw	r2,32(r2)
100042e0:	18800035 	stwio	r2,0(r3)
100042e4:	e0bffa17 	ldw	r2,-24(fp)
100042e8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100042ec:	e0bff917 	ldw	r2,-28(fp)
100042f0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
100042f4:	e0fff517 	ldw	r3,-44(fp)
100042f8:	e0bffd17 	ldw	r2,-12(fp)
100042fc:	18800426 	beq	r3,r2,10004310 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
10004300:	e0fff517 	ldw	r3,-44(fp)
10004304:	e0bffd17 	ldw	r2,-12(fp)
10004308:	1885c83a 	sub	r2,r3,r2
1000430c:	00000606 	br	10004328 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
10004310:	e0bfff17 	ldw	r2,-4(fp)
10004314:	1090000c 	andi	r2,r2,16384
10004318:	10000226 	beq	r2,zero,10004324 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
1000431c:	00bffd44 	movi	r2,-11
10004320:	00000106 	br	10004328 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
10004324:	00bffec4 	movi	r2,-5
}
10004328:	e037883a 	mov	sp,fp
1000432c:	dfc00117 	ldw	ra,4(sp)
10004330:	df000017 	ldw	fp,0(sp)
10004334:	dec00204 	addi	sp,sp,8
10004338:	f800283a 	ret

1000433c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
1000433c:	defff304 	addi	sp,sp,-52
10004340:	dfc00c15 	stw	ra,48(sp)
10004344:	df000b15 	stw	fp,44(sp)
10004348:	df000b04 	addi	fp,sp,44
1000434c:	e13ffc15 	stw	r4,-16(fp)
10004350:	e17ffd15 	stw	r5,-12(fp)
10004354:	e1bffe15 	stw	r6,-8(fp)
10004358:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
1000435c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
10004360:	e0bffd17 	ldw	r2,-12(fp)
10004364:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10004368:	00003706 	br	10004448 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
1000436c:	e0bffc17 	ldw	r2,-16(fp)
10004370:	10800c17 	ldw	r2,48(r2)
10004374:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
10004378:	e0bffc17 	ldw	r2,-16(fp)
1000437c:	10800d17 	ldw	r2,52(r2)
10004380:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
10004384:	e0fff917 	ldw	r3,-28(fp)
10004388:	e0bff517 	ldw	r2,-44(fp)
1000438c:	1880062e 	bgeu	r3,r2,100043a8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
10004390:	e0fff517 	ldw	r3,-44(fp)
10004394:	e0bff917 	ldw	r2,-28(fp)
10004398:	1885c83a 	sub	r2,r3,r2
1000439c:	10bfffc4 	addi	r2,r2,-1
100043a0:	e0bff615 	stw	r2,-40(fp)
100043a4:	00000b06 	br	100043d4 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
100043a8:	e0bff517 	ldw	r2,-44(fp)
100043ac:	10000526 	beq	r2,zero,100043c4 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
100043b0:	00c20004 	movi	r3,2048
100043b4:	e0bff917 	ldw	r2,-28(fp)
100043b8:	1885c83a 	sub	r2,r3,r2
100043bc:	e0bff615 	stw	r2,-40(fp)
100043c0:	00000406 	br	100043d4 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
100043c4:	00c1ffc4 	movi	r3,2047
100043c8:	e0bff917 	ldw	r2,-28(fp)
100043cc:	1885c83a 	sub	r2,r3,r2
100043d0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
100043d4:	e0bff617 	ldw	r2,-40(fp)
100043d8:	10001e26 	beq	r2,zero,10004454 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
100043dc:	e0fffe17 	ldw	r3,-8(fp)
100043e0:	e0bff617 	ldw	r2,-40(fp)
100043e4:	1880022e 	bgeu	r3,r2,100043f0 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
100043e8:	e0bffe17 	ldw	r2,-8(fp)
100043ec:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
100043f0:	e0bffc17 	ldw	r2,-16(fp)
100043f4:	10c20e04 	addi	r3,r2,2104
100043f8:	e0bff917 	ldw	r2,-28(fp)
100043fc:	1885883a 	add	r2,r3,r2
10004400:	e1bff617 	ldw	r6,-40(fp)
10004404:	e17ffd17 	ldw	r5,-12(fp)
10004408:	1009883a 	mov	r4,r2
1000440c:	00016fc0 	call	100016fc <memcpy>
      ptr   += n;
10004410:	e0fffd17 	ldw	r3,-12(fp)
10004414:	e0bff617 	ldw	r2,-40(fp)
10004418:	1885883a 	add	r2,r3,r2
1000441c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
10004420:	e0fffe17 	ldw	r3,-8(fp)
10004424:	e0bff617 	ldw	r2,-40(fp)
10004428:	1885c83a 	sub	r2,r3,r2
1000442c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10004430:	e0fff917 	ldw	r3,-28(fp)
10004434:	e0bff617 	ldw	r2,-40(fp)
10004438:	1885883a 	add	r2,r3,r2
1000443c:	10c1ffcc 	andi	r3,r2,2047
10004440:	e0bffc17 	ldw	r2,-16(fp)
10004444:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10004448:	e0bffe17 	ldw	r2,-8(fp)
1000444c:	00bfc716 	blt	zero,r2,1000436c <__alt_data_end+0xf800436c>
10004450:	00000106 	br	10004458 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
10004454:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10004458:	0005303a 	rdctl	r2,status
1000445c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10004460:	e0fffb17 	ldw	r3,-20(fp)
10004464:	00bfff84 	movi	r2,-2
10004468:	1884703a 	and	r2,r3,r2
1000446c:	1001703a 	wrctl	status,r2
  
  return context;
10004470:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
10004474:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10004478:	e0bffc17 	ldw	r2,-16(fp)
1000447c:	10800817 	ldw	r2,32(r2)
10004480:	10c00094 	ori	r3,r2,2
10004484:	e0bffc17 	ldw	r2,-16(fp)
10004488:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000448c:	e0bffc17 	ldw	r2,-16(fp)
10004490:	10800017 	ldw	r2,0(r2)
10004494:	10800104 	addi	r2,r2,4
10004498:	1007883a 	mov	r3,r2
1000449c:	e0bffc17 	ldw	r2,-16(fp)
100044a0:	10800817 	ldw	r2,32(r2)
100044a4:	18800035 	stwio	r2,0(r3)
100044a8:	e0bffa17 	ldw	r2,-24(fp)
100044ac:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100044b0:	e0bff817 	ldw	r2,-32(fp)
100044b4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
100044b8:	e0bffe17 	ldw	r2,-8(fp)
100044bc:	0080100e 	bge	zero,r2,10004500 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
100044c0:	e0bfff17 	ldw	r2,-4(fp)
100044c4:	1090000c 	andi	r2,r2,16384
100044c8:	1000101e 	bne	r2,zero,1000450c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
100044cc:	0001883a 	nop
100044d0:	e0bffc17 	ldw	r2,-16(fp)
100044d4:	10c00d17 	ldw	r3,52(r2)
100044d8:	e0bff517 	ldw	r2,-44(fp)
100044dc:	1880051e 	bne	r3,r2,100044f4 <altera_avalon_jtag_uart_write+0x1b8>
100044e0:	e0bffc17 	ldw	r2,-16(fp)
100044e4:	10c00917 	ldw	r3,36(r2)
100044e8:	e0bffc17 	ldw	r2,-16(fp)
100044ec:	10800117 	ldw	r2,4(r2)
100044f0:	18bff736 	bltu	r3,r2,100044d0 <__alt_data_end+0xf80044d0>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
100044f4:	e0bffc17 	ldw	r2,-16(fp)
100044f8:	10800917 	ldw	r2,36(r2)
100044fc:	1000051e 	bne	r2,zero,10004514 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
10004500:	e0bffe17 	ldw	r2,-8(fp)
10004504:	00bfd016 	blt	zero,r2,10004448 <__alt_data_end+0xf8004448>
10004508:	00000306 	br	10004518 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
1000450c:	0001883a 	nop
10004510:	00000106 	br	10004518 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
10004514:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
10004518:	e0fffd17 	ldw	r3,-12(fp)
1000451c:	e0bff717 	ldw	r2,-36(fp)
10004520:	18800426 	beq	r3,r2,10004534 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
10004524:	e0fffd17 	ldw	r3,-12(fp)
10004528:	e0bff717 	ldw	r2,-36(fp)
1000452c:	1885c83a 	sub	r2,r3,r2
10004530:	00000606 	br	1000454c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
10004534:	e0bfff17 	ldw	r2,-4(fp)
10004538:	1090000c 	andi	r2,r2,16384
1000453c:	10000226 	beq	r2,zero,10004548 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
10004540:	00bffd44 	movi	r2,-11
10004544:	00000106 	br	1000454c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
10004548:	00bffec4 	movi	r2,-5
}
1000454c:	e037883a 	mov	sp,fp
10004550:	dfc00117 	ldw	ra,4(sp)
10004554:	df000017 	ldw	fp,0(sp)
10004558:	dec00204 	addi	sp,sp,8
1000455c:	f800283a 	ret

10004560 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
10004560:	defff504 	addi	sp,sp,-44
10004564:	df000a15 	stw	fp,40(sp)
10004568:	df000a04 	addi	fp,sp,40
1000456c:	e13ffc15 	stw	r4,-16(fp)
10004570:	e17ffd15 	stw	r5,-12(fp)
10004574:	e1bffe15 	stw	r6,-8(fp)
10004578:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
1000457c:	e03ff615 	stw	zero,-40(fp)
10004580:	d0a6b117 	ldw	r2,-25916(gp)
  
  if (alt_ticks_per_second ())
10004584:	10003c26 	beq	r2,zero,10004678 <alt_alarm_start+0x118>
  {
    if (alarm)
10004588:	e0bffc17 	ldw	r2,-16(fp)
1000458c:	10003826 	beq	r2,zero,10004670 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
10004590:	e0bffc17 	ldw	r2,-16(fp)
10004594:	e0fffe17 	ldw	r3,-8(fp)
10004598:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
1000459c:	e0bffc17 	ldw	r2,-16(fp)
100045a0:	e0ffff17 	ldw	r3,-4(fp)
100045a4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100045a8:	0005303a 	rdctl	r2,status
100045ac:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100045b0:	e0fff917 	ldw	r3,-28(fp)
100045b4:	00bfff84 	movi	r2,-2
100045b8:	1884703a 	and	r2,r3,r2
100045bc:	1001703a 	wrctl	status,r2
  
  return context;
100045c0:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
100045c4:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
100045c8:	d0a6b217 	ldw	r2,-25912(gp)
      
      current_nticks = alt_nticks();
100045cc:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
100045d0:	e0fffd17 	ldw	r3,-12(fp)
100045d4:	e0bff617 	ldw	r2,-40(fp)
100045d8:	1885883a 	add	r2,r3,r2
100045dc:	10c00044 	addi	r3,r2,1
100045e0:	e0bffc17 	ldw	r2,-16(fp)
100045e4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
100045e8:	e0bffc17 	ldw	r2,-16(fp)
100045ec:	10c00217 	ldw	r3,8(r2)
100045f0:	e0bff617 	ldw	r2,-40(fp)
100045f4:	1880042e 	bgeu	r3,r2,10004608 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
100045f8:	e0bffc17 	ldw	r2,-16(fp)
100045fc:	00c00044 	movi	r3,1
10004600:	10c00405 	stb	r3,16(r2)
10004604:	00000206 	br	10004610 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
10004608:	e0bffc17 	ldw	r2,-16(fp)
1000460c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
10004610:	e0bffc17 	ldw	r2,-16(fp)
10004614:	d0e00c04 	addi	r3,gp,-32720
10004618:	e0fffa15 	stw	r3,-24(fp)
1000461c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10004620:	e0bffb17 	ldw	r2,-20(fp)
10004624:	e0fffa17 	ldw	r3,-24(fp)
10004628:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1000462c:	e0bffa17 	ldw	r2,-24(fp)
10004630:	10c00017 	ldw	r3,0(r2)
10004634:	e0bffb17 	ldw	r2,-20(fp)
10004638:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1000463c:	e0bffa17 	ldw	r2,-24(fp)
10004640:	10800017 	ldw	r2,0(r2)
10004644:	e0fffb17 	ldw	r3,-20(fp)
10004648:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1000464c:	e0bffa17 	ldw	r2,-24(fp)
10004650:	e0fffb17 	ldw	r3,-20(fp)
10004654:	10c00015 	stw	r3,0(r2)
10004658:	e0bff817 	ldw	r2,-32(fp)
1000465c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10004660:	e0bff717 	ldw	r2,-36(fp)
10004664:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
10004668:	0005883a 	mov	r2,zero
1000466c:	00000306 	br	1000467c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
10004670:	00bffa84 	movi	r2,-22
10004674:	00000106 	br	1000467c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
10004678:	00bfde84 	movi	r2,-134
  }
}
1000467c:	e037883a 	mov	sp,fp
10004680:	df000017 	ldw	fp,0(sp)
10004684:	dec00104 	addi	sp,sp,4
10004688:	f800283a 	ret

1000468c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
1000468c:	deffff04 	addi	sp,sp,-4
10004690:	df000015 	stw	fp,0(sp)
10004694:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
10004698:	0001883a 	nop
1000469c:	e037883a 	mov	sp,fp
100046a0:	df000017 	ldw	fp,0(sp)
100046a4:	dec00104 	addi	sp,sp,4
100046a8:	f800283a 	ret

100046ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100046ac:	defffe04 	addi	sp,sp,-8
100046b0:	dfc00115 	stw	ra,4(sp)
100046b4:	df000015 	stw	fp,0(sp)
100046b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100046bc:	d0a00917 	ldw	r2,-32732(gp)
100046c0:	10000326 	beq	r2,zero,100046d0 <alt_get_errno+0x24>
100046c4:	d0a00917 	ldw	r2,-32732(gp)
100046c8:	103ee83a 	callr	r2
100046cc:	00000106 	br	100046d4 <alt_get_errno+0x28>
100046d0:	d0a6ac04 	addi	r2,gp,-25936
}
100046d4:	e037883a 	mov	sp,fp
100046d8:	dfc00117 	ldw	ra,4(sp)
100046dc:	df000017 	ldw	fp,0(sp)
100046e0:	dec00204 	addi	sp,sp,8
100046e4:	f800283a 	ret

100046e8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
100046e8:	defffa04 	addi	sp,sp,-24
100046ec:	dfc00515 	stw	ra,20(sp)
100046f0:	df000415 	stw	fp,16(sp)
100046f4:	df000404 	addi	fp,sp,16
100046f8:	e13ffe15 	stw	r4,-8(fp)
100046fc:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
10004700:	e0bffe17 	ldw	r2,-8(fp)
10004704:	10000326 	beq	r2,zero,10004714 <alt_dev_llist_insert+0x2c>
10004708:	e0bffe17 	ldw	r2,-8(fp)
1000470c:	10800217 	ldw	r2,8(r2)
10004710:	1000061e 	bne	r2,zero,1000472c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
10004714:	00046ac0 	call	100046ac <alt_get_errno>
10004718:	1007883a 	mov	r3,r2
1000471c:	00800584 	movi	r2,22
10004720:	18800015 	stw	r2,0(r3)
    return -EINVAL;
10004724:	00bffa84 	movi	r2,-22
10004728:	00001306 	br	10004778 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
1000472c:	e0bffe17 	ldw	r2,-8(fp)
10004730:	e0ffff17 	ldw	r3,-4(fp)
10004734:	e0fffc15 	stw	r3,-16(fp)
10004738:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1000473c:	e0bffd17 	ldw	r2,-12(fp)
10004740:	e0fffc17 	ldw	r3,-16(fp)
10004744:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10004748:	e0bffc17 	ldw	r2,-16(fp)
1000474c:	10c00017 	ldw	r3,0(r2)
10004750:	e0bffd17 	ldw	r2,-12(fp)
10004754:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10004758:	e0bffc17 	ldw	r2,-16(fp)
1000475c:	10800017 	ldw	r2,0(r2)
10004760:	e0fffd17 	ldw	r3,-12(fp)
10004764:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10004768:	e0bffc17 	ldw	r2,-16(fp)
1000476c:	e0fffd17 	ldw	r3,-12(fp)
10004770:	10c00015 	stw	r3,0(r2)

  return 0;  
10004774:	0005883a 	mov	r2,zero
}
10004778:	e037883a 	mov	sp,fp
1000477c:	dfc00117 	ldw	ra,4(sp)
10004780:	df000017 	ldw	fp,0(sp)
10004784:	dec00204 	addi	sp,sp,8
10004788:	f800283a 	ret

1000478c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
1000478c:	defffd04 	addi	sp,sp,-12
10004790:	dfc00215 	stw	ra,8(sp)
10004794:	df000115 	stw	fp,4(sp)
10004798:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
1000479c:	00840034 	movhi	r2,4096
100047a0:	1095d004 	addi	r2,r2,22336
100047a4:	e0bfff15 	stw	r2,-4(fp)
100047a8:	00000606 	br	100047c4 <_do_ctors+0x38>
        (*ctor) (); 
100047ac:	e0bfff17 	ldw	r2,-4(fp)
100047b0:	10800017 	ldw	r2,0(r2)
100047b4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
100047b8:	e0bfff17 	ldw	r2,-4(fp)
100047bc:	10bfff04 	addi	r2,r2,-4
100047c0:	e0bfff15 	stw	r2,-4(fp)
100047c4:	e0ffff17 	ldw	r3,-4(fp)
100047c8:	00840034 	movhi	r2,4096
100047cc:	1095d104 	addi	r2,r2,22340
100047d0:	18bff62e 	bgeu	r3,r2,100047ac <__alt_data_end+0xf80047ac>
        (*ctor) (); 
}
100047d4:	0001883a 	nop
100047d8:	e037883a 	mov	sp,fp
100047dc:	dfc00117 	ldw	ra,4(sp)
100047e0:	df000017 	ldw	fp,0(sp)
100047e4:	dec00204 	addi	sp,sp,8
100047e8:	f800283a 	ret

100047ec <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
100047ec:	defffd04 	addi	sp,sp,-12
100047f0:	dfc00215 	stw	ra,8(sp)
100047f4:	df000115 	stw	fp,4(sp)
100047f8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
100047fc:	00840034 	movhi	r2,4096
10004800:	1095d004 	addi	r2,r2,22336
10004804:	e0bfff15 	stw	r2,-4(fp)
10004808:	00000606 	br	10004824 <_do_dtors+0x38>
        (*dtor) (); 
1000480c:	e0bfff17 	ldw	r2,-4(fp)
10004810:	10800017 	ldw	r2,0(r2)
10004814:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10004818:	e0bfff17 	ldw	r2,-4(fp)
1000481c:	10bfff04 	addi	r2,r2,-4
10004820:	e0bfff15 	stw	r2,-4(fp)
10004824:	e0ffff17 	ldw	r3,-4(fp)
10004828:	00840034 	movhi	r2,4096
1000482c:	1095d104 	addi	r2,r2,22340
10004830:	18bff62e 	bgeu	r3,r2,1000480c <__alt_data_end+0xf800480c>
        (*dtor) (); 
}
10004834:	0001883a 	nop
10004838:	e037883a 	mov	sp,fp
1000483c:	dfc00117 	ldw	ra,4(sp)
10004840:	df000017 	ldw	fp,0(sp)
10004844:	dec00204 	addi	sp,sp,8
10004848:	f800283a 	ret

1000484c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
1000484c:	deffff04 	addi	sp,sp,-4
10004850:	df000015 	stw	fp,0(sp)
10004854:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
10004858:	0001883a 	nop
1000485c:	e037883a 	mov	sp,fp
10004860:	df000017 	ldw	fp,0(sp)
10004864:	dec00104 	addi	sp,sp,4
10004868:	f800283a 	ret

1000486c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
1000486c:	defff904 	addi	sp,sp,-28
10004870:	dfc00615 	stw	ra,24(sp)
10004874:	df000515 	stw	fp,20(sp)
10004878:	df000504 	addi	fp,sp,20
1000487c:	e13ffc15 	stw	r4,-16(fp)
10004880:	e17ffd15 	stw	r5,-12(fp)
10004884:	e1bffe15 	stw	r6,-8(fp)
10004888:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
1000488c:	e0800217 	ldw	r2,8(fp)
10004890:	d8800015 	stw	r2,0(sp)
10004894:	e1ffff17 	ldw	r7,-4(fp)
10004898:	e1bffe17 	ldw	r6,-8(fp)
1000489c:	e17ffd17 	ldw	r5,-12(fp)
100048a0:	e13ffc17 	ldw	r4,-16(fp)
100048a4:	0004a1c0 	call	10004a1c <alt_iic_isr_register>
}  
100048a8:	e037883a 	mov	sp,fp
100048ac:	dfc00117 	ldw	ra,4(sp)
100048b0:	df000017 	ldw	fp,0(sp)
100048b4:	dec00204 	addi	sp,sp,8
100048b8:	f800283a 	ret

100048bc <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
100048bc:	defff904 	addi	sp,sp,-28
100048c0:	df000615 	stw	fp,24(sp)
100048c4:	df000604 	addi	fp,sp,24
100048c8:	e13ffe15 	stw	r4,-8(fp)
100048cc:	e17fff15 	stw	r5,-4(fp)
100048d0:	e0bfff17 	ldw	r2,-4(fp)
100048d4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100048d8:	0005303a 	rdctl	r2,status
100048dc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100048e0:	e0fffb17 	ldw	r3,-20(fp)
100048e4:	00bfff84 	movi	r2,-2
100048e8:	1884703a 	and	r2,r3,r2
100048ec:	1001703a 	wrctl	status,r2
  
  return context;
100048f0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
100048f4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
100048f8:	00c00044 	movi	r3,1
100048fc:	e0bffa17 	ldw	r2,-24(fp)
10004900:	1884983a 	sll	r2,r3,r2
10004904:	1007883a 	mov	r3,r2
10004908:	d0a6b017 	ldw	r2,-25920(gp)
1000490c:	1884b03a 	or	r2,r3,r2
10004910:	d0a6b015 	stw	r2,-25920(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10004914:	d0a6b017 	ldw	r2,-25920(gp)
10004918:	100170fa 	wrctl	ienable,r2
1000491c:	e0bffc17 	ldw	r2,-16(fp)
10004920:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10004924:	e0bffd17 	ldw	r2,-12(fp)
10004928:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
1000492c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
10004930:	0001883a 	nop
}
10004934:	e037883a 	mov	sp,fp
10004938:	df000017 	ldw	fp,0(sp)
1000493c:	dec00104 	addi	sp,sp,4
10004940:	f800283a 	ret

10004944 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
10004944:	defff904 	addi	sp,sp,-28
10004948:	df000615 	stw	fp,24(sp)
1000494c:	df000604 	addi	fp,sp,24
10004950:	e13ffe15 	stw	r4,-8(fp)
10004954:	e17fff15 	stw	r5,-4(fp)
10004958:	e0bfff17 	ldw	r2,-4(fp)
1000495c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10004960:	0005303a 	rdctl	r2,status
10004964:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10004968:	e0fffb17 	ldw	r3,-20(fp)
1000496c:	00bfff84 	movi	r2,-2
10004970:	1884703a 	and	r2,r3,r2
10004974:	1001703a 	wrctl	status,r2
  
  return context;
10004978:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
1000497c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
10004980:	00c00044 	movi	r3,1
10004984:	e0bffa17 	ldw	r2,-24(fp)
10004988:	1884983a 	sll	r2,r3,r2
1000498c:	0084303a 	nor	r2,zero,r2
10004990:	1007883a 	mov	r3,r2
10004994:	d0a6b017 	ldw	r2,-25920(gp)
10004998:	1884703a 	and	r2,r3,r2
1000499c:	d0a6b015 	stw	r2,-25920(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
100049a0:	d0a6b017 	ldw	r2,-25920(gp)
100049a4:	100170fa 	wrctl	ienable,r2
100049a8:	e0bffc17 	ldw	r2,-16(fp)
100049ac:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100049b0:	e0bffd17 	ldw	r2,-12(fp)
100049b4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
100049b8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
100049bc:	0001883a 	nop
}
100049c0:	e037883a 	mov	sp,fp
100049c4:	df000017 	ldw	fp,0(sp)
100049c8:	dec00104 	addi	sp,sp,4
100049cc:	f800283a 	ret

100049d0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
100049d0:	defffc04 	addi	sp,sp,-16
100049d4:	df000315 	stw	fp,12(sp)
100049d8:	df000304 	addi	fp,sp,12
100049dc:	e13ffe15 	stw	r4,-8(fp)
100049e0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
100049e4:	000530fa 	rdctl	r2,ienable
100049e8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
100049ec:	00c00044 	movi	r3,1
100049f0:	e0bfff17 	ldw	r2,-4(fp)
100049f4:	1884983a 	sll	r2,r3,r2
100049f8:	1007883a 	mov	r3,r2
100049fc:	e0bffd17 	ldw	r2,-12(fp)
10004a00:	1884703a 	and	r2,r3,r2
10004a04:	1004c03a 	cmpne	r2,r2,zero
10004a08:	10803fcc 	andi	r2,r2,255
}
10004a0c:	e037883a 	mov	sp,fp
10004a10:	df000017 	ldw	fp,0(sp)
10004a14:	dec00104 	addi	sp,sp,4
10004a18:	f800283a 	ret

10004a1c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10004a1c:	defff504 	addi	sp,sp,-44
10004a20:	dfc00a15 	stw	ra,40(sp)
10004a24:	df000915 	stw	fp,36(sp)
10004a28:	df000904 	addi	fp,sp,36
10004a2c:	e13ffc15 	stw	r4,-16(fp)
10004a30:	e17ffd15 	stw	r5,-12(fp)
10004a34:	e1bffe15 	stw	r6,-8(fp)
10004a38:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
10004a3c:	00bffa84 	movi	r2,-22
10004a40:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
10004a44:	e0bffd17 	ldw	r2,-12(fp)
10004a48:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
10004a4c:	e0bff817 	ldw	r2,-32(fp)
10004a50:	10800808 	cmpgei	r2,r2,32
10004a54:	1000271e 	bne	r2,zero,10004af4 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10004a58:	0005303a 	rdctl	r2,status
10004a5c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10004a60:	e0fffb17 	ldw	r3,-20(fp)
10004a64:	00bfff84 	movi	r2,-2
10004a68:	1884703a 	and	r2,r3,r2
10004a6c:	1001703a 	wrctl	status,r2
  
  return context;
10004a70:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
10004a74:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
10004a78:	00840074 	movhi	r2,4097
10004a7c:	10a33004 	addi	r2,r2,-29504
10004a80:	e0fff817 	ldw	r3,-32(fp)
10004a84:	180690fa 	slli	r3,r3,3
10004a88:	10c5883a 	add	r2,r2,r3
10004a8c:	e0fffe17 	ldw	r3,-8(fp)
10004a90:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
10004a94:	00840074 	movhi	r2,4097
10004a98:	10a33004 	addi	r2,r2,-29504
10004a9c:	e0fff817 	ldw	r3,-32(fp)
10004aa0:	180690fa 	slli	r3,r3,3
10004aa4:	10c5883a 	add	r2,r2,r3
10004aa8:	10800104 	addi	r2,r2,4
10004aac:	e0ffff17 	ldw	r3,-4(fp)
10004ab0:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
10004ab4:	e0bffe17 	ldw	r2,-8(fp)
10004ab8:	10000526 	beq	r2,zero,10004ad0 <alt_iic_isr_register+0xb4>
10004abc:	e0bff817 	ldw	r2,-32(fp)
10004ac0:	100b883a 	mov	r5,r2
10004ac4:	e13ffc17 	ldw	r4,-16(fp)
10004ac8:	00048bc0 	call	100048bc <alt_ic_irq_enable>
10004acc:	00000406 	br	10004ae0 <alt_iic_isr_register+0xc4>
10004ad0:	e0bff817 	ldw	r2,-32(fp)
10004ad4:	100b883a 	mov	r5,r2
10004ad8:	e13ffc17 	ldw	r4,-16(fp)
10004adc:	00049440 	call	10004944 <alt_ic_irq_disable>
10004ae0:	e0bff715 	stw	r2,-36(fp)
10004ae4:	e0bffa17 	ldw	r2,-24(fp)
10004ae8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10004aec:	e0bff917 	ldw	r2,-28(fp)
10004af0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
10004af4:	e0bff717 	ldw	r2,-36(fp)
}
10004af8:	e037883a 	mov	sp,fp
10004afc:	dfc00117 	ldw	ra,4(sp)
10004b00:	df000017 	ldw	fp,0(sp)
10004b04:	dec00204 	addi	sp,sp,8
10004b08:	f800283a 	ret

10004b0c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
10004b0c:	defff804 	addi	sp,sp,-32
10004b10:	dfc00715 	stw	ra,28(sp)
10004b14:	df000615 	stw	fp,24(sp)
10004b18:	dc000515 	stw	r16,20(sp)
10004b1c:	df000604 	addi	fp,sp,24
10004b20:	e13ffb15 	stw	r4,-20(fp)
10004b24:	e17ffc15 	stw	r5,-16(fp)
10004b28:	e1bffd15 	stw	r6,-12(fp)
10004b2c:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
10004b30:	e1bffe17 	ldw	r6,-8(fp)
10004b34:	e17ffd17 	ldw	r5,-12(fp)
10004b38:	e13ffc17 	ldw	r4,-16(fp)
10004b3c:	0004d940 	call	10004d94 <open>
10004b40:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
10004b44:	e0bffa17 	ldw	r2,-24(fp)
10004b48:	10002216 	blt	r2,zero,10004bd4 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
10004b4c:	04040034 	movhi	r16,4096
10004b50:	8417fa04 	addi	r16,r16,24552
10004b54:	e0bffa17 	ldw	r2,-24(fp)
10004b58:	01400304 	movi	r5,12
10004b5c:	1009883a 	mov	r4,r2
10004b60:	00030840 	call	10003084 <__mulsi3>
10004b64:	8085883a 	add	r2,r16,r2
10004b68:	10c00017 	ldw	r3,0(r2)
10004b6c:	e0bffb17 	ldw	r2,-20(fp)
10004b70:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
10004b74:	04040034 	movhi	r16,4096
10004b78:	8417fa04 	addi	r16,r16,24552
10004b7c:	e0bffa17 	ldw	r2,-24(fp)
10004b80:	01400304 	movi	r5,12
10004b84:	1009883a 	mov	r4,r2
10004b88:	00030840 	call	10003084 <__mulsi3>
10004b8c:	8085883a 	add	r2,r16,r2
10004b90:	10800104 	addi	r2,r2,4
10004b94:	10c00017 	ldw	r3,0(r2)
10004b98:	e0bffb17 	ldw	r2,-20(fp)
10004b9c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
10004ba0:	04040034 	movhi	r16,4096
10004ba4:	8417fa04 	addi	r16,r16,24552
10004ba8:	e0bffa17 	ldw	r2,-24(fp)
10004bac:	01400304 	movi	r5,12
10004bb0:	1009883a 	mov	r4,r2
10004bb4:	00030840 	call	10003084 <__mulsi3>
10004bb8:	8085883a 	add	r2,r16,r2
10004bbc:	10800204 	addi	r2,r2,8
10004bc0:	10c00017 	ldw	r3,0(r2)
10004bc4:	e0bffb17 	ldw	r2,-20(fp)
10004bc8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
10004bcc:	e13ffa17 	ldw	r4,-24(fp)
10004bd0:	00037d00 	call	100037d0 <alt_release_fd>
  }
} 
10004bd4:	0001883a 	nop
10004bd8:	e6ffff04 	addi	sp,fp,-4
10004bdc:	dfc00217 	ldw	ra,8(sp)
10004be0:	df000117 	ldw	fp,4(sp)
10004be4:	dc000017 	ldw	r16,0(sp)
10004be8:	dec00304 	addi	sp,sp,12
10004bec:	f800283a 	ret

10004bf0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
10004bf0:	defffb04 	addi	sp,sp,-20
10004bf4:	dfc00415 	stw	ra,16(sp)
10004bf8:	df000315 	stw	fp,12(sp)
10004bfc:	df000304 	addi	fp,sp,12
10004c00:	e13ffd15 	stw	r4,-12(fp)
10004c04:	e17ffe15 	stw	r5,-8(fp)
10004c08:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
10004c0c:	01c07fc4 	movi	r7,511
10004c10:	01800044 	movi	r6,1
10004c14:	e17ffd17 	ldw	r5,-12(fp)
10004c18:	01040034 	movhi	r4,4096
10004c1c:	2117fd04 	addi	r4,r4,24564
10004c20:	0004b0c0 	call	10004b0c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
10004c24:	01c07fc4 	movi	r7,511
10004c28:	000d883a 	mov	r6,zero
10004c2c:	e17ffe17 	ldw	r5,-8(fp)
10004c30:	01040034 	movhi	r4,4096
10004c34:	2117fa04 	addi	r4,r4,24552
10004c38:	0004b0c0 	call	10004b0c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
10004c3c:	01c07fc4 	movi	r7,511
10004c40:	01800044 	movi	r6,1
10004c44:	e17fff17 	ldw	r5,-4(fp)
10004c48:	01040034 	movhi	r4,4096
10004c4c:	21180004 	addi	r4,r4,24576
10004c50:	0004b0c0 	call	10004b0c <alt_open_fd>
}  
10004c54:	0001883a 	nop
10004c58:	e037883a 	mov	sp,fp
10004c5c:	dfc00117 	ldw	ra,4(sp)
10004c60:	df000017 	ldw	fp,0(sp)
10004c64:	dec00204 	addi	sp,sp,8
10004c68:	f800283a 	ret

10004c6c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10004c6c:	defffe04 	addi	sp,sp,-8
10004c70:	dfc00115 	stw	ra,4(sp)
10004c74:	df000015 	stw	fp,0(sp)
10004c78:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10004c7c:	d0a00917 	ldw	r2,-32732(gp)
10004c80:	10000326 	beq	r2,zero,10004c90 <alt_get_errno+0x24>
10004c84:	d0a00917 	ldw	r2,-32732(gp)
10004c88:	103ee83a 	callr	r2
10004c8c:	00000106 	br	10004c94 <alt_get_errno+0x28>
10004c90:	d0a6ac04 	addi	r2,gp,-25936
}
10004c94:	e037883a 	mov	sp,fp
10004c98:	dfc00117 	ldw	ra,4(sp)
10004c9c:	df000017 	ldw	fp,0(sp)
10004ca0:	dec00204 	addi	sp,sp,8
10004ca4:	f800283a 	ret

10004ca8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
10004ca8:	defffb04 	addi	sp,sp,-20
10004cac:	dfc00415 	stw	ra,16(sp)
10004cb0:	df000315 	stw	fp,12(sp)
10004cb4:	dc000215 	stw	r16,8(sp)
10004cb8:	df000304 	addi	fp,sp,12
10004cbc:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
10004cc0:	e0bffe17 	ldw	r2,-8(fp)
10004cc4:	10800217 	ldw	r2,8(r2)
10004cc8:	10d00034 	orhi	r3,r2,16384
10004ccc:	e0bffe17 	ldw	r2,-8(fp)
10004cd0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10004cd4:	e03ffd15 	stw	zero,-12(fp)
10004cd8:	00002306 	br	10004d68 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10004cdc:	04040034 	movhi	r16,4096
10004ce0:	8417fa04 	addi	r16,r16,24552
10004ce4:	e0bffd17 	ldw	r2,-12(fp)
10004ce8:	01400304 	movi	r5,12
10004cec:	1009883a 	mov	r4,r2
10004cf0:	00030840 	call	10003084 <__mulsi3>
10004cf4:	8085883a 	add	r2,r16,r2
10004cf8:	10c00017 	ldw	r3,0(r2)
10004cfc:	e0bffe17 	ldw	r2,-8(fp)
10004d00:	10800017 	ldw	r2,0(r2)
10004d04:	1880151e 	bne	r3,r2,10004d5c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10004d08:	04040034 	movhi	r16,4096
10004d0c:	8417fa04 	addi	r16,r16,24552
10004d10:	e0bffd17 	ldw	r2,-12(fp)
10004d14:	01400304 	movi	r5,12
10004d18:	1009883a 	mov	r4,r2
10004d1c:	00030840 	call	10003084 <__mulsi3>
10004d20:	8085883a 	add	r2,r16,r2
10004d24:	10800204 	addi	r2,r2,8
10004d28:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10004d2c:	10000b0e 	bge	r2,zero,10004d5c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
10004d30:	01400304 	movi	r5,12
10004d34:	e13ffd17 	ldw	r4,-12(fp)
10004d38:	00030840 	call	10003084 <__mulsi3>
10004d3c:	1007883a 	mov	r3,r2
10004d40:	00840034 	movhi	r2,4096
10004d44:	1097fa04 	addi	r2,r2,24552
10004d48:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10004d4c:	e0bffe17 	ldw	r2,-8(fp)
10004d50:	18800226 	beq	r3,r2,10004d5c <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
10004d54:	00bffcc4 	movi	r2,-13
10004d58:	00000806 	br	10004d7c <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10004d5c:	e0bffd17 	ldw	r2,-12(fp)
10004d60:	10800044 	addi	r2,r2,1
10004d64:	e0bffd15 	stw	r2,-12(fp)
10004d68:	d0a00817 	ldw	r2,-32736(gp)
10004d6c:	1007883a 	mov	r3,r2
10004d70:	e0bffd17 	ldw	r2,-12(fp)
10004d74:	18bfd92e 	bgeu	r3,r2,10004cdc <__alt_data_end+0xf8004cdc>
    }
  }
  
  /* The device is not locked */
 
  return 0;
10004d78:	0005883a 	mov	r2,zero
}
10004d7c:	e6ffff04 	addi	sp,fp,-4
10004d80:	dfc00217 	ldw	ra,8(sp)
10004d84:	df000117 	ldw	fp,4(sp)
10004d88:	dc000017 	ldw	r16,0(sp)
10004d8c:	dec00304 	addi	sp,sp,12
10004d90:	f800283a 	ret

10004d94 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
10004d94:	defff604 	addi	sp,sp,-40
10004d98:	dfc00915 	stw	ra,36(sp)
10004d9c:	df000815 	stw	fp,32(sp)
10004da0:	df000804 	addi	fp,sp,32
10004da4:	e13ffd15 	stw	r4,-12(fp)
10004da8:	e17ffe15 	stw	r5,-8(fp)
10004dac:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
10004db0:	00bfffc4 	movi	r2,-1
10004db4:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
10004db8:	00bffb44 	movi	r2,-19
10004dbc:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
10004dc0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
10004dc4:	d1600604 	addi	r5,gp,-32744
10004dc8:	e13ffd17 	ldw	r4,-12(fp)
10004dcc:	00050b80 	call	100050b8 <alt_find_dev>
10004dd0:	e0bff815 	stw	r2,-32(fp)
10004dd4:	e0bff817 	ldw	r2,-32(fp)
10004dd8:	1000051e 	bne	r2,zero,10004df0 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
10004ddc:	e13ffd17 	ldw	r4,-12(fp)
10004de0:	00051480 	call	10005148 <alt_find_file>
10004de4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
10004de8:	00800044 	movi	r2,1
10004dec:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
10004df0:	e0bff817 	ldw	r2,-32(fp)
10004df4:	10002b26 	beq	r2,zero,10004ea4 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
10004df8:	e13ff817 	ldw	r4,-32(fp)
10004dfc:	00052500 	call	10005250 <alt_get_fd>
10004e00:	e0bff915 	stw	r2,-28(fp)
10004e04:	e0bff917 	ldw	r2,-28(fp)
10004e08:	1000030e 	bge	r2,zero,10004e18 <open+0x84>
    {
      status = index;
10004e0c:	e0bff917 	ldw	r2,-28(fp)
10004e10:	e0bffa15 	stw	r2,-24(fp)
10004e14:	00002506 	br	10004eac <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
10004e18:	01400304 	movi	r5,12
10004e1c:	e13ff917 	ldw	r4,-28(fp)
10004e20:	00030840 	call	10003084 <__mulsi3>
10004e24:	1007883a 	mov	r3,r2
10004e28:	00840034 	movhi	r2,4096
10004e2c:	1097fa04 	addi	r2,r2,24552
10004e30:	1885883a 	add	r2,r3,r2
10004e34:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
10004e38:	e0fffe17 	ldw	r3,-8(fp)
10004e3c:	00900034 	movhi	r2,16384
10004e40:	10bfffc4 	addi	r2,r2,-1
10004e44:	1886703a 	and	r3,r3,r2
10004e48:	e0bffc17 	ldw	r2,-16(fp)
10004e4c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
10004e50:	e0bffb17 	ldw	r2,-20(fp)
10004e54:	1000051e 	bne	r2,zero,10004e6c <open+0xd8>
10004e58:	e13ffc17 	ldw	r4,-16(fp)
10004e5c:	0004ca80 	call	10004ca8 <alt_file_locked>
10004e60:	e0bffa15 	stw	r2,-24(fp)
10004e64:	e0bffa17 	ldw	r2,-24(fp)
10004e68:	10001016 	blt	r2,zero,10004eac <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
10004e6c:	e0bff817 	ldw	r2,-32(fp)
10004e70:	10800317 	ldw	r2,12(r2)
10004e74:	10000826 	beq	r2,zero,10004e98 <open+0x104>
10004e78:	e0bff817 	ldw	r2,-32(fp)
10004e7c:	10800317 	ldw	r2,12(r2)
10004e80:	e1ffff17 	ldw	r7,-4(fp)
10004e84:	e1bffe17 	ldw	r6,-8(fp)
10004e88:	e17ffd17 	ldw	r5,-12(fp)
10004e8c:	e13ffc17 	ldw	r4,-16(fp)
10004e90:	103ee83a 	callr	r2
10004e94:	00000106 	br	10004e9c <open+0x108>
10004e98:	0005883a 	mov	r2,zero
10004e9c:	e0bffa15 	stw	r2,-24(fp)
10004ea0:	00000206 	br	10004eac <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
10004ea4:	00bffb44 	movi	r2,-19
10004ea8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
10004eac:	e0bffa17 	ldw	r2,-24(fp)
10004eb0:	1000090e 	bge	r2,zero,10004ed8 <open+0x144>
  {
    alt_release_fd (index);  
10004eb4:	e13ff917 	ldw	r4,-28(fp)
10004eb8:	00037d00 	call	100037d0 <alt_release_fd>
    ALT_ERRNO = -status;
10004ebc:	0004c6c0 	call	10004c6c <alt_get_errno>
10004ec0:	1007883a 	mov	r3,r2
10004ec4:	e0bffa17 	ldw	r2,-24(fp)
10004ec8:	0085c83a 	sub	r2,zero,r2
10004ecc:	18800015 	stw	r2,0(r3)
    return -1;
10004ed0:	00bfffc4 	movi	r2,-1
10004ed4:	00000106 	br	10004edc <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
10004ed8:	e0bff917 	ldw	r2,-28(fp)
}
10004edc:	e037883a 	mov	sp,fp
10004ee0:	dfc00117 	ldw	ra,4(sp)
10004ee4:	df000017 	ldw	fp,0(sp)
10004ee8:	dec00204 	addi	sp,sp,8
10004eec:	f800283a 	ret

10004ef0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
10004ef0:	defffa04 	addi	sp,sp,-24
10004ef4:	df000515 	stw	fp,20(sp)
10004ef8:	df000504 	addi	fp,sp,20
10004efc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10004f00:	0005303a 	rdctl	r2,status
10004f04:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10004f08:	e0fffc17 	ldw	r3,-16(fp)
10004f0c:	00bfff84 	movi	r2,-2
10004f10:	1884703a 	and	r2,r3,r2
10004f14:	1001703a 	wrctl	status,r2
  
  return context;
10004f18:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
10004f1c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
10004f20:	e0bfff17 	ldw	r2,-4(fp)
10004f24:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
10004f28:	e0bffd17 	ldw	r2,-12(fp)
10004f2c:	10800017 	ldw	r2,0(r2)
10004f30:	e0fffd17 	ldw	r3,-12(fp)
10004f34:	18c00117 	ldw	r3,4(r3)
10004f38:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
10004f3c:	e0bffd17 	ldw	r2,-12(fp)
10004f40:	10800117 	ldw	r2,4(r2)
10004f44:	e0fffd17 	ldw	r3,-12(fp)
10004f48:	18c00017 	ldw	r3,0(r3)
10004f4c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
10004f50:	e0bffd17 	ldw	r2,-12(fp)
10004f54:	e0fffd17 	ldw	r3,-12(fp)
10004f58:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
10004f5c:	e0bffd17 	ldw	r2,-12(fp)
10004f60:	e0fffd17 	ldw	r3,-12(fp)
10004f64:	10c00015 	stw	r3,0(r2)
10004f68:	e0bffb17 	ldw	r2,-20(fp)
10004f6c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10004f70:	e0bffe17 	ldw	r2,-8(fp)
10004f74:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
10004f78:	0001883a 	nop
10004f7c:	e037883a 	mov	sp,fp
10004f80:	df000017 	ldw	fp,0(sp)
10004f84:	dec00104 	addi	sp,sp,4
10004f88:	f800283a 	ret

10004f8c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
10004f8c:	defffb04 	addi	sp,sp,-20
10004f90:	dfc00415 	stw	ra,16(sp)
10004f94:	df000315 	stw	fp,12(sp)
10004f98:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
10004f9c:	d0a00c17 	ldw	r2,-32720(gp)
10004fa0:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
10004fa4:	d0a6b217 	ldw	r2,-25912(gp)
10004fa8:	10800044 	addi	r2,r2,1
10004fac:	d0a6b215 	stw	r2,-25912(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10004fb0:	00002e06 	br	1000506c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
10004fb4:	e0bffd17 	ldw	r2,-12(fp)
10004fb8:	10800017 	ldw	r2,0(r2)
10004fbc:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
10004fc0:	e0bffd17 	ldw	r2,-12(fp)
10004fc4:	10800403 	ldbu	r2,16(r2)
10004fc8:	10803fcc 	andi	r2,r2,255
10004fcc:	10000426 	beq	r2,zero,10004fe0 <alt_tick+0x54>
10004fd0:	d0a6b217 	ldw	r2,-25912(gp)
10004fd4:	1000021e 	bne	r2,zero,10004fe0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
10004fd8:	e0bffd17 	ldw	r2,-12(fp)
10004fdc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
10004fe0:	e0bffd17 	ldw	r2,-12(fp)
10004fe4:	10800217 	ldw	r2,8(r2)
10004fe8:	d0e6b217 	ldw	r3,-25912(gp)
10004fec:	18801d36 	bltu	r3,r2,10005064 <alt_tick+0xd8>
10004ff0:	e0bffd17 	ldw	r2,-12(fp)
10004ff4:	10800403 	ldbu	r2,16(r2)
10004ff8:	10803fcc 	andi	r2,r2,255
10004ffc:	1000191e 	bne	r2,zero,10005064 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
10005000:	e0bffd17 	ldw	r2,-12(fp)
10005004:	10800317 	ldw	r2,12(r2)
10005008:	e0fffd17 	ldw	r3,-12(fp)
1000500c:	18c00517 	ldw	r3,20(r3)
10005010:	1809883a 	mov	r4,r3
10005014:	103ee83a 	callr	r2
10005018:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
1000501c:	e0bfff17 	ldw	r2,-4(fp)
10005020:	1000031e 	bne	r2,zero,10005030 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
10005024:	e13ffd17 	ldw	r4,-12(fp)
10005028:	0004ef00 	call	10004ef0 <alt_alarm_stop>
1000502c:	00000d06 	br	10005064 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
10005030:	e0bffd17 	ldw	r2,-12(fp)
10005034:	10c00217 	ldw	r3,8(r2)
10005038:	e0bfff17 	ldw	r2,-4(fp)
1000503c:	1887883a 	add	r3,r3,r2
10005040:	e0bffd17 	ldw	r2,-12(fp)
10005044:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
10005048:	e0bffd17 	ldw	r2,-12(fp)
1000504c:	10c00217 	ldw	r3,8(r2)
10005050:	d0a6b217 	ldw	r2,-25912(gp)
10005054:	1880032e 	bgeu	r3,r2,10005064 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
10005058:	e0bffd17 	ldw	r2,-12(fp)
1000505c:	00c00044 	movi	r3,1
10005060:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
10005064:	e0bffe17 	ldw	r2,-8(fp)
10005068:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
1000506c:	e0fffd17 	ldw	r3,-12(fp)
10005070:	d0a00c04 	addi	r2,gp,-32720
10005074:	18bfcf1e 	bne	r3,r2,10004fb4 <__alt_data_end+0xf8004fb4>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
10005078:	0001883a 	nop
}
1000507c:	0001883a 	nop
10005080:	e037883a 	mov	sp,fp
10005084:	dfc00117 	ldw	ra,4(sp)
10005088:	df000017 	ldw	fp,0(sp)
1000508c:	dec00204 	addi	sp,sp,8
10005090:	f800283a 	ret

10005094 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
10005094:	deffff04 	addi	sp,sp,-4
10005098:	df000015 	stw	fp,0(sp)
1000509c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
100050a0:	000170fa 	wrctl	ienable,zero
}
100050a4:	0001883a 	nop
100050a8:	e037883a 	mov	sp,fp
100050ac:	df000017 	ldw	fp,0(sp)
100050b0:	dec00104 	addi	sp,sp,4
100050b4:	f800283a 	ret

100050b8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
100050b8:	defffa04 	addi	sp,sp,-24
100050bc:	dfc00515 	stw	ra,20(sp)
100050c0:	df000415 	stw	fp,16(sp)
100050c4:	df000404 	addi	fp,sp,16
100050c8:	e13ffe15 	stw	r4,-8(fp)
100050cc:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
100050d0:	e0bfff17 	ldw	r2,-4(fp)
100050d4:	10800017 	ldw	r2,0(r2)
100050d8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
100050dc:	e13ffe17 	ldw	r4,-8(fp)
100050e0:	00003740 	call	10000374 <strlen>
100050e4:	10800044 	addi	r2,r2,1
100050e8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
100050ec:	00000d06 	br	10005124 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
100050f0:	e0bffc17 	ldw	r2,-16(fp)
100050f4:	10800217 	ldw	r2,8(r2)
100050f8:	e0fffd17 	ldw	r3,-12(fp)
100050fc:	180d883a 	mov	r6,r3
10005100:	e17ffe17 	ldw	r5,-8(fp)
10005104:	1009883a 	mov	r4,r2
10005108:	00053fc0 	call	100053fc <memcmp>
1000510c:	1000021e 	bne	r2,zero,10005118 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
10005110:	e0bffc17 	ldw	r2,-16(fp)
10005114:	00000706 	br	10005134 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
10005118:	e0bffc17 	ldw	r2,-16(fp)
1000511c:	10800017 	ldw	r2,0(r2)
10005120:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10005124:	e0fffc17 	ldw	r3,-16(fp)
10005128:	e0bfff17 	ldw	r2,-4(fp)
1000512c:	18bff01e 	bne	r3,r2,100050f0 <__alt_data_end+0xf80050f0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
10005130:	0005883a 	mov	r2,zero
}
10005134:	e037883a 	mov	sp,fp
10005138:	dfc00117 	ldw	ra,4(sp)
1000513c:	df000017 	ldw	fp,0(sp)
10005140:	dec00204 	addi	sp,sp,8
10005144:	f800283a 	ret

10005148 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
10005148:	defffb04 	addi	sp,sp,-20
1000514c:	dfc00415 	stw	ra,16(sp)
10005150:	df000315 	stw	fp,12(sp)
10005154:	df000304 	addi	fp,sp,12
10005158:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
1000515c:	d0a00417 	ldw	r2,-32752(gp)
10005160:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10005164:	00003106 	br	1000522c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
10005168:	e0bffd17 	ldw	r2,-12(fp)
1000516c:	10800217 	ldw	r2,8(r2)
10005170:	1009883a 	mov	r4,r2
10005174:	00003740 	call	10000374 <strlen>
10005178:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
1000517c:	e0bffd17 	ldw	r2,-12(fp)
10005180:	10c00217 	ldw	r3,8(r2)
10005184:	e0bffe17 	ldw	r2,-8(fp)
10005188:	10bfffc4 	addi	r2,r2,-1
1000518c:	1885883a 	add	r2,r3,r2
10005190:	10800003 	ldbu	r2,0(r2)
10005194:	10803fcc 	andi	r2,r2,255
10005198:	1080201c 	xori	r2,r2,128
1000519c:	10bfe004 	addi	r2,r2,-128
100051a0:	10800bd8 	cmpnei	r2,r2,47
100051a4:	1000031e 	bne	r2,zero,100051b4 <alt_find_file+0x6c>
    {
      len -= 1;
100051a8:	e0bffe17 	ldw	r2,-8(fp)
100051ac:	10bfffc4 	addi	r2,r2,-1
100051b0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
100051b4:	e0bffe17 	ldw	r2,-8(fp)
100051b8:	e0ffff17 	ldw	r3,-4(fp)
100051bc:	1885883a 	add	r2,r3,r2
100051c0:	10800003 	ldbu	r2,0(r2)
100051c4:	10803fcc 	andi	r2,r2,255
100051c8:	1080201c 	xori	r2,r2,128
100051cc:	10bfe004 	addi	r2,r2,-128
100051d0:	10800be0 	cmpeqi	r2,r2,47
100051d4:	1000081e 	bne	r2,zero,100051f8 <alt_find_file+0xb0>
100051d8:	e0bffe17 	ldw	r2,-8(fp)
100051dc:	e0ffff17 	ldw	r3,-4(fp)
100051e0:	1885883a 	add	r2,r3,r2
100051e4:	10800003 	ldbu	r2,0(r2)
100051e8:	10803fcc 	andi	r2,r2,255
100051ec:	1080201c 	xori	r2,r2,128
100051f0:	10bfe004 	addi	r2,r2,-128
100051f4:	10000a1e 	bne	r2,zero,10005220 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
100051f8:	e0bffd17 	ldw	r2,-12(fp)
100051fc:	10800217 	ldw	r2,8(r2)
10005200:	e0fffe17 	ldw	r3,-8(fp)
10005204:	180d883a 	mov	r6,r3
10005208:	e17fff17 	ldw	r5,-4(fp)
1000520c:	1009883a 	mov	r4,r2
10005210:	00053fc0 	call	100053fc <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10005214:	1000021e 	bne	r2,zero,10005220 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
10005218:	e0bffd17 	ldw	r2,-12(fp)
1000521c:	00000706 	br	1000523c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
10005220:	e0bffd17 	ldw	r2,-12(fp)
10005224:	10800017 	ldw	r2,0(r2)
10005228:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
1000522c:	e0fffd17 	ldw	r3,-12(fp)
10005230:	d0a00404 	addi	r2,gp,-32752
10005234:	18bfcc1e 	bne	r3,r2,10005168 <__alt_data_end+0xf8005168>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
10005238:	0005883a 	mov	r2,zero
}
1000523c:	e037883a 	mov	sp,fp
10005240:	dfc00117 	ldw	ra,4(sp)
10005244:	df000017 	ldw	fp,0(sp)
10005248:	dec00204 	addi	sp,sp,8
1000524c:	f800283a 	ret

10005250 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
10005250:	defffa04 	addi	sp,sp,-24
10005254:	dfc00515 	stw	ra,20(sp)
10005258:	df000415 	stw	fp,16(sp)
1000525c:	dc000315 	stw	r16,12(sp)
10005260:	df000404 	addi	fp,sp,16
10005264:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
10005268:	00bffa04 	movi	r2,-24
1000526c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10005270:	e03ffc15 	stw	zero,-16(fp)
10005274:	00001d06 	br	100052ec <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
10005278:	04040034 	movhi	r16,4096
1000527c:	8417fa04 	addi	r16,r16,24552
10005280:	e0bffc17 	ldw	r2,-16(fp)
10005284:	01400304 	movi	r5,12
10005288:	1009883a 	mov	r4,r2
1000528c:	00030840 	call	10003084 <__mulsi3>
10005290:	8085883a 	add	r2,r16,r2
10005294:	10800017 	ldw	r2,0(r2)
10005298:	1000111e 	bne	r2,zero,100052e0 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
1000529c:	04040034 	movhi	r16,4096
100052a0:	8417fa04 	addi	r16,r16,24552
100052a4:	e0bffc17 	ldw	r2,-16(fp)
100052a8:	01400304 	movi	r5,12
100052ac:	1009883a 	mov	r4,r2
100052b0:	00030840 	call	10003084 <__mulsi3>
100052b4:	8085883a 	add	r2,r16,r2
100052b8:	e0fffe17 	ldw	r3,-8(fp)
100052bc:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
100052c0:	d0e00817 	ldw	r3,-32736(gp)
100052c4:	e0bffc17 	ldw	r2,-16(fp)
100052c8:	1880020e 	bge	r3,r2,100052d4 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
100052cc:	e0bffc17 	ldw	r2,-16(fp)
100052d0:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
100052d4:	e0bffc17 	ldw	r2,-16(fp)
100052d8:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
100052dc:	00000606 	br	100052f8 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
100052e0:	e0bffc17 	ldw	r2,-16(fp)
100052e4:	10800044 	addi	r2,r2,1
100052e8:	e0bffc15 	stw	r2,-16(fp)
100052ec:	e0bffc17 	ldw	r2,-16(fp)
100052f0:	10800810 	cmplti	r2,r2,32
100052f4:	103fe01e 	bne	r2,zero,10005278 <__alt_data_end+0xf8005278>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
100052f8:	e0bffd17 	ldw	r2,-12(fp)
}
100052fc:	e6ffff04 	addi	sp,fp,-4
10005300:	dfc00217 	ldw	ra,8(sp)
10005304:	df000117 	ldw	fp,4(sp)
10005308:	dc000017 	ldw	r16,0(sp)
1000530c:	dec00304 	addi	sp,sp,12
10005310:	f800283a 	ret

10005314 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
10005314:	defffe04 	addi	sp,sp,-8
10005318:	df000115 	stw	fp,4(sp)
1000531c:	df000104 	addi	fp,sp,4
10005320:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
10005324:	e0bfff17 	ldw	r2,-4(fp)
10005328:	10bffe84 	addi	r2,r2,-6
1000532c:	10c00428 	cmpgeui	r3,r2,16
10005330:	18001a1e 	bne	r3,zero,1000539c <alt_exception_cause_generated_bad_addr+0x88>
10005334:	100690ba 	slli	r3,r2,2
10005338:	00840034 	movhi	r2,4096
1000533c:	1094d304 	addi	r2,r2,21324
10005340:	1885883a 	add	r2,r3,r2
10005344:	10800017 	ldw	r2,0(r2)
10005348:	1000683a 	jmp	r2
1000534c:	1000538c 	andi	zero,r2,334
10005350:	1000538c 	andi	zero,r2,334
10005354:	1000539c 	xori	zero,r2,334
10005358:	1000539c 	xori	zero,r2,334
1000535c:	1000539c 	xori	zero,r2,334
10005360:	1000538c 	andi	zero,r2,334
10005364:	10005394 	ori	zero,r2,334
10005368:	1000539c 	xori	zero,r2,334
1000536c:	1000538c 	andi	zero,r2,334
10005370:	1000538c 	andi	zero,r2,334
10005374:	1000539c 	xori	zero,r2,334
10005378:	1000538c 	andi	zero,r2,334
1000537c:	10005394 	ori	zero,r2,334
10005380:	1000539c 	xori	zero,r2,334
10005384:	1000539c 	xori	zero,r2,334
10005388:	1000538c 	andi	zero,r2,334
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
1000538c:	00800044 	movi	r2,1
10005390:	00000306 	br	100053a0 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
10005394:	0005883a 	mov	r2,zero
10005398:	00000106 	br	100053a0 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
1000539c:	0005883a 	mov	r2,zero
  }
}
100053a0:	e037883a 	mov	sp,fp
100053a4:	df000017 	ldw	fp,0(sp)
100053a8:	dec00104 	addi	sp,sp,4
100053ac:	f800283a 	ret

100053b0 <atexit>:
100053b0:	200b883a 	mov	r5,r4
100053b4:	000f883a 	mov	r7,zero
100053b8:	000d883a 	mov	r6,zero
100053bc:	0009883a 	mov	r4,zero
100053c0:	00054781 	jmpi	10005478 <__register_exitproc>

100053c4 <exit>:
100053c4:	defffe04 	addi	sp,sp,-8
100053c8:	000b883a 	mov	r5,zero
100053cc:	dc000015 	stw	r16,0(sp)
100053d0:	dfc00115 	stw	ra,4(sp)
100053d4:	2021883a 	mov	r16,r4
100053d8:	00055900 	call	10005590 <__call_exitprocs>
100053dc:	00840034 	movhi	r2,4096
100053e0:	109c7204 	addi	r2,r2,29128
100053e4:	11000017 	ldw	r4,0(r2)
100053e8:	20800f17 	ldw	r2,60(r4)
100053ec:	10000126 	beq	r2,zero,100053f4 <exit+0x30>
100053f0:	103ee83a 	callr	r2
100053f4:	8009883a 	mov	r4,r16
100053f8:	00057100 	call	10005710 <_exit>

100053fc <memcmp>:
100053fc:	01c000c4 	movi	r7,3
10005400:	3980192e 	bgeu	r7,r6,10005468 <memcmp+0x6c>
10005404:	2144b03a 	or	r2,r4,r5
10005408:	11c4703a 	and	r2,r2,r7
1000540c:	10000f26 	beq	r2,zero,1000544c <memcmp+0x50>
10005410:	20800003 	ldbu	r2,0(r4)
10005414:	28c00003 	ldbu	r3,0(r5)
10005418:	10c0151e 	bne	r2,r3,10005470 <memcmp+0x74>
1000541c:	31bfff84 	addi	r6,r6,-2
10005420:	01ffffc4 	movi	r7,-1
10005424:	00000406 	br	10005438 <memcmp+0x3c>
10005428:	20800003 	ldbu	r2,0(r4)
1000542c:	28c00003 	ldbu	r3,0(r5)
10005430:	31bfffc4 	addi	r6,r6,-1
10005434:	10c00e1e 	bne	r2,r3,10005470 <memcmp+0x74>
10005438:	21000044 	addi	r4,r4,1
1000543c:	29400044 	addi	r5,r5,1
10005440:	31fff91e 	bne	r6,r7,10005428 <__alt_data_end+0xf8005428>
10005444:	0005883a 	mov	r2,zero
10005448:	f800283a 	ret
1000544c:	20c00017 	ldw	r3,0(r4)
10005450:	28800017 	ldw	r2,0(r5)
10005454:	18bfee1e 	bne	r3,r2,10005410 <__alt_data_end+0xf8005410>
10005458:	31bfff04 	addi	r6,r6,-4
1000545c:	21000104 	addi	r4,r4,4
10005460:	29400104 	addi	r5,r5,4
10005464:	39bff936 	bltu	r7,r6,1000544c <__alt_data_end+0xf800544c>
10005468:	303fe91e 	bne	r6,zero,10005410 <__alt_data_end+0xf8005410>
1000546c:	003ff506 	br	10005444 <__alt_data_end+0xf8005444>
10005470:	10c5c83a 	sub	r2,r2,r3
10005474:	f800283a 	ret

10005478 <__register_exitproc>:
10005478:	defffa04 	addi	sp,sp,-24
1000547c:	dc000315 	stw	r16,12(sp)
10005480:	04040034 	movhi	r16,4096
10005484:	841c7204 	addi	r16,r16,29128
10005488:	80c00017 	ldw	r3,0(r16)
1000548c:	dc400415 	stw	r17,16(sp)
10005490:	dfc00515 	stw	ra,20(sp)
10005494:	18805217 	ldw	r2,328(r3)
10005498:	2023883a 	mov	r17,r4
1000549c:	10003726 	beq	r2,zero,1000557c <__register_exitproc+0x104>
100054a0:	10c00117 	ldw	r3,4(r2)
100054a4:	010007c4 	movi	r4,31
100054a8:	20c00e16 	blt	r4,r3,100054e4 <__register_exitproc+0x6c>
100054ac:	1a000044 	addi	r8,r3,1
100054b0:	8800221e 	bne	r17,zero,1000553c <__register_exitproc+0xc4>
100054b4:	18c00084 	addi	r3,r3,2
100054b8:	18c7883a 	add	r3,r3,r3
100054bc:	18c7883a 	add	r3,r3,r3
100054c0:	12000115 	stw	r8,4(r2)
100054c4:	10c7883a 	add	r3,r2,r3
100054c8:	19400015 	stw	r5,0(r3)
100054cc:	0005883a 	mov	r2,zero
100054d0:	dfc00517 	ldw	ra,20(sp)
100054d4:	dc400417 	ldw	r17,16(sp)
100054d8:	dc000317 	ldw	r16,12(sp)
100054dc:	dec00604 	addi	sp,sp,24
100054e0:	f800283a 	ret
100054e4:	00800034 	movhi	r2,0
100054e8:	10800004 	addi	r2,r2,0
100054ec:	10002626 	beq	r2,zero,10005588 <__register_exitproc+0x110>
100054f0:	01006404 	movi	r4,400
100054f4:	d9400015 	stw	r5,0(sp)
100054f8:	d9800115 	stw	r6,4(sp)
100054fc:	d9c00215 	stw	r7,8(sp)
10005500:	00000000 	call	10000000 <__alt_mem_sdram>
10005504:	d9400017 	ldw	r5,0(sp)
10005508:	d9800117 	ldw	r6,4(sp)
1000550c:	d9c00217 	ldw	r7,8(sp)
10005510:	10001d26 	beq	r2,zero,10005588 <__register_exitproc+0x110>
10005514:	81000017 	ldw	r4,0(r16)
10005518:	10000115 	stw	zero,4(r2)
1000551c:	02000044 	movi	r8,1
10005520:	22405217 	ldw	r9,328(r4)
10005524:	0007883a 	mov	r3,zero
10005528:	12400015 	stw	r9,0(r2)
1000552c:	20805215 	stw	r2,328(r4)
10005530:	10006215 	stw	zero,392(r2)
10005534:	10006315 	stw	zero,396(r2)
10005538:	883fde26 	beq	r17,zero,100054b4 <__alt_data_end+0xf80054b4>
1000553c:	18c9883a 	add	r4,r3,r3
10005540:	2109883a 	add	r4,r4,r4
10005544:	1109883a 	add	r4,r2,r4
10005548:	21802215 	stw	r6,136(r4)
1000554c:	01800044 	movi	r6,1
10005550:	12406217 	ldw	r9,392(r2)
10005554:	30cc983a 	sll	r6,r6,r3
10005558:	4992b03a 	or	r9,r9,r6
1000555c:	12406215 	stw	r9,392(r2)
10005560:	21c04215 	stw	r7,264(r4)
10005564:	01000084 	movi	r4,2
10005568:	893fd21e 	bne	r17,r4,100054b4 <__alt_data_end+0xf80054b4>
1000556c:	11006317 	ldw	r4,396(r2)
10005570:	218cb03a 	or	r6,r4,r6
10005574:	11806315 	stw	r6,396(r2)
10005578:	003fce06 	br	100054b4 <__alt_data_end+0xf80054b4>
1000557c:	18805304 	addi	r2,r3,332
10005580:	18805215 	stw	r2,328(r3)
10005584:	003fc606 	br	100054a0 <__alt_data_end+0xf80054a0>
10005588:	00bfffc4 	movi	r2,-1
1000558c:	003fd006 	br	100054d0 <__alt_data_end+0xf80054d0>

10005590 <__call_exitprocs>:
10005590:	defff504 	addi	sp,sp,-44
10005594:	df000915 	stw	fp,36(sp)
10005598:	dd400615 	stw	r21,24(sp)
1000559c:	dc800315 	stw	r18,12(sp)
100055a0:	dfc00a15 	stw	ra,40(sp)
100055a4:	ddc00815 	stw	r23,32(sp)
100055a8:	dd800715 	stw	r22,28(sp)
100055ac:	dd000515 	stw	r20,20(sp)
100055b0:	dcc00415 	stw	r19,16(sp)
100055b4:	dc400215 	stw	r17,8(sp)
100055b8:	dc000115 	stw	r16,4(sp)
100055bc:	d9000015 	stw	r4,0(sp)
100055c0:	2839883a 	mov	fp,r5
100055c4:	04800044 	movi	r18,1
100055c8:	057fffc4 	movi	r21,-1
100055cc:	00840034 	movhi	r2,4096
100055d0:	109c7204 	addi	r2,r2,29128
100055d4:	12000017 	ldw	r8,0(r2)
100055d8:	45005217 	ldw	r20,328(r8)
100055dc:	44c05204 	addi	r19,r8,328
100055e0:	a0001c26 	beq	r20,zero,10005654 <__call_exitprocs+0xc4>
100055e4:	a0800117 	ldw	r2,4(r20)
100055e8:	15ffffc4 	addi	r23,r2,-1
100055ec:	b8000d16 	blt	r23,zero,10005624 <__call_exitprocs+0x94>
100055f0:	14000044 	addi	r16,r2,1
100055f4:	8421883a 	add	r16,r16,r16
100055f8:	8421883a 	add	r16,r16,r16
100055fc:	84402004 	addi	r17,r16,128
10005600:	a463883a 	add	r17,r20,r17
10005604:	a421883a 	add	r16,r20,r16
10005608:	e0001e26 	beq	fp,zero,10005684 <__call_exitprocs+0xf4>
1000560c:	80804017 	ldw	r2,256(r16)
10005610:	e0801c26 	beq	fp,r2,10005684 <__call_exitprocs+0xf4>
10005614:	bdffffc4 	addi	r23,r23,-1
10005618:	843fff04 	addi	r16,r16,-4
1000561c:	8c7fff04 	addi	r17,r17,-4
10005620:	bd7ff91e 	bne	r23,r21,10005608 <__alt_data_end+0xf8005608>
10005624:	00800034 	movhi	r2,0
10005628:	10800004 	addi	r2,r2,0
1000562c:	10000926 	beq	r2,zero,10005654 <__call_exitprocs+0xc4>
10005630:	a0800117 	ldw	r2,4(r20)
10005634:	1000301e 	bne	r2,zero,100056f8 <__call_exitprocs+0x168>
10005638:	a0800017 	ldw	r2,0(r20)
1000563c:	10003226 	beq	r2,zero,10005708 <__call_exitprocs+0x178>
10005640:	a009883a 	mov	r4,r20
10005644:	98800015 	stw	r2,0(r19)
10005648:	00000000 	call	10000000 <__alt_mem_sdram>
1000564c:	9d000017 	ldw	r20,0(r19)
10005650:	a03fe41e 	bne	r20,zero,100055e4 <__alt_data_end+0xf80055e4>
10005654:	dfc00a17 	ldw	ra,40(sp)
10005658:	df000917 	ldw	fp,36(sp)
1000565c:	ddc00817 	ldw	r23,32(sp)
10005660:	dd800717 	ldw	r22,28(sp)
10005664:	dd400617 	ldw	r21,24(sp)
10005668:	dd000517 	ldw	r20,20(sp)
1000566c:	dcc00417 	ldw	r19,16(sp)
10005670:	dc800317 	ldw	r18,12(sp)
10005674:	dc400217 	ldw	r17,8(sp)
10005678:	dc000117 	ldw	r16,4(sp)
1000567c:	dec00b04 	addi	sp,sp,44
10005680:	f800283a 	ret
10005684:	a0800117 	ldw	r2,4(r20)
10005688:	80c00017 	ldw	r3,0(r16)
1000568c:	10bfffc4 	addi	r2,r2,-1
10005690:	15c01426 	beq	r2,r23,100056e4 <__call_exitprocs+0x154>
10005694:	80000015 	stw	zero,0(r16)
10005698:	183fde26 	beq	r3,zero,10005614 <__alt_data_end+0xf8005614>
1000569c:	95c8983a 	sll	r4,r18,r23
100056a0:	a0806217 	ldw	r2,392(r20)
100056a4:	a5800117 	ldw	r22,4(r20)
100056a8:	2084703a 	and	r2,r4,r2
100056ac:	10000b26 	beq	r2,zero,100056dc <__call_exitprocs+0x14c>
100056b0:	a0806317 	ldw	r2,396(r20)
100056b4:	2088703a 	and	r4,r4,r2
100056b8:	20000c1e 	bne	r4,zero,100056ec <__call_exitprocs+0x15c>
100056bc:	89400017 	ldw	r5,0(r17)
100056c0:	d9000017 	ldw	r4,0(sp)
100056c4:	183ee83a 	callr	r3
100056c8:	a0800117 	ldw	r2,4(r20)
100056cc:	15bfbf1e 	bne	r2,r22,100055cc <__alt_data_end+0xf80055cc>
100056d0:	98800017 	ldw	r2,0(r19)
100056d4:	153fcf26 	beq	r2,r20,10005614 <__alt_data_end+0xf8005614>
100056d8:	003fbc06 	br	100055cc <__alt_data_end+0xf80055cc>
100056dc:	183ee83a 	callr	r3
100056e0:	003ff906 	br	100056c8 <__alt_data_end+0xf80056c8>
100056e4:	a5c00115 	stw	r23,4(r20)
100056e8:	003feb06 	br	10005698 <__alt_data_end+0xf8005698>
100056ec:	89000017 	ldw	r4,0(r17)
100056f0:	183ee83a 	callr	r3
100056f4:	003ff406 	br	100056c8 <__alt_data_end+0xf80056c8>
100056f8:	a0800017 	ldw	r2,0(r20)
100056fc:	a027883a 	mov	r19,r20
10005700:	1029883a 	mov	r20,r2
10005704:	003fb606 	br	100055e0 <__alt_data_end+0xf80055e0>
10005708:	0005883a 	mov	r2,zero
1000570c:	003ffb06 	br	100056fc <__alt_data_end+0xf80056fc>

10005710 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
10005710:	defffd04 	addi	sp,sp,-12
10005714:	df000215 	stw	fp,8(sp)
10005718:	df000204 	addi	fp,sp,8
1000571c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
10005720:	0001883a 	nop
10005724:	e0bfff17 	ldw	r2,-4(fp)
10005728:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
1000572c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
10005730:	10000226 	beq	r2,zero,1000573c <_exit+0x2c>
    ALT_SIM_FAIL();
10005734:	002af070 	cmpltui	zero,zero,43969
10005738:	00000106 	br	10005740 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
1000573c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
10005740:	003fff06 	br	10005740 <__alt_data_end+0xf8005740>
