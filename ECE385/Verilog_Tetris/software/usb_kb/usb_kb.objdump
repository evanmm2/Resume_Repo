
usb_kb.elf:     file format elf32-littlenios2
usb_kb.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x10000230

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x00012450 memsz 0x00012450 flags r-x
    LOAD off    0x00013470 vaddr 0x10012470 paddr 0x10013f5c align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x00015a48 vaddr 0x10015a48 paddr 0x10015a48 align 2**12
         filesz 0x00000000 memsz 0x00000164 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000117c0  10000230  10000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000a80  100119f0  100119f0  000129f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  10012470  10013f5c  00013470  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000164  10015a48  10015a48  00015a48  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00014f5c  2**0
                  CONTENTS
  7 .sdram        00000000  10015bac  10015bac  00014f5c  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00014f5c  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000f18  00000000  00000000  00014f80  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000236f2  00000000  00000000  00015e98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000090c8  00000000  00000000  0003958a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b7d0  00000000  00000000  00042652  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002384  00000000  00000000  0004de24  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003a67  00000000  00000000  000501a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001786c  00000000  00000000  00053c0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  0006b47c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000018d0  00000000  00000000  0006b4c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0007015a  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0007015d  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00070169  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0007016a  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0007016b  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0007016f  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00070173  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  00070177  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  00070182  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0007018d  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000008  00000000  00000000  00070198  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000001e  00000000  00000000  000701a0  2**0
                  CONTENTS, READONLY
 30 .jdi          000051fa  00000000  00000000  000701be  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00072649  00000000  00000000  000753b8  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
10000230 l    d  .text	00000000 .text
100119f0 l    d  .rodata	00000000 .rodata
10012470 l    d  .rwdata	00000000 .rwdata
10015a48 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
10015bac l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../usb_kb_bsp//obj/HAL/src/crt0.o
10000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 specs.cpp
00000000 l    df *ABS*	00000000 io_handler.c
00000000 l    df *ABS*	00000000 main.c
10015a48 l     O .bss	00000002 ctl_reg.3589
10015a4a l     O .bss	00000002 no_device.3590
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 specs.cpp
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
100121b6 l     O .rodata	00000010 zeroes.4404
10004760 l     F .text	000000bc __sbprintf
100121c6 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
10004970 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
100064c8 l     F .text	00000008 __fp_unlock
100064dc l     F .text	0000019c __sinit.part.1
10006678 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
10012470 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
100128b4 l     O .rwdata	00000020 lc_ctype_charset
10012894 l     O .rwdata	00000020 lc_message_charset
100128d4 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
100121f8 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
10009b4c l     F .text	000000fc __sprint_r.part.0
1001231c l     O .rodata	00000010 zeroes.4349
1000b188 l     F .text	000000bc __sbprintf
1001232c l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
1000f1d0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
1000f2e4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
1000f310 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
1000f404 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
1000f4ec l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
1000f5d8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
1000f7b4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
10013f4c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
1000fa58 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
1000fb94 l     F .text	00000034 alt_dev_reg
10012ebc l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
1000fe70 l     F .text	0000020c altera_avalon_jtag_uart_irq
1001007c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
10010958 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
10010db8 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
10010f18 l     F .text	0000003c alt_get_errno
10010f54 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
10015a80 g     O .bss	00000004 alt_instruction_exception_handler
10009190 g     F .text	00000074 _mprec_log10
1000927c g     F .text	0000008c __any_on
1000b73c g     F .text	00000054 _isatty_r
10012204 g     O .rodata	00000028 __mprec_tinytens
1000f6f0 g     F .text	0000007c alt_main
100022fc g     F .text	000000c0 _puts_r
10015aac g     O .bss	00000100 alt_irq
1000b790 g     F .text	00000060 _lseek_r
10013f5c g       *ABS*	00000000 __flash_rwdata_start
1000dba8 g     F .text	00000088 .hidden __eqdf2
10015bac g       *ABS*	00000000 __alt_heap_start
100022c0 g     F .text	0000003c printf
1000b9a8 g     F .text	0000009c _wcrtomb_r
10009a0c g     F .text	0000005c __sseek
10006828 g     F .text	00000010 __sinit
1000b850 g     F .text	00000140 __swbuf_r
100072fc g     F .text	0000007c _setlocale_r
10006680 g     F .text	00000078 __sfmoreglue
1000f790 g     F .text	00000024 __malloc_unlock
10002190 g     F .text	00000080 UsbGetRetryCnt
10007fcc g     F .text	0000015c memmove
1000026c g     F .text	00000088 IO_init
10006810 g     F .text	00000018 _cleanup
10008250 g     F .text	000000a8 _Balloc
1000dc30 g     F .text	000000dc .hidden __gtdf2
10011340 g     F .text	00000024 altera_nios2_gen2_irq_init
10000000 g     F .entry	0000000c __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
1000b6e0 g     F .text	0000005c _fstat_r
10015a64 g     O .bss	00000004 errno
10009988 g     F .text	00000008 __seofread
10015a6c g     O .bss	00000004 alt_argv
1001bf1c g       *ABS*	00000000 _gp
1000fa28 g     F .text	00000030 usleep
10012d3c g     O .rwdata	00000180 alt_fd_list
10011364 g     F .text	00000090 alt_find_dev
10007e84 g     F .text	00000148 memcpy
100064d0 g     F .text	0000000c _cleanup_r
1000efe8 g     F .text	000000dc .hidden __floatsidf
10010e9c g     F .text	0000007c alt_io_redirect
1000dd0c g     F .text	000000f4 .hidden __ltdf2
100119f0 g       *ABS*	00000000 __DTOR_END__
100023bc g     F .text	00000014 puts
100115c0 g     F .text	0000009c alt_exception_cause_generated_bad_addr
1000986c g     F .text	00000074 __fpclassifyd
100090ec g     F .text	000000a4 __ratio
1000b16c g     F .text	0000001c __vfiprintf_internal
10010274 g     F .text	0000021c altera_avalon_jtag_uart_read
10002290 g     F .text	00000030 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
1000c848 g     F .text	00000064 .hidden __udivsi3
1000f440 g     F .text	000000ac isatty
10012254 g     O .rodata	000000c8 __mprec_tens
10007378 g     F .text	0000000c __locale_charset
10015a60 g     O .bss	00000004 __malloc_top_pad
1000181c g     F .text	00000268 UsbGetConfigDesc2
10013f24 g     O .rwdata	00000004 __mb_cur_max
100073a8 g     F .text	0000000c _localeconv_r
10008684 g     F .text	0000003c __i2b
10006cac g     F .text	000004c8 __sfvwrite_r
100098e0 g     F .text	00000054 _sbrk_r
1000b7f0 g     F .text	00000060 _read_r
10013f44 g     O .rwdata	00000004 alt_max_fd
1000b3d4 g     F .text	000000f0 _fclose_r
10006498 g     F .text	00000030 fflush
10015a5c g     O .bss	00000004 __malloc_max_sbrked_mem
1000c92c g     F .text	000008ac .hidden __adddf3
10008e94 g     F .text	0000010c __b2d
1000c18c g     F .text	000005c4 .hidden __umoddi3
1000f614 g     F .text	000000dc lseek
10013f1c g     O .rwdata	00000004 _global_impure_ptr
10009308 g     F .text	00000564 _realloc_r
10015bac g       *ABS*	00000000 __bss_end
10010cc8 g     F .text	000000f0 alt_iic_isr_register
10011238 g     F .text	00000108 alt_tick
1000bb90 g     F .text	000005fc .hidden __udivdi3
1000b63c g     F .text	00000024 _fputwc_r
1001222c g     O .rodata	00000028 __mprec_bigtens
10008468 g     F .text	00000104 __s2b
1000f0c4 g     F .text	000000a8 .hidden __floatunsidf
10008bd4 g     F .text	00000060 __mcmp
1000126c g     F .text	00000100 UsbSetAddress
10006848 g     F .text	00000018 __fp_lock_all
10010c7c g     F .text	0000004c alt_ic_irq_enabled
1001119c g     F .text	0000009c alt_alarm_stop
10015a74 g     O .bss	00000004 alt_irq_active
100000fc g     F .exceptions	000000d4 alt_irq_handler
10012d14 g     O .rwdata	00000028 alt_dev_null
10010938 g     F .text	00000020 alt_dcache_flush_all
1000856c g     F .text	00000068 __hi0bits
10000364 g     F .text	00000068 IO_read
1000ef68 g     F .text	00000080 .hidden __fixdfsi
10013f5c g       *ABS*	00000000 __ram_rwdata_end
10013f3c g     O .rwdata	00000008 alt_dev_list
1000fa94 g     F .text	00000100 write
10012470 g       *ABS*	00000000 __ram_rodata_end
1000f34c g     F .text	000000b8 fstat
1000dd0c g     F .text	000000f4 .hidden __ledf2
10002210 g     F .text	00000080 UsbPrintMem
1000894c g     F .text	00000140 __pow5mult
10009c60 g     F .text	0000150c ___vfiprintf_internal_r
10015a54 g     O .bss	00000004 __nlocale_changed
1000c8ac g     F .text	00000058 .hidden __umodsi3
10015bac g       *ABS*	00000000 end
1000fdb0 g     F .text	000000c0 altera_avalon_jtag_uart_init
100001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
100119f0 g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
1000f16c g     F .text	00000064 .hidden __clzsi2
10010490 g     F .text	00000224 altera_avalon_jtag_uart_write
10006838 g     F .text	00000004 __sfp_lock_acquire
10007da0 g     F .text	000000e4 memchr
10002468 g     F .text	000022dc ___vfprintf_internal_r
10001b84 g     F .text	00000100 UsbClassRequest
1000699c g     F .text	00000310 _free_r
10007384 g     F .text	00000010 __locale_mb_cur_max
1001183c g     F .text	00000180 __call_exitprocs
10015a50 g     O .bss	00000004 __mlocale_changed
10013f28 g     O .rwdata	00000004 __malloc_sbrk_base
10000230 g     F .text	0000003c _start
10015a78 g     O .bss	00000004 _alt_tick_rate
10008a8c g     F .text	00000148 __lshift
10015a7c g     O .bss	00000004 _alt_nticks
1000f7f0 g     F .text	00000104 read
1000fc00 g     F .text	0000004c alt_sys_init
10011724 g     F .text	00000118 __register_exitproc
100086c0 g     F .text	0000028c __multiply
1001011c g     F .text	00000068 altera_avalon_jtag_uart_close
1000c904 g     F .text	00000028 .hidden __mulsi3
10012470 g       *ABS*	00000000 __ram_rwdata_start
100119f0 g       *ABS*	00000000 __ram_rodata_start
10015a84 g     O .bss	00000028 __malloc_current_mallinfo
10008fa0 g     F .text	0000014c __d2b
1000136c g     F .text	00000148 UsbGetDeviceDesc1
1000fc4c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
100114fc g     F .text	000000c4 alt_get_fd
100107e0 g     F .text	00000158 alt_busy_sleep
1000b2a4 g     F .text	00000054 _close_r
100116a8 g     F .text	0000007c memcmp
1000fd0c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
10015bac g       *ABS*	00000000 __alt_stack_base
1000fd5c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
1000481c g     F .text	00000154 __swsetup_r
1000d1d8 g     F .text	000009d0 .hidden __divdf3
100066f8 g     F .text	00000118 __sfp
10009204 g     F .text	00000078 __copybits
1001290c g     O .rwdata	00000408 __malloc_av_
10006844 g     F .text	00000004 __sinit_lock_release
1000de00 g     F .text	0000086c .hidden __muldf3
10009934 g     F .text	00000054 __sread
1000210c g     F .text	00000084 UsbWaitTDListDone
100113f4 g     F .text	00000108 alt_find_file
10010994 g     F .text	000000a4 alt_dev_llist_insert
1000f76c g     F .text	00000024 __malloc_lock
1000f978 g     F .text	000000b0 sbrk
1000643c g     F .text	0000005c _fflush_r
1000b2f8 g     F .text	000000dc _calloc_r
10015a48 g       *ABS*	00000000 __bss_start
10008128 g     F .text	00000128 memset
100003cc g     F .text	00000d50 main
10015a70 g     O .bss	00000004 alt_envp
10015a58 g     O .bss	00000004 __malloc_max_total_mem
1000fcac g     F .text	00000060 altera_avalon_jtag_uart_write_fd
10001a84 g     F .text	00000100 UsbSetConfig
1000b990 g     F .text	00000018 __swbuf
10009a68 g     F .text	00000008 __sclose
18000000 g       *ABS*	00000000 __alt_heap_limit
1000b4c4 g     F .text	00000014 fclose
10004b98 g     F .text	00001688 _dtoa_r
10007594 g     F .text	0000080c _malloc_r
1000bb04 g     F .text	00000030 __ascii_wctomb
10013f48 g     O .rwdata	00000004 alt_errno
10007174 g     F .text	000000c4 _fwalk
1000c750 g     F .text	00000084 .hidden __divsi3
10006878 g     F .text	00000124 _malloc_trim_r
10001c84 g     F .text	00000148 UsbGetHidDesc
100119f0 g       *ABS*	00000000 __CTOR_END__
10009a70 g     F .text	000000dc strcmp
100119f0 g       *ABS*	00000000 __flash_rodata_start
100119f0 g       *ABS*	00000000 __DTOR_LIST__
1000dba8 g     F .text	00000088 .hidden __nedf2
10001174 g     F .text	00000044 UsbRead
1000fbc8 g     F .text	00000038 alt_irq_init
1000f8f4 g     F .text	00000084 alt_release_fd
1001233c g     O .rodata	00000100 .hidden __clz_tab
10015a4c g     O .bss	00000004 _PathLocale
1001165c g     F .text	00000014 atexit
1000b244 g     F .text	00000060 _write_r
100073b4 g     F .text	00000018 setlocale
10013f20 g     O .rwdata	00000004 _impure_ptr
10015a68 g     O .bss	00000004 alt_argc
10006220 g     F .text	0000021c __sflush_r
10010a98 g     F .text	00000060 _do_dtors
100073a0 g     F .text	00000008 __locale_cjk_lang
10000020 g       .exceptions	00000000 alt_irq_entry
10008e30 g     F .text	00000064 __ulp
10006860 g     F .text	00000018 __fp_unlock_all
10013f34 g     O .rwdata	00000008 alt_fs_list
10001dcc g     F .text	00000340 UsbGetReportDesc
10000020 g       *ABS*	00000000 __ram_exceptions_start
100073cc g     F .text	0000000c localeconv
10010b18 g     F .text	00000050 alt_ic_isr_register
10013f5c g       *ABS*	00000000 _edata
10015bac g       *ABS*	00000000 _end
1000111c g     F .text	00000058 UsbWrite
1000b4d8 g     F .text	00000164 __fputwc
10000230 g       *ABS*	00000000 __ram_exceptions_end
10010184 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
10010bf0 g     F .text	0000008c alt_ic_irq_disable
10009990 g     F .text	0000007c __swrite
10013f2c g     O .rwdata	00000004 __malloc_trim_threshold
10007394 g     F .text	0000000c __locale_msgcharset
10011670 g     F .text	00000038 exit
10007238 g     F .text	000000c4 _fwalk_reent
10008c34 g     F .text	000001fc __mdiff
1000c7d4 g     F .text	00000074 .hidden __modsi3
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
1000683c g     F .text	00000004 __sfp_lock_release
10000000 g       *ABS*	00000000 __alt_mem_sdram
100002f4 g     F .text	00000070 IO_write
100119bc g     F .text	00000034 _exit
100106b4 g     F .text	0000012c alt_alarm_start
100073d8 g     F .text	000001bc __smakebuf_r
100023d0 g     F .text	00000098 strlen
10011040 g     F .text	0000015c open
1000dc30 g     F .text	000000dc .hidden __gedf2
10013f30 g     O .rwdata	00000004 __wctomb
10009c48 g     F .text	00000018 __sprint_r
10010af8 g     F .text	00000020 alt_icache_flush_all
10013f50 g     O .rwdata	00000004 alt_priority_mask
10010b68 g     F .text	00000088 alt_ic_irq_enable
10004744 g     F .text	0000001c __vfprintf_internal
1000bb34 g     F .text	0000005c _wctomb_r
1000e66c g     F .text	000008fc .hidden __subdf3
100085d4 g     F .text	000000b0 __lo0bits
1000168c g     F .text	00000190 UsbGetConfigDesc1
10013f54 g     O .rwdata	00000008 alt_alarm_list
10010a38 g     F .text	00000060 _do_ctors
100011b8 g     F .text	000000b4 UsbSoftReset
1000ba44 g     F .text	000000c0 wcrtomb
1000f20c g     F .text	000000d8 close
100014b4 g     F .text	000001d8 UsbGetDeviceDesc2
1000f554 g     F .text	00000084 alt_load
1000b660 g     F .text	00000080 fputwc
10006840 g     F .text	00000004 __sinit_lock_acquire
10008320 g     F .text	00000148 __multadd
100082f8 g     F .text	00000028 _Bfree



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08408c14 	ori	at,at,560
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000fc0 	call	100000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000706 	br	100000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
1000008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10000098:	00001d00 	call	100001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1000009c:	1000021e 	bne	r2,zero,100000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
100000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
100000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
100000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
100000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000f8:	ef80083a 	eret

100000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000fc:	defff904 	addi	sp,sp,-28
10000100:	dfc00615 	stw	ra,24(sp)
10000104:	df000515 	stw	fp,20(sp)
10000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1000010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000110:	0005313a 	rdctl	r2,ipending
10000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000124:	00800044 	movi	r2,1
10000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000012c:	e0fffb17 	ldw	r3,-20(fp)
10000130:	e0bffc17 	ldw	r2,-16(fp)
10000134:	1884703a 	and	r2,r3,r2
10000138:	10001426 	beq	r2,zero,1000018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000013c:	00840074 	movhi	r2,4097
10000140:	1096ab04 	addi	r2,r2,23212
10000144:	e0fffd17 	ldw	r3,-12(fp)
10000148:	180690fa 	slli	r3,r3,3
1000014c:	10c5883a 	add	r2,r2,r3
10000150:	10c00017 	ldw	r3,0(r2)
10000154:	00840074 	movhi	r2,4097
10000158:	1096ab04 	addi	r2,r2,23212
1000015c:	e13ffd17 	ldw	r4,-12(fp)
10000160:	200890fa 	slli	r4,r4,3
10000164:	1105883a 	add	r2,r2,r4
10000168:	10800104 	addi	r2,r2,4
1000016c:	10800017 	ldw	r2,0(r2)
10000170:	1009883a 	mov	r4,r2
10000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000017c:	0005313a 	rdctl	r2,ipending
10000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000184:	e0bfff17 	ldw	r2,-4(fp)
10000188:	00000706 	br	100001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1000018c:	e0bffc17 	ldw	r2,-16(fp)
10000190:	1085883a 	add	r2,r2,r2
10000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000198:	e0bffd17 	ldw	r2,-12(fp)
1000019c:	10800044 	addi	r2,r2,1
100001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
100001a4:	003fe106 	br	1000012c <__alt_data_end+0xf800012c>

    active = alt_irq_pending ();
100001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
100001ac:	e0bffb17 	ldw	r2,-20(fp)
100001b0:	103fdb1e 	bne	r2,zero,10000120 <__alt_data_end+0xf8000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001b4:	0001883a 	nop
}
100001b8:	0001883a 	nop
100001bc:	e037883a 	mov	sp,fp
100001c0:	dfc00117 	ldw	ra,4(sp)
100001c4:	df000017 	ldw	fp,0(sp)
100001c8:	dec00204 	addi	sp,sp,8
100001cc:	f800283a 	ret

100001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
100001d0:	defffb04 	addi	sp,sp,-20
100001d4:	dfc00415 	stw	ra,16(sp)
100001d8:	df000315 	stw	fp,12(sp)
100001dc:	df000304 	addi	fp,sp,12
100001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
100001e4:	00bfffc4 	movi	r2,-1
100001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
100001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
100001f0:	d0a6d917 	ldw	r2,-25756(gp)
100001f4:	10000726 	beq	r2,zero,10000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
100001f8:	d0a6d917 	ldw	r2,-25756(gp)
100001fc:	e0fffd17 	ldw	r3,-12(fp)
10000200:	e1bffe17 	ldw	r6,-8(fp)
10000204:	e17fff17 	ldw	r5,-4(fp)
10000208:	1809883a 	mov	r4,r3
1000020c:	103ee83a 	callr	r2
10000210:	00000206 	br	1000021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
10000218:	0005883a 	mov	r2,zero
}
1000021c:	e037883a 	mov	sp,fp
10000220:	dfc00117 	ldw	ra,4(sp)
10000224:	df000017 	ldw	fp,0(sp)
10000228:	dec00204 	addi	sp,sp,8
1000022c:	f800283a 	ret

Disassembly of section .text:

10000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
10000230:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
10000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
10000238:	06840074 	movhi	gp,4097
    ori gp, gp, %lo(_gp)
1000023c:	d6afc714 	ori	gp,gp,48924
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
10000240:	00840074 	movhi	r2,4097
    ori r2, r2, %lo(__bss_start)
10000244:	10969214 	ori	r2,r2,23112

    movhi r3, %hi(__bss_end)
10000248:	00c40074 	movhi	r3,4097
    ori r3, r3, %lo(__bss_end)
1000024c:	18d6eb14 	ori	r3,r3,23468

    beq r2, r3, 1f
10000250:	10c00326 	beq	r2,r3,10000260 <_start+0x30>

0:
    stw zero, (r2)
10000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
10000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
1000025c:	10fffd36 	bltu	r2,r3,10000254 <__alt_data_end+0xf8000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
10000260:	000f5540 	call	1000f554 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10000264:	000f6f00 	call	1000f6f0 <alt_main>

10000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
10000268:	003fff06 	br	10000268 <__alt_data_end+0xf8000268>

1000026c <IO_init>:
//io_handler.c
#include "io_handler.h"
#include <stdio.h>
#include "system.h"
void IO_init(void)
{
1000026c:	deffff04 	addi	sp,sp,-4
10000270:	df000015 	stw	fp,0(sp)
10000274:	d839883a 	mov	fp,sp
	*otg_hpi_reset = 1;
10000278:	00800804 	movi	r2,32
1000027c:	00c00044 	movi	r3,1
10000280:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
10000284:	00800c04 	movi	r2,48
10000288:	00c00044 	movi	r3,1
1000028c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_r = 1;
10000290:	00801404 	movi	r2,80
10000294:	00c00044 	movi	r3,1
10000298:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
1000029c:	00801004 	movi	r2,64
100002a0:	00c00044 	movi	r3,1
100002a4:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = 0;
100002a8:	00801c04 	movi	r2,112
100002ac:	10000015 	stw	zero,0(r2)
	*otg_hpi_data = 0;
100002b0:	00801804 	movi	r2,96
100002b4:	10000015 	stw	zero,0(r2)
	// Reset OTG chip
	*otg_hpi_cs = 0;
100002b8:	00800c04 	movi	r2,48
100002bc:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 0;
100002c0:	00800804 	movi	r2,32
100002c4:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 1;
100002c8:	00800804 	movi	r2,32
100002cc:	00c00044 	movi	r3,1
100002d0:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
100002d4:	00800c04 	movi	r2,48
100002d8:	00c00044 	movi	r3,1
100002dc:	10c00005 	stb	r3,0(r2)
}
100002e0:	0001883a 	nop
100002e4:	e037883a 	mov	sp,fp
100002e8:	df000017 	ldw	fp,0(sp)
100002ec:	dec00104 	addi	sp,sp,4
100002f0:	f800283a 	ret

100002f4 <IO_write>:

void IO_write(alt_u8 Address, alt_u16 Data)
{
100002f4:	defffd04 	addi	sp,sp,-12
100002f8:	df000215 	stw	fp,8(sp)
100002fc:	df000204 	addi	fp,sp,8
10000300:	2007883a 	mov	r3,r4
10000304:	2805883a 	mov	r2,r5
10000308:	e0fffe05 	stb	r3,-8(fp)
1000030c:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	*otg_hpi_address = Address;
10000310:	00801c04 	movi	r2,112
10000314:	e0fffe03 	ldbu	r3,-8(fp)
10000318:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0;
1000031c:	00800c04 	movi	r2,48
10000320:	10000005 	stb	zero,0(r2)
	*otg_hpi_w = 0;
10000324:	00801004 	movi	r2,64
10000328:	10000005 	stb	zero,0(r2)
	*otg_hpi_data = Data;
1000032c:	00801804 	movi	r2,96
10000330:	e0ffff0b 	ldhu	r3,-4(fp)
10000334:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 1;
10000338:	00800c04 	movi	r2,48
1000033c:	00c00044 	movi	r3,1
10000340:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
10000344:	00801004 	movi	r2,64
10000348:	00c00044 	movi	r3,1
1000034c:	10c00005 	stb	r3,0(r2)

}
10000350:	0001883a 	nop
10000354:	e037883a 	mov	sp,fp
10000358:	df000017 	ldw	fp,0(sp)
1000035c:	dec00104 	addi	sp,sp,4
10000360:	f800283a 	ret

10000364 <IO_read>:

alt_u16 IO_read(alt_u8 Address)
{
10000364:	defffd04 	addi	sp,sp,-12
10000368:	df000215 	stw	fp,8(sp)
1000036c:	df000204 	addi	fp,sp,8
10000370:	2005883a 	mov	r2,r4
10000374:	e0bfff05 	stb	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	*otg_hpi_address = Address;
10000378:	00801c04 	movi	r2,112
1000037c:	e0ffff03 	ldbu	r3,-4(fp)
10000380:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0;
10000384:	00800c04 	movi	r2,48
10000388:	10000005 	stb	zero,0(r2)
	*otg_hpi_r = 0;
1000038c:	00801404 	movi	r2,80
10000390:	10000005 	stb	zero,0(r2)
	temp = *otg_hpi_data;
10000394:	00801804 	movi	r2,96
10000398:	10800017 	ldw	r2,0(r2)
1000039c:	e0bffe0d 	sth	r2,-8(fp)
	*otg_hpi_r = 1;
100003a0:	00801404 	movi	r2,80
100003a4:	00c00044 	movi	r3,1
100003a8:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
100003ac:	00800c04 	movi	r2,48
100003b0:	00c00044 	movi	r3,1
100003b4:	10c00005 	stb	r3,0(r2)
	return temp;
100003b8:	e0bffe0b 	ldhu	r2,-8(fp)
}
100003bc:	e037883a 	mov	sp,fp
100003c0:	df000017 	ldw	fp,0(sp)
100003c4:	dec00104 	addi	sp,sp,4
100003c8:	f800283a 	ret

100003cc <main>:
//
//                                Main function
//
//----------------------------------------------------------------------------------------//
int main(void)
{
100003cc:	defff904 	addi	sp,sp,-28
100003d0:	dfc00615 	stw	ra,24(sp)
100003d4:	df000515 	stw	fp,20(sp)
100003d8:	df000504 	addi	fp,sp,20
	IO_init();
100003dc:	000026c0 	call	1000026c <IO_init>

	alt_u16 intStat;
	alt_u16 usb_ctl_val;
	static alt_u16 ctl_reg = 0;
	static alt_u16 no_device = 0;
	alt_u16 fs_device = 0;
100003e0:	e03ffc0d 	sth	zero,-16(fp)
	int keycode = 0;
100003e4:	e03ffd15 	stw	zero,-12(fp)
	alt_u8 toggle = 0;
100003e8:	e03ffb85 	stb	zero,-18(fp)
	alt_u8 data_size;
	alt_u8 hot_plug_count;
	alt_u16 code;

	printf("USB keyboard setup...\n\n");
100003ec:	01040074 	movhi	r4,4097
100003f0:	21067c04 	addi	r4,r4,6640
100003f4:	00023bc0 	call	100023bc <puts>

	//----------------------------------------SIE1 initial---------------------------------------------------//
	USB_HOT_PLUG:
	UsbSoftReset();
100003f8:	00011b80 	call	100011b8 <UsbSoftReset>

	// STEP 1a:
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
100003fc:	000b883a 	mov	r5,zero
10000400:	01005104 	movi	r4,324
10000404:	000111c0 	call	1000111c <UsbWrite>
	UsbWrite (HOST1_STAT_REG, 0xFFFF);
10000408:	017fffd4 	movui	r5,65535
1000040c:	01302414 	movui	r4,49296
10000410:	000111c0 	call	1000111c <UsbWrite>

	/* Set HUSB_pEOT time */
	UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
10000414:	01409604 	movi	r5,600
10000418:	01006d04 	movi	r4,436
1000041c:	000111c0 	call	1000111c <UsbWrite>

	usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
10000420:	00811004 	movi	r2,1088
10000424:	e0bffb0d 	sth	r2,-20(fp)
	UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
10000428:	e0bffb0b 	ldhu	r2,-20(fp)
1000042c:	100b883a 	mov	r5,r2
10000430:	01005084 	movi	r4,322
10000434:	000111c0 	call	1000111c <UsbWrite>

	intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
10000438:	00808404 	movi	r2,528
1000043c:	e0bffe0d 	sth	r2,-8(fp)
	UsbWrite(HOST1_IRQ_EN_REG, intStat);
10000440:	e0bffe0b 	ldhu	r2,-8(fp)
10000444:	100b883a 	mov	r5,r2
10000448:	01302314 	movui	r4,49292
1000044c:	000111c0 	call	1000111c <UsbWrite>
	// STEP 1a end

	// STEP 1b begin
	UsbWrite(COMM_R0,0x0000);//reset time
10000450:	000b883a 	mov	r5,zero
10000454:	01007104 	movi	r4,452
10000458:	000111c0 	call	1000111c <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
1000045c:	000b883a 	mov	r5,zero
10000460:	01007184 	movi	r4,454
10000464:	000111c0 	call	1000111c <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
10000468:	000b883a 	mov	r5,zero
1000046c:	01007204 	movi	r4,456
10000470:	000111c0 	call	1000111c <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
10000474:	000b883a 	mov	r5,zero
10000478:	01007284 	movi	r4,458
1000047c:	000111c0 	call	1000111c <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
10000480:	000b883a 	mov	r5,zero
10000484:	01007304 	movi	r4,460
10000488:	000111c0 	call	1000111c <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
1000048c:	000b883a 	mov	r5,zero
10000490:	01007384 	movi	r4,462
10000494:	000111c0 	call	1000111c <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
10000498:	000b883a 	mov	r5,zero
1000049c:	01007404 	movi	r4,464
100004a0:	000111c0 	call	1000111c <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
100004a4:	000b883a 	mov	r5,zero
100004a8:	01007484 	movi	r4,466
100004ac:	000111c0 	call	1000111c <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
100004b0:	000b883a 	mov	r5,zero
100004b4:	01007504 	movi	r4,468
100004b8:	000111c0 	call	1000111c <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
100004bc:	000b883a 	mov	r5,zero
100004c0:	01007584 	movi	r4,470
100004c4:	000111c0 	call	1000111c <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
100004c8:	000b883a 	mov	r5,zero
100004cc:	01007604 	movi	r4,472
100004d0:	000111c0 	call	1000111c <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
100004d4:	000b883a 	mov	r5,zero
100004d8:	01007684 	movi	r4,474
100004dc:	000111c0 	call	1000111c <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
100004e0:	000b883a 	mov	r5,zero
100004e4:	01007704 	movi	r4,476
100004e8:	000111c0 	call	1000111c <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
100004ec:	000b883a 	mov	r5,zero
100004f0:	01007784 	movi	r4,478
100004f4:	000111c0 	call	1000111c <UsbWrite>
	UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
100004f8:	01401c84 	movi	r5,114
100004fc:	01007084 	movi	r4,450
10000500:	000111c0 	call	1000111c <UsbWrite>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
10000504:	01738054 	movui	r5,52737
10000508:	01000044 	movi	r4,1
1000050c:	00002f40 	call	100002f4 <IO_write>
	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
10000510:	00000306 	br	10000520 <main+0x154>
	{
		printf("Henlo");
10000514:	01040074 	movhi	r4,4097
10000518:	21068204 	addi	r4,r4,6664
1000051c:	00022c00 	call	100022c0 <printf>
	UsbWrite(COMM_R11,0x0000);  //r1
	UsbWrite(COMM_R12,0x0000);  //r1
	UsbWrite(COMM_R13,0x0000);  //r1
	UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
10000520:	010000c4 	movi	r4,3
10000524:	00003640 	call	10000364 <IO_read>
10000528:	10bfffcc 	andi	r2,r2,65535
1000052c:	103ff926 	beq	r2,zero,10000514 <__alt_data_end+0xf8000514>
	{
		printf("Henlo");
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
10000530:	00000806 	br	10000554 <main+0x188>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
10000534:	01000044 	movi	r4,1
10000538:	00003640 	call	10000364 <IO_read>
1000053c:	10bfffcc 	andi	r2,r2,65535
10000540:	100b883a 	mov	r5,r2
10000544:	01040074 	movhi	r4,4097
10000548:	21068404 	addi	r4,r4,6672
1000054c:	00022c00 	call	100022c0 <printf>
		goto USB_HOT_PLUG;
10000550:	003fa906 	br	100003f8 <__alt_data_end+0xf80003f8>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
	{
		printf("Henlo");
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
10000554:	01000044 	movi	r4,1
10000558:	00003640 	call	10000364 <IO_read>
1000055c:	10bfffcc 	andi	r2,r2,65535
10000560:	1083fb58 	cmpnei	r2,r2,4077
10000564:	103ff31e 	bne	r2,zero,10000534 <__alt_data_end+0xf8000534>
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
		goto USB_HOT_PLUG;
	}
	// STEP 1b end

	printf("STEP 1 Complete");
10000568:	01040074 	movhi	r4,4097
1000056c:	21068d04 	addi	r4,r4,6708
10000570:	00022c00 	call	100022c0 <printf>
	// STEP 2 begin
	UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
10000574:	01401d04 	movi	r5,116
10000578:	01007084 	movi	r4,450
1000057c:	000111c0 	call	1000111c <UsbWrite>
	UsbWrite(COMM_R0,0x003c);//reset time
10000580:	01400f04 	movi	r5,60
10000584:	01007104 	movi	r4,452
10000588:	000111c0 	call	1000111c <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
1000058c:	000b883a 	mov	r5,zero
10000590:	01007184 	movi	r4,454
10000594:	000111c0 	call	1000111c <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
10000598:	000b883a 	mov	r5,zero
1000059c:	01007204 	movi	r4,456
100005a0:	000111c0 	call	1000111c <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
100005a4:	000b883a 	mov	r5,zero
100005a8:	01007284 	movi	r4,458
100005ac:	000111c0 	call	1000111c <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
100005b0:	000b883a 	mov	r5,zero
100005b4:	01007304 	movi	r4,460
100005b8:	000111c0 	call	1000111c <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
100005bc:	000b883a 	mov	r5,zero
100005c0:	01007384 	movi	r4,462
100005c4:	000111c0 	call	1000111c <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
100005c8:	000b883a 	mov	r5,zero
100005cc:	01007404 	movi	r4,464
100005d0:	000111c0 	call	1000111c <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
100005d4:	000b883a 	mov	r5,zero
100005d8:	01007484 	movi	r4,466
100005dc:	000111c0 	call	1000111c <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
100005e0:	000b883a 	mov	r5,zero
100005e4:	01007504 	movi	r4,468
100005e8:	000111c0 	call	1000111c <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
100005ec:	000b883a 	mov	r5,zero
100005f0:	01007584 	movi	r4,470
100005f4:	000111c0 	call	1000111c <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
100005f8:	000b883a 	mov	r5,zero
100005fc:	01007604 	movi	r4,472
10000600:	000111c0 	call	1000111c <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
10000604:	000b883a 	mov	r5,zero
10000608:	01007684 	movi	r4,474
1000060c:	000111c0 	call	1000111c <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
10000610:	000b883a 	mov	r5,zero
10000614:	01007704 	movi	r4,476
10000618:	000111c0 	call	1000111c <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
1000061c:	000b883a 	mov	r5,zero
10000620:	01007784 	movi	r4,478
10000624:	000111c0 	call	1000111c <UsbWrite>

	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
10000628:	01738054 	movui	r5,52737
1000062c:	01000044 	movi	r4,1
10000630:	00002f40 	call	100002f4 <IO_write>

	while (IO_read(HPI_MAILBOX) != COMM_ACK)
10000634:	0001883a 	nop
10000638:	01000044 	movi	r4,1
1000063c:	00003640 	call	10000364 <IO_read>
10000640:	10bfffcc 	andi	r2,r2,65535
10000644:	1083fb58 	cmpnei	r2,r2,4077
10000648:	10000826 	beq	r2,zero,1000066c <main+0x2a0>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
1000064c:	01000044 	movi	r4,1
10000650:	00003640 	call	10000364 <IO_read>
10000654:	10bfffcc 	andi	r2,r2,65535
10000658:	100b883a 	mov	r5,r2
1000065c:	01040074 	movhi	r4,4097
10000660:	21068404 	addi	r4,r4,6672
10000664:	00022c00 	call	100022c0 <printf>
		goto USB_HOT_PLUG;
10000668:	003f6306 	br	100003f8 <__alt_data_end+0xf80003f8>
	}
	// STEP 2 end

	ctl_reg = USB1_CTL_REG;
1000066c:	00b02284 	movi	r2,-16246
10000670:	d0a6cb0d 	sth	r2,-25812(gp)
	no_device = (A_DP_STAT | A_DM_STAT);
10000674:	008c0004 	movi	r2,12288
10000678:	d0a6cb8d 	sth	r2,-25810(gp)
	fs_device = A_DP_STAT;
1000067c:	00880004 	movi	r2,8192
10000680:	e0bffc0d 	sth	r2,-16(fp)
	usb_ctl_val = UsbRead(ctl_reg);
10000684:	d0a6cb0b 	ldhu	r2,-25812(gp)
10000688:	10bfffcc 	andi	r2,r2,65535
1000068c:	1009883a 	mov	r4,r2
10000690:	00011740 	call	10001174 <UsbRead>
10000694:	e0bffb0d 	sth	r2,-20(fp)

	if (!(usb_ctl_val & no_device))
10000698:	d0a6cb8b 	ldhu	r2,-25810(gp)
1000069c:	e0fffb0b 	ldhu	r3,-20(fp)
100006a0:	1884703a 	and	r2,r3,r2
100006a4:	10bfffcc 	andi	r2,r2,65535
100006a8:	1000351e 	bne	r2,zero,10000780 <main+0x3b4>
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
100006ac:	e03ffbc5 	stb	zero,-17(fp)
100006b0:	00000f06 	br	100006f0 <main+0x324>
		{
			usleep(5*1000);
100006b4:	0104e204 	movi	r4,5000
100006b8:	000fa280 	call	1000fa28 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
100006bc:	d0a6cb0b 	ldhu	r2,-25812(gp)
100006c0:	10bfffcc 	andi	r2,r2,65535
100006c4:	1009883a 	mov	r4,r2
100006c8:	00011740 	call	10001174 <UsbRead>
100006cc:	e0bffb0d 	sth	r2,-20(fp)
			if(usb_ctl_val & no_device) break;
100006d0:	d0a6cb8b 	ldhu	r2,-25810(gp)
100006d4:	e0fffb0b 	ldhu	r3,-20(fp)
100006d8:	1884703a 	and	r2,r3,r2
100006dc:	10bfffcc 	andi	r2,r2,65535
100006e0:	1000071e 	bne	r2,zero,10000700 <main+0x334>
	fs_device = A_DP_STAT;
	usb_ctl_val = UsbRead(ctl_reg);

	if (!(usb_ctl_val & no_device))
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
100006e4:	e0bffbc3 	ldbu	r2,-17(fp)
100006e8:	10800044 	addi	r2,r2,1
100006ec:	e0bffbc5 	stb	r2,-17(fp)
100006f0:	e0bffbc3 	ldbu	r2,-17(fp)
100006f4:	10800170 	cmpltui	r2,r2,5
100006f8:	103fee1e 	bne	r2,zero,100006b4 <__alt_data_end+0xf80006b4>
100006fc:	00000106 	br	10000704 <main+0x338>
		{
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			if(usb_ctl_val & no_device) break;
10000700:	0001883a 	nop
		}
		if(!(usb_ctl_val & no_device))
10000704:	d0a6cb8b 	ldhu	r2,-25810(gp)
10000708:	e0fffb0b 	ldhu	r3,-20(fp)
1000070c:	1884703a 	and	r2,r3,r2
10000710:	10bfffcc 	andi	r2,r2,65535
10000714:	1000261e 	bne	r2,zero,100007b0 <main+0x3e4>
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
10000718:	01040074 	movhi	r4,4097
1000071c:	21069104 	addi	r4,r4,6724
10000720:	00023bc0 	call	100023bc <puts>
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
10000724:	01040074 	movhi	r4,4097
10000728:	21069b04 	addi	r4,r4,6764
1000072c:	00023bc0 	call	100023bc <puts>
			while (!(usb_ctl_val & no_device))
10000730:	00000d06 	br	10000768 <main+0x39c>
			{
				usb_ctl_val = UsbRead(ctl_reg);
10000734:	d0a6cb0b 	ldhu	r2,-25812(gp)
10000738:	10bfffcc 	andi	r2,r2,65535
1000073c:	1009883a 	mov	r4,r2
10000740:	00011740 	call	10001174 <UsbRead>
10000744:	e0bffb0d 	sth	r2,-20(fp)
				if(usb_ctl_val & no_device)
10000748:	d0a6cb8b 	ldhu	r2,-25810(gp)
1000074c:	e0fffb0b 	ldhu	r3,-20(fp)
10000750:	1884703a 	and	r2,r3,r2
10000754:	10bfffcc 	andi	r2,r2,65535
10000758:	10000126 	beq	r2,zero,10000760 <main+0x394>
					goto USB_HOT_PLUG;
1000075c:	003f2606 	br	100003f8 <__alt_data_end+0xf80003f8>

				usleep(2000);
10000760:	0101f404 	movi	r4,2000
10000764:	000fa280 	call	1000fa28 <usleep>
		}
		if(!(usb_ctl_val & no_device))
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
			while (!(usb_ctl_val & no_device))
10000768:	d0a6cb8b 	ldhu	r2,-25810(gp)
1000076c:	e0fffb0b 	ldhu	r3,-20(fp)
10000770:	1884703a 	and	r2,r3,r2
10000774:	10bfffcc 	andi	r2,r2,65535
10000778:	103fee26 	beq	r2,zero,10000734 <__alt_data_end+0xf8000734>
1000077c:	00000c06 	br	100007b0 <main+0x3e4>
		}
	}
	else
	{
		/* check for low speed or full speed by reading D+ and D- lines */
		if (usb_ctl_val & fs_device)
10000780:	e0fffb0b 	ldhu	r3,-20(fp)
10000784:	e0bffc0b 	ldhu	r2,-16(fp)
10000788:	1884703a 	and	r2,r3,r2
1000078c:	10bfffcc 	andi	r2,r2,65535
10000790:	10000426 	beq	r2,zero,100007a4 <main+0x3d8>
		{
			printf("[INFO]: full speed device\n");
10000794:	01040074 	movhi	r4,4097
10000798:	2106a704 	addi	r4,r4,6812
1000079c:	00023bc0 	call	100023bc <puts>
100007a0:	00000306 	br	100007b0 <main+0x3e4>
		}
		else
		{
			printf("[INFO]: low speed device\n");
100007a4:	01040074 	movhi	r4,4097
100007a8:	2106ae04 	addi	r4,r4,6840
100007ac:	00023bc0 	call	100023bc <puts>



	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();
100007b0:	000126c0 	call	1000126c <UsbSetAddress>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100007b4:	00000306 	br	100007c4 <main+0x3f8>
	{
		UsbSetAddress();
100007b8:	000126c0 	call	1000126c <UsbSetAddress>
		usleep(10*1000);
100007bc:	0109c404 	movi	r4,10000
100007c0:	000fa280 	call	1000fa28 <usleep>

	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100007c4:	010000c4 	movi	r4,3
100007c8:	00003640 	call	10000364 <IO_read>
100007cc:	10bfffcc 	andi	r2,r2,65535
100007d0:	1080040c 	andi	r2,r2,16
100007d4:	103ff826 	beq	r2,zero,100007b8 <__alt_data_end+0xf80007b8>
	{
		UsbSetAddress();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
100007d8:	000210c0 	call	1000210c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506); // i
100007dc:	01414184 	movi	r5,1286
100007e0:	01000084 	movi	r4,2
100007e4:	00002f40 	call	100002f4 <IO_write>
	printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IO_read(HPI_DATA));
100007e8:	0009883a 	mov	r4,zero
100007ec:	00003640 	call	10000364 <IO_read>
100007f0:	10bfffcc 	andi	r2,r2,65535
100007f4:	100b883a 	mov	r5,r2
100007f8:	01040074 	movhi	r4,4097
100007fc:	2106b504 	addi	r4,r4,6868
10000800:	00022c00 	call	100022c0 <printf>

	IO_write(HPI_ADDR,0x0508); // n
10000804:	01414204 	movi	r5,1288
10000808:	01000084 	movi	r4,2
1000080c:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000810:	0009883a 	mov	r4,zero
10000814:	00003640 	call	10000364 <IO_read>
10000818:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
1000081c:	e0bffb0b 	ldhu	r2,-20(fp)
10000820:	100b883a 	mov	r5,r2
10000824:	01040074 	movhi	r4,4097
10000828:	2106c004 	addi	r4,r4,6912
1000082c:	00022c00 	call	100022c0 <printf>
	while (usb_ctl_val != 0x03) // retries occurred
10000830:	e0bffb0b 	ldhu	r2,-20(fp)
10000834:	108000e0 	cmpeqi	r2,r2,3
10000838:	1000031e 	bne	r2,zero,10000848 <main+0x47c>
	{
		usb_ctl_val = UsbGetRetryCnt();
1000083c:	00021900 	call	10002190 <UsbGetRetryCnt>
10000840:	e0bffb0d 	sth	r2,-20(fp)

		goto USB_HOT_PLUG;
10000844:	003eec06 	br	100003f8 <__alt_data_end+0xf80003f8>
	}

	printf("------------[ENUM PROCESS]:set address done!---------------\n");
10000848:	01040074 	movhi	r4,4097
1000084c:	2106cc04 	addi	r4,r4,6960
10000850:	00023bc0 	call	100023bc <puts>

	// STEP 4 begin
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1
10000854:	000136c0 	call	1000136c <UsbGetDeviceDesc1>

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000858:	00000306 	br	10000868 <main+0x49c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
1000085c:	000136c0 	call	1000136c <UsbGetDeviceDesc1>
		usleep(10*1000);
10000860:	0109c404 	movi	r4,10000
10000864:	000fa280 	call	1000fa28 <usleep>
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000868:	010000c4 	movi	r4,3
1000086c:	00003640 	call	10000364 <IO_read>
10000870:	10bfffcc 	andi	r2,r2,65535
10000874:	1080040c 	andi	r2,r2,16
10000878:	103ff826 	beq	r2,zero,1000085c <__alt_data_end+0xf800085c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
1000087c:	000210c0 	call	1000210c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000880:	01414184 	movi	r5,1286
10000884:	01000084 	movi	r4,2
10000888:	00002f40 	call	100002f4 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
1000088c:	0009883a 	mov	r4,zero
10000890:	00003640 	call	10000364 <IO_read>
10000894:	10bfffcc 	andi	r2,r2,65535
10000898:	100b883a 	mov	r5,r2
1000089c:	01040074 	movhi	r4,4097
100008a0:	2106db04 	addi	r4,r4,7020
100008a4:	00022c00 	call	100022c0 <printf>

	IO_write(HPI_ADDR,0x0508);
100008a8:	01414204 	movi	r5,1288
100008ac:	01000084 	movi	r4,2
100008b0:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
100008b4:	0009883a 	mov	r4,zero
100008b8:	00003640 	call	10000364 <IO_read>
100008bc:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
100008c0:	e0bffb0b 	ldhu	r2,-20(fp)
100008c4:	100b883a 	mov	r5,r2
100008c8:	01040074 	movhi	r4,4097
100008cc:	2106e604 	addi	r4,r4,7064
100008d0:	00022c00 	call	100022c0 <printf>
	while (usb_ctl_val != 0x03)
100008d4:	00000206 	br	100008e0 <main+0x514>
	{
		usb_ctl_val = UsbGetRetryCnt();
100008d8:	00021900 	call	10002190 <UsbGetRetryCnt>
100008dc:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
100008e0:	e0bffb0b 	ldhu	r2,-20(fp)
100008e4:	108000d8 	cmpnei	r2,r2,3
100008e8:	103ffb1e 	bne	r2,zero,100008d8 <__alt_data_end+0xf80008d8>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");
100008ec:	01040074 	movhi	r4,4097
100008f0:	2106f204 	addi	r4,r4,7112
100008f4:	00023bc0 	call	100023bc <puts>


	//--------------------------------get device descriptor-2---------------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2
100008f8:	00014b40 	call	100014b4 <UsbGetDeviceDesc2>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100008fc:	00000306 	br	1000090c <main+0x540>
	{
		//resend the get device descriptor
		//get device descriptor
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
10000900:	00014b40 	call	100014b4 <UsbGetDeviceDesc2>
		usleep(10*1000);
10000904:	0109c404 	movi	r4,10000
10000908:	000fa280 	call	1000fa28 <usleep>
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
1000090c:	010000c4 	movi	r4,3
10000910:	00003640 	call	10000364 <IO_read>
10000914:	10bfffcc 	andi	r2,r2,65535
10000918:	1080040c 	andi	r2,r2,16
1000091c:	103ff826 	beq	r2,zero,10000900 <__alt_data_end+0xf8000900>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000920:	000210c0 	call	1000210c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000924:	01414184 	movi	r5,1286
10000928:	01000084 	movi	r4,2
1000092c:	00002f40 	call	100002f4 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000930:	0009883a 	mov	r4,zero
10000934:	00003640 	call	10000364 <IO_read>
10000938:	10bfffcc 	andi	r2,r2,65535
1000093c:	100b883a 	mov	r5,r2
10000940:	01040074 	movhi	r4,4097
10000944:	2106db04 	addi	r4,r4,7020
10000948:	00022c00 	call	100022c0 <printf>

	IO_write(HPI_ADDR,0x0508);
1000094c:	01414204 	movi	r5,1288
10000950:	01000084 	movi	r4,2
10000954:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000958:	0009883a 	mov	r4,zero
1000095c:	00003640 	call	10000364 <IO_read>
10000960:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
10000964:	e0bffb0b 	ldhu	r2,-20(fp)
10000968:	100b883a 	mov	r5,r2
1000096c:	01040074 	movhi	r4,4097
10000970:	2106e604 	addi	r4,r4,7064
10000974:	00022c00 	call	100022c0 <printf>
	while (usb_ctl_val != 0x03)
10000978:	00000206 	br	10000984 <main+0x5b8>
	{
		usb_ctl_val = UsbGetRetryCnt();
1000097c:	00021900 	call	10002190 <UsbGetRetryCnt>
10000980:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000984:	e0bffb0b 	ldhu	r2,-20(fp)
10000988:	108000d8 	cmpnei	r2,r2,3
1000098c:	103ffb1e 	bne	r2,zero,1000097c <__alt_data_end+0xf800097c>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
10000990:	01040074 	movhi	r4,4097
10000994:	21070604 	addi	r4,r4,7192
10000998:	00023bc0 	call	100023bc <puts>


	// STEP 5 begin
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1
1000099c:	000168c0 	call	1000168c <UsbGetConfigDesc1>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100009a0:	00000306 	br	100009b0 <main+0x5e4>
	{
		//resend the get device descriptor
		//get device descriptor

		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
100009a4:	000168c0 	call	1000168c <UsbGetConfigDesc1>
		usleep(10*1000);
100009a8:	0109c404 	movi	r4,10000
100009ac:	000fa280 	call	1000fa28 <usleep>
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100009b0:	010000c4 	movi	r4,3
100009b4:	00003640 	call	10000364 <IO_read>
100009b8:	10bfffcc 	andi	r2,r2,65535
100009bc:	1080040c 	andi	r2,r2,16
100009c0:	103ff826 	beq	r2,zero,100009a4 <__alt_data_end+0xf80009a4>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
100009c4:	000210c0 	call	1000210c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
100009c8:	01414184 	movi	r5,1286
100009cc:	01000084 	movi	r4,2
100009d0:	00002f40 	call	100002f4 <IO_write>
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));
100009d4:	0009883a 	mov	r4,zero
100009d8:	00003640 	call	10000364 <IO_read>
100009dc:	10bfffcc 	andi	r2,r2,65535
100009e0:	100b883a 	mov	r5,r2
100009e4:	01040074 	movhi	r4,4097
100009e8:	21071804 	addi	r4,r4,7264
100009ec:	00022c00 	call	100022c0 <printf>

	IO_write(HPI_ADDR,0x0508);
100009f0:	01414204 	movi	r5,1288
100009f4:	01000084 	movi	r4,2
100009f8:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
100009fc:	0009883a 	mov	r4,zero
10000a00:	00003640 	call	10000364 <IO_read>
10000a04:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
10000a08:	e0bffb0b 	ldhu	r2,-20(fp)
10000a0c:	100b883a 	mov	r5,r2
10000a10:	01040074 	movhi	r4,4097
10000a14:	21072304 	addi	r4,r4,7308
10000a18:	00022c00 	call	100022c0 <printf>
	while (usb_ctl_val != 0x03)
10000a1c:	00000206 	br	10000a28 <main+0x65c>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000a20:	00021900 	call	10002190 <UsbGetRetryCnt>
10000a24:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000a28:	e0bffb0b 	ldhu	r2,-20(fp)
10000a2c:	108000d8 	cmpnei	r2,r2,3
10000a30:	103ffb1e 	bne	r2,zero,10000a20 <__alt_data_end+0xf8000a20>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}
	printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
10000a34:	01040074 	movhi	r4,4097
10000a38:	21072f04 	addi	r4,r4,7356
10000a3c:	00023bc0 	call	100023bc <puts>

	// STEP 6 begin
	//-----------------------------------get configuration descriptor-2------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2
10000a40:	000181c0 	call	1000181c <UsbGetConfigDesc2>

	usleep(100*1000);
10000a44:	010000b4 	movhi	r4,2
10000a48:	2121a804 	addi	r4,r4,-31072
10000a4c:	000fa280 	call	1000fa28 <usleep>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000a50:	00000306 	br	10000a60 <main+0x694>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
10000a54:	000181c0 	call	1000181c <UsbGetConfigDesc2>
		usleep(10*1000);
10000a58:	0109c404 	movi	r4,10000
10000a5c:	000fa280 	call	1000fa28 <usleep>
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2

	usleep(100*1000);
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000a60:	010000c4 	movi	r4,3
10000a64:	00003640 	call	10000364 <IO_read>
10000a68:	10bfffcc 	andi	r2,r2,65535
10000a6c:	1080040c 	andi	r2,r2,16
10000a70:	103ff826 	beq	r2,zero,10000a54 <__alt_data_end+0xf8000a54>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000a74:	000210c0 	call	1000210c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000a78:	01414184 	movi	r5,1286
10000a7c:	01000084 	movi	r4,2
10000a80:	00002f40 	call	100002f4 <IO_write>
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000a84:	0009883a 	mov	r4,zero
10000a88:	00003640 	call	10000364 <IO_read>
10000a8c:	10bfffcc 	andi	r2,r2,65535
10000a90:	100b883a 	mov	r5,r2
10000a94:	01040074 	movhi	r4,4097
10000a98:	21074204 	addi	r4,r4,7432
10000a9c:	00022c00 	call	100022c0 <printf>

	IO_write(HPI_ADDR,0x0508);
10000aa0:	01414204 	movi	r5,1288
10000aa4:	01000084 	movi	r4,2
10000aa8:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000aac:	0009883a 	mov	r4,zero
10000ab0:	00003640 	call	10000364 <IO_read>
10000ab4:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
10000ab8:	e0bffb0b 	ldhu	r2,-20(fp)
10000abc:	100b883a 	mov	r5,r2
10000ac0:	01040074 	movhi	r4,4097
10000ac4:	21074d04 	addi	r4,r4,7476
10000ac8:	00022c00 	call	100022c0 <printf>
	while (usb_ctl_val != 0x03)
10000acc:	00000206 	br	10000ad8 <main+0x70c>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000ad0:	00021900 	call	10002190 <UsbGetRetryCnt>
10000ad4:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000ad8:	e0bffb0b 	ldhu	r2,-20(fp)
10000adc:	108000d8 	cmpnei	r2,r2,3
10000ae0:	103ffb1e 	bne	r2,zero,10000ad0 <__alt_data_end+0xf8000ad0>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
10000ae4:	01040074 	movhi	r4,4097
10000ae8:	21075904 	addi	r4,r4,7524
10000aec:	00023bc0 	call	100023bc <puts>


	// ---------------------------------get device info---------------------------------------------//

	// TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR.
	IO_write(HPI_ADDR,0x056c);
10000af0:	01415b04 	movi	r5,1388
10000af4:	01000084 	movi	r4,2
10000af8:	00002f40 	call	100002f4 <IO_write>
	code = IO_read(HPI_DATA);
10000afc:	0009883a 	mov	r4,zero
10000b00:	00003640 	call	10000364 <IO_read>
10000b04:	e0bffe8d 	sth	r2,-6(fp)
	code = code & 0x003;
10000b08:	e0bffe8b 	ldhu	r2,-6(fp)
10000b0c:	108000cc 	andi	r2,r2,3
10000b10:	e0bffe8d 	sth	r2,-6(fp)
	printf("\ncode = %x\n", code);
10000b14:	e0bffe8b 	ldhu	r2,-6(fp)
10000b18:	100b883a 	mov	r5,r2
10000b1c:	01040074 	movhi	r4,4097
10000b20:	21076c04 	addi	r4,r4,7600
10000b24:	00022c00 	call	100022c0 <printf>

	if (code == 0x01)
10000b28:	e0bffe8b 	ldhu	r2,-6(fp)
10000b2c:	10800058 	cmpnei	r2,r2,1
10000b30:	1000041e 	bne	r2,zero,10000b44 <main+0x778>
	{
		printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
10000b34:	01040074 	movhi	r4,4097
10000b38:	21076f04 	addi	r4,r4,7612
10000b3c:	00023bc0 	call	100023bc <puts>
10000b40:	00000306 	br	10000b50 <main+0x784>
	}
	else
	{
		printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
10000b44:	01040074 	movhi	r4,4097
10000b48:	21077e04 	addi	r4,r4,7672
10000b4c:	00023bc0 	call	100023bc <puts>
	}

	// TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.

	IO_write(HPI_ADDR,0x0576);
10000b50:	01415d84 	movi	r5,1398
10000b54:	01000084 	movi	r4,2
10000b58:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x073F);
10000b5c:	0141cfc4 	movi	r5,1855
10000b60:	0009883a 	mov	r4,zero
10000b64:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x8105);
10000b68:	01604154 	movui	r5,33029
10000b6c:	0009883a 	mov	r4,zero
10000b70:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0003);
10000b74:	014000c4 	movi	r5,3
10000b78:	0009883a 	mov	r4,zero
10000b7c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);
10000b80:	01400204 	movi	r5,8
10000b84:	0009883a 	mov	r4,zero
10000b88:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0xAC0A);
10000b8c:	016b0294 	movui	r5,44042
10000b90:	0009883a 	mov	r4,zero
10000b94:	00002f40 	call	100002f4 <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0576); //HUSB_SIE1_pCurrentTDPtr
10000b98:	01415d84 	movi	r5,1398
10000b9c:	01006c04 	movi	r4,432
10000ba0:	000111c0 	call	1000111c <UsbWrite>

	//data_size = (IO_read(HPI_DATA)>>8)&0x0ff;
	//data_size = 0x08;//(IO_read(HPI_DATA))&0x0ff;
	//UsbPrintMem();
	IO_write(HPI_ADDR,0x057c);
10000ba4:	01415f04 	movi	r5,1404
10000ba8:	01000084 	movi	r4,2
10000bac:	00002f40 	call	100002f4 <IO_write>
	data_size = (IO_read(HPI_DATA))&0x0ff;
10000bb0:	0009883a 	mov	r4,zero
10000bb4:	00003640 	call	10000364 <IO_read>
10000bb8:	e0bfff05 	stb	r2,-4(fp)
	printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
10000bbc:	e0bfff03 	ldbu	r2,-4(fp)
10000bc0:	100b883a 	mov	r5,r2
10000bc4:	01040074 	movhi	r4,4097
10000bc8:	21078704 	addi	r4,r4,7708
10000bcc:	00022c00 	call	100022c0 <printf>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration
10000bd0:	0001a840 	call	10001a84 <UsbSetConfig>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000bd4:	00000306 	br	10000be4 <main+0x818>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
10000bd8:	0001a840 	call	10001a84 <UsbSetConfig>
		usleep(10*1000);
10000bdc:	0109c404 	movi	r4,10000
10000be0:	000fa280 	call	1000fa28 <usleep>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000be4:	010000c4 	movi	r4,3
10000be8:	00003640 	call	10000364 <IO_read>
10000bec:	10bfffcc 	andi	r2,r2,65535
10000bf0:	1080040c 	andi	r2,r2,16
10000bf4:	103ff826 	beq	r2,zero,10000bd8 <__alt_data_end+0xf8000bd8>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000bf8:	000210c0 	call	1000210c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000bfc:	01414184 	movi	r5,1286
10000c00:	01000084 	movi	r4,2
10000c04:	00002f40 	call	100002f4 <IO_write>
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000c08:	0009883a 	mov	r4,zero
10000c0c:	00003640 	call	10000364 <IO_read>
10000c10:	10bfffcc 	andi	r2,r2,65535
10000c14:	100b883a 	mov	r5,r2
10000c18:	01040074 	movhi	r4,4097
10000c1c:	21079104 	addi	r4,r4,7748
10000c20:	00022c00 	call	100022c0 <printf>

	IO_write(HPI_ADDR,0x0508);
10000c24:	01414204 	movi	r5,1288
10000c28:	01000084 	movi	r4,2
10000c2c:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000c30:	0009883a 	mov	r4,zero
10000c34:	00003640 	call	10000364 <IO_read>
10000c38:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
10000c3c:	e0bffb0b 	ldhu	r2,-20(fp)
10000c40:	100b883a 	mov	r5,r2
10000c44:	01040074 	movhi	r4,4097
10000c48:	21079c04 	addi	r4,r4,7792
10000c4c:	00022c00 	call	100022c0 <printf>
	while (usb_ctl_val != 0x03)
10000c50:	00000206 	br	10000c5c <main+0x890>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000c54:	00021900 	call	10002190 <UsbGetRetryCnt>
10000c58:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000c5c:	e0bffb0b 	ldhu	r2,-20(fp)
10000c60:	108000d8 	cmpnei	r2,r2,3
10000c64:	103ffb1e 	bne	r2,zero,10000c54 <__alt_data_end+0xf8000c54>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");
10000c68:	01040074 	movhi	r4,4097
10000c6c:	2107a804 	addi	r4,r4,7840
10000c70:	00023bc0 	call	100023bc <puts>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();
10000c74:	0001b840 	call	10001b84 <UsbClassRequest>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000c78:	00000306 	br	10000c88 <main+0x8bc>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
10000c7c:	0001b840 	call	10001b84 <UsbClassRequest>
		usleep(10*1000);
10000c80:	0109c404 	movi	r4,10000
10000c84:	000fa280 	call	1000fa28 <usleep>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000c88:	010000c4 	movi	r4,3
10000c8c:	00003640 	call	10000364 <IO_read>
10000c90:	10bfffcc 	andi	r2,r2,65535
10000c94:	1080040c 	andi	r2,r2,16
10000c98:	103ff826 	beq	r2,zero,10000c7c <__alt_data_end+0xf8000c7c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000c9c:	000210c0 	call	1000210c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000ca0:	01414184 	movi	r5,1286
10000ca4:	01000084 	movi	r4,2
10000ca8:	00002f40 	call	100002f4 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000cac:	0009883a 	mov	r4,zero
10000cb0:	00003640 	call	10000364 <IO_read>
10000cb4:	10bfffcc 	andi	r2,r2,65535
10000cb8:	100b883a 	mov	r5,r2
10000cbc:	01040074 	movhi	r4,4097
10000cc0:	2107ba04 	addi	r4,r4,7912
10000cc4:	00022c00 	call	100022c0 <printf>

	IO_write(HPI_ADDR,0x0508);
10000cc8:	01414204 	movi	r5,1288
10000ccc:	01000084 	movi	r4,2
10000cd0:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000cd4:	0009883a 	mov	r4,zero
10000cd8:	00003640 	call	10000364 <IO_read>
10000cdc:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
10000ce0:	e0bffb0b 	ldhu	r2,-20(fp)
10000ce4:	100b883a 	mov	r5,r2
10000ce8:	01040074 	movhi	r4,4097
10000cec:	2107c504 	addi	r4,r4,7956
10000cf0:	00022c00 	call	100022c0 <printf>
	while (usb_ctl_val != 0x03)
10000cf4:	00000206 	br	10000d00 <main+0x934>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000cf8:	00021900 	call	10002190 <UsbGetRetryCnt>
10000cfc:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000d00:	e0bffb0b 	ldhu	r2,-20(fp)
10000d04:	108000d8 	cmpnei	r2,r2,3
10000d08:	103ffb1e 	bne	r2,zero,10000cf8 <__alt_data_end+0xf8000cf8>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("------------[ENUM PROCESS]:class request out done!-------------------\n");
10000d0c:	01040074 	movhi	r4,4097
10000d10:	2107d104 	addi	r4,r4,8004
10000d14:	00023bc0 	call	100023bc <puts>

	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();
10000d18:	0001c840 	call	10001c84 <UsbGetHidDesc>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000d1c:	00000306 	br	10000d2c <main+0x960>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
10000d20:	0001c840 	call	10001c84 <UsbGetHidDesc>
		usleep(10*1000);
10000d24:	0109c404 	movi	r4,10000
10000d28:	000fa280 	call	1000fa28 <usleep>
	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000d2c:	010000c4 	movi	r4,3
10000d30:	00003640 	call	10000364 <IO_read>
10000d34:	10bfffcc 	andi	r2,r2,65535
10000d38:	1080040c 	andi	r2,r2,16
10000d3c:	103ff826 	beq	r2,zero,10000d20 <__alt_data_end+0xf8000d20>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000d40:	000210c0 	call	1000210c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000d44:	01414184 	movi	r5,1286
10000d48:	01000084 	movi	r4,2
10000d4c:	00002f40 	call	100002f4 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000d50:	0009883a 	mov	r4,zero
10000d54:	00003640 	call	10000364 <IO_read>
10000d58:	10bfffcc 	andi	r2,r2,65535
10000d5c:	100b883a 	mov	r5,r2
10000d60:	01040074 	movhi	r4,4097
10000d64:	2107ba04 	addi	r4,r4,7912
10000d68:	00022c00 	call	100022c0 <printf>

	IO_write(HPI_ADDR,0x0508);
10000d6c:	01414204 	movi	r5,1288
10000d70:	01000084 	movi	r4,2
10000d74:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000d78:	0009883a 	mov	r4,zero
10000d7c:	00003640 	call	10000364 <IO_read>
10000d80:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
10000d84:	e0bffb0b 	ldhu	r2,-20(fp)
10000d88:	100b883a 	mov	r5,r2
10000d8c:	01040074 	movhi	r4,4097
10000d90:	2107c504 	addi	r4,r4,7956
10000d94:	00022c00 	call	100022c0 <printf>
	while (usb_ctl_val != 0x03)
10000d98:	00000206 	br	10000da4 <main+0x9d8>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000d9c:	00021900 	call	10002190 <UsbGetRetryCnt>
10000da0:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000da4:	e0bffb0b 	ldhu	r2,-20(fp)
10000da8:	108000d8 	cmpnei	r2,r2,3
10000dac:	103ffb1e 	bne	r2,zero,10000d9c <__alt_data_end+0xf8000d9c>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");
10000db0:	01040074 	movhi	r4,4097
10000db4:	2107e304 	addi	r4,r4,8076
10000db8:	00023bc0 	call	100023bc <puts>

	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
10000dbc:	0001dcc0 	call	10001dcc <UsbGetReportDesc>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000dc0:	00000306 	br	10000dd0 <main+0xa04>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
10000dc4:	0001dcc0 	call	10001dcc <UsbGetReportDesc>
		usleep(10*1000);
10000dc8:	0109c404 	movi	r4,10000
10000dcc:	000fa280 	call	1000fa28 <usleep>
	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000dd0:	010000c4 	movi	r4,3
10000dd4:	00003640 	call	10000364 <IO_read>
10000dd8:	10bfffcc 	andi	r2,r2,65535
10000ddc:	1080040c 	andi	r2,r2,16
10000de0:	103ff826 	beq	r2,zero,10000dc4 <__alt_data_end+0xf8000dc4>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000de4:	000210c0 	call	1000210c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000de8:	01414184 	movi	r5,1286
10000dec:	01000084 	movi	r4,2
10000df0:	00002f40 	call	100002f4 <IO_write>
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000df4:	0009883a 	mov	r4,zero
10000df8:	00003640 	call	10000364 <IO_read>
10000dfc:	10bfffcc 	andi	r2,r2,65535
10000e00:	100b883a 	mov	r5,r2
10000e04:	01040074 	movhi	r4,4097
10000e08:	2107f704 	addi	r4,r4,8156
10000e0c:	00022c00 	call	100022c0 <printf>

	IO_write(HPI_ADDR,0x0508);
10000e10:	01414204 	movi	r5,1288
10000e14:	01000084 	movi	r4,2
10000e18:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000e1c:	0009883a 	mov	r4,zero
10000e20:	00003640 	call	10000364 <IO_read>
10000e24:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
10000e28:	e0bffb0b 	ldhu	r2,-20(fp)
10000e2c:	100b883a 	mov	r5,r2
10000e30:	01040074 	movhi	r4,4097
10000e34:	21080304 	addi	r4,r4,8204
10000e38:	00022c00 	call	100022c0 <printf>
	while (usb_ctl_val != 0x03)
10000e3c:	00000206 	br	10000e48 <main+0xa7c>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000e40:	00021900 	call	10002190 <UsbGetRetryCnt>
10000e44:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000e48:	e0bffb0b 	ldhu	r2,-20(fp)
10000e4c:	108000d8 	cmpnei	r2,r2,3
10000e50:	103ffb1e 	bne	r2,zero,10000e40 <__alt_data_end+0xf8000e40>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
10000e54:	01040074 	movhi	r4,4097
10000e58:	21080f04 	addi	r4,r4,8252
10000e5c:	00023bc0 	call	100023bc <puts>



	//-----------------------------------get keycode value------------------------------------------------//
	usleep(10000);
10000e60:	0109c404 	movi	r4,10000
10000e64:	000fa280 	call	1000fa28 <usleep>
	while(1)
	{
		toggle++;
10000e68:	e0bffb83 	ldbu	r2,-18(fp)
10000e6c:	10800044 	addi	r2,r2,1
10000e70:	e0bffb85 	stb	r2,-18(fp)
		IO_write(HPI_ADDR,0x0500); //the start address
10000e74:	01414004 	movi	r5,1280
10000e78:	01000084 	movi	r4,2
10000e7c:	00002f40 	call	100002f4 <IO_write>
		//data phase IN-1
		IO_write(HPI_DATA,0x051c); //500
10000e80:	01414704 	movi	r5,1308
10000e84:	0009883a 	mov	r4,zero
10000e88:	00002f40 	call	100002f4 <IO_write>

		IO_write(HPI_DATA,0x000f & data_size);//2 data length
10000e8c:	e0bfff03 	ldbu	r2,-4(fp)
10000e90:	108003cc 	andi	r2,r2,15
10000e94:	100b883a 	mov	r5,r2
10000e98:	0009883a 	mov	r4,zero
10000e9c:	00002f40 	call	100002f4 <IO_write>

		IO_write(HPI_DATA,0x0291);//4 //endpoint 1
10000ea0:	0140a444 	movi	r5,657
10000ea4:	0009883a 	mov	r4,zero
10000ea8:	00002f40 	call	100002f4 <IO_write>
		if(toggle%2)
10000eac:	e0bffb83 	ldbu	r2,-18(fp)
10000eb0:	1080004c 	andi	r2,r2,1
10000eb4:	10803fcc 	andi	r2,r2,255
10000eb8:	10000426 	beq	r2,zero,10000ecc <main+0xb00>
		{
			IO_write(HPI_DATA,0x0001);//6 //data 1
10000ebc:	01400044 	movi	r5,1
10000ec0:	0009883a 	mov	r4,zero
10000ec4:	00002f40 	call	100002f4 <IO_write>
10000ec8:	00000306 	br	10000ed8 <main+0xb0c>
		}
		else
		{
			IO_write(HPI_DATA,0x0041);//6 //data 1
10000ecc:	01401044 	movi	r5,65
10000ed0:	0009883a 	mov	r4,zero
10000ed4:	00002f40 	call	100002f4 <IO_write>
		}
		IO_write(HPI_DATA,0x0013);//8
10000ed8:	014004c4 	movi	r5,19
10000edc:	0009883a 	mov	r4,zero
10000ee0:	00002f40 	call	100002f4 <IO_write>
		IO_write(HPI_DATA,0x0000);//a
10000ee4:	000b883a 	mov	r5,zero
10000ee8:	0009883a 	mov	r4,zero
10000eec:	00002f40 	call	100002f4 <IO_write>
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10000ef0:	01414004 	movi	r5,1280
10000ef4:	01006c04 	movi	r4,432
10000ef8:	000111c0 	call	1000111c <UsbWrite>
		
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000efc:	00002406 	br	10000f90 <main+0xbc4>
		{
			IO_write(HPI_ADDR,0x0500); //the start address
10000f00:	01414004 	movi	r5,1280
10000f04:	01000084 	movi	r4,2
10000f08:	00002f40 	call	100002f4 <IO_write>
			//data phase IN-1
			IO_write(HPI_DATA,0x051c); //500
10000f0c:	01414704 	movi	r5,1308
10000f10:	0009883a 	mov	r4,zero
10000f14:	00002f40 	call	100002f4 <IO_write>

			IO_write(HPI_DATA,0x000f & data_size);//2 data length
10000f18:	e0bfff03 	ldbu	r2,-4(fp)
10000f1c:	108003cc 	andi	r2,r2,15
10000f20:	100b883a 	mov	r5,r2
10000f24:	0009883a 	mov	r4,zero
10000f28:	00002f40 	call	100002f4 <IO_write>

			IO_write(HPI_DATA,0x0291);//4 //endpoint 1
10000f2c:	0140a444 	movi	r5,657
10000f30:	0009883a 	mov	r4,zero
10000f34:	00002f40 	call	100002f4 <IO_write>
			if(toggle%2)
10000f38:	e0bffb83 	ldbu	r2,-18(fp)
10000f3c:	1080004c 	andi	r2,r2,1
10000f40:	10803fcc 	andi	r2,r2,255
10000f44:	10000426 	beq	r2,zero,10000f58 <main+0xb8c>
			{
				IO_write(HPI_DATA,0x0001);//6 //data 1
10000f48:	01400044 	movi	r5,1
10000f4c:	0009883a 	mov	r4,zero
10000f50:	00002f40 	call	100002f4 <IO_write>
10000f54:	00000306 	br	10000f64 <main+0xb98>
			}
			else
			{
				IO_write(HPI_DATA,0x0041);//6 //data 1
10000f58:	01401044 	movi	r5,65
10000f5c:	0009883a 	mov	r4,zero
10000f60:	00002f40 	call	100002f4 <IO_write>
			}
			IO_write(HPI_DATA,0x0013);//8
10000f64:	014004c4 	movi	r5,19
10000f68:	0009883a 	mov	r4,zero
10000f6c:	00002f40 	call	100002f4 <IO_write>
			IO_write(HPI_DATA,0x0000);//
10000f70:	000b883a 	mov	r5,zero
10000f74:	0009883a 	mov	r4,zero
10000f78:	00002f40 	call	100002f4 <IO_write>
			UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10000f7c:	01414004 	movi	r5,1280
10000f80:	01006c04 	movi	r4,432
10000f84:	000111c0 	call	1000111c <UsbWrite>
			usleep(10*1000);
10000f88:	0109c404 	movi	r4,10000
10000f8c:	000fa280 	call	1000fa28 <usleep>
		}
		IO_write(HPI_DATA,0x0013);//8
		IO_write(HPI_DATA,0x0000);//a
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
		
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000f90:	010000c4 	movi	r4,3
10000f94:	00003640 	call	10000364 <IO_read>
10000f98:	10bfffcc 	andi	r2,r2,65535
10000f9c:	1080040c 	andi	r2,r2,16
10000fa0:	103fd726 	beq	r2,zero,10000f00 <__alt_data_end+0xf8000f00>
			IO_write(HPI_DATA,0x0000);//
			UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
			usleep(10*1000);
		}//end while

		usb_ctl_val = UsbWaitTDListDone();
10000fa4:	000210c0 	call	1000210c <UsbWaitTDListDone>
10000fa8:	e0bffb0d 	sth	r2,-20(fp)

		// The first two keycodes are stored in 0x051E. Other keycodes are in 
		// subsequent addresses.
		keycode = UsbRead(0x051e);
10000fac:	01014784 	movi	r4,1310
10000fb0:	00011740 	call	10001174 <UsbRead>
10000fb4:	10bfffcc 	andi	r2,r2,65535
10000fb8:	e0bffd15 	stw	r2,-12(fp)
		printf("\nfirst two keycode values are %04x\n",keycode);
10000fbc:	e17ffd17 	ldw	r5,-12(fp)
10000fc0:	01040074 	movhi	r4,4097
10000fc4:	21082304 	addi	r4,r4,8332
10000fc8:	00022c00 	call	100022c0 <printf>
		// We only need the first keycode, which is at the lower byte of keycode.
		// Send the keycode to hardware via PIO.
		*keycode_base = keycode & 0xff; 
10000fcc:	00802004 	movi	r2,128
10000fd0:	e0fffd17 	ldw	r3,-12(fp)
10000fd4:	10c00005 	stb	r3,0(r2)

		usleep(200);//usleep(5000);
10000fd8:	01003204 	movi	r4,200
10000fdc:	000fa280 	call	1000fa28 <usleep>
		usb_ctl_val = UsbRead(ctl_reg);
10000fe0:	d0a6cb0b 	ldhu	r2,-25812(gp)
10000fe4:	10bfffcc 	andi	r2,r2,65535
10000fe8:	1009883a 	mov	r4,r2
10000fec:	00011740 	call	10001174 <UsbRead>
10000ff0:	e0bffb0d 	sth	r2,-20(fp)

		if(!(usb_ctl_val & no_device))
10000ff4:	d0a6cb8b 	ldhu	r2,-25810(gp)
10000ff8:	e0fffb0b 	ldhu	r3,-20(fp)
10000ffc:	1884703a 	and	r2,r3,r2
10001000:	10bfffcc 	andi	r2,r2,65535
10001004:	10003f1e 	bne	r2,zero,10001104 <main+0xd38>
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
10001008:	e03ffbc5 	stb	zero,-17(fp)
1000100c:	00000f06 	br	1000104c <main+0xc80>
			{
				usleep(5*1000);
10001010:	0104e204 	movi	r4,5000
10001014:	000fa280 	call	1000fa28 <usleep>
				usb_ctl_val = UsbRead(ctl_reg);
10001018:	d0a6cb0b 	ldhu	r2,-25812(gp)
1000101c:	10bfffcc 	andi	r2,r2,65535
10001020:	1009883a 	mov	r4,r2
10001024:	00011740 	call	10001174 <UsbRead>
10001028:	e0bffb0d 	sth	r2,-20(fp)
				if(usb_ctl_val & no_device) break;
1000102c:	d0a6cb8b 	ldhu	r2,-25810(gp)
10001030:	e0fffb0b 	ldhu	r3,-20(fp)
10001034:	1884703a 	and	r2,r3,r2
10001038:	10bfffcc 	andi	r2,r2,65535
1000103c:	1000071e 	bne	r2,zero,1000105c <main+0xc90>
		usb_ctl_val = UsbRead(ctl_reg);

		if(!(usb_ctl_val & no_device))
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
10001040:	e0bffbc3 	ldbu	r2,-17(fp)
10001044:	10800044 	addi	r2,r2,1
10001048:	e0bffbc5 	stb	r2,-17(fp)
1000104c:	e0bffbc3 	ldbu	r2,-17(fp)
10001050:	108001f0 	cmpltui	r2,r2,7
10001054:	103fee1e 	bne	r2,zero,10001010 <__alt_data_end+0xf8001010>
10001058:	00000106 	br	10001060 <main+0xc94>
			{
				usleep(5*1000);
				usb_ctl_val = UsbRead(ctl_reg);
				if(usb_ctl_val & no_device) break;
1000105c:	0001883a 	nop
			}
			if(!(usb_ctl_val & no_device))
10001060:	d0a6cb8b 	ldhu	r2,-25810(gp)
10001064:	e0fffb0b 	ldhu	r3,-20(fp)
10001068:	1884703a 	and	r2,r3,r2
1000106c:	10bfffcc 	andi	r2,r2,65535
10001070:	1000241e 	bne	r2,zero,10001104 <main+0xd38>
			{
				printf("\n[INFO]: the keyboard has been removed!!! \n");
10001074:	01040074 	movhi	r4,4097
10001078:	21082c04 	addi	r4,r4,8368
1000107c:	00023bc0 	call	100023bc <puts>
				printf("[INFO]: please insert again!!! \n");
10001080:	01040074 	movhi	r4,4097
10001084:	21083704 	addi	r4,r4,8412
10001088:	00023bc0 	call	100023bc <puts>
			}
		}

		while (!(usb_ctl_val & no_device))
1000108c:	00001d06 	br	10001104 <main+0xd38>
		{

			usb_ctl_val = UsbRead(ctl_reg);
10001090:	d0a6cb0b 	ldhu	r2,-25812(gp)
10001094:	10bfffcc 	andi	r2,r2,65535
10001098:	1009883a 	mov	r4,r2
1000109c:	00011740 	call	10001174 <UsbRead>
100010a0:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
100010a4:	0104e204 	movi	r4,5000
100010a8:	000fa280 	call	1000fa28 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
100010ac:	d0a6cb0b 	ldhu	r2,-25812(gp)
100010b0:	10bfffcc 	andi	r2,r2,65535
100010b4:	1009883a 	mov	r4,r2
100010b8:	00011740 	call	10001174 <UsbRead>
100010bc:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
100010c0:	0104e204 	movi	r4,5000
100010c4:	000fa280 	call	1000fa28 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
100010c8:	d0a6cb0b 	ldhu	r2,-25812(gp)
100010cc:	10bfffcc 	andi	r2,r2,65535
100010d0:	1009883a 	mov	r4,r2
100010d4:	00011740 	call	10001174 <UsbRead>
100010d8:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
100010dc:	0104e204 	movi	r4,5000
100010e0:	000fa280 	call	1000fa28 <usleep>

			if(usb_ctl_val & no_device)
100010e4:	d0a6cb8b 	ldhu	r2,-25810(gp)
100010e8:	e0fffb0b 	ldhu	r3,-20(fp)
100010ec:	1884703a 	and	r2,r3,r2
100010f0:	10bfffcc 	andi	r2,r2,65535
100010f4:	10000126 	beq	r2,zero,100010fc <main+0xd30>
				goto USB_HOT_PLUG;
100010f8:	003cbf06 	br	100003f8 <__alt_data_end+0xf80003f8>

			usleep(200);
100010fc:	01003204 	movi	r4,200
10001100:	000fa280 	call	1000fa28 <usleep>
				printf("\n[INFO]: the keyboard has been removed!!! \n");
				printf("[INFO]: please insert again!!! \n");
			}
		}

		while (!(usb_ctl_val & no_device))
10001104:	d0a6cb8b 	ldhu	r2,-25810(gp)
10001108:	e0fffb0b 	ldhu	r3,-20(fp)
1000110c:	1884703a 	and	r2,r3,r2
10001110:	10bfffcc 	andi	r2,r2,65535
10001114:	103fde26 	beq	r2,zero,10001090 <__alt_data_end+0xf8001090>
				goto USB_HOT_PLUG;

			usleep(200);
		}

	}//end while
10001118:	003f5306 	br	10000e68 <__alt_data_end+0xf8000e68>

1000111c <UsbWrite>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
1000111c:	defffc04 	addi	sp,sp,-16
10001120:	dfc00315 	stw	ra,12(sp)
10001124:	df000215 	stw	fp,8(sp)
10001128:	df000204 	addi	fp,sp,8
1000112c:	2007883a 	mov	r3,r4
10001130:	2805883a 	mov	r2,r5
10001134:	e0fffe0d 	sth	r3,-8(fp)
10001138:	e0bfff0d 	sth	r2,-4(fp)
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//

	IO_write(HPI_ADDR, Address);
1000113c:	e0bffe0b 	ldhu	r2,-8(fp)
10001140:	100b883a 	mov	r5,r2
10001144:	01000084 	movi	r4,2
10001148:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA, Data);
1000114c:	e0bfff0b 	ldhu	r2,-4(fp)
10001150:	100b883a 	mov	r5,r2
10001154:	0009883a 	mov	r4,zero
10001158:	00002f40 	call	100002f4 <IO_write>



}
1000115c:	0001883a 	nop
10001160:	e037883a 	mov	sp,fp
10001164:	dfc00117 	ldw	ra,4(sp)
10001168:	df000017 	ldw	fp,0(sp)
1000116c:	dec00204 	addi	sp,sp,8
10001170:	f800283a 	ret

10001174 <UsbRead>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
10001174:	defffd04 	addi	sp,sp,-12
10001178:	dfc00215 	stw	ra,8(sp)
1000117c:	df000115 	stw	fp,4(sp)
10001180:	df000104 	addi	fp,sp,4
10001184:	2005883a 	mov	r2,r4
10001188:	e0bfff0d 	sth	r2,-4(fp)
//							Write this function							   //
//*************************************************************************//



	IO_write(HPI_ADDR, Address);
1000118c:	e0bfff0b 	ldhu	r2,-4(fp)
10001190:	100b883a 	mov	r5,r2
10001194:	01000084 	movi	r4,2
10001198:	00002f40 	call	100002f4 <IO_write>
	return IO_read(HPI_ADDR);
1000119c:	01000084 	movi	r4,2
100011a0:	00003640 	call	10000364 <IO_read>

}
100011a4:	e037883a 	mov	sp,fp
100011a8:	dfc00117 	ldw	ra,4(sp)
100011ac:	df000017 	ldw	fp,0(sp)
100011b0:	dec00204 	addi	sp,sp,8
100011b4:	f800283a 	ret

100011b8 <UsbSoftReset>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbSoftReset()
{
100011b8:	defffe04 	addi	sp,sp,-8
100011bc:	dfc00115 	stw	ra,4(sp)
100011c0:	df000015 	stw	fp,0(sp)
100011c4:	d839883a 	mov	fp,sp
	//XIo_Out16(USB_MAILBOX, COMM_RESET);
	IO_write(HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
100011c8:	017e9414 	movui	r5,64080
100011cc:	01000044 	movi	r4,1
100011d0:	00002f40 	call	100002f4 <IO_write>
	usleep(100000);
100011d4:	010000b4 	movhi	r4,2
100011d8:	2121a804 	addi	r4,r4,-31072
100011dc:	000fa280 	call	1000fa28 <usleep>
	printf("[USB INIT]:reset finished!\n");
100011e0:	01040074 	movhi	r4,4097
100011e4:	21083f04 	addi	r4,r4,8444
100011e8:	00023bc0 	call	100023bc <puts>

	usleep(500000);
100011ec:	01000234 	movhi	r4,8
100011f0:	21284804 	addi	r4,r4,-24288
100011f4:	000fa280 	call	1000fa28 <usleep>
	printf("[USB INIT]:Clear up the interrupt\r\n");
100011f8:	01040074 	movhi	r4,4097
100011fc:	21084604 	addi	r4,r4,8472
10001200:	00023bc0 	call	100023bc <puts>
	IO_read(HPI_MAILBOX);
10001204:	01000044 	movi	r4,1
10001208:	00003640 	call	10000364 <IO_read>
	IO_read(HPI_STATUS);
1000120c:	010000c4 	movi	r4,3
10001210:	00003640 	call	10000364 <IO_read>

	// Had to add the write due to a bug in BIOS where they overwrite
	// the mailbox after initialization with garbage.  The read clears
	// any pending interrupts.
	UsbRead (HPI_SIE1_MSG_ADR);
10001214:	01005104 	movi	r4,324
10001218:	00011740 	call	10001174 <UsbRead>
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
1000121c:	000b883a 	mov	r5,zero
10001220:	01005104 	movi	r4,324
10001224:	000111c0 	call	1000111c <UsbWrite>
	UsbRead (HPI_SIE2_MSG_ADR);
10001228:	01005204 	movi	r4,328
1000122c:	00011740 	call	10001174 <UsbRead>
	UsbWrite (HPI_SIE2_MSG_ADR, 0);
10001230:	000b883a 	mov	r5,zero
10001234:	01005204 	movi	r4,328
10001238:	000111c0 	call	1000111c <UsbWrite>


	UsbWrite (HOST1_STAT_REG, 0xFFFF);
1000123c:	017fffd4 	movui	r5,65535
10001240:	01302414 	movui	r4,49296
10001244:	000111c0 	call	1000111c <UsbWrite>
	UsbWrite (HOST2_STAT_REG, 0xFFFF);
10001248:	017fffd4 	movui	r5,65535
1000124c:	01302c14 	movui	r4,49328
10001250:	000111c0 	call	1000111c <UsbWrite>
}
10001254:	0001883a 	nop
10001258:	e037883a 	mov	sp,fp
1000125c:	dfc00117 	ldw	ra,4(sp)
10001260:	df000017 	ldw	fp,0(sp)
10001264:	dec00204 	addi	sp,sp,8
10001268:	f800283a 	ret

1000126c <UsbSetAddress>:


void UsbSetAddress()
{
1000126c:	defffe04 	addi	sp,sp,-8
10001270:	dfc00115 	stw	ra,4(sp)
10001274:	df000015 	stw	fp,0(sp)
10001278:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
1000127c:	01414004 	movi	r5,1280
10001280:	01000084 	movi	r4,2
10001284:	00002f40 	call	100002f4 <IO_write>
	// TD #1: 6 writes
	IO_write(HPI_DATA,0x050C);
10001288:	01414304 	movi	r5,1292
1000128c:	0009883a 	mov	r4,zero
10001290:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001294:	01400204 	movi	r5,8
10001298:	0009883a 	mov	r4,zero
1000129c:	00002f40 	call	100002f4 <IO_write>
	// TASK: Complete with 4 more IOWR functions
	IO_write(HPI_DATA,0x00D0);
100012a0:	01403404 	movi	r5,208
100012a4:	0009883a 	mov	r4,zero
100012a8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
100012ac:	01400044 	movi	r5,1
100012b0:	0009883a 	mov	r4,zero
100012b4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
100012b8:	014004c4 	movi	r5,19
100012bc:	0009883a 	mov	r4,zero
100012c0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
100012c4:	01414504 	movi	r5,1300
100012c8:	0009883a 	mov	r4,zero
100012cc:	00002f40 	call	100002f4 <IO_write>
	// TD #2: 4 writes
	// TASK: Complete with 4 IOWR functions
	IO_write(HPI_DATA,0x0500);
100012d0:	01414004 	movi	r5,1280
100012d4:	0009883a 	mov	r4,zero
100012d8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0002);
100012dc:	01400084 	movi	r5,2
100012e0:	0009883a 	mov	r4,zero
100012e4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
100012e8:	000b883a 	mov	r5,zero
100012ec:	0009883a 	mov	r4,zero
100012f0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
100012f4:	000b883a 	mov	r5,zero
100012f8:	0009883a 	mov	r4,zero
100012fc:	00002f40 	call	100002f4 <IO_write>
	// TD #3: 6 writes
	// TASK: Complete with 6 IOWR functions
	IO_write(HPI_DATA,0x0000); //
10001300:	000b883a 	mov	r5,zero
10001304:	0009883a 	mov	r4,zero
10001308:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//
1000130c:	000b883a 	mov	r5,zero
10001310:	0009883a 	mov	r4,zero
10001314:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0090);//
10001318:	01402404 	movi	r5,144
1000131c:	0009883a 	mov	r4,zero
10001320:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);
10001324:	01401044 	movi	r5,65
10001328:	0009883a 	mov	r4,zero
1000132c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001330:	014004c4 	movi	r5,19
10001334:	0009883a 	mov	r4,zero
10001338:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
1000133c:	000b883a 	mov	r5,zero
10001340:	0009883a 	mov	r4,zero
10001344:	00002f40 	call	100002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001348:	01414004 	movi	r5,1280
1000134c:	01006c04 	movi	r4,432
10001350:	000111c0 	call	1000111c <UsbWrite>
}
10001354:	0001883a 	nop
10001358:	e037883a 	mov	sp,fp
1000135c:	dfc00117 	ldw	ra,4(sp)
10001360:	df000017 	ldw	fp,0(sp)
10001364:	dec00204 	addi	sp,sp,8
10001368:	f800283a 	ret

1000136c <UsbGetDeviceDesc1>:


void UsbGetDeviceDesc1()
{
1000136c:	defffe04 	addi	sp,sp,-8
10001370:	dfc00115 	stw	ra,4(sp)
10001374:	df000015 	stw	fp,0(sp)
10001378:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
1000137c:	01414004 	movi	r5,1280
10001380:	01000084 	movi	r4,2
10001384:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
10001388:	01414304 	movi	r5,1292
1000138c:	0009883a 	mov	r4,zero
10001390:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001394:	01400204 	movi	r5,8
10001398:	0009883a 	mov	r4,zero
1000139c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
100013a0:	0140b404 	movi	r5,720
100013a4:	0009883a 	mov	r4,zero
100013a8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
100013ac:	01400044 	movi	r5,1
100013b0:	0009883a 	mov	r4,zero
100013b4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
100013b8:	014004c4 	movi	r5,19
100013bc:	0009883a 	mov	r4,zero
100013c0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
100013c4:	01414504 	movi	r5,1300
100013c8:	0009883a 	mov	r4,zero
100013cc:	00002f40 	call	100002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
100013d0:	0141a004 	movi	r5,1664
100013d4:	0009883a 	mov	r4,zero
100013d8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0100); //device 0x01
100013dc:	01404004 	movi	r5,256
100013e0:	0009883a 	mov	r4,zero
100013e4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
100013e8:	000b883a 	mov	r5,zero
100013ec:	0009883a 	mov	r4,zero
100013f0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);
100013f4:	01400204 	movi	r5,8
100013f8:	0009883a 	mov	r4,zero
100013fc:	00002f40 	call	100002f4 <IO_write>

	//data phase IN
	IO_write(HPI_DATA,0x052C); //
10001400:	01414b04 	movi	r5,1324
10001404:	0009883a 	mov	r4,zero
10001408:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//
1000140c:	01400204 	movi	r5,8
10001410:	0009883a 	mov	r4,zero
10001414:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//
10001418:	0140a404 	movi	r5,656
1000141c:	0009883a 	mov	r4,zero
10001420:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);
10001424:	01401044 	movi	r5,65
10001428:	0009883a 	mov	r4,zero
1000142c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001430:	014004c4 	movi	r5,19
10001434:	0009883a 	mov	r4,zero
10001438:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0520);
1000143c:	01414804 	movi	r5,1312
10001440:	0009883a 	mov	r4,zero
10001444:	00002f40 	call	100002f4 <IO_write>

	//    //status phase
	IO_write(HPI_DATA,0x0000); //don't care
10001448:	000b883a 	mov	r5,zero
1000144c:	0009883a 	mov	r4,zero
10001450:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
10001454:	000b883a 	mov	r5,zero
10001458:	0009883a 	mov	r4,zero
1000145c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//device address
10001460:	01408404 	movi	r5,528
10001464:	0009883a 	mov	r4,zero
10001468:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);
1000146c:	01401044 	movi	r5,65
10001470:	0009883a 	mov	r4,zero
10001474:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001478:	014004c4 	movi	r5,19
1000147c:	0009883a 	mov	r4,zero
10001480:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001484:	000b883a 	mov	r5,zero
10001488:	0009883a 	mov	r4,zero
1000148c:	00002f40 	call	100002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001490:	01414004 	movi	r5,1280
10001494:	01006c04 	movi	r4,432
10001498:	000111c0 	call	1000111c <UsbWrite>
}
1000149c:	0001883a 	nop
100014a0:	e037883a 	mov	sp,fp
100014a4:	dfc00117 	ldw	ra,4(sp)
100014a8:	df000017 	ldw	fp,0(sp)
100014ac:	dec00204 	addi	sp,sp,8
100014b0:	f800283a 	ret

100014b4 <UsbGetDeviceDesc2>:

void UsbGetDeviceDesc2()
{
100014b4:	defffe04 	addi	sp,sp,-8
100014b8:	dfc00115 	stw	ra,4(sp)
100014bc:	df000015 	stw	fp,0(sp)
100014c0:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100014c4:	01414004 	movi	r5,1280
100014c8:	01000084 	movi	r4,2
100014cc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
100014d0:	01414304 	movi	r5,1292
100014d4:	0009883a 	mov	r4,zero
100014d8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100014dc:	01400204 	movi	r5,8
100014e0:	0009883a 	mov	r4,zero
100014e4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
100014e8:	0140b404 	movi	r5,720
100014ec:	0009883a 	mov	r4,zero
100014f0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
100014f4:	01400044 	movi	r5,1
100014f8:	0009883a 	mov	r4,zero
100014fc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001500:	014004c4 	movi	r5,19
10001504:	0009883a 	mov	r4,zero
10001508:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
1000150c:	01414504 	movi	r5,1300
10001510:	0009883a 	mov	r4,zero
10001514:	00002f40 	call	100002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10001518:	0141a004 	movi	r5,1664
1000151c:	0009883a 	mov	r4,zero
10001520:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0100);//e //device 0x01
10001524:	01404004 	movi	r5,256
10001528:	0009883a 	mov	r4,zero
1000152c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10001530:	000b883a 	mov	r5,zero
10001534:	0009883a 	mov	r4,zero
10001538:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0012);//2
1000153c:	01400484 	movi	r5,18
10001540:	0009883a 	mov	r4,zero
10001544:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10001548:	01415104 	movi	r5,1348
1000154c:	0009883a 	mov	r4,zero
10001550:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10001554:	01400204 	movi	r5,8
10001558:	0009883a 	mov	r4,zero
1000155c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10001560:	0140a404 	movi	r5,656
10001564:	0009883a 	mov	r4,zero
10001568:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
1000156c:	01401044 	movi	r5,65
10001570:	0009883a 	mov	r4,zero
10001574:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10001578:	014004c4 	movi	r5,19
1000157c:	0009883a 	mov	r4,zero
10001580:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10001584:	01414804 	movi	r5,1312
10001588:	0009883a 	mov	r4,zero
1000158c:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
10001590:	01415304 	movi	r5,1356
10001594:	0009883a 	mov	r4,zero
10001598:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
1000159c:	01400204 	movi	r5,8
100015a0:	0009883a 	mov	r4,zero
100015a4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
100015a8:	0140a404 	movi	r5,656
100015ac:	0009883a 	mov	r4,zero
100015b0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//6
100015b4:	01400044 	movi	r5,1
100015b8:	0009883a 	mov	r4,zero
100015bc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
100015c0:	014004c4 	movi	r5,19
100015c4:	0009883a 	mov	r4,zero
100015c8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
100015cc:	01414b04 	movi	r5,1324
100015d0:	0009883a 	mov	r4,zero
100015d4:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0554); //c
100015d8:	01415504 	movi	r5,1364
100015dc:	0009883a 	mov	r4,zero
100015e0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0002);//e
100015e4:	01400084 	movi	r5,2
100015e8:	0009883a 	mov	r4,zero
100015ec:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
100015f0:	0140a404 	movi	r5,656
100015f4:	0009883a 	mov	r4,zero
100015f8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
100015fc:	01401044 	movi	r5,65
10001600:	0009883a 	mov	r4,zero
10001604:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10001608:	014004c4 	movi	r5,19
1000160c:	0009883a 	mov	r4,zero
10001610:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
10001614:	01414e04 	movi	r5,1336
10001618:	0009883a 	mov	r4,zero
1000161c:	00002f40 	call	100002f4 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //538
10001620:	000b883a 	mov	r5,zero
10001624:	0009883a 	mov	r4,zero
10001628:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
1000162c:	000b883a 	mov	r5,zero
10001630:	0009883a 	mov	r4,zero
10001634:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//c
10001638:	01408404 	movi	r5,528
1000163c:	0009883a 	mov	r4,zero
10001640:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//e
10001644:	01401044 	movi	r5,65
10001648:	0009883a 	mov	r4,zero
1000164c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
10001650:	014004c4 	movi	r5,19
10001654:	0009883a 	mov	r4,zero
10001658:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
1000165c:	000b883a 	mov	r5,zero
10001660:	0009883a 	mov	r4,zero
10001664:	00002f40 	call	100002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001668:	01414004 	movi	r5,1280
1000166c:	01006c04 	movi	r4,432
10001670:	000111c0 	call	1000111c <UsbWrite>
}
10001674:	0001883a 	nop
10001678:	e037883a 	mov	sp,fp
1000167c:	dfc00117 	ldw	ra,4(sp)
10001680:	df000017 	ldw	fp,0(sp)
10001684:	dec00204 	addi	sp,sp,8
10001688:	f800283a 	ret

1000168c <UsbGetConfigDesc1>:


void UsbGetConfigDesc1()
{
1000168c:	defffe04 	addi	sp,sp,-8
10001690:	dfc00115 	stw	ra,4(sp)
10001694:	df000015 	stw	fp,0(sp)
10001698:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
1000169c:	01414004 	movi	r5,1280
100016a0:	01000084 	movi	r4,2
100016a4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
100016a8:	01414304 	movi	r5,1292
100016ac:	0009883a 	mov	r4,zero
100016b0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100016b4:	01400204 	movi	r5,8
100016b8:	0009883a 	mov	r4,zero
100016bc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
100016c0:	0140b404 	movi	r5,720
100016c4:	0009883a 	mov	r4,zero
100016c8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
100016cc:	01400044 	movi	r5,1
100016d0:	0009883a 	mov	r4,zero
100016d4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
100016d8:	014004c4 	movi	r5,19
100016dc:	0009883a 	mov	r4,zero
100016e0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
100016e4:	01414504 	movi	r5,1300
100016e8:	0009883a 	mov	r4,zero
100016ec:	00002f40 	call	100002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
100016f0:	0141a004 	movi	r5,1664
100016f4:	0009883a 	mov	r4,zero
100016f8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
100016fc:	01408004 	movi	r5,512
10001700:	0009883a 	mov	r4,zero
10001704:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10001708:	000b883a 	mov	r5,zero
1000170c:	0009883a 	mov	r4,zero
10001710:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0009);//2
10001714:	01400244 	movi	r5,9
10001718:	0009883a 	mov	r4,zero
1000171c:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10001720:	01415104 	movi	r5,1348
10001724:	0009883a 	mov	r4,zero
10001728:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
1000172c:	01400204 	movi	r5,8
10001730:	0009883a 	mov	r4,zero
10001734:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10001738:	0140a404 	movi	r5,656
1000173c:	0009883a 	mov	r4,zero
10001740:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10001744:	01401044 	movi	r5,65
10001748:	0009883a 	mov	r4,zero
1000174c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10001750:	014004c4 	movi	r5,19
10001754:	0009883a 	mov	r4,zero
10001758:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
1000175c:	01414804 	movi	r5,1312
10001760:	0009883a 	mov	r4,zero
10001764:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
10001768:	01415304 	movi	r5,1356
1000176c:	0009883a 	mov	r4,zero
10001770:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//2
10001774:	01400044 	movi	r5,1
10001778:	0009883a 	mov	r4,zero
1000177c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10001780:	0140a404 	movi	r5,656
10001784:	0009883a 	mov	r4,zero
10001788:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
1000178c:	01400044 	movi	r5,1
10001790:	0009883a 	mov	r4,zero
10001794:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10001798:	014004c4 	movi	r5,19
1000179c:	0009883a 	mov	r4,zero
100017a0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
100017a4:	01414b04 	movi	r5,1324
100017a8:	0009883a 	mov	r4,zero
100017ac:	00002f40 	call	100002f4 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
100017b0:	000b883a 	mov	r5,zero
100017b4:	0009883a 	mov	r4,zero
100017b8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
100017bc:	000b883a 	mov	r5,zero
100017c0:	0009883a 	mov	r4,zero
100017c4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
100017c8:	01408404 	movi	r5,528
100017cc:	0009883a 	mov	r4,zero
100017d0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
100017d4:	01401044 	movi	r5,65
100017d8:	0009883a 	mov	r4,zero
100017dc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
100017e0:	014004c4 	movi	r5,19
100017e4:	0009883a 	mov	r4,zero
100017e8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
100017ec:	000b883a 	mov	r5,zero
100017f0:	0009883a 	mov	r4,zero
100017f4:	00002f40 	call	100002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100017f8:	01414004 	movi	r5,1280
100017fc:	01006c04 	movi	r4,432
10001800:	000111c0 	call	1000111c <UsbWrite>
}
10001804:	0001883a 	nop
10001808:	e037883a 	mov	sp,fp
1000180c:	dfc00117 	ldw	ra,4(sp)
10001810:	df000017 	ldw	fp,0(sp)
10001814:	dec00204 	addi	sp,sp,8
10001818:	f800283a 	ret

1000181c <UsbGetConfigDesc2>:


void UsbGetConfigDesc2()
{
1000181c:	defffe04 	addi	sp,sp,-8
10001820:	dfc00115 	stw	ra,4(sp)
10001824:	df000015 	stw	fp,0(sp)
10001828:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
1000182c:	01414004 	movi	r5,1280
10001830:	01000084 	movi	r4,2
10001834:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
10001838:	01414304 	movi	r5,1292
1000183c:	0009883a 	mov	r4,zero
10001840:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001844:	01400204 	movi	r5,8
10001848:	0009883a 	mov	r4,zero
1000184c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10001850:	0140b404 	movi	r5,720
10001854:	0009883a 	mov	r4,zero
10001858:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
1000185c:	01400044 	movi	r5,1
10001860:	0009883a 	mov	r4,zero
10001864:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001868:	014004c4 	movi	r5,19
1000186c:	0009883a 	mov	r4,zero
10001870:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001874:	01414504 	movi	r5,1300
10001878:	0009883a 	mov	r4,zero
1000187c:	00002f40 	call	100002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10001880:	0141a004 	movi	r5,1664
10001884:	0009883a 	mov	r4,zero
10001888:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
1000188c:	01408004 	movi	r5,512
10001890:	0009883a 	mov	r4,zero
10001894:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10001898:	000b883a 	mov	r5,zero
1000189c:	0009883a 	mov	r4,zero
100018a0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x00FF);//2
100018a4:	01403fc4 	movi	r5,255
100018a8:	0009883a 	mov	r4,zero
100018ac:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x055c); //514
100018b0:	01415704 	movi	r5,1372
100018b4:	0009883a 	mov	r4,zero
100018b8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
100018bc:	01400204 	movi	r5,8
100018c0:	0009883a 	mov	r4,zero
100018c4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
100018c8:	0140a404 	movi	r5,656
100018cc:	0009883a 	mov	r4,zero
100018d0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
100018d4:	01401044 	movi	r5,65
100018d8:	0009883a 	mov	r4,zero
100018dc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
100018e0:	014004c4 	movi	r5,19
100018e4:	0009883a 	mov	r4,zero
100018e8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
100018ec:	01414804 	movi	r5,1312
100018f0:	0009883a 	mov	r4,zero
100018f4:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0564); //520
100018f8:	01415904 	movi	r5,1380
100018fc:	0009883a 	mov	r4,zero
10001900:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10001904:	01400204 	movi	r5,8
10001908:	0009883a 	mov	r4,zero
1000190c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10001910:	0140a404 	movi	r5,656
10001914:	0009883a 	mov	r4,zero
10001918:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
1000191c:	01400044 	movi	r5,1
10001920:	0009883a 	mov	r4,zero
10001924:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10001928:	014004c4 	movi	r5,19
1000192c:	0009883a 	mov	r4,zero
10001930:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10001934:	01414b04 	movi	r5,1324
10001938:	0009883a 	mov	r4,zero
1000193c:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x056c); //52c
10001940:	01415b04 	movi	r5,1388
10001944:	0009883a 	mov	r4,zero
10001948:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
1000194c:	01400204 	movi	r5,8
10001950:	0009883a 	mov	r4,zero
10001954:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
10001958:	0140a404 	movi	r5,656
1000195c:	0009883a 	mov	r4,zero
10001960:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10001964:	01401044 	movi	r5,65
10001968:	0009883a 	mov	r4,zero
1000196c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10001970:	014004c4 	movi	r5,19
10001974:	0009883a 	mov	r4,zero
10001978:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
1000197c:	01414e04 	movi	r5,1336
10001980:	0009883a 	mov	r4,zero
10001984:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0574); //538
10001988:	01415d04 	movi	r5,1396
1000198c:	0009883a 	mov	r4,zero
10001990:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
10001994:	01400204 	movi	r5,8
10001998:	0009883a 	mov	r4,zero
1000199c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
100019a0:	0140a404 	movi	r5,656
100019a4:	0009883a 	mov	r4,zero
100019a8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
100019ac:	01400044 	movi	r5,1
100019b0:	0009883a 	mov	r4,zero
100019b4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
100019b8:	014004c4 	movi	r5,19
100019bc:	0009883a 	mov	r4,zero
100019c0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
100019c4:	01415104 	movi	r5,1348
100019c8:	0009883a 	mov	r4,zero
100019cc:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x057c); //544
100019d0:	01415f04 	movi	r5,1404
100019d4:	0009883a 	mov	r4,zero
100019d8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0002);//6
100019dc:	01400084 	movi	r5,2
100019e0:	0009883a 	mov	r4,zero
100019e4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
100019e8:	0140a404 	movi	r5,656
100019ec:	0009883a 	mov	r4,zero
100019f0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
100019f4:	01401044 	movi	r5,65
100019f8:	0009883a 	mov	r4,zero
100019fc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10001a00:	014004c4 	movi	r5,19
10001a04:	0009883a 	mov	r4,zero
10001a08:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
10001a0c:	01415404 	movi	r5,1360
10001a10:	0009883a 	mov	r4,zero
10001a14:	00002f40 	call	100002f4 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //550
10001a18:	000b883a 	mov	r5,zero
10001a1c:	0009883a 	mov	r4,zero
10001a20:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
10001a24:	000b883a 	mov	r5,zero
10001a28:	0009883a 	mov	r4,zero
10001a2c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//4
10001a30:	01408404 	movi	r5,528
10001a34:	0009883a 	mov	r4,zero
10001a38:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//6
10001a3c:	01401044 	movi	r5,65
10001a40:	0009883a 	mov	r4,zero
10001a44:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10001a48:	014004c4 	movi	r5,19
10001a4c:	0009883a 	mov	r4,zero
10001a50:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
10001a54:	000b883a 	mov	r5,zero
10001a58:	0009883a 	mov	r4,zero
10001a5c:	00002f40 	call	100002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001a60:	01414004 	movi	r5,1280
10001a64:	01006c04 	movi	r4,432
10001a68:	000111c0 	call	1000111c <UsbWrite>
}
10001a6c:	0001883a 	nop
10001a70:	e037883a 	mov	sp,fp
10001a74:	dfc00117 	ldw	ra,4(sp)
10001a78:	df000017 	ldw	fp,0(sp)
10001a7c:	dec00204 	addi	sp,sp,8
10001a80:	f800283a 	ret

10001a84 <UsbSetConfig>:

void UsbSetConfig()
{
10001a84:	defffe04 	addi	sp,sp,-8
10001a88:	dfc00115 	stw	ra,4(sp)
10001a8c:	df000015 	stw	fp,0(sp)
10001a90:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001a94:	01414004 	movi	r5,1280
10001a98:	01000084 	movi	r4,2
10001a9c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
10001aa0:	01414304 	movi	r5,1292
10001aa4:	0009883a 	mov	r4,zero
10001aa8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001aac:	01400204 	movi	r5,8
10001ab0:	0009883a 	mov	r4,zero
10001ab4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10001ab8:	0140b404 	movi	r5,720
10001abc:	0009883a 	mov	r4,zero
10001ac0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001ac4:	01400044 	movi	r5,1
10001ac8:	0009883a 	mov	r4,zero
10001acc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001ad0:	014004c4 	movi	r5,19
10001ad4:	0009883a 	mov	r4,zero
10001ad8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001adc:	01414504 	movi	r5,1300
10001ae0:	0009883a 	mov	r4,zero
10001ae4:	00002f40 	call	100002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0900);
10001ae8:	01424004 	movi	r5,2304
10001aec:	0009883a 	mov	r4,zero
10001af0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//device address
10001af4:	01400044 	movi	r5,1
10001af8:	0009883a 	mov	r4,zero
10001afc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001b00:	000b883a 	mov	r5,zero
10001b04:	0009883a 	mov	r4,zero
10001b08:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001b0c:	000b883a 	mov	r5,zero
10001b10:	0009883a 	mov	r4,zero
10001b14:	00002f40 	call	100002f4 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
10001b18:	000b883a 	mov	r5,zero
10001b1c:	0009883a 	mov	r4,zero
10001b20:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
10001b24:	000b883a 	mov	r5,zero
10001b28:	0009883a 	mov	r4,zero
10001b2c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
10001b30:	0140a404 	movi	r5,656
10001b34:	0009883a 	mov	r4,zero
10001b38:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
10001b3c:	01401044 	movi	r5,65
10001b40:	0009883a 	mov	r4,zero
10001b44:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001b48:	014004c4 	movi	r5,19
10001b4c:	0009883a 	mov	r4,zero
10001b50:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001b54:	000b883a 	mov	r5,zero
10001b58:	0009883a 	mov	r4,zero
10001b5c:	00002f40 	call	100002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001b60:	01414004 	movi	r5,1280
10001b64:	01006c04 	movi	r4,432
10001b68:	000111c0 	call	1000111c <UsbWrite>

}
10001b6c:	0001883a 	nop
10001b70:	e037883a 	mov	sp,fp
10001b74:	dfc00117 	ldw	ra,4(sp)
10001b78:	df000017 	ldw	fp,0(sp)
10001b7c:	dec00204 	addi	sp,sp,8
10001b80:	f800283a 	ret

10001b84 <UsbClassRequest>:

void UsbClassRequest()
{
10001b84:	defffe04 	addi	sp,sp,-8
10001b88:	dfc00115 	stw	ra,4(sp)
10001b8c:	df000015 	stw	fp,0(sp)
10001b90:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001b94:	01414004 	movi	r5,1280
10001b98:	01000084 	movi	r4,2
10001b9c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
10001ba0:	01414304 	movi	r5,1292
10001ba4:	0009883a 	mov	r4,zero
10001ba8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001bac:	01400204 	movi	r5,8
10001bb0:	0009883a 	mov	r4,zero
10001bb4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10001bb8:	0140b404 	movi	r5,720
10001bbc:	0009883a 	mov	r4,zero
10001bc0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001bc4:	01400044 	movi	r5,1
10001bc8:	0009883a 	mov	r4,zero
10001bcc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001bd0:	014004c4 	movi	r5,19
10001bd4:	0009883a 	mov	r4,zero
10001bd8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001bdc:	01414504 	movi	r5,1300
10001be0:	0009883a 	mov	r4,zero
10001be4:	00002f40 	call	100002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0A21);
10001be8:	01428844 	movi	r5,2593
10001bec:	0009883a 	mov	r4,zero
10001bf0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//device address
10001bf4:	000b883a 	mov	r5,zero
10001bf8:	0009883a 	mov	r4,zero
10001bfc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001c00:	000b883a 	mov	r5,zero
10001c04:	0009883a 	mov	r4,zero
10001c08:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001c0c:	000b883a 	mov	r5,zero
10001c10:	0009883a 	mov	r4,zero
10001c14:	00002f40 	call	100002f4 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
10001c18:	000b883a 	mov	r5,zero
10001c1c:	0009883a 	mov	r4,zero
10001c20:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number /data length
10001c24:	000b883a 	mov	r5,zero
10001c28:	0009883a 	mov	r4,zero
10001c2c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
10001c30:	0140a404 	movi	r5,656
10001c34:	0009883a 	mov	r4,zero
10001c38:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
10001c3c:	01401044 	movi	r5,65
10001c40:	0009883a 	mov	r4,zero
10001c44:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001c48:	014004c4 	movi	r5,19
10001c4c:	0009883a 	mov	r4,zero
10001c50:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001c54:	000b883a 	mov	r5,zero
10001c58:	0009883a 	mov	r4,zero
10001c5c:	00002f40 	call	100002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001c60:	01414004 	movi	r5,1280
10001c64:	01006c04 	movi	r4,432
10001c68:	000111c0 	call	1000111c <UsbWrite>
}
10001c6c:	0001883a 	nop
10001c70:	e037883a 	mov	sp,fp
10001c74:	dfc00117 	ldw	ra,4(sp)
10001c78:	df000017 	ldw	fp,0(sp)
10001c7c:	dec00204 	addi	sp,sp,8
10001c80:	f800283a 	ret

10001c84 <UsbGetHidDesc>:


void UsbGetHidDesc()
{
10001c84:	defffe04 	addi	sp,sp,-8
10001c88:	dfc00115 	stw	ra,4(sp)
10001c8c:	df000015 	stw	fp,0(sp)
10001c90:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001c94:	01414004 	movi	r5,1280
10001c98:	01000084 	movi	r4,2
10001c9c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
10001ca0:	01414304 	movi	r5,1292
10001ca4:	0009883a 	mov	r4,zero
10001ca8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001cac:	01400204 	movi	r5,8
10001cb0:	0009883a 	mov	r4,zero
10001cb4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10001cb8:	0140b404 	movi	r5,720
10001cbc:	0009883a 	mov	r4,zero
10001cc0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001cc4:	01400044 	movi	r5,1
10001cc8:	0009883a 	mov	r4,zero
10001ccc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001cd0:	014004c4 	movi	r5,19
10001cd4:	0009883a 	mov	r4,zero
10001cd8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001cdc:	01414504 	movi	r5,1300
10001ce0:	0009883a 	mov	r4,zero
10001ce4:	00002f40 	call	100002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
10001ce8:	0141a044 	movi	r5,1665
10001cec:	0009883a 	mov	r4,zero
10001cf0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x2100);//e //HID 0x21
10001cf4:	01484004 	movi	r5,8448
10001cf8:	0009883a 	mov	r4,zero
10001cfc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10001d00:	000b883a 	mov	r5,zero
10001d04:	0009883a 	mov	r4,zero
10001d08:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
10001d0c:	01401ec4 	movi	r5,123
10001d10:	0009883a 	mov	r4,zero
10001d14:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10001d18:	01415104 	movi	r5,1348
10001d1c:	0009883a 	mov	r4,zero
10001d20:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10001d24:	01400204 	movi	r5,8
10001d28:	0009883a 	mov	r4,zero
10001d2c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10001d30:	0140a404 	movi	r5,656
10001d34:	0009883a 	mov	r4,zero
10001d38:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10001d3c:	01401044 	movi	r5,65
10001d40:	0009883a 	mov	r4,zero
10001d44:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10001d48:	014004c4 	movi	r5,19
10001d4c:	0009883a 	mov	r4,zero
10001d50:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10001d54:	01414804 	movi	r5,1312
10001d58:	0009883a 	mov	r4,zero
10001d5c:	00002f40 	call	100002f4 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
10001d60:	000b883a 	mov	r5,zero
10001d64:	0009883a 	mov	r4,zero
10001d68:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10001d6c:	000b883a 	mov	r5,zero
10001d70:	0009883a 	mov	r4,zero
10001d74:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
10001d78:	01408404 	movi	r5,528
10001d7c:	0009883a 	mov	r4,zero
10001d80:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10001d84:	01401044 	movi	r5,65
10001d88:	0009883a 	mov	r4,zero
10001d8c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10001d90:	014004c4 	movi	r5,19
10001d94:	0009883a 	mov	r4,zero
10001d98:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
10001d9c:	000b883a 	mov	r5,zero
10001da0:	0009883a 	mov	r4,zero
10001da4:	00002f40 	call	100002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001da8:	01414004 	movi	r5,1280
10001dac:	01006c04 	movi	r4,432
10001db0:	000111c0 	call	1000111c <UsbWrite>

}
10001db4:	0001883a 	nop
10001db8:	e037883a 	mov	sp,fp
10001dbc:	dfc00117 	ldw	ra,4(sp)
10001dc0:	df000017 	ldw	fp,0(sp)
10001dc4:	dec00204 	addi	sp,sp,8
10001dc8:	f800283a 	ret

10001dcc <UsbGetReportDesc>:


void UsbGetReportDesc()
{
10001dcc:	defffe04 	addi	sp,sp,-8
10001dd0:	dfc00115 	stw	ra,4(sp)
10001dd4:	df000015 	stw	fp,0(sp)
10001dd8:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001ddc:	01414004 	movi	r5,1280
10001de0:	01000084 	movi	r4,2
10001de4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
10001de8:	01414304 	movi	r5,1292
10001dec:	0009883a 	mov	r4,zero
10001df0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001df4:	01400204 	movi	r5,8
10001df8:	0009883a 	mov	r4,zero
10001dfc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10001e00:	0140b404 	movi	r5,720
10001e04:	0009883a 	mov	r4,zero
10001e08:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001e0c:	01400044 	movi	r5,1
10001e10:	0009883a 	mov	r4,zero
10001e14:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001e18:	014004c4 	movi	r5,19
10001e1c:	0009883a 	mov	r4,zero
10001e20:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001e24:	01414504 	movi	r5,1300
10001e28:	0009883a 	mov	r4,zero
10001e2c:	00002f40 	call	100002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
10001e30:	0141a044 	movi	r5,1665
10001e34:	0009883a 	mov	r4,zero
10001e38:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x2200);//e //report 0x22
10001e3c:	01488004 	movi	r5,8704
10001e40:	0009883a 	mov	r4,zero
10001e44:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10001e48:	000b883a 	mov	r5,zero
10001e4c:	0009883a 	mov	r4,zero
10001e50:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
10001e54:	01401ec4 	movi	r5,123
10001e58:	0009883a 	mov	r4,zero
10001e5c:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0580); //514
10001e60:	01416004 	movi	r5,1408
10001e64:	0009883a 	mov	r4,zero
10001e68:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10001e6c:	01400204 	movi	r5,8
10001e70:	0009883a 	mov	r4,zero
10001e74:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10001e78:	0140a404 	movi	r5,656
10001e7c:	0009883a 	mov	r4,zero
10001e80:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10001e84:	01401044 	movi	r5,65
10001e88:	0009883a 	mov	r4,zero
10001e8c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10001e90:	014004c4 	movi	r5,19
10001e94:	0009883a 	mov	r4,zero
10001e98:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10001e9c:	01414804 	movi	r5,1312
10001ea0:	0009883a 	mov	r4,zero
10001ea4:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0588); //520
10001ea8:	01416204 	movi	r5,1416
10001eac:	0009883a 	mov	r4,zero
10001eb0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10001eb4:	01400204 	movi	r5,8
10001eb8:	0009883a 	mov	r4,zero
10001ebc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10001ec0:	0140a404 	movi	r5,656
10001ec4:	0009883a 	mov	r4,zero
10001ec8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10001ecc:	01400044 	movi	r5,1
10001ed0:	0009883a 	mov	r4,zero
10001ed4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10001ed8:	014004c4 	movi	r5,19
10001edc:	0009883a 	mov	r4,zero
10001ee0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10001ee4:	01414b04 	movi	r5,1324
10001ee8:	0009883a 	mov	r4,zero
10001eec:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0590); //52c
10001ef0:	01416404 	movi	r5,1424
10001ef4:	0009883a 	mov	r4,zero
10001ef8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
10001efc:	01400204 	movi	r5,8
10001f00:	0009883a 	mov	r4,zero
10001f04:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
10001f08:	0140a404 	movi	r5,656
10001f0c:	0009883a 	mov	r4,zero
10001f10:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10001f14:	01401044 	movi	r5,65
10001f18:	0009883a 	mov	r4,zero
10001f1c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10001f20:	014004c4 	movi	r5,19
10001f24:	0009883a 	mov	r4,zero
10001f28:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
10001f2c:	01414e04 	movi	r5,1336
10001f30:	0009883a 	mov	r4,zero
10001f34:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0598); //538
10001f38:	01416604 	movi	r5,1432
10001f3c:	0009883a 	mov	r4,zero
10001f40:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
10001f44:	01400204 	movi	r5,8
10001f48:	0009883a 	mov	r4,zero
10001f4c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
10001f50:	0140a404 	movi	r5,656
10001f54:	0009883a 	mov	r4,zero
10001f58:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10001f5c:	01400044 	movi	r5,1
10001f60:	0009883a 	mov	r4,zero
10001f64:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
10001f68:	014004c4 	movi	r5,19
10001f6c:	0009883a 	mov	r4,zero
10001f70:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
10001f74:	01415104 	movi	r5,1348
10001f78:	0009883a 	mov	r4,zero
10001f7c:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x05a0); //544
10001f80:	01416804 	movi	r5,1440
10001f84:	0009883a 	mov	r4,zero
10001f88:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10001f8c:	01400204 	movi	r5,8
10001f90:	0009883a 	mov	r4,zero
10001f94:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10001f98:	0140a404 	movi	r5,656
10001f9c:	0009883a 	mov	r4,zero
10001fa0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
10001fa4:	01401044 	movi	r5,65
10001fa8:	0009883a 	mov	r4,zero
10001fac:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10001fb0:	014004c4 	movi	r5,19
10001fb4:	0009883a 	mov	r4,zero
10001fb8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
10001fbc:	01415404 	movi	r5,1360
10001fc0:	0009883a 	mov	r4,zero
10001fc4:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-6
	IO_write(HPI_DATA,0x05a8); //550
10001fc8:	01416a04 	movi	r5,1448
10001fcc:	0009883a 	mov	r4,zero
10001fd0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10001fd4:	01400204 	movi	r5,8
10001fd8:	0009883a 	mov	r4,zero
10001fdc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10001fe0:	0140a404 	movi	r5,656
10001fe4:	0009883a 	mov	r4,zero
10001fe8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10001fec:	01400044 	movi	r5,1
10001ff0:	0009883a 	mov	r4,zero
10001ff4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10001ff8:	014004c4 	movi	r5,19
10001ffc:	0009883a 	mov	r4,zero
10002000:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x055c);//a
10002004:	01415704 	movi	r5,1372
10002008:	0009883a 	mov	r4,zero
1000200c:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-7
	IO_write(HPI_DATA,0x05b0); //c
10002010:	01416c04 	movi	r5,1456
10002014:	0009883a 	mov	r4,zero
10002018:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
1000201c:	01400204 	movi	r5,8
10002020:	0009883a 	mov	r4,zero
10002024:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//560
10002028:	0140a404 	movi	r5,656
1000202c:	0009883a 	mov	r4,zero
10002030:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2 //data1
10002034:	01401044 	movi	r5,65
10002038:	0009883a 	mov	r4,zero
1000203c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10002040:	014004c4 	movi	r5,19
10002044:	0009883a 	mov	r4,zero
10002048:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0568);//6
1000204c:	01415a04 	movi	r5,1384
10002050:	0009883a 	mov	r4,zero
10002054:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-8
	IO_write(HPI_DATA,0x05b8); //8
10002058:	01416e04 	movi	r5,1464
1000205c:	0009883a 	mov	r4,zero
10002060:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0003);//a
10002064:	014000c4 	movi	r5,3
10002068:	0009883a 	mov	r4,zero
1000206c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
10002070:	0140a404 	movi	r5,656
10002074:	0009883a 	mov	r4,zero
10002078:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
1000207c:	01400044 	movi	r5,1
10002080:	0009883a 	mov	r4,zero
10002084:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//570
10002088:	014004c4 	movi	r5,19
1000208c:	0009883a 	mov	r4,zero
10002090:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0574);//2
10002094:	01415d04 	movi	r5,1396
10002098:	0009883a 	mov	r4,zero
1000209c:	00002f40 	call	100002f4 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //574
100020a0:	000b883a 	mov	r5,zero
100020a4:	0009883a 	mov	r4,zero
100020a8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
100020ac:	000b883a 	mov	r5,zero
100020b0:	0009883a 	mov	r4,zero
100020b4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//8
100020b8:	01408404 	movi	r5,528
100020bc:	0009883a 	mov	r4,zero
100020c0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
100020c4:	01401044 	movi	r5,65
100020c8:	0009883a 	mov	r4,zero
100020cc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
100020d0:	014004c4 	movi	r5,19
100020d4:	0009883a 	mov	r4,zero
100020d8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
100020dc:	000b883a 	mov	r5,zero
100020e0:	0009883a 	mov	r4,zero
100020e4:	00002f40 	call	100002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100020e8:	01414004 	movi	r5,1280
100020ec:	01006c04 	movi	r4,432
100020f0:	000111c0 	call	1000111c <UsbWrite>

}
100020f4:	0001883a 	nop
100020f8:	e037883a 	mov	sp,fp
100020fc:	dfc00117 	ldw	ra,4(sp)
10002100:	df000017 	ldw	fp,0(sp)
10002104:	dec00204 	addi	sp,sp,8
10002108:	f800283a 	ret

1000210c <UsbWaitTDListDone>:


alt_u16 UsbWaitTDListDone()
{
1000210c:	defffd04 	addi	sp,sp,-12
10002110:	dfc00215 	stw	ra,8(sp)
10002114:	df000115 	stw	fp,4(sp)
10002118:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
1000211c:	01005104 	movi	r4,324
10002120:	00011740 	call	10001174 <UsbRead>
10002124:	e0bfff0d 	sth	r2,-4(fp)
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
10002128:	000b883a 	mov	r5,zero
1000212c:	01005104 	movi	r4,324
10002130:	000111c0 	call	1000111c <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
10002134:	00000d06 	br	1000216c <UsbWaitTDListDone+0x60>
	{
		if(usb_ctl_val == 0x0000)
10002138:	e0bfff0b 	ldhu	r2,-4(fp)
1000213c:	10000526 	beq	r2,zero,10002154 <UsbWaitTDListDone+0x48>
		{
		}
		else
		{
			printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
10002140:	e0bfff0b 	ldhu	r2,-4(fp)
10002144:	100b883a 	mov	r5,r2
10002148:	01040074 	movhi	r4,4097
1000214c:	21084f04 	addi	r4,r4,8508
10002150:	00022c00 	call	100022c0 <printf>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
10002154:	01005104 	movi	r4,324
10002158:	00011740 	call	10001174 <UsbRead>
1000215c:	e0bfff0d 	sth	r2,-4(fp)
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
10002160:	000b883a 	mov	r5,zero
10002164:	01005104 	movi	r4,324
10002168:	000111c0 	call	1000111c <UsbWrite>
{
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
1000216c:	e0bfff0b 	ldhu	r2,-4(fp)
10002170:	10840018 	cmpnei	r2,r2,4096
10002174:	103ff01e 	bne	r2,zero,10002138 <__alt_data_end+0xf8002138>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
	}

	return usb_ctl_val;
10002178:	e0bfff0b 	ldhu	r2,-4(fp)
}
1000217c:	e037883a 	mov	sp,fp
10002180:	dfc00117 	ldw	ra,4(sp)
10002184:	df000017 	ldw	fp,0(sp)
10002188:	dec00204 	addi	sp,sp,8
1000218c:	f800283a 	ret

10002190 <UsbGetRetryCnt>:


alt_u16 UsbGetRetryCnt()
{
10002190:	defffd04 	addi	sp,sp,-12
10002194:	dfc00215 	stw	ra,8(sp)
10002198:	df000115 	stw	fp,4(sp)
1000219c:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	IO_read(HPI_STATUS);
100021a0:	010000c4 	movi	r4,3
100021a4:	00003640 	call	10000364 <IO_read>
	if(UsbRead(HPI_SIE1_MSG_ADR) == HUSB_TDListDone)
100021a8:	01005104 	movi	r4,324
100021ac:	00011740 	call	10001174 <UsbRead>
100021b0:	10bfffcc 	andi	r2,r2,65535
100021b4:	10840018 	cmpnei	r2,r2,4096
100021b8:	1000091e 	bne	r2,zero,100021e0 <UsbGetRetryCnt+0x50>
	{
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
100021bc:	000b883a 	mov	r5,zero
100021c0:	01005104 	movi	r4,324
100021c4:	000111c0 	call	1000111c <UsbWrite>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100021c8:	0001883a 	nop
100021cc:	010000c4 	movi	r4,3
100021d0:	00003640 	call	10000364 <IO_read>
100021d4:	10bfffcc 	andi	r2,r2,65535
100021d8:	1080040c 	andi	r2,r2,16
100021dc:	103ffb26 	beq	r2,zero,100021cc <__alt_data_end+0xf80021cc>
		{
		}
	}
	//usleep(1000);
	IO_write(HPI_ADDR,0x0508);
100021e0:	01414204 	movi	r5,1288
100021e4:	01000084 	movi	r4,2
100021e8:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
100021ec:	0009883a 	mov	r4,zero
100021f0:	00003640 	call	10000364 <IO_read>
100021f4:	e0bfff0d 	sth	r2,-4(fp)

	return usb_ctl_val;
100021f8:	e0bfff0b 	ldhu	r2,-4(fp)
}
100021fc:	e037883a 	mov	sp,fp
10002200:	dfc00117 	ldw	ra,4(sp)
10002204:	df000017 	ldw	fp,0(sp)
10002208:	dec00204 	addi	sp,sp,8
1000220c:	f800283a 	ret

10002210 <UsbPrintMem>:


void UsbPrintMem()
{
10002210:	defffc04 	addi	sp,sp,-16
10002214:	dfc00315 	stw	ra,12(sp)
10002218:	df000215 	stw	fp,8(sp)
1000221c:	df000204 	addi	fp,sp,8
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
10002220:	01414004 	movi	r5,1280
10002224:	01000084 	movi	r4,2
10002228:	00002f40 	call	100002f4 <IO_write>
	for (i = 0; i <= 200; i += 2)
1000222c:	e03ffe15 	stw	zero,-8(fp)
10002230:	00000e06 	br	1000226c <UsbPrintMem+0x5c>
	{
		code = IO_read(HPI_DATA);
10002234:	0009883a 	mov	r4,zero
10002238:	00003640 	call	10000364 <IO_read>
1000223c:	10bfffcc 	andi	r2,r2,65535
10002240:	e0bfff15 	stw	r2,-4(fp)
		printf("\naddr %x = %04x\n", 0x0500+i, code);
10002244:	e0bffe17 	ldw	r2,-8(fp)
10002248:	10814004 	addi	r2,r2,1280
1000224c:	e1bfff17 	ldw	r6,-4(fp)
10002250:	100b883a 	mov	r5,r2
10002254:	01040074 	movhi	r4,4097
10002258:	21085704 	addi	r4,r4,8540
1000225c:	00022c00 	call	100022c0 <printf>

void UsbPrintMem()
{
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
	for (i = 0; i <= 200; i += 2)
10002260:	e0bffe17 	ldw	r2,-8(fp)
10002264:	10800084 	addi	r2,r2,2
10002268:	e0bffe15 	stw	r2,-8(fp)
1000226c:	e0bffe17 	ldw	r2,-8(fp)
10002270:	10803250 	cmplti	r2,r2,201
10002274:	103fef1e 	bne	r2,zero,10002234 <__alt_data_end+0xf8002234>
	{
		code = IO_read(HPI_DATA);
		printf("\naddr %x = %04x\n", 0x0500+i, code);
	}
}
10002278:	0001883a 	nop
1000227c:	e037883a 	mov	sp,fp
10002280:	dfc00117 	ldw	ra,4(sp)
10002284:	df000017 	ldw	fp,0(sp)
10002288:	dec00204 	addi	sp,sp,8
1000228c:	f800283a 	ret

10002290 <_printf_r>:
10002290:	defffd04 	addi	sp,sp,-12
10002294:	2805883a 	mov	r2,r5
10002298:	dfc00015 	stw	ra,0(sp)
1000229c:	d9800115 	stw	r6,4(sp)
100022a0:	d9c00215 	stw	r7,8(sp)
100022a4:	21400217 	ldw	r5,8(r4)
100022a8:	d9c00104 	addi	r7,sp,4
100022ac:	100d883a 	mov	r6,r2
100022b0:	00024680 	call	10002468 <___vfprintf_internal_r>
100022b4:	dfc00017 	ldw	ra,0(sp)
100022b8:	dec00304 	addi	sp,sp,12
100022bc:	f800283a 	ret

100022c0 <printf>:
100022c0:	defffc04 	addi	sp,sp,-16
100022c4:	dfc00015 	stw	ra,0(sp)
100022c8:	d9400115 	stw	r5,4(sp)
100022cc:	d9800215 	stw	r6,8(sp)
100022d0:	d9c00315 	stw	r7,12(sp)
100022d4:	00840074 	movhi	r2,4097
100022d8:	108fc804 	addi	r2,r2,16160
100022dc:	10800017 	ldw	r2,0(r2)
100022e0:	200b883a 	mov	r5,r4
100022e4:	d9800104 	addi	r6,sp,4
100022e8:	11000217 	ldw	r4,8(r2)
100022ec:	00047440 	call	10004744 <__vfprintf_internal>
100022f0:	dfc00017 	ldw	ra,0(sp)
100022f4:	dec00404 	addi	sp,sp,16
100022f8:	f800283a 	ret

100022fc <_puts_r>:
100022fc:	defff604 	addi	sp,sp,-40
10002300:	dc000715 	stw	r16,28(sp)
10002304:	2021883a 	mov	r16,r4
10002308:	2809883a 	mov	r4,r5
1000230c:	dc400815 	stw	r17,32(sp)
10002310:	dfc00915 	stw	ra,36(sp)
10002314:	2823883a 	mov	r17,r5
10002318:	00023d00 	call	100023d0 <strlen>
1000231c:	10c00044 	addi	r3,r2,1
10002320:	d8800115 	stw	r2,4(sp)
10002324:	00840074 	movhi	r2,4097
10002328:	10885c04 	addi	r2,r2,8560
1000232c:	d8800215 	stw	r2,8(sp)
10002330:	00800044 	movi	r2,1
10002334:	d8800315 	stw	r2,12(sp)
10002338:	00800084 	movi	r2,2
1000233c:	dc400015 	stw	r17,0(sp)
10002340:	d8c00615 	stw	r3,24(sp)
10002344:	dec00415 	stw	sp,16(sp)
10002348:	d8800515 	stw	r2,20(sp)
1000234c:	80000226 	beq	r16,zero,10002358 <_puts_r+0x5c>
10002350:	80800e17 	ldw	r2,56(r16)
10002354:	10001426 	beq	r2,zero,100023a8 <_puts_r+0xac>
10002358:	81400217 	ldw	r5,8(r16)
1000235c:	2880030b 	ldhu	r2,12(r5)
10002360:	10c8000c 	andi	r3,r2,8192
10002364:	1800061e 	bne	r3,zero,10002380 <_puts_r+0x84>
10002368:	29001917 	ldw	r4,100(r5)
1000236c:	00f7ffc4 	movi	r3,-8193
10002370:	10880014 	ori	r2,r2,8192
10002374:	20c6703a 	and	r3,r4,r3
10002378:	2880030d 	sth	r2,12(r5)
1000237c:	28c01915 	stw	r3,100(r5)
10002380:	d9800404 	addi	r6,sp,16
10002384:	8009883a 	mov	r4,r16
10002388:	0006cac0 	call	10006cac <__sfvwrite_r>
1000238c:	1000091e 	bne	r2,zero,100023b4 <_puts_r+0xb8>
10002390:	00800284 	movi	r2,10
10002394:	dfc00917 	ldw	ra,36(sp)
10002398:	dc400817 	ldw	r17,32(sp)
1000239c:	dc000717 	ldw	r16,28(sp)
100023a0:	dec00a04 	addi	sp,sp,40
100023a4:	f800283a 	ret
100023a8:	8009883a 	mov	r4,r16
100023ac:	00068280 	call	10006828 <__sinit>
100023b0:	003fe906 	br	10002358 <__alt_data_end+0xf8002358>
100023b4:	00bfffc4 	movi	r2,-1
100023b8:	003ff606 	br	10002394 <__alt_data_end+0xf8002394>

100023bc <puts>:
100023bc:	00840074 	movhi	r2,4097
100023c0:	108fc804 	addi	r2,r2,16160
100023c4:	200b883a 	mov	r5,r4
100023c8:	11000017 	ldw	r4,0(r2)
100023cc:	00022fc1 	jmpi	100022fc <_puts_r>

100023d0 <strlen>:
100023d0:	208000cc 	andi	r2,r4,3
100023d4:	10002026 	beq	r2,zero,10002458 <strlen+0x88>
100023d8:	20800007 	ldb	r2,0(r4)
100023dc:	10002026 	beq	r2,zero,10002460 <strlen+0x90>
100023e0:	2005883a 	mov	r2,r4
100023e4:	00000206 	br	100023f0 <strlen+0x20>
100023e8:	10c00007 	ldb	r3,0(r2)
100023ec:	18001826 	beq	r3,zero,10002450 <strlen+0x80>
100023f0:	10800044 	addi	r2,r2,1
100023f4:	10c000cc 	andi	r3,r2,3
100023f8:	183ffb1e 	bne	r3,zero,100023e8 <__alt_data_end+0xf80023e8>
100023fc:	10c00017 	ldw	r3,0(r2)
10002400:	01ffbff4 	movhi	r7,65279
10002404:	39ffbfc4 	addi	r7,r7,-257
10002408:	00ca303a 	nor	r5,zero,r3
1000240c:	01a02074 	movhi	r6,32897
10002410:	19c7883a 	add	r3,r3,r7
10002414:	31a02004 	addi	r6,r6,-32640
10002418:	1946703a 	and	r3,r3,r5
1000241c:	1986703a 	and	r3,r3,r6
10002420:	1800091e 	bne	r3,zero,10002448 <strlen+0x78>
10002424:	10800104 	addi	r2,r2,4
10002428:	10c00017 	ldw	r3,0(r2)
1000242c:	19cb883a 	add	r5,r3,r7
10002430:	00c6303a 	nor	r3,zero,r3
10002434:	28c6703a 	and	r3,r5,r3
10002438:	1986703a 	and	r3,r3,r6
1000243c:	183ff926 	beq	r3,zero,10002424 <__alt_data_end+0xf8002424>
10002440:	00000106 	br	10002448 <strlen+0x78>
10002444:	10800044 	addi	r2,r2,1
10002448:	10c00007 	ldb	r3,0(r2)
1000244c:	183ffd1e 	bne	r3,zero,10002444 <__alt_data_end+0xf8002444>
10002450:	1105c83a 	sub	r2,r2,r4
10002454:	f800283a 	ret
10002458:	2005883a 	mov	r2,r4
1000245c:	003fe706 	br	100023fc <__alt_data_end+0xf80023fc>
10002460:	0005883a 	mov	r2,zero
10002464:	f800283a 	ret

10002468 <___vfprintf_internal_r>:
10002468:	deffb804 	addi	sp,sp,-288
1000246c:	dfc04715 	stw	ra,284(sp)
10002470:	ddc04515 	stw	r23,276(sp)
10002474:	dd404315 	stw	r21,268(sp)
10002478:	d9002d15 	stw	r4,180(sp)
1000247c:	282f883a 	mov	r23,r5
10002480:	302b883a 	mov	r21,r6
10002484:	d9c02e15 	stw	r7,184(sp)
10002488:	df004615 	stw	fp,280(sp)
1000248c:	dd804415 	stw	r22,272(sp)
10002490:	dd004215 	stw	r20,264(sp)
10002494:	dcc04115 	stw	r19,260(sp)
10002498:	dc804015 	stw	r18,256(sp)
1000249c:	dc403f15 	stw	r17,252(sp)
100024a0:	dc003e15 	stw	r16,248(sp)
100024a4:	00073a80 	call	100073a8 <_localeconv_r>
100024a8:	10800017 	ldw	r2,0(r2)
100024ac:	1009883a 	mov	r4,r2
100024b0:	d8803415 	stw	r2,208(sp)
100024b4:	00023d00 	call	100023d0 <strlen>
100024b8:	d8803715 	stw	r2,220(sp)
100024bc:	d8802d17 	ldw	r2,180(sp)
100024c0:	10000226 	beq	r2,zero,100024cc <___vfprintf_internal_r+0x64>
100024c4:	10800e17 	ldw	r2,56(r2)
100024c8:	1000fb26 	beq	r2,zero,100028b8 <___vfprintf_internal_r+0x450>
100024cc:	b880030b 	ldhu	r2,12(r23)
100024d0:	10c8000c 	andi	r3,r2,8192
100024d4:	1800061e 	bne	r3,zero,100024f0 <___vfprintf_internal_r+0x88>
100024d8:	b9001917 	ldw	r4,100(r23)
100024dc:	00f7ffc4 	movi	r3,-8193
100024e0:	10880014 	ori	r2,r2,8192
100024e4:	20c6703a 	and	r3,r4,r3
100024e8:	b880030d 	sth	r2,12(r23)
100024ec:	b8c01915 	stw	r3,100(r23)
100024f0:	10c0020c 	andi	r3,r2,8
100024f4:	1800c326 	beq	r3,zero,10002804 <___vfprintf_internal_r+0x39c>
100024f8:	b8c00417 	ldw	r3,16(r23)
100024fc:	1800c126 	beq	r3,zero,10002804 <___vfprintf_internal_r+0x39c>
10002500:	1080068c 	andi	r2,r2,26
10002504:	00c00284 	movi	r3,10
10002508:	10c0c626 	beq	r2,r3,10002824 <___vfprintf_internal_r+0x3bc>
1000250c:	d8c00404 	addi	r3,sp,16
10002510:	05040074 	movhi	r20,4097
10002514:	d9001e04 	addi	r4,sp,120
10002518:	a5086d84 	addi	r20,r20,8630
1000251c:	d8c01e15 	stw	r3,120(sp)
10002520:	d8002015 	stw	zero,128(sp)
10002524:	d8001f15 	stw	zero,124(sp)
10002528:	d8003315 	stw	zero,204(sp)
1000252c:	d8003615 	stw	zero,216(sp)
10002530:	d8003815 	stw	zero,224(sp)
10002534:	1811883a 	mov	r8,r3
10002538:	d8003915 	stw	zero,228(sp)
1000253c:	d8003a15 	stw	zero,232(sp)
10002540:	d8002f15 	stw	zero,188(sp)
10002544:	d9002815 	stw	r4,160(sp)
10002548:	a8800007 	ldb	r2,0(r21)
1000254c:	10028b26 	beq	r2,zero,10002f7c <___vfprintf_internal_r+0xb14>
10002550:	00c00944 	movi	r3,37
10002554:	a823883a 	mov	r17,r21
10002558:	10c0021e 	bne	r2,r3,10002564 <___vfprintf_internal_r+0xfc>
1000255c:	00001406 	br	100025b0 <___vfprintf_internal_r+0x148>
10002560:	10c00326 	beq	r2,r3,10002570 <___vfprintf_internal_r+0x108>
10002564:	8c400044 	addi	r17,r17,1
10002568:	88800007 	ldb	r2,0(r17)
1000256c:	103ffc1e 	bne	r2,zero,10002560 <__alt_data_end+0xf8002560>
10002570:	8d61c83a 	sub	r16,r17,r21
10002574:	80000e26 	beq	r16,zero,100025b0 <___vfprintf_internal_r+0x148>
10002578:	d8c02017 	ldw	r3,128(sp)
1000257c:	d8801f17 	ldw	r2,124(sp)
10002580:	45400015 	stw	r21,0(r8)
10002584:	1c07883a 	add	r3,r3,r16
10002588:	10800044 	addi	r2,r2,1
1000258c:	d8c02015 	stw	r3,128(sp)
10002590:	44000115 	stw	r16,4(r8)
10002594:	d8801f15 	stw	r2,124(sp)
10002598:	00c001c4 	movi	r3,7
1000259c:	1880a916 	blt	r3,r2,10002844 <___vfprintf_internal_r+0x3dc>
100025a0:	42000204 	addi	r8,r8,8
100025a4:	d9402f17 	ldw	r5,188(sp)
100025a8:	2c0b883a 	add	r5,r5,r16
100025ac:	d9402f15 	stw	r5,188(sp)
100025b0:	88800007 	ldb	r2,0(r17)
100025b4:	1000aa26 	beq	r2,zero,10002860 <___vfprintf_internal_r+0x3f8>
100025b8:	8d400044 	addi	r21,r17,1
100025bc:	8c400047 	ldb	r17,1(r17)
100025c0:	0021883a 	mov	r16,zero
100025c4:	00bfffc4 	movi	r2,-1
100025c8:	0025883a 	mov	r18,zero
100025cc:	dc002905 	stb	r16,164(sp)
100025d0:	d8002785 	stb	zero,158(sp)
100025d4:	d8002b05 	stb	zero,172(sp)
100025d8:	d8802a15 	stw	r2,168(sp)
100025dc:	d8003115 	stw	zero,196(sp)
100025e0:	04c01604 	movi	r19,88
100025e4:	05800244 	movi	r22,9
100025e8:	9021883a 	mov	r16,r18
100025ec:	4039883a 	mov	fp,r8
100025f0:	ad400044 	addi	r21,r21,1
100025f4:	88bff804 	addi	r2,r17,-32
100025f8:	98833236 	bltu	r19,r2,100032c4 <___vfprintf_internal_r+0xe5c>
100025fc:	100490ba 	slli	r2,r2,2
10002600:	00c40034 	movhi	r3,4096
10002604:	18c98504 	addi	r3,r3,9748
10002608:	10c5883a 	add	r2,r2,r3
1000260c:	10800017 	ldw	r2,0(r2)
10002610:	1000683a 	jmp	r2
10002614:	100031bc 	xorhi	zero,r2,198
10002618:	100032c4 	addi	zero,r2,203
1000261c:	100032c4 	addi	zero,r2,203
10002620:	100031dc 	xori	zero,r2,199
10002624:	100032c4 	addi	zero,r2,203
10002628:	100032c4 	addi	zero,r2,203
1000262c:	100032c4 	addi	zero,r2,203
10002630:	100032c4 	addi	zero,r2,203
10002634:	100032c4 	addi	zero,r2,203
10002638:	100032c4 	addi	zero,r2,203
1000263c:	100028c4 	addi	zero,r2,163
10002640:	100030cc 	andi	zero,r2,195
10002644:	100032c4 	addi	zero,r2,203
10002648:	10002788 	cmpgei	zero,r2,158
1000264c:	100028e8 	cmpgeui	zero,r2,163
10002650:	100032c4 	addi	zero,r2,203
10002654:	10002938 	rdprs	zero,r2,164
10002658:	10002944 	addi	zero,r2,165
1000265c:	10002944 	addi	zero,r2,165
10002660:	10002944 	addi	zero,r2,165
10002664:	10002944 	addi	zero,r2,165
10002668:	10002944 	addi	zero,r2,165
1000266c:	10002944 	addi	zero,r2,165
10002670:	10002944 	addi	zero,r2,165
10002674:	10002944 	addi	zero,r2,165
10002678:	10002944 	addi	zero,r2,165
1000267c:	100032c4 	addi	zero,r2,203
10002680:	100032c4 	addi	zero,r2,203
10002684:	100032c4 	addi	zero,r2,203
10002688:	100032c4 	addi	zero,r2,203
1000268c:	100032c4 	addi	zero,r2,203
10002690:	100032c4 	addi	zero,r2,203
10002694:	100032c4 	addi	zero,r2,203
10002698:	100032c4 	addi	zero,r2,203
1000269c:	100032c4 	addi	zero,r2,203
100026a0:	100032c4 	addi	zero,r2,203
100026a4:	10002980 	call	11000298 <_gp+0xfe437c>
100026a8:	10002a48 	cmpgei	zero,r2,169
100026ac:	100032c4 	addi	zero,r2,203
100026b0:	10002a48 	cmpgei	zero,r2,169
100026b4:	100032c4 	addi	zero,r2,203
100026b8:	100032c4 	addi	zero,r2,203
100026bc:	100032c4 	addi	zero,r2,203
100026c0:	100032c4 	addi	zero,r2,203
100026c4:	10002af4 	orhi	zero,r2,171
100026c8:	100032c4 	addi	zero,r2,203
100026cc:	100032c4 	addi	zero,r2,203
100026d0:	10002b00 	call	110002b0 <_gp+0xfe4394>
100026d4:	100032c4 	addi	zero,r2,203
100026d8:	100032c4 	addi	zero,r2,203
100026dc:	100032c4 	addi	zero,r2,203
100026e0:	100032c4 	addi	zero,r2,203
100026e4:	100032c4 	addi	zero,r2,203
100026e8:	10002f84 	addi	zero,r2,190
100026ec:	100032c4 	addi	zero,r2,203
100026f0:	100032c4 	addi	zero,r2,203
100026f4:	10002ff0 	cmpltui	zero,r2,191
100026f8:	100032c4 	addi	zero,r2,203
100026fc:	100032c4 	addi	zero,r2,203
10002700:	100032c4 	addi	zero,r2,203
10002704:	100032c4 	addi	zero,r2,203
10002708:	100032c4 	addi	zero,r2,203
1000270c:	100032c4 	addi	zero,r2,203
10002710:	100032c4 	addi	zero,r2,203
10002714:	100032c4 	addi	zero,r2,203
10002718:	100032c4 	addi	zero,r2,203
1000271c:	100032c4 	addi	zero,r2,203
10002720:	10003268 	cmpgeui	zero,r2,201
10002724:	100031e8 	cmpgeui	zero,r2,199
10002728:	10002a48 	cmpgei	zero,r2,169
1000272c:	10002a48 	cmpgei	zero,r2,169
10002730:	10002a48 	cmpgei	zero,r2,169
10002734:	10003208 	cmpgei	zero,r2,200
10002738:	100031e8 	cmpgeui	zero,r2,199
1000273c:	100032c4 	addi	zero,r2,203
10002740:	100032c4 	addi	zero,r2,203
10002744:	10003214 	ori	zero,r2,200
10002748:	100032c4 	addi	zero,r2,203
1000274c:	10003228 	cmpgeui	zero,r2,200
10002750:	100030ac 	andhi	zero,r2,194
10002754:	10002794 	ori	zero,r2,158
10002758:	100030e4 	muli	zero,r2,195
1000275c:	100032c4 	addi	zero,r2,203
10002760:	100030f0 	cmpltui	zero,r2,195
10002764:	100032c4 	addi	zero,r2,203
10002768:	10003154 	ori	zero,r2,197
1000276c:	100032c4 	addi	zero,r2,203
10002770:	100032c4 	addi	zero,r2,203
10002774:	10003174 	orhi	zero,r2,197
10002778:	d8c03117 	ldw	r3,196(sp)
1000277c:	d8802e15 	stw	r2,184(sp)
10002780:	00c7c83a 	sub	r3,zero,r3
10002784:	d8c03115 	stw	r3,196(sp)
10002788:	84000114 	ori	r16,r16,4
1000278c:	ac400007 	ldb	r17,0(r21)
10002790:	003f9706 	br	100025f0 <__alt_data_end+0xf80025f0>
10002794:	00800c04 	movi	r2,48
10002798:	d8802705 	stb	r2,156(sp)
1000279c:	00801e04 	movi	r2,120
100027a0:	d8802745 	stb	r2,157(sp)
100027a4:	d9002a17 	ldw	r4,168(sp)
100027a8:	d8802e17 	ldw	r2,184(sp)
100027ac:	d8002785 	stb	zero,158(sp)
100027b0:	e011883a 	mov	r8,fp
100027b4:	10c00104 	addi	r3,r2,4
100027b8:	14c00017 	ldw	r19,0(r2)
100027bc:	002d883a 	mov	r22,zero
100027c0:	80800094 	ori	r2,r16,2
100027c4:	2002ca16 	blt	r4,zero,100032f0 <___vfprintf_internal_r+0xe88>
100027c8:	00bfdfc4 	movi	r2,-129
100027cc:	80a4703a 	and	r18,r16,r2
100027d0:	d8c02e15 	stw	r3,184(sp)
100027d4:	94800094 	ori	r18,r18,2
100027d8:	9802b41e 	bne	r19,zero,100032ac <___vfprintf_internal_r+0xe44>
100027dc:	01440074 	movhi	r5,4097
100027e0:	29486604 	addi	r5,r5,8600
100027e4:	d9403915 	stw	r5,228(sp)
100027e8:	04401e04 	movi	r17,120
100027ec:	d8802a17 	ldw	r2,168(sp)
100027f0:	0039883a 	mov	fp,zero
100027f4:	1001fa26 	beq	r2,zero,10002fe0 <___vfprintf_internal_r+0xb78>
100027f8:	0027883a 	mov	r19,zero
100027fc:	002d883a 	mov	r22,zero
10002800:	00021906 	br	10003068 <___vfprintf_internal_r+0xc00>
10002804:	d9002d17 	ldw	r4,180(sp)
10002808:	b80b883a 	mov	r5,r23
1000280c:	000481c0 	call	1000481c <__swsetup_r>
10002810:	1005dc1e 	bne	r2,zero,10003f84 <___vfprintf_internal_r+0x1b1c>
10002814:	b880030b 	ldhu	r2,12(r23)
10002818:	00c00284 	movi	r3,10
1000281c:	1080068c 	andi	r2,r2,26
10002820:	10ff3a1e 	bne	r2,r3,1000250c <__alt_data_end+0xf800250c>
10002824:	b880038f 	ldh	r2,14(r23)
10002828:	103f3816 	blt	r2,zero,1000250c <__alt_data_end+0xf800250c>
1000282c:	d9c02e17 	ldw	r7,184(sp)
10002830:	d9002d17 	ldw	r4,180(sp)
10002834:	a80d883a 	mov	r6,r21
10002838:	b80b883a 	mov	r5,r23
1000283c:	00047600 	call	10004760 <__sbprintf>
10002840:	00001106 	br	10002888 <___vfprintf_internal_r+0x420>
10002844:	d9002d17 	ldw	r4,180(sp)
10002848:	d9801e04 	addi	r6,sp,120
1000284c:	b80b883a 	mov	r5,r23
10002850:	0009c480 	call	10009c48 <__sprint_r>
10002854:	1000081e 	bne	r2,zero,10002878 <___vfprintf_internal_r+0x410>
10002858:	da000404 	addi	r8,sp,16
1000285c:	003f5106 	br	100025a4 <__alt_data_end+0xf80025a4>
10002860:	d8802017 	ldw	r2,128(sp)
10002864:	10000426 	beq	r2,zero,10002878 <___vfprintf_internal_r+0x410>
10002868:	d9002d17 	ldw	r4,180(sp)
1000286c:	d9801e04 	addi	r6,sp,120
10002870:	b80b883a 	mov	r5,r23
10002874:	0009c480 	call	10009c48 <__sprint_r>
10002878:	b880030b 	ldhu	r2,12(r23)
1000287c:	1080100c 	andi	r2,r2,64
10002880:	1005c01e 	bne	r2,zero,10003f84 <___vfprintf_internal_r+0x1b1c>
10002884:	d8802f17 	ldw	r2,188(sp)
10002888:	dfc04717 	ldw	ra,284(sp)
1000288c:	df004617 	ldw	fp,280(sp)
10002890:	ddc04517 	ldw	r23,276(sp)
10002894:	dd804417 	ldw	r22,272(sp)
10002898:	dd404317 	ldw	r21,268(sp)
1000289c:	dd004217 	ldw	r20,264(sp)
100028a0:	dcc04117 	ldw	r19,260(sp)
100028a4:	dc804017 	ldw	r18,256(sp)
100028a8:	dc403f17 	ldw	r17,252(sp)
100028ac:	dc003e17 	ldw	r16,248(sp)
100028b0:	dec04804 	addi	sp,sp,288
100028b4:	f800283a 	ret
100028b8:	d9002d17 	ldw	r4,180(sp)
100028bc:	00068280 	call	10006828 <__sinit>
100028c0:	003f0206 	br	100024cc <__alt_data_end+0xf80024cc>
100028c4:	d9002e17 	ldw	r4,184(sp)
100028c8:	d9402e17 	ldw	r5,184(sp)
100028cc:	21000017 	ldw	r4,0(r4)
100028d0:	28800104 	addi	r2,r5,4
100028d4:	d9003115 	stw	r4,196(sp)
100028d8:	203fa716 	blt	r4,zero,10002778 <__alt_data_end+0xf8002778>
100028dc:	d8802e15 	stw	r2,184(sp)
100028e0:	ac400007 	ldb	r17,0(r21)
100028e4:	003f4206 	br	100025f0 <__alt_data_end+0xf80025f0>
100028e8:	ac400007 	ldb	r17,0(r21)
100028ec:	01000a84 	movi	r4,42
100028f0:	a8c00044 	addi	r3,r21,1
100028f4:	89075826 	beq	r17,r4,10004658 <___vfprintf_internal_r+0x21f0>
100028f8:	8cbff404 	addi	r18,r17,-48
100028fc:	b486ae36 	bltu	r22,r18,100043b8 <___vfprintf_internal_r+0x1f50>
10002900:	0009883a 	mov	r4,zero
10002904:	1823883a 	mov	r17,r3
10002908:	01400284 	movi	r5,10
1000290c:	000c9040 	call	1000c904 <__mulsi3>
10002910:	88c00007 	ldb	r3,0(r17)
10002914:	1489883a 	add	r4,r2,r18
10002918:	8d400044 	addi	r21,r17,1
1000291c:	1cbff404 	addi	r18,r3,-48
10002920:	a823883a 	mov	r17,r21
10002924:	b4bff82e 	bgeu	r22,r18,10002908 <__alt_data_end+0xf8002908>
10002928:	1823883a 	mov	r17,r3
1000292c:	2005f616 	blt	r4,zero,10004108 <___vfprintf_internal_r+0x1ca0>
10002930:	d9002a15 	stw	r4,168(sp)
10002934:	003f2f06 	br	100025f4 <__alt_data_end+0xf80025f4>
10002938:	84002014 	ori	r16,r16,128
1000293c:	ac400007 	ldb	r17,0(r21)
10002940:	003f2b06 	br	100025f0 <__alt_data_end+0xf80025f0>
10002944:	8cbff404 	addi	r18,r17,-48
10002948:	d8003115 	stw	zero,196(sp)
1000294c:	0009883a 	mov	r4,zero
10002950:	a823883a 	mov	r17,r21
10002954:	01400284 	movi	r5,10
10002958:	000c9040 	call	1000c904 <__mulsi3>
1000295c:	88c00007 	ldb	r3,0(r17)
10002960:	9089883a 	add	r4,r18,r2
10002964:	ad400044 	addi	r21,r21,1
10002968:	1cbff404 	addi	r18,r3,-48
1000296c:	a823883a 	mov	r17,r21
10002970:	b4bff82e 	bgeu	r22,r18,10002954 <__alt_data_end+0xf8002954>
10002974:	1823883a 	mov	r17,r3
10002978:	d9003115 	stw	r4,196(sp)
1000297c:	003f1d06 	br	100025f4 <__alt_data_end+0xf80025f4>
10002980:	8025883a 	mov	r18,r16
10002984:	dc002903 	ldbu	r16,164(sp)
10002988:	e011883a 	mov	r8,fp
1000298c:	84003fcc 	andi	r16,r16,255
10002990:	8007531e 	bne	r16,zero,100046e0 <___vfprintf_internal_r+0x2278>
10002994:	94800414 	ori	r18,r18,16
10002998:	9080080c 	andi	r2,r18,32
1000299c:	1003a326 	beq	r2,zero,1000382c <___vfprintf_internal_r+0x13c4>
100029a0:	d9002e17 	ldw	r4,184(sp)
100029a4:	20800117 	ldw	r2,4(r4)
100029a8:	24c00017 	ldw	r19,0(r4)
100029ac:	21000204 	addi	r4,r4,8
100029b0:	d9002e15 	stw	r4,184(sp)
100029b4:	102d883a 	mov	r22,r2
100029b8:	10047316 	blt	r2,zero,10003b88 <___vfprintf_internal_r+0x1720>
100029bc:	d9002a17 	ldw	r4,168(sp)
100029c0:	df002783 	ldbu	fp,158(sp)
100029c4:	2003e416 	blt	r4,zero,10003958 <___vfprintf_internal_r+0x14f0>
100029c8:	00ffdfc4 	movi	r3,-129
100029cc:	9d84b03a 	or	r2,r19,r22
100029d0:	90e4703a 	and	r18,r18,r3
100029d4:	10018026 	beq	r2,zero,10002fd8 <___vfprintf_internal_r+0xb70>
100029d8:	b003ab26 	beq	r22,zero,10003888 <___vfprintf_internal_r+0x1420>
100029dc:	dc402915 	stw	r17,164(sp)
100029e0:	dc001e04 	addi	r16,sp,120
100029e4:	b023883a 	mov	r17,r22
100029e8:	402d883a 	mov	r22,r8
100029ec:	9809883a 	mov	r4,r19
100029f0:	880b883a 	mov	r5,r17
100029f4:	01800284 	movi	r6,10
100029f8:	000f883a 	mov	r7,zero
100029fc:	000c18c0 	call	1000c18c <__umoddi3>
10002a00:	10800c04 	addi	r2,r2,48
10002a04:	843fffc4 	addi	r16,r16,-1
10002a08:	9809883a 	mov	r4,r19
10002a0c:	880b883a 	mov	r5,r17
10002a10:	80800005 	stb	r2,0(r16)
10002a14:	01800284 	movi	r6,10
10002a18:	000f883a 	mov	r7,zero
10002a1c:	000bb900 	call	1000bb90 <__udivdi3>
10002a20:	1027883a 	mov	r19,r2
10002a24:	10c4b03a 	or	r2,r2,r3
10002a28:	1823883a 	mov	r17,r3
10002a2c:	103fef1e 	bne	r2,zero,100029ec <__alt_data_end+0xf80029ec>
10002a30:	d8c02817 	ldw	r3,160(sp)
10002a34:	dc402917 	ldw	r17,164(sp)
10002a38:	b011883a 	mov	r8,r22
10002a3c:	1c07c83a 	sub	r3,r3,r16
10002a40:	d8c02b15 	stw	r3,172(sp)
10002a44:	00005f06 	br	10002bc4 <___vfprintf_internal_r+0x75c>
10002a48:	8025883a 	mov	r18,r16
10002a4c:	dc002903 	ldbu	r16,164(sp)
10002a50:	e011883a 	mov	r8,fp
10002a54:	84003fcc 	andi	r16,r16,255
10002a58:	80071e1e 	bne	r16,zero,100046d4 <___vfprintf_internal_r+0x226c>
10002a5c:	9080020c 	andi	r2,r18,8
10002a60:	1004af26 	beq	r2,zero,10003d20 <___vfprintf_internal_r+0x18b8>
10002a64:	d9002e17 	ldw	r4,184(sp)
10002a68:	d9402e17 	ldw	r5,184(sp)
10002a6c:	d8802e17 	ldw	r2,184(sp)
10002a70:	21000017 	ldw	r4,0(r4)
10002a74:	29400117 	ldw	r5,4(r5)
10002a78:	10800204 	addi	r2,r2,8
10002a7c:	d9003615 	stw	r4,216(sp)
10002a80:	d9403815 	stw	r5,224(sp)
10002a84:	d8802e15 	stw	r2,184(sp)
10002a88:	d9003617 	ldw	r4,216(sp)
10002a8c:	d9403817 	ldw	r5,224(sp)
10002a90:	da003d15 	stw	r8,244(sp)
10002a94:	04000044 	movi	r16,1
10002a98:	000986c0 	call	1000986c <__fpclassifyd>
10002a9c:	da003d17 	ldw	r8,244(sp)
10002aa0:	1404441e 	bne	r2,r16,10003bb4 <___vfprintf_internal_r+0x174c>
10002aa4:	d9003617 	ldw	r4,216(sp)
10002aa8:	d9403817 	ldw	r5,224(sp)
10002aac:	000d883a 	mov	r6,zero
10002ab0:	000f883a 	mov	r7,zero
10002ab4:	000dd0c0 	call	1000dd0c <__ledf2>
10002ab8:	da003d17 	ldw	r8,244(sp)
10002abc:	1005e316 	blt	r2,zero,1000424c <___vfprintf_internal_r+0x1de4>
10002ac0:	df002783 	ldbu	fp,158(sp)
10002ac4:	008011c4 	movi	r2,71
10002ac8:	1445580e 	bge	r2,r17,1000402c <___vfprintf_internal_r+0x1bc4>
10002acc:	04040074 	movhi	r16,4097
10002ad0:	84085e04 	addi	r16,r16,8568
10002ad4:	00c000c4 	movi	r3,3
10002ad8:	00bfdfc4 	movi	r2,-129
10002adc:	d8c02915 	stw	r3,164(sp)
10002ae0:	90a4703a 	and	r18,r18,r2
10002ae4:	d8c02b15 	stw	r3,172(sp)
10002ae8:	d8002a15 	stw	zero,168(sp)
10002aec:	d8003215 	stw	zero,200(sp)
10002af0:	00003a06 	br	10002bdc <___vfprintf_internal_r+0x774>
10002af4:	84000214 	ori	r16,r16,8
10002af8:	ac400007 	ldb	r17,0(r21)
10002afc:	003ebc06 	br	100025f0 <__alt_data_end+0xf80025f0>
10002b00:	8025883a 	mov	r18,r16
10002b04:	dc002903 	ldbu	r16,164(sp)
10002b08:	e011883a 	mov	r8,fp
10002b0c:	84003fcc 	andi	r16,r16,255
10002b10:	8007001e 	bne	r16,zero,10004714 <___vfprintf_internal_r+0x22ac>
10002b14:	94800414 	ori	r18,r18,16
10002b18:	9080080c 	andi	r2,r18,32
10002b1c:	1002fa26 	beq	r2,zero,10003708 <___vfprintf_internal_r+0x12a0>
10002b20:	d9002e17 	ldw	r4,184(sp)
10002b24:	d9402a17 	ldw	r5,168(sp)
10002b28:	d8002785 	stb	zero,158(sp)
10002b2c:	20800204 	addi	r2,r4,8
10002b30:	24c00017 	ldw	r19,0(r4)
10002b34:	25800117 	ldw	r22,4(r4)
10002b38:	2804b116 	blt	r5,zero,10003e00 <___vfprintf_internal_r+0x1998>
10002b3c:	013fdfc4 	movi	r4,-129
10002b40:	9d86b03a 	or	r3,r19,r22
10002b44:	d8802e15 	stw	r2,184(sp)
10002b48:	9124703a 	and	r18,r18,r4
10002b4c:	1802fb1e 	bne	r3,zero,1000373c <___vfprintf_internal_r+0x12d4>
10002b50:	d8c02a17 	ldw	r3,168(sp)
10002b54:	0039883a 	mov	fp,zero
10002b58:	1805e526 	beq	r3,zero,100042f0 <___vfprintf_internal_r+0x1e88>
10002b5c:	0027883a 	mov	r19,zero
10002b60:	002d883a 	mov	r22,zero
10002b64:	dc001e04 	addi	r16,sp,120
10002b68:	9806d0fa 	srli	r3,r19,3
10002b6c:	b008977a 	slli	r4,r22,29
10002b70:	b02cd0fa 	srli	r22,r22,3
10002b74:	9cc001cc 	andi	r19,r19,7
10002b78:	98800c04 	addi	r2,r19,48
10002b7c:	843fffc4 	addi	r16,r16,-1
10002b80:	20e6b03a 	or	r19,r4,r3
10002b84:	80800005 	stb	r2,0(r16)
10002b88:	9d86b03a 	or	r3,r19,r22
10002b8c:	183ff61e 	bne	r3,zero,10002b68 <__alt_data_end+0xf8002b68>
10002b90:	90c0004c 	andi	r3,r18,1
10002b94:	18014126 	beq	r3,zero,1000309c <___vfprintf_internal_r+0xc34>
10002b98:	10803fcc 	andi	r2,r2,255
10002b9c:	1080201c 	xori	r2,r2,128
10002ba0:	10bfe004 	addi	r2,r2,-128
10002ba4:	00c00c04 	movi	r3,48
10002ba8:	10c13c26 	beq	r2,r3,1000309c <___vfprintf_internal_r+0xc34>
10002bac:	80ffffc5 	stb	r3,-1(r16)
10002bb0:	d8c02817 	ldw	r3,160(sp)
10002bb4:	80bfffc4 	addi	r2,r16,-1
10002bb8:	1021883a 	mov	r16,r2
10002bbc:	1887c83a 	sub	r3,r3,r2
10002bc0:	d8c02b15 	stw	r3,172(sp)
10002bc4:	d8802b17 	ldw	r2,172(sp)
10002bc8:	d9002a17 	ldw	r4,168(sp)
10002bcc:	1100010e 	bge	r2,r4,10002bd4 <___vfprintf_internal_r+0x76c>
10002bd0:	2005883a 	mov	r2,r4
10002bd4:	d8802915 	stw	r2,164(sp)
10002bd8:	d8003215 	stw	zero,200(sp)
10002bdc:	e7003fcc 	andi	fp,fp,255
10002be0:	e700201c 	xori	fp,fp,128
10002be4:	e73fe004 	addi	fp,fp,-128
10002be8:	e0000326 	beq	fp,zero,10002bf8 <___vfprintf_internal_r+0x790>
10002bec:	d8c02917 	ldw	r3,164(sp)
10002bf0:	18c00044 	addi	r3,r3,1
10002bf4:	d8c02915 	stw	r3,164(sp)
10002bf8:	90c0008c 	andi	r3,r18,2
10002bfc:	d8c02c15 	stw	r3,176(sp)
10002c00:	18000326 	beq	r3,zero,10002c10 <___vfprintf_internal_r+0x7a8>
10002c04:	d8c02917 	ldw	r3,164(sp)
10002c08:	18c00084 	addi	r3,r3,2
10002c0c:	d8c02915 	stw	r3,164(sp)
10002c10:	90c0210c 	andi	r3,r18,132
10002c14:	d8c03015 	stw	r3,192(sp)
10002c18:	1801c51e 	bne	r3,zero,10003330 <___vfprintf_internal_r+0xec8>
10002c1c:	d9003117 	ldw	r4,196(sp)
10002c20:	d8c02917 	ldw	r3,164(sp)
10002c24:	20e7c83a 	sub	r19,r4,r3
10002c28:	04c1c10e 	bge	zero,r19,10003330 <___vfprintf_internal_r+0xec8>
10002c2c:	02400404 	movi	r9,16
10002c30:	d8c02017 	ldw	r3,128(sp)
10002c34:	d8801f17 	ldw	r2,124(sp)
10002c38:	4cc52f0e 	bge	r9,r19,100040f8 <___vfprintf_internal_r+0x1c90>
10002c3c:	01440074 	movhi	r5,4097
10002c40:	29487184 	addi	r5,r5,8646
10002c44:	dc403b15 	stw	r17,236(sp)
10002c48:	d9403515 	stw	r5,212(sp)
10002c4c:	9823883a 	mov	r17,r19
10002c50:	482d883a 	mov	r22,r9
10002c54:	9027883a 	mov	r19,r18
10002c58:	070001c4 	movi	fp,7
10002c5c:	8025883a 	mov	r18,r16
10002c60:	dc002d17 	ldw	r16,180(sp)
10002c64:	00000306 	br	10002c74 <___vfprintf_internal_r+0x80c>
10002c68:	8c7ffc04 	addi	r17,r17,-16
10002c6c:	42000204 	addi	r8,r8,8
10002c70:	b440130e 	bge	r22,r17,10002cc0 <___vfprintf_internal_r+0x858>
10002c74:	01040074 	movhi	r4,4097
10002c78:	18c00404 	addi	r3,r3,16
10002c7c:	10800044 	addi	r2,r2,1
10002c80:	21087184 	addi	r4,r4,8646
10002c84:	41000015 	stw	r4,0(r8)
10002c88:	45800115 	stw	r22,4(r8)
10002c8c:	d8c02015 	stw	r3,128(sp)
10002c90:	d8801f15 	stw	r2,124(sp)
10002c94:	e0bff40e 	bge	fp,r2,10002c68 <__alt_data_end+0xf8002c68>
10002c98:	d9801e04 	addi	r6,sp,120
10002c9c:	b80b883a 	mov	r5,r23
10002ca0:	8009883a 	mov	r4,r16
10002ca4:	0009c480 	call	10009c48 <__sprint_r>
10002ca8:	103ef31e 	bne	r2,zero,10002878 <__alt_data_end+0xf8002878>
10002cac:	8c7ffc04 	addi	r17,r17,-16
10002cb0:	d8c02017 	ldw	r3,128(sp)
10002cb4:	d8801f17 	ldw	r2,124(sp)
10002cb8:	da000404 	addi	r8,sp,16
10002cbc:	b47fed16 	blt	r22,r17,10002c74 <__alt_data_end+0xf8002c74>
10002cc0:	9021883a 	mov	r16,r18
10002cc4:	9825883a 	mov	r18,r19
10002cc8:	8827883a 	mov	r19,r17
10002ccc:	dc403b17 	ldw	r17,236(sp)
10002cd0:	d9403517 	ldw	r5,212(sp)
10002cd4:	98c7883a 	add	r3,r19,r3
10002cd8:	10800044 	addi	r2,r2,1
10002cdc:	41400015 	stw	r5,0(r8)
10002ce0:	44c00115 	stw	r19,4(r8)
10002ce4:	d8c02015 	stw	r3,128(sp)
10002ce8:	d8801f15 	stw	r2,124(sp)
10002cec:	010001c4 	movi	r4,7
10002cf0:	2082c516 	blt	r4,r2,10003808 <___vfprintf_internal_r+0x13a0>
10002cf4:	df002787 	ldb	fp,158(sp)
10002cf8:	42000204 	addi	r8,r8,8
10002cfc:	e0000c26 	beq	fp,zero,10002d30 <___vfprintf_internal_r+0x8c8>
10002d00:	d8801f17 	ldw	r2,124(sp)
10002d04:	d9002784 	addi	r4,sp,158
10002d08:	18c00044 	addi	r3,r3,1
10002d0c:	10800044 	addi	r2,r2,1
10002d10:	41000015 	stw	r4,0(r8)
10002d14:	01000044 	movi	r4,1
10002d18:	41000115 	stw	r4,4(r8)
10002d1c:	d8c02015 	stw	r3,128(sp)
10002d20:	d8801f15 	stw	r2,124(sp)
10002d24:	010001c4 	movi	r4,7
10002d28:	20825e16 	blt	r4,r2,100036a4 <___vfprintf_internal_r+0x123c>
10002d2c:	42000204 	addi	r8,r8,8
10002d30:	d8802c17 	ldw	r2,176(sp)
10002d34:	10000c26 	beq	r2,zero,10002d68 <___vfprintf_internal_r+0x900>
10002d38:	d8801f17 	ldw	r2,124(sp)
10002d3c:	d9002704 	addi	r4,sp,156
10002d40:	18c00084 	addi	r3,r3,2
10002d44:	10800044 	addi	r2,r2,1
10002d48:	41000015 	stw	r4,0(r8)
10002d4c:	01000084 	movi	r4,2
10002d50:	41000115 	stw	r4,4(r8)
10002d54:	d8c02015 	stw	r3,128(sp)
10002d58:	d8801f15 	stw	r2,124(sp)
10002d5c:	010001c4 	movi	r4,7
10002d60:	20825816 	blt	r4,r2,100036c4 <___vfprintf_internal_r+0x125c>
10002d64:	42000204 	addi	r8,r8,8
10002d68:	d9003017 	ldw	r4,192(sp)
10002d6c:	00802004 	movi	r2,128
10002d70:	2081bb26 	beq	r4,r2,10003460 <___vfprintf_internal_r+0xff8>
10002d74:	d9402a17 	ldw	r5,168(sp)
10002d78:	d8802b17 	ldw	r2,172(sp)
10002d7c:	28adc83a 	sub	r22,r5,r2
10002d80:	0580310e 	bge	zero,r22,10002e48 <___vfprintf_internal_r+0x9e0>
10002d84:	07000404 	movi	fp,16
10002d88:	d8801f17 	ldw	r2,124(sp)
10002d8c:	e584360e 	bge	fp,r22,10003e68 <___vfprintf_internal_r+0x1a00>
10002d90:	01440074 	movhi	r5,4097
10002d94:	29486d84 	addi	r5,r5,8630
10002d98:	dc402a15 	stw	r17,168(sp)
10002d9c:	d9402c15 	stw	r5,176(sp)
10002da0:	b023883a 	mov	r17,r22
10002da4:	04c001c4 	movi	r19,7
10002da8:	a82d883a 	mov	r22,r21
10002dac:	902b883a 	mov	r21,r18
10002db0:	8025883a 	mov	r18,r16
10002db4:	dc002d17 	ldw	r16,180(sp)
10002db8:	00000306 	br	10002dc8 <___vfprintf_internal_r+0x960>
10002dbc:	8c7ffc04 	addi	r17,r17,-16
10002dc0:	42000204 	addi	r8,r8,8
10002dc4:	e440110e 	bge	fp,r17,10002e0c <___vfprintf_internal_r+0x9a4>
10002dc8:	18c00404 	addi	r3,r3,16
10002dcc:	10800044 	addi	r2,r2,1
10002dd0:	45000015 	stw	r20,0(r8)
10002dd4:	47000115 	stw	fp,4(r8)
10002dd8:	d8c02015 	stw	r3,128(sp)
10002ddc:	d8801f15 	stw	r2,124(sp)
10002de0:	98bff60e 	bge	r19,r2,10002dbc <__alt_data_end+0xf8002dbc>
10002de4:	d9801e04 	addi	r6,sp,120
10002de8:	b80b883a 	mov	r5,r23
10002dec:	8009883a 	mov	r4,r16
10002df0:	0009c480 	call	10009c48 <__sprint_r>
10002df4:	103ea01e 	bne	r2,zero,10002878 <__alt_data_end+0xf8002878>
10002df8:	8c7ffc04 	addi	r17,r17,-16
10002dfc:	d8c02017 	ldw	r3,128(sp)
10002e00:	d8801f17 	ldw	r2,124(sp)
10002e04:	da000404 	addi	r8,sp,16
10002e08:	e47fef16 	blt	fp,r17,10002dc8 <__alt_data_end+0xf8002dc8>
10002e0c:	9021883a 	mov	r16,r18
10002e10:	a825883a 	mov	r18,r21
10002e14:	b02b883a 	mov	r21,r22
10002e18:	882d883a 	mov	r22,r17
10002e1c:	dc402a17 	ldw	r17,168(sp)
10002e20:	d9002c17 	ldw	r4,176(sp)
10002e24:	1d87883a 	add	r3,r3,r22
10002e28:	10800044 	addi	r2,r2,1
10002e2c:	41000015 	stw	r4,0(r8)
10002e30:	45800115 	stw	r22,4(r8)
10002e34:	d8c02015 	stw	r3,128(sp)
10002e38:	d8801f15 	stw	r2,124(sp)
10002e3c:	010001c4 	movi	r4,7
10002e40:	20821016 	blt	r4,r2,10003684 <___vfprintf_internal_r+0x121c>
10002e44:	42000204 	addi	r8,r8,8
10002e48:	9080400c 	andi	r2,r18,256
10002e4c:	10013a1e 	bne	r2,zero,10003338 <___vfprintf_internal_r+0xed0>
10002e50:	d9402b17 	ldw	r5,172(sp)
10002e54:	d8801f17 	ldw	r2,124(sp)
10002e58:	44000015 	stw	r16,0(r8)
10002e5c:	1947883a 	add	r3,r3,r5
10002e60:	10800044 	addi	r2,r2,1
10002e64:	41400115 	stw	r5,4(r8)
10002e68:	d8c02015 	stw	r3,128(sp)
10002e6c:	d8801f15 	stw	r2,124(sp)
10002e70:	010001c4 	movi	r4,7
10002e74:	2081f516 	blt	r4,r2,1000364c <___vfprintf_internal_r+0x11e4>
10002e78:	42000204 	addi	r8,r8,8
10002e7c:	9480010c 	andi	r18,r18,4
10002e80:	90003226 	beq	r18,zero,10002f4c <___vfprintf_internal_r+0xae4>
10002e84:	d9403117 	ldw	r5,196(sp)
10002e88:	d8802917 	ldw	r2,164(sp)
10002e8c:	28a1c83a 	sub	r16,r5,r2
10002e90:	04002e0e 	bge	zero,r16,10002f4c <___vfprintf_internal_r+0xae4>
10002e94:	04400404 	movi	r17,16
10002e98:	d8801f17 	ldw	r2,124(sp)
10002e9c:	8c04c40e 	bge	r17,r16,100041b0 <___vfprintf_internal_r+0x1d48>
10002ea0:	01440074 	movhi	r5,4097
10002ea4:	29487184 	addi	r5,r5,8646
10002ea8:	d9403515 	stw	r5,212(sp)
10002eac:	048001c4 	movi	r18,7
10002eb0:	dcc02d17 	ldw	r19,180(sp)
10002eb4:	00000306 	br	10002ec4 <___vfprintf_internal_r+0xa5c>
10002eb8:	843ffc04 	addi	r16,r16,-16
10002ebc:	42000204 	addi	r8,r8,8
10002ec0:	8c00130e 	bge	r17,r16,10002f10 <___vfprintf_internal_r+0xaa8>
10002ec4:	01040074 	movhi	r4,4097
10002ec8:	18c00404 	addi	r3,r3,16
10002ecc:	10800044 	addi	r2,r2,1
10002ed0:	21087184 	addi	r4,r4,8646
10002ed4:	41000015 	stw	r4,0(r8)
10002ed8:	44400115 	stw	r17,4(r8)
10002edc:	d8c02015 	stw	r3,128(sp)
10002ee0:	d8801f15 	stw	r2,124(sp)
10002ee4:	90bff40e 	bge	r18,r2,10002eb8 <__alt_data_end+0xf8002eb8>
10002ee8:	d9801e04 	addi	r6,sp,120
10002eec:	b80b883a 	mov	r5,r23
10002ef0:	9809883a 	mov	r4,r19
10002ef4:	0009c480 	call	10009c48 <__sprint_r>
10002ef8:	103e5f1e 	bne	r2,zero,10002878 <__alt_data_end+0xf8002878>
10002efc:	843ffc04 	addi	r16,r16,-16
10002f00:	d8c02017 	ldw	r3,128(sp)
10002f04:	d8801f17 	ldw	r2,124(sp)
10002f08:	da000404 	addi	r8,sp,16
10002f0c:	8c3fed16 	blt	r17,r16,10002ec4 <__alt_data_end+0xf8002ec4>
10002f10:	d9403517 	ldw	r5,212(sp)
10002f14:	1c07883a 	add	r3,r3,r16
10002f18:	10800044 	addi	r2,r2,1
10002f1c:	41400015 	stw	r5,0(r8)
10002f20:	44000115 	stw	r16,4(r8)
10002f24:	d8c02015 	stw	r3,128(sp)
10002f28:	d8801f15 	stw	r2,124(sp)
10002f2c:	010001c4 	movi	r4,7
10002f30:	2080060e 	bge	r4,r2,10002f4c <___vfprintf_internal_r+0xae4>
10002f34:	d9002d17 	ldw	r4,180(sp)
10002f38:	d9801e04 	addi	r6,sp,120
10002f3c:	b80b883a 	mov	r5,r23
10002f40:	0009c480 	call	10009c48 <__sprint_r>
10002f44:	103e4c1e 	bne	r2,zero,10002878 <__alt_data_end+0xf8002878>
10002f48:	d8c02017 	ldw	r3,128(sp)
10002f4c:	d8803117 	ldw	r2,196(sp)
10002f50:	d9002917 	ldw	r4,164(sp)
10002f54:	1100010e 	bge	r2,r4,10002f5c <___vfprintf_internal_r+0xaf4>
10002f58:	2005883a 	mov	r2,r4
10002f5c:	d9402f17 	ldw	r5,188(sp)
10002f60:	288b883a 	add	r5,r5,r2
10002f64:	d9402f15 	stw	r5,188(sp)
10002f68:	1801c01e 	bne	r3,zero,1000366c <___vfprintf_internal_r+0x1204>
10002f6c:	a8800007 	ldb	r2,0(r21)
10002f70:	d8001f15 	stw	zero,124(sp)
10002f74:	da000404 	addi	r8,sp,16
10002f78:	103d751e 	bne	r2,zero,10002550 <__alt_data_end+0xf8002550>
10002f7c:	a823883a 	mov	r17,r21
10002f80:	003d8b06 	br	100025b0 <__alt_data_end+0xf80025b0>
10002f84:	8025883a 	mov	r18,r16
10002f88:	dc002903 	ldbu	r16,164(sp)
10002f8c:	e011883a 	mov	r8,fp
10002f90:	84003fcc 	andi	r16,r16,255
10002f94:	8005e51e 	bne	r16,zero,1000472c <___vfprintf_internal_r+0x22c4>
10002f98:	94800414 	ori	r18,r18,16
10002f9c:	9080080c 	andi	r2,r18,32
10002fa0:	10022b26 	beq	r2,zero,10003850 <___vfprintf_internal_r+0x13e8>
10002fa4:	d9002e17 	ldw	r4,184(sp)
10002fa8:	d9402a17 	ldw	r5,168(sp)
10002fac:	d8002785 	stb	zero,158(sp)
10002fb0:	20c00204 	addi	r3,r4,8
10002fb4:	24c00017 	ldw	r19,0(r4)
10002fb8:	25800117 	ldw	r22,4(r4)
10002fbc:	28042e16 	blt	r5,zero,10004078 <___vfprintf_internal_r+0x1c10>
10002fc0:	013fdfc4 	movi	r4,-129
10002fc4:	9d84b03a 	or	r2,r19,r22
10002fc8:	d8c02e15 	stw	r3,184(sp)
10002fcc:	9124703a 	and	r18,r18,r4
10002fd0:	0039883a 	mov	fp,zero
10002fd4:	103e801e 	bne	r2,zero,100029d8 <__alt_data_end+0xf80029d8>
10002fd8:	d9002a17 	ldw	r4,168(sp)
10002fdc:	2002e01e 	bne	r4,zero,10003b60 <___vfprintf_internal_r+0x16f8>
10002fe0:	d8002a15 	stw	zero,168(sp)
10002fe4:	d8002b15 	stw	zero,172(sp)
10002fe8:	dc001e04 	addi	r16,sp,120
10002fec:	003ef506 	br	10002bc4 <__alt_data_end+0xf8002bc4>
10002ff0:	8025883a 	mov	r18,r16
10002ff4:	dc002903 	ldbu	r16,164(sp)
10002ff8:	e011883a 	mov	r8,fp
10002ffc:	84003fcc 	andi	r16,r16,255
10003000:	8005ba1e 	bne	r16,zero,100046ec <___vfprintf_internal_r+0x2284>
10003004:	01040074 	movhi	r4,4097
10003008:	21086104 	addi	r4,r4,8580
1000300c:	d9003915 	stw	r4,228(sp)
10003010:	9080080c 	andi	r2,r18,32
10003014:	10006126 	beq	r2,zero,1000319c <___vfprintf_internal_r+0xd34>
10003018:	d9402e17 	ldw	r5,184(sp)
1000301c:	2cc00017 	ldw	r19,0(r5)
10003020:	2d800117 	ldw	r22,4(r5)
10003024:	29400204 	addi	r5,r5,8
10003028:	d9402e15 	stw	r5,184(sp)
1000302c:	9080004c 	andi	r2,r18,1
10003030:	1001ac26 	beq	r2,zero,100036e4 <___vfprintf_internal_r+0x127c>
10003034:	9d84b03a 	or	r2,r19,r22
10003038:	10038526 	beq	r2,zero,10003e50 <___vfprintf_internal_r+0x19e8>
1000303c:	d8c02a17 	ldw	r3,168(sp)
10003040:	00800c04 	movi	r2,48
10003044:	d8802705 	stb	r2,156(sp)
10003048:	dc402745 	stb	r17,157(sp)
1000304c:	d8002785 	stb	zero,158(sp)
10003050:	90800094 	ori	r2,r18,2
10003054:	18047916 	blt	r3,zero,1000423c <___vfprintf_internal_r+0x1dd4>
10003058:	00bfdfc4 	movi	r2,-129
1000305c:	90a4703a 	and	r18,r18,r2
10003060:	94800094 	ori	r18,r18,2
10003064:	0039883a 	mov	fp,zero
10003068:	d9003917 	ldw	r4,228(sp)
1000306c:	dc001e04 	addi	r16,sp,120
10003070:	988003cc 	andi	r2,r19,15
10003074:	b006973a 	slli	r3,r22,28
10003078:	2085883a 	add	r2,r4,r2
1000307c:	9826d13a 	srli	r19,r19,4
10003080:	10800003 	ldbu	r2,0(r2)
10003084:	b02cd13a 	srli	r22,r22,4
10003088:	843fffc4 	addi	r16,r16,-1
1000308c:	1ce6b03a 	or	r19,r3,r19
10003090:	80800005 	stb	r2,0(r16)
10003094:	9d84b03a 	or	r2,r19,r22
10003098:	103ff51e 	bne	r2,zero,10003070 <__alt_data_end+0xf8003070>
1000309c:	d8c02817 	ldw	r3,160(sp)
100030a0:	1c07c83a 	sub	r3,r3,r16
100030a4:	d8c02b15 	stw	r3,172(sp)
100030a8:	003ec606 	br	10002bc4 <__alt_data_end+0xf8002bc4>
100030ac:	8025883a 	mov	r18,r16
100030b0:	dc002903 	ldbu	r16,164(sp)
100030b4:	e011883a 	mov	r8,fp
100030b8:	84003fcc 	andi	r16,r16,255
100030bc:	803e9626 	beq	r16,zero,10002b18 <__alt_data_end+0xf8002b18>
100030c0:	d8c02b03 	ldbu	r3,172(sp)
100030c4:	d8c02785 	stb	r3,158(sp)
100030c8:	003e9306 	br	10002b18 <__alt_data_end+0xf8002b18>
100030cc:	00c00044 	movi	r3,1
100030d0:	d8c02905 	stb	r3,164(sp)
100030d4:	00c00ac4 	movi	r3,43
100030d8:	d8c02b05 	stb	r3,172(sp)
100030dc:	ac400007 	ldb	r17,0(r21)
100030e0:	003d4306 	br	100025f0 <__alt_data_end+0xf80025f0>
100030e4:	84000814 	ori	r16,r16,32
100030e8:	ac400007 	ldb	r17,0(r21)
100030ec:	003d4006 	br	100025f0 <__alt_data_end+0xf80025f0>
100030f0:	d8802e17 	ldw	r2,184(sp)
100030f4:	8025883a 	mov	r18,r16
100030f8:	d8002785 	stb	zero,158(sp)
100030fc:	14000017 	ldw	r16,0(r2)
10003100:	e011883a 	mov	r8,fp
10003104:	14c00104 	addi	r19,r2,4
10003108:	80042d26 	beq	r16,zero,100041c0 <___vfprintf_internal_r+0x1d58>
1000310c:	d8c02a17 	ldw	r3,168(sp)
10003110:	1803e416 	blt	r3,zero,100040a4 <___vfprintf_internal_r+0x1c3c>
10003114:	180d883a 	mov	r6,r3
10003118:	000b883a 	mov	r5,zero
1000311c:	8009883a 	mov	r4,r16
10003120:	df003d15 	stw	fp,244(sp)
10003124:	0007da00 	call	10007da0 <memchr>
10003128:	da003d17 	ldw	r8,244(sp)
1000312c:	10046826 	beq	r2,zero,100042d0 <___vfprintf_internal_r+0x1e68>
10003130:	1405c83a 	sub	r2,r2,r16
10003134:	d8802b15 	stw	r2,172(sp)
10003138:	1003e016 	blt	r2,zero,100040bc <___vfprintf_internal_r+0x1c54>
1000313c:	df002783 	ldbu	fp,158(sp)
10003140:	d8802915 	stw	r2,164(sp)
10003144:	dcc02e15 	stw	r19,184(sp)
10003148:	d8002a15 	stw	zero,168(sp)
1000314c:	d8003215 	stw	zero,200(sp)
10003150:	003ea206 	br	10002bdc <__alt_data_end+0xf8002bdc>
10003154:	8025883a 	mov	r18,r16
10003158:	dc002903 	ldbu	r16,164(sp)
1000315c:	e011883a 	mov	r8,fp
10003160:	84003fcc 	andi	r16,r16,255
10003164:	803f8d26 	beq	r16,zero,10002f9c <__alt_data_end+0xf8002f9c>
10003168:	d8c02b03 	ldbu	r3,172(sp)
1000316c:	d8c02785 	stb	r3,158(sp)
10003170:	003f8a06 	br	10002f9c <__alt_data_end+0xf8002f9c>
10003174:	8025883a 	mov	r18,r16
10003178:	dc002903 	ldbu	r16,164(sp)
1000317c:	e011883a 	mov	r8,fp
10003180:	84003fcc 	andi	r16,r16,255
10003184:	8005661e 	bne	r16,zero,10004720 <___vfprintf_internal_r+0x22b8>
10003188:	01040074 	movhi	r4,4097
1000318c:	21086604 	addi	r4,r4,8600
10003190:	d9003915 	stw	r4,228(sp)
10003194:	9080080c 	andi	r2,r18,32
10003198:	103f9f1e 	bne	r2,zero,10003018 <__alt_data_end+0xf8003018>
1000319c:	9080040c 	andi	r2,r18,16
100031a0:	1002eb26 	beq	r2,zero,10003d50 <___vfprintf_internal_r+0x18e8>
100031a4:	d8802e17 	ldw	r2,184(sp)
100031a8:	002d883a 	mov	r22,zero
100031ac:	14c00017 	ldw	r19,0(r2)
100031b0:	10800104 	addi	r2,r2,4
100031b4:	d8802e15 	stw	r2,184(sp)
100031b8:	003f9c06 	br	1000302c <__alt_data_end+0xf800302c>
100031bc:	d8802b07 	ldb	r2,172(sp)
100031c0:	1002e11e 	bne	r2,zero,10003d48 <___vfprintf_internal_r+0x18e0>
100031c4:	00c00044 	movi	r3,1
100031c8:	d8c02905 	stb	r3,164(sp)
100031cc:	00c00804 	movi	r3,32
100031d0:	d8c02b05 	stb	r3,172(sp)
100031d4:	ac400007 	ldb	r17,0(r21)
100031d8:	003d0506 	br	100025f0 <__alt_data_end+0xf80025f0>
100031dc:	84000054 	ori	r16,r16,1
100031e0:	ac400007 	ldb	r17,0(r21)
100031e4:	003d0206 	br	100025f0 <__alt_data_end+0xf80025f0>
100031e8:	8025883a 	mov	r18,r16
100031ec:	dc002903 	ldbu	r16,164(sp)
100031f0:	e011883a 	mov	r8,fp
100031f4:	84003fcc 	andi	r16,r16,255
100031f8:	803de726 	beq	r16,zero,10002998 <__alt_data_end+0xf8002998>
100031fc:	d8c02b03 	ldbu	r3,172(sp)
10003200:	d8c02785 	stb	r3,158(sp)
10003204:	003de406 	br	10002998 <__alt_data_end+0xf8002998>
10003208:	84001014 	ori	r16,r16,64
1000320c:	ac400007 	ldb	r17,0(r21)
10003210:	003cf706 	br	100025f0 <__alt_data_end+0xf80025f0>
10003214:	ac400007 	ldb	r17,0(r21)
10003218:	00801b04 	movi	r2,108
1000321c:	88838f26 	beq	r17,r2,1000405c <___vfprintf_internal_r+0x1bf4>
10003220:	84000414 	ori	r16,r16,16
10003224:	003cf206 	br	100025f0 <__alt_data_end+0xf80025f0>
10003228:	8025883a 	mov	r18,r16
1000322c:	dc002903 	ldbu	r16,164(sp)
10003230:	e011883a 	mov	r8,fp
10003234:	84003fcc 	andi	r16,r16,255
10003238:	80053f1e 	bne	r16,zero,10004738 <___vfprintf_internal_r+0x22d0>
1000323c:	9080080c 	andi	r2,r18,32
10003240:	1002d226 	beq	r2,zero,10003d8c <___vfprintf_internal_r+0x1924>
10003244:	d9002e17 	ldw	r4,184(sp)
10003248:	d9402f17 	ldw	r5,188(sp)
1000324c:	20800017 	ldw	r2,0(r4)
10003250:	2807d7fa 	srai	r3,r5,31
10003254:	21000104 	addi	r4,r4,4
10003258:	d9002e15 	stw	r4,184(sp)
1000325c:	11400015 	stw	r5,0(r2)
10003260:	10c00115 	stw	r3,4(r2)
10003264:	003cb806 	br	10002548 <__alt_data_end+0xf8002548>
10003268:	d8c02e17 	ldw	r3,184(sp)
1000326c:	d9002e17 	ldw	r4,184(sp)
10003270:	8025883a 	mov	r18,r16
10003274:	18800017 	ldw	r2,0(r3)
10003278:	21000104 	addi	r4,r4,4
1000327c:	00c00044 	movi	r3,1
10003280:	e011883a 	mov	r8,fp
10003284:	d8c02915 	stw	r3,164(sp)
10003288:	d8002785 	stb	zero,158(sp)
1000328c:	d8801405 	stb	r2,80(sp)
10003290:	d9002e15 	stw	r4,184(sp)
10003294:	d8c02b15 	stw	r3,172(sp)
10003298:	d8002a15 	stw	zero,168(sp)
1000329c:	d8003215 	stw	zero,200(sp)
100032a0:	dc001404 	addi	r16,sp,80
100032a4:	0039883a 	mov	fp,zero
100032a8:	003e5306 	br	10002bf8 <__alt_data_end+0xf8002bf8>
100032ac:	01040074 	movhi	r4,4097
100032b0:	21086604 	addi	r4,r4,8600
100032b4:	0039883a 	mov	fp,zero
100032b8:	d9003915 	stw	r4,228(sp)
100032bc:	04401e04 	movi	r17,120
100032c0:	003f6906 	br	10003068 <__alt_data_end+0xf8003068>
100032c4:	8025883a 	mov	r18,r16
100032c8:	dc002903 	ldbu	r16,164(sp)
100032cc:	e011883a 	mov	r8,fp
100032d0:	84003fcc 	andi	r16,r16,255
100032d4:	8005081e 	bne	r16,zero,100046f8 <___vfprintf_internal_r+0x2290>
100032d8:	883d6126 	beq	r17,zero,10002860 <__alt_data_end+0xf8002860>
100032dc:	00c00044 	movi	r3,1
100032e0:	d8c02915 	stw	r3,164(sp)
100032e4:	dc401405 	stb	r17,80(sp)
100032e8:	d8002785 	stb	zero,158(sp)
100032ec:	003fe906 	br	10003294 <__alt_data_end+0xf8003294>
100032f0:	01440074 	movhi	r5,4097
100032f4:	29486604 	addi	r5,r5,8600
100032f8:	d9403915 	stw	r5,228(sp)
100032fc:	d8c02e15 	stw	r3,184(sp)
10003300:	1025883a 	mov	r18,r2
10003304:	04401e04 	movi	r17,120
10003308:	9d84b03a 	or	r2,r19,r22
1000330c:	1000fc1e 	bne	r2,zero,10003700 <___vfprintf_internal_r+0x1298>
10003310:	0039883a 	mov	fp,zero
10003314:	00800084 	movi	r2,2
10003318:	10803fcc 	andi	r2,r2,255
1000331c:	00c00044 	movi	r3,1
10003320:	10c20f26 	beq	r2,r3,10003b60 <___vfprintf_internal_r+0x16f8>
10003324:	00c00084 	movi	r3,2
10003328:	10fd3326 	beq	r2,r3,100027f8 <__alt_data_end+0xf80027f8>
1000332c:	003e0b06 	br	10002b5c <__alt_data_end+0xf8002b5c>
10003330:	d8c02017 	ldw	r3,128(sp)
10003334:	003e7106 	br	10002cfc <__alt_data_end+0xf8002cfc>
10003338:	00801944 	movi	r2,101
1000333c:	14407e0e 	bge	r2,r17,10003538 <___vfprintf_internal_r+0x10d0>
10003340:	d9003617 	ldw	r4,216(sp)
10003344:	d9403817 	ldw	r5,224(sp)
10003348:	000d883a 	mov	r6,zero
1000334c:	000f883a 	mov	r7,zero
10003350:	d8c03c15 	stw	r3,240(sp)
10003354:	da003d15 	stw	r8,244(sp)
10003358:	000dba80 	call	1000dba8 <__eqdf2>
1000335c:	d8c03c17 	ldw	r3,240(sp)
10003360:	da003d17 	ldw	r8,244(sp)
10003364:	1000f71e 	bne	r2,zero,10003744 <___vfprintf_internal_r+0x12dc>
10003368:	d8801f17 	ldw	r2,124(sp)
1000336c:	01040074 	movhi	r4,4097
10003370:	21086d04 	addi	r4,r4,8628
10003374:	18c00044 	addi	r3,r3,1
10003378:	10800044 	addi	r2,r2,1
1000337c:	41000015 	stw	r4,0(r8)
10003380:	01000044 	movi	r4,1
10003384:	41000115 	stw	r4,4(r8)
10003388:	d8c02015 	stw	r3,128(sp)
1000338c:	d8801f15 	stw	r2,124(sp)
10003390:	010001c4 	movi	r4,7
10003394:	2082b816 	blt	r4,r2,10003e78 <___vfprintf_internal_r+0x1a10>
10003398:	42000204 	addi	r8,r8,8
1000339c:	d8802617 	ldw	r2,152(sp)
100033a0:	d9403317 	ldw	r5,204(sp)
100033a4:	11400216 	blt	r2,r5,100033b0 <___vfprintf_internal_r+0xf48>
100033a8:	9080004c 	andi	r2,r18,1
100033ac:	103eb326 	beq	r2,zero,10002e7c <__alt_data_end+0xf8002e7c>
100033b0:	d8803717 	ldw	r2,220(sp)
100033b4:	d9003417 	ldw	r4,208(sp)
100033b8:	d9403717 	ldw	r5,220(sp)
100033bc:	1887883a 	add	r3,r3,r2
100033c0:	d8801f17 	ldw	r2,124(sp)
100033c4:	41000015 	stw	r4,0(r8)
100033c8:	41400115 	stw	r5,4(r8)
100033cc:	10800044 	addi	r2,r2,1
100033d0:	d8c02015 	stw	r3,128(sp)
100033d4:	d8801f15 	stw	r2,124(sp)
100033d8:	010001c4 	movi	r4,7
100033dc:	20832916 	blt	r4,r2,10004084 <___vfprintf_internal_r+0x1c1c>
100033e0:	42000204 	addi	r8,r8,8
100033e4:	d8803317 	ldw	r2,204(sp)
100033e8:	143fffc4 	addi	r16,r2,-1
100033ec:	043ea30e 	bge	zero,r16,10002e7c <__alt_data_end+0xf8002e7c>
100033f0:	04400404 	movi	r17,16
100033f4:	d8801f17 	ldw	r2,124(sp)
100033f8:	8c00880e 	bge	r17,r16,1000361c <___vfprintf_internal_r+0x11b4>
100033fc:	01440074 	movhi	r5,4097
10003400:	29486d84 	addi	r5,r5,8630
10003404:	d9402c15 	stw	r5,176(sp)
10003408:	058001c4 	movi	r22,7
1000340c:	dcc02d17 	ldw	r19,180(sp)
10003410:	00000306 	br	10003420 <___vfprintf_internal_r+0xfb8>
10003414:	42000204 	addi	r8,r8,8
10003418:	843ffc04 	addi	r16,r16,-16
1000341c:	8c00820e 	bge	r17,r16,10003628 <___vfprintf_internal_r+0x11c0>
10003420:	18c00404 	addi	r3,r3,16
10003424:	10800044 	addi	r2,r2,1
10003428:	45000015 	stw	r20,0(r8)
1000342c:	44400115 	stw	r17,4(r8)
10003430:	d8c02015 	stw	r3,128(sp)
10003434:	d8801f15 	stw	r2,124(sp)
10003438:	b0bff60e 	bge	r22,r2,10003414 <__alt_data_end+0xf8003414>
1000343c:	d9801e04 	addi	r6,sp,120
10003440:	b80b883a 	mov	r5,r23
10003444:	9809883a 	mov	r4,r19
10003448:	0009c480 	call	10009c48 <__sprint_r>
1000344c:	103d0a1e 	bne	r2,zero,10002878 <__alt_data_end+0xf8002878>
10003450:	d8c02017 	ldw	r3,128(sp)
10003454:	d8801f17 	ldw	r2,124(sp)
10003458:	da000404 	addi	r8,sp,16
1000345c:	003fee06 	br	10003418 <__alt_data_end+0xf8003418>
10003460:	d9403117 	ldw	r5,196(sp)
10003464:	d8802917 	ldw	r2,164(sp)
10003468:	28adc83a 	sub	r22,r5,r2
1000346c:	05be410e 	bge	zero,r22,10002d74 <__alt_data_end+0xf8002d74>
10003470:	07000404 	movi	fp,16
10003474:	d8801f17 	ldw	r2,124(sp)
10003478:	e5838f0e 	bge	fp,r22,100042b8 <___vfprintf_internal_r+0x1e50>
1000347c:	01440074 	movhi	r5,4097
10003480:	29486d84 	addi	r5,r5,8630
10003484:	dc403015 	stw	r17,192(sp)
10003488:	d9402c15 	stw	r5,176(sp)
1000348c:	b023883a 	mov	r17,r22
10003490:	04c001c4 	movi	r19,7
10003494:	a82d883a 	mov	r22,r21
10003498:	902b883a 	mov	r21,r18
1000349c:	8025883a 	mov	r18,r16
100034a0:	dc002d17 	ldw	r16,180(sp)
100034a4:	00000306 	br	100034b4 <___vfprintf_internal_r+0x104c>
100034a8:	8c7ffc04 	addi	r17,r17,-16
100034ac:	42000204 	addi	r8,r8,8
100034b0:	e440110e 	bge	fp,r17,100034f8 <___vfprintf_internal_r+0x1090>
100034b4:	18c00404 	addi	r3,r3,16
100034b8:	10800044 	addi	r2,r2,1
100034bc:	45000015 	stw	r20,0(r8)
100034c0:	47000115 	stw	fp,4(r8)
100034c4:	d8c02015 	stw	r3,128(sp)
100034c8:	d8801f15 	stw	r2,124(sp)
100034cc:	98bff60e 	bge	r19,r2,100034a8 <__alt_data_end+0xf80034a8>
100034d0:	d9801e04 	addi	r6,sp,120
100034d4:	b80b883a 	mov	r5,r23
100034d8:	8009883a 	mov	r4,r16
100034dc:	0009c480 	call	10009c48 <__sprint_r>
100034e0:	103ce51e 	bne	r2,zero,10002878 <__alt_data_end+0xf8002878>
100034e4:	8c7ffc04 	addi	r17,r17,-16
100034e8:	d8c02017 	ldw	r3,128(sp)
100034ec:	d8801f17 	ldw	r2,124(sp)
100034f0:	da000404 	addi	r8,sp,16
100034f4:	e47fef16 	blt	fp,r17,100034b4 <__alt_data_end+0xf80034b4>
100034f8:	9021883a 	mov	r16,r18
100034fc:	a825883a 	mov	r18,r21
10003500:	b02b883a 	mov	r21,r22
10003504:	882d883a 	mov	r22,r17
10003508:	dc403017 	ldw	r17,192(sp)
1000350c:	d9002c17 	ldw	r4,176(sp)
10003510:	1d87883a 	add	r3,r3,r22
10003514:	10800044 	addi	r2,r2,1
10003518:	41000015 	stw	r4,0(r8)
1000351c:	45800115 	stw	r22,4(r8)
10003520:	d8c02015 	stw	r3,128(sp)
10003524:	d8801f15 	stw	r2,124(sp)
10003528:	010001c4 	movi	r4,7
1000352c:	20818e16 	blt	r4,r2,10003b68 <___vfprintf_internal_r+0x1700>
10003530:	42000204 	addi	r8,r8,8
10003534:	003e0f06 	br	10002d74 <__alt_data_end+0xf8002d74>
10003538:	d9403317 	ldw	r5,204(sp)
1000353c:	00800044 	movi	r2,1
10003540:	18c00044 	addi	r3,r3,1
10003544:	1141530e 	bge	r2,r5,10003a94 <___vfprintf_internal_r+0x162c>
10003548:	dc401f17 	ldw	r17,124(sp)
1000354c:	00800044 	movi	r2,1
10003550:	40800115 	stw	r2,4(r8)
10003554:	8c400044 	addi	r17,r17,1
10003558:	44000015 	stw	r16,0(r8)
1000355c:	d8c02015 	stw	r3,128(sp)
10003560:	dc401f15 	stw	r17,124(sp)
10003564:	008001c4 	movi	r2,7
10003568:	14416b16 	blt	r2,r17,10003b18 <___vfprintf_internal_r+0x16b0>
1000356c:	42000204 	addi	r8,r8,8
10003570:	d8803717 	ldw	r2,220(sp)
10003574:	d9003417 	ldw	r4,208(sp)
10003578:	8c400044 	addi	r17,r17,1
1000357c:	10c7883a 	add	r3,r2,r3
10003580:	40800115 	stw	r2,4(r8)
10003584:	41000015 	stw	r4,0(r8)
10003588:	d8c02015 	stw	r3,128(sp)
1000358c:	dc401f15 	stw	r17,124(sp)
10003590:	008001c4 	movi	r2,7
10003594:	14416916 	blt	r2,r17,10003b3c <___vfprintf_internal_r+0x16d4>
10003598:	45800204 	addi	r22,r8,8
1000359c:	d9003617 	ldw	r4,216(sp)
100035a0:	d9403817 	ldw	r5,224(sp)
100035a4:	000d883a 	mov	r6,zero
100035a8:	000f883a 	mov	r7,zero
100035ac:	d8c03c15 	stw	r3,240(sp)
100035b0:	000dba80 	call	1000dba8 <__eqdf2>
100035b4:	d8c03c17 	ldw	r3,240(sp)
100035b8:	1000bc26 	beq	r2,zero,100038ac <___vfprintf_internal_r+0x1444>
100035bc:	d9403317 	ldw	r5,204(sp)
100035c0:	84000044 	addi	r16,r16,1
100035c4:	8c400044 	addi	r17,r17,1
100035c8:	28bfffc4 	addi	r2,r5,-1
100035cc:	1887883a 	add	r3,r3,r2
100035d0:	b0800115 	stw	r2,4(r22)
100035d4:	b4000015 	stw	r16,0(r22)
100035d8:	d8c02015 	stw	r3,128(sp)
100035dc:	dc401f15 	stw	r17,124(sp)
100035e0:	008001c4 	movi	r2,7
100035e4:	14414316 	blt	r2,r17,10003af4 <___vfprintf_internal_r+0x168c>
100035e8:	b5800204 	addi	r22,r22,8
100035ec:	d9003a17 	ldw	r4,232(sp)
100035f0:	df0022c4 	addi	fp,sp,139
100035f4:	8c400044 	addi	r17,r17,1
100035f8:	20c7883a 	add	r3,r4,r3
100035fc:	b7000015 	stw	fp,0(r22)
10003600:	b1000115 	stw	r4,4(r22)
10003604:	d8c02015 	stw	r3,128(sp)
10003608:	dc401f15 	stw	r17,124(sp)
1000360c:	008001c4 	movi	r2,7
10003610:	14400e16 	blt	r2,r17,1000364c <___vfprintf_internal_r+0x11e4>
10003614:	b2000204 	addi	r8,r22,8
10003618:	003e1806 	br	10002e7c <__alt_data_end+0xf8002e7c>
1000361c:	01040074 	movhi	r4,4097
10003620:	21086d84 	addi	r4,r4,8630
10003624:	d9002c15 	stw	r4,176(sp)
10003628:	d9002c17 	ldw	r4,176(sp)
1000362c:	1c07883a 	add	r3,r3,r16
10003630:	44000115 	stw	r16,4(r8)
10003634:	41000015 	stw	r4,0(r8)
10003638:	10800044 	addi	r2,r2,1
1000363c:	d8c02015 	stw	r3,128(sp)
10003640:	d8801f15 	stw	r2,124(sp)
10003644:	010001c4 	movi	r4,7
10003648:	20be0b0e 	bge	r4,r2,10002e78 <__alt_data_end+0xf8002e78>
1000364c:	d9002d17 	ldw	r4,180(sp)
10003650:	d9801e04 	addi	r6,sp,120
10003654:	b80b883a 	mov	r5,r23
10003658:	0009c480 	call	10009c48 <__sprint_r>
1000365c:	103c861e 	bne	r2,zero,10002878 <__alt_data_end+0xf8002878>
10003660:	d8c02017 	ldw	r3,128(sp)
10003664:	da000404 	addi	r8,sp,16
10003668:	003e0406 	br	10002e7c <__alt_data_end+0xf8002e7c>
1000366c:	d9002d17 	ldw	r4,180(sp)
10003670:	d9801e04 	addi	r6,sp,120
10003674:	b80b883a 	mov	r5,r23
10003678:	0009c480 	call	10009c48 <__sprint_r>
1000367c:	103e3b26 	beq	r2,zero,10002f6c <__alt_data_end+0xf8002f6c>
10003680:	003c7d06 	br	10002878 <__alt_data_end+0xf8002878>
10003684:	d9002d17 	ldw	r4,180(sp)
10003688:	d9801e04 	addi	r6,sp,120
1000368c:	b80b883a 	mov	r5,r23
10003690:	0009c480 	call	10009c48 <__sprint_r>
10003694:	103c781e 	bne	r2,zero,10002878 <__alt_data_end+0xf8002878>
10003698:	d8c02017 	ldw	r3,128(sp)
1000369c:	da000404 	addi	r8,sp,16
100036a0:	003de906 	br	10002e48 <__alt_data_end+0xf8002e48>
100036a4:	d9002d17 	ldw	r4,180(sp)
100036a8:	d9801e04 	addi	r6,sp,120
100036ac:	b80b883a 	mov	r5,r23
100036b0:	0009c480 	call	10009c48 <__sprint_r>
100036b4:	103c701e 	bne	r2,zero,10002878 <__alt_data_end+0xf8002878>
100036b8:	d8c02017 	ldw	r3,128(sp)
100036bc:	da000404 	addi	r8,sp,16
100036c0:	003d9b06 	br	10002d30 <__alt_data_end+0xf8002d30>
100036c4:	d9002d17 	ldw	r4,180(sp)
100036c8:	d9801e04 	addi	r6,sp,120
100036cc:	b80b883a 	mov	r5,r23
100036d0:	0009c480 	call	10009c48 <__sprint_r>
100036d4:	103c681e 	bne	r2,zero,10002878 <__alt_data_end+0xf8002878>
100036d8:	d8c02017 	ldw	r3,128(sp)
100036dc:	da000404 	addi	r8,sp,16
100036e0:	003da106 	br	10002d68 <__alt_data_end+0xf8002d68>
100036e4:	d9402a17 	ldw	r5,168(sp)
100036e8:	d8002785 	stb	zero,158(sp)
100036ec:	283f0616 	blt	r5,zero,10003308 <__alt_data_end+0xf8003308>
100036f0:	00ffdfc4 	movi	r3,-129
100036f4:	9d84b03a 	or	r2,r19,r22
100036f8:	90e4703a 	and	r18,r18,r3
100036fc:	103c3b26 	beq	r2,zero,100027ec <__alt_data_end+0xf80027ec>
10003700:	0039883a 	mov	fp,zero
10003704:	003e5806 	br	10003068 <__alt_data_end+0xf8003068>
10003708:	9080040c 	andi	r2,r18,16
1000370c:	1001b326 	beq	r2,zero,10003ddc <___vfprintf_internal_r+0x1974>
10003710:	d8c02e17 	ldw	r3,184(sp)
10003714:	d9002a17 	ldw	r4,168(sp)
10003718:	d8002785 	stb	zero,158(sp)
1000371c:	18800104 	addi	r2,r3,4
10003720:	1cc00017 	ldw	r19,0(r3)
10003724:	002d883a 	mov	r22,zero
10003728:	2001b516 	blt	r4,zero,10003e00 <___vfprintf_internal_r+0x1998>
1000372c:	00ffdfc4 	movi	r3,-129
10003730:	d8802e15 	stw	r2,184(sp)
10003734:	90e4703a 	and	r18,r18,r3
10003738:	983d0526 	beq	r19,zero,10002b50 <__alt_data_end+0xf8002b50>
1000373c:	0039883a 	mov	fp,zero
10003740:	003d0806 	br	10002b64 <__alt_data_end+0xf8002b64>
10003744:	dc402617 	ldw	r17,152(sp)
10003748:	0441d30e 	bge	zero,r17,10003e98 <___vfprintf_internal_r+0x1a30>
1000374c:	dc403217 	ldw	r17,200(sp)
10003750:	d8803317 	ldw	r2,204(sp)
10003754:	1440010e 	bge	r2,r17,1000375c <___vfprintf_internal_r+0x12f4>
10003758:	1023883a 	mov	r17,r2
1000375c:	04400a0e 	bge	zero,r17,10003788 <___vfprintf_internal_r+0x1320>
10003760:	d8801f17 	ldw	r2,124(sp)
10003764:	1c47883a 	add	r3,r3,r17
10003768:	44000015 	stw	r16,0(r8)
1000376c:	10800044 	addi	r2,r2,1
10003770:	44400115 	stw	r17,4(r8)
10003774:	d8c02015 	stw	r3,128(sp)
10003778:	d8801f15 	stw	r2,124(sp)
1000377c:	010001c4 	movi	r4,7
10003780:	20826516 	blt	r4,r2,10004118 <___vfprintf_internal_r+0x1cb0>
10003784:	42000204 	addi	r8,r8,8
10003788:	88026116 	blt	r17,zero,10004110 <___vfprintf_internal_r+0x1ca8>
1000378c:	d9003217 	ldw	r4,200(sp)
10003790:	2463c83a 	sub	r17,r4,r17
10003794:	04407b0e 	bge	zero,r17,10003984 <___vfprintf_internal_r+0x151c>
10003798:	05800404 	movi	r22,16
1000379c:	d8801f17 	ldw	r2,124(sp)
100037a0:	b4419d0e 	bge	r22,r17,10003e18 <___vfprintf_internal_r+0x19b0>
100037a4:	01040074 	movhi	r4,4097
100037a8:	21086d84 	addi	r4,r4,8630
100037ac:	d9002c15 	stw	r4,176(sp)
100037b0:	070001c4 	movi	fp,7
100037b4:	dcc02d17 	ldw	r19,180(sp)
100037b8:	00000306 	br	100037c8 <___vfprintf_internal_r+0x1360>
100037bc:	42000204 	addi	r8,r8,8
100037c0:	8c7ffc04 	addi	r17,r17,-16
100037c4:	b441970e 	bge	r22,r17,10003e24 <___vfprintf_internal_r+0x19bc>
100037c8:	18c00404 	addi	r3,r3,16
100037cc:	10800044 	addi	r2,r2,1
100037d0:	45000015 	stw	r20,0(r8)
100037d4:	45800115 	stw	r22,4(r8)
100037d8:	d8c02015 	stw	r3,128(sp)
100037dc:	d8801f15 	stw	r2,124(sp)
100037e0:	e0bff60e 	bge	fp,r2,100037bc <__alt_data_end+0xf80037bc>
100037e4:	d9801e04 	addi	r6,sp,120
100037e8:	b80b883a 	mov	r5,r23
100037ec:	9809883a 	mov	r4,r19
100037f0:	0009c480 	call	10009c48 <__sprint_r>
100037f4:	103c201e 	bne	r2,zero,10002878 <__alt_data_end+0xf8002878>
100037f8:	d8c02017 	ldw	r3,128(sp)
100037fc:	d8801f17 	ldw	r2,124(sp)
10003800:	da000404 	addi	r8,sp,16
10003804:	003fee06 	br	100037c0 <__alt_data_end+0xf80037c0>
10003808:	d9002d17 	ldw	r4,180(sp)
1000380c:	d9801e04 	addi	r6,sp,120
10003810:	b80b883a 	mov	r5,r23
10003814:	0009c480 	call	10009c48 <__sprint_r>
10003818:	103c171e 	bne	r2,zero,10002878 <__alt_data_end+0xf8002878>
1000381c:	d8c02017 	ldw	r3,128(sp)
10003820:	df002787 	ldb	fp,158(sp)
10003824:	da000404 	addi	r8,sp,16
10003828:	003d3406 	br	10002cfc <__alt_data_end+0xf8002cfc>
1000382c:	9080040c 	andi	r2,r18,16
10003830:	10016126 	beq	r2,zero,10003db8 <___vfprintf_internal_r+0x1950>
10003834:	d9402e17 	ldw	r5,184(sp)
10003838:	2cc00017 	ldw	r19,0(r5)
1000383c:	29400104 	addi	r5,r5,4
10003840:	d9402e15 	stw	r5,184(sp)
10003844:	982dd7fa 	srai	r22,r19,31
10003848:	b005883a 	mov	r2,r22
1000384c:	003c5a06 	br	100029b8 <__alt_data_end+0xf80029b8>
10003850:	9080040c 	andi	r2,r18,16
10003854:	10003526 	beq	r2,zero,1000392c <___vfprintf_internal_r+0x14c4>
10003858:	d8c02e17 	ldw	r3,184(sp)
1000385c:	d9002a17 	ldw	r4,168(sp)
10003860:	d8002785 	stb	zero,158(sp)
10003864:	18800104 	addi	r2,r3,4
10003868:	1cc00017 	ldw	r19,0(r3)
1000386c:	002d883a 	mov	r22,zero
10003870:	20003716 	blt	r4,zero,10003950 <___vfprintf_internal_r+0x14e8>
10003874:	00ffdfc4 	movi	r3,-129
10003878:	d8802e15 	stw	r2,184(sp)
1000387c:	90e4703a 	and	r18,r18,r3
10003880:	0039883a 	mov	fp,zero
10003884:	983dd426 	beq	r19,zero,10002fd8 <__alt_data_end+0xf8002fd8>
10003888:	00800244 	movi	r2,9
1000388c:	14fc5336 	bltu	r2,r19,100029dc <__alt_data_end+0xf80029dc>
10003890:	d8c02817 	ldw	r3,160(sp)
10003894:	dc001dc4 	addi	r16,sp,119
10003898:	9cc00c04 	addi	r19,r19,48
1000389c:	1c07c83a 	sub	r3,r3,r16
100038a0:	dcc01dc5 	stb	r19,119(sp)
100038a4:	d8c02b15 	stw	r3,172(sp)
100038a8:	003cc606 	br	10002bc4 <__alt_data_end+0xf8002bc4>
100038ac:	d8803317 	ldw	r2,204(sp)
100038b0:	143fffc4 	addi	r16,r2,-1
100038b4:	043f4d0e 	bge	zero,r16,100035ec <__alt_data_end+0xf80035ec>
100038b8:	07000404 	movi	fp,16
100038bc:	e400810e 	bge	fp,r16,10003ac4 <___vfprintf_internal_r+0x165c>
100038c0:	01440074 	movhi	r5,4097
100038c4:	29486d84 	addi	r5,r5,8630
100038c8:	d9402c15 	stw	r5,176(sp)
100038cc:	01c001c4 	movi	r7,7
100038d0:	dcc02d17 	ldw	r19,180(sp)
100038d4:	00000306 	br	100038e4 <___vfprintf_internal_r+0x147c>
100038d8:	b5800204 	addi	r22,r22,8
100038dc:	843ffc04 	addi	r16,r16,-16
100038e0:	e4007b0e 	bge	fp,r16,10003ad0 <___vfprintf_internal_r+0x1668>
100038e4:	18c00404 	addi	r3,r3,16
100038e8:	8c400044 	addi	r17,r17,1
100038ec:	b5000015 	stw	r20,0(r22)
100038f0:	b7000115 	stw	fp,4(r22)
100038f4:	d8c02015 	stw	r3,128(sp)
100038f8:	dc401f15 	stw	r17,124(sp)
100038fc:	3c7ff60e 	bge	r7,r17,100038d8 <__alt_data_end+0xf80038d8>
10003900:	d9801e04 	addi	r6,sp,120
10003904:	b80b883a 	mov	r5,r23
10003908:	9809883a 	mov	r4,r19
1000390c:	d9c03c15 	stw	r7,240(sp)
10003910:	0009c480 	call	10009c48 <__sprint_r>
10003914:	d9c03c17 	ldw	r7,240(sp)
10003918:	103bd71e 	bne	r2,zero,10002878 <__alt_data_end+0xf8002878>
1000391c:	d8c02017 	ldw	r3,128(sp)
10003920:	dc401f17 	ldw	r17,124(sp)
10003924:	dd800404 	addi	r22,sp,16
10003928:	003fec06 	br	100038dc <__alt_data_end+0xf80038dc>
1000392c:	9080100c 	andi	r2,r18,64
10003930:	d8002785 	stb	zero,158(sp)
10003934:	10010e26 	beq	r2,zero,10003d70 <___vfprintf_internal_r+0x1908>
10003938:	d9402e17 	ldw	r5,184(sp)
1000393c:	d8c02a17 	ldw	r3,168(sp)
10003940:	002d883a 	mov	r22,zero
10003944:	28800104 	addi	r2,r5,4
10003948:	2cc0000b 	ldhu	r19,0(r5)
1000394c:	183fc90e 	bge	r3,zero,10003874 <__alt_data_end+0xf8003874>
10003950:	d8802e15 	stw	r2,184(sp)
10003954:	0039883a 	mov	fp,zero
10003958:	9d84b03a 	or	r2,r19,r22
1000395c:	103c1e1e 	bne	r2,zero,100029d8 <__alt_data_end+0xf80029d8>
10003960:	00800044 	movi	r2,1
10003964:	003e6c06 	br	10003318 <__alt_data_end+0xf8003318>
10003968:	d9002d17 	ldw	r4,180(sp)
1000396c:	d9801e04 	addi	r6,sp,120
10003970:	b80b883a 	mov	r5,r23
10003974:	0009c480 	call	10009c48 <__sprint_r>
10003978:	103bbf1e 	bne	r2,zero,10002878 <__alt_data_end+0xf8002878>
1000397c:	d8c02017 	ldw	r3,128(sp)
10003980:	da000404 	addi	r8,sp,16
10003984:	d9003217 	ldw	r4,200(sp)
10003988:	d8802617 	ldw	r2,152(sp)
1000398c:	d9403317 	ldw	r5,204(sp)
10003990:	8123883a 	add	r17,r16,r4
10003994:	11400216 	blt	r2,r5,100039a0 <___vfprintf_internal_r+0x1538>
10003998:	9100004c 	andi	r4,r18,1
1000399c:	20000d26 	beq	r4,zero,100039d4 <___vfprintf_internal_r+0x156c>
100039a0:	d9003717 	ldw	r4,220(sp)
100039a4:	d9403417 	ldw	r5,208(sp)
100039a8:	1907883a 	add	r3,r3,r4
100039ac:	d9001f17 	ldw	r4,124(sp)
100039b0:	41400015 	stw	r5,0(r8)
100039b4:	d9403717 	ldw	r5,220(sp)
100039b8:	21000044 	addi	r4,r4,1
100039bc:	d8c02015 	stw	r3,128(sp)
100039c0:	41400115 	stw	r5,4(r8)
100039c4:	d9001f15 	stw	r4,124(sp)
100039c8:	014001c4 	movi	r5,7
100039cc:	2901e816 	blt	r5,r4,10004170 <___vfprintf_internal_r+0x1d08>
100039d0:	42000204 	addi	r8,r8,8
100039d4:	d9003317 	ldw	r4,204(sp)
100039d8:	8121883a 	add	r16,r16,r4
100039dc:	2085c83a 	sub	r2,r4,r2
100039e0:	8461c83a 	sub	r16,r16,r17
100039e4:	1400010e 	bge	r2,r16,100039ec <___vfprintf_internal_r+0x1584>
100039e8:	1021883a 	mov	r16,r2
100039ec:	04000a0e 	bge	zero,r16,10003a18 <___vfprintf_internal_r+0x15b0>
100039f0:	d9001f17 	ldw	r4,124(sp)
100039f4:	1c07883a 	add	r3,r3,r16
100039f8:	44400015 	stw	r17,0(r8)
100039fc:	21000044 	addi	r4,r4,1
10003a00:	44000115 	stw	r16,4(r8)
10003a04:	d8c02015 	stw	r3,128(sp)
10003a08:	d9001f15 	stw	r4,124(sp)
10003a0c:	014001c4 	movi	r5,7
10003a10:	2901fb16 	blt	r5,r4,10004200 <___vfprintf_internal_r+0x1d98>
10003a14:	42000204 	addi	r8,r8,8
10003a18:	8001f716 	blt	r16,zero,100041f8 <___vfprintf_internal_r+0x1d90>
10003a1c:	1421c83a 	sub	r16,r2,r16
10003a20:	043d160e 	bge	zero,r16,10002e7c <__alt_data_end+0xf8002e7c>
10003a24:	04400404 	movi	r17,16
10003a28:	d8801f17 	ldw	r2,124(sp)
10003a2c:	8c3efb0e 	bge	r17,r16,1000361c <__alt_data_end+0xf800361c>
10003a30:	01440074 	movhi	r5,4097
10003a34:	29486d84 	addi	r5,r5,8630
10003a38:	d9402c15 	stw	r5,176(sp)
10003a3c:	058001c4 	movi	r22,7
10003a40:	dcc02d17 	ldw	r19,180(sp)
10003a44:	00000306 	br	10003a54 <___vfprintf_internal_r+0x15ec>
10003a48:	42000204 	addi	r8,r8,8
10003a4c:	843ffc04 	addi	r16,r16,-16
10003a50:	8c3ef50e 	bge	r17,r16,10003628 <__alt_data_end+0xf8003628>
10003a54:	18c00404 	addi	r3,r3,16
10003a58:	10800044 	addi	r2,r2,1
10003a5c:	45000015 	stw	r20,0(r8)
10003a60:	44400115 	stw	r17,4(r8)
10003a64:	d8c02015 	stw	r3,128(sp)
10003a68:	d8801f15 	stw	r2,124(sp)
10003a6c:	b0bff60e 	bge	r22,r2,10003a48 <__alt_data_end+0xf8003a48>
10003a70:	d9801e04 	addi	r6,sp,120
10003a74:	b80b883a 	mov	r5,r23
10003a78:	9809883a 	mov	r4,r19
10003a7c:	0009c480 	call	10009c48 <__sprint_r>
10003a80:	103b7d1e 	bne	r2,zero,10002878 <__alt_data_end+0xf8002878>
10003a84:	d8c02017 	ldw	r3,128(sp)
10003a88:	d8801f17 	ldw	r2,124(sp)
10003a8c:	da000404 	addi	r8,sp,16
10003a90:	003fee06 	br	10003a4c <__alt_data_end+0xf8003a4c>
10003a94:	9088703a 	and	r4,r18,r2
10003a98:	203eab1e 	bne	r4,zero,10003548 <__alt_data_end+0xf8003548>
10003a9c:	dc401f17 	ldw	r17,124(sp)
10003aa0:	40800115 	stw	r2,4(r8)
10003aa4:	44000015 	stw	r16,0(r8)
10003aa8:	8c400044 	addi	r17,r17,1
10003aac:	d8c02015 	stw	r3,128(sp)
10003ab0:	dc401f15 	stw	r17,124(sp)
10003ab4:	008001c4 	movi	r2,7
10003ab8:	14400e16 	blt	r2,r17,10003af4 <___vfprintf_internal_r+0x168c>
10003abc:	45800204 	addi	r22,r8,8
10003ac0:	003eca06 	br	100035ec <__alt_data_end+0xf80035ec>
10003ac4:	01040074 	movhi	r4,4097
10003ac8:	21086d84 	addi	r4,r4,8630
10003acc:	d9002c15 	stw	r4,176(sp)
10003ad0:	d8802c17 	ldw	r2,176(sp)
10003ad4:	1c07883a 	add	r3,r3,r16
10003ad8:	8c400044 	addi	r17,r17,1
10003adc:	b0800015 	stw	r2,0(r22)
10003ae0:	b4000115 	stw	r16,4(r22)
10003ae4:	d8c02015 	stw	r3,128(sp)
10003ae8:	dc401f15 	stw	r17,124(sp)
10003aec:	008001c4 	movi	r2,7
10003af0:	147ebd0e 	bge	r2,r17,100035e8 <__alt_data_end+0xf80035e8>
10003af4:	d9002d17 	ldw	r4,180(sp)
10003af8:	d9801e04 	addi	r6,sp,120
10003afc:	b80b883a 	mov	r5,r23
10003b00:	0009c480 	call	10009c48 <__sprint_r>
10003b04:	103b5c1e 	bne	r2,zero,10002878 <__alt_data_end+0xf8002878>
10003b08:	d8c02017 	ldw	r3,128(sp)
10003b0c:	dc401f17 	ldw	r17,124(sp)
10003b10:	dd800404 	addi	r22,sp,16
10003b14:	003eb506 	br	100035ec <__alt_data_end+0xf80035ec>
10003b18:	d9002d17 	ldw	r4,180(sp)
10003b1c:	d9801e04 	addi	r6,sp,120
10003b20:	b80b883a 	mov	r5,r23
10003b24:	0009c480 	call	10009c48 <__sprint_r>
10003b28:	103b531e 	bne	r2,zero,10002878 <__alt_data_end+0xf8002878>
10003b2c:	d8c02017 	ldw	r3,128(sp)
10003b30:	dc401f17 	ldw	r17,124(sp)
10003b34:	da000404 	addi	r8,sp,16
10003b38:	003e8d06 	br	10003570 <__alt_data_end+0xf8003570>
10003b3c:	d9002d17 	ldw	r4,180(sp)
10003b40:	d9801e04 	addi	r6,sp,120
10003b44:	b80b883a 	mov	r5,r23
10003b48:	0009c480 	call	10009c48 <__sprint_r>
10003b4c:	103b4a1e 	bne	r2,zero,10002878 <__alt_data_end+0xf8002878>
10003b50:	d8c02017 	ldw	r3,128(sp)
10003b54:	dc401f17 	ldw	r17,124(sp)
10003b58:	dd800404 	addi	r22,sp,16
10003b5c:	003e8f06 	br	1000359c <__alt_data_end+0xf800359c>
10003b60:	0027883a 	mov	r19,zero
10003b64:	003f4a06 	br	10003890 <__alt_data_end+0xf8003890>
10003b68:	d9002d17 	ldw	r4,180(sp)
10003b6c:	d9801e04 	addi	r6,sp,120
10003b70:	b80b883a 	mov	r5,r23
10003b74:	0009c480 	call	10009c48 <__sprint_r>
10003b78:	103b3f1e 	bne	r2,zero,10002878 <__alt_data_end+0xf8002878>
10003b7c:	d8c02017 	ldw	r3,128(sp)
10003b80:	da000404 	addi	r8,sp,16
10003b84:	003c7b06 	br	10002d74 <__alt_data_end+0xf8002d74>
10003b88:	d9402a17 	ldw	r5,168(sp)
10003b8c:	04e7c83a 	sub	r19,zero,r19
10003b90:	07000b44 	movi	fp,45
10003b94:	9804c03a 	cmpne	r2,r19,zero
10003b98:	05adc83a 	sub	r22,zero,r22
10003b9c:	df002785 	stb	fp,158(sp)
10003ba0:	b0adc83a 	sub	r22,r22,r2
10003ba4:	28017b16 	blt	r5,zero,10004194 <___vfprintf_internal_r+0x1d2c>
10003ba8:	00bfdfc4 	movi	r2,-129
10003bac:	90a4703a 	and	r18,r18,r2
10003bb0:	003b8906 	br	100029d8 <__alt_data_end+0xf80029d8>
10003bb4:	d9003617 	ldw	r4,216(sp)
10003bb8:	d9403817 	ldw	r5,224(sp)
10003bbc:	da003d15 	stw	r8,244(sp)
10003bc0:	000986c0 	call	1000986c <__fpclassifyd>
10003bc4:	da003d17 	ldw	r8,244(sp)
10003bc8:	1000f026 	beq	r2,zero,10003f8c <___vfprintf_internal_r+0x1b24>
10003bcc:	d9002a17 	ldw	r4,168(sp)
10003bd0:	05bff7c4 	movi	r22,-33
10003bd4:	00bfffc4 	movi	r2,-1
10003bd8:	8dac703a 	and	r22,r17,r22
10003bdc:	20820026 	beq	r4,r2,100043e0 <___vfprintf_internal_r+0x1f78>
10003be0:	008011c4 	movi	r2,71
10003be4:	b081f726 	beq	r22,r2,100043c4 <___vfprintf_internal_r+0x1f5c>
10003be8:	d9003817 	ldw	r4,224(sp)
10003bec:	90c04014 	ori	r3,r18,256
10003bf0:	d8c02c15 	stw	r3,176(sp)
10003bf4:	20021516 	blt	r4,zero,1000444c <___vfprintf_internal_r+0x1fe4>
10003bf8:	dcc03817 	ldw	r19,224(sp)
10003bfc:	d8002905 	stb	zero,164(sp)
10003c00:	00801984 	movi	r2,102
10003c04:	8881f926 	beq	r17,r2,100043ec <___vfprintf_internal_r+0x1f84>
10003c08:	00801184 	movi	r2,70
10003c0c:	88821c26 	beq	r17,r2,10004480 <___vfprintf_internal_r+0x2018>
10003c10:	00801144 	movi	r2,69
10003c14:	b081ef26 	beq	r22,r2,100043d4 <___vfprintf_internal_r+0x1f6c>
10003c18:	d8c02a17 	ldw	r3,168(sp)
10003c1c:	d8802104 	addi	r2,sp,132
10003c20:	d8800315 	stw	r2,12(sp)
10003c24:	d9403617 	ldw	r5,216(sp)
10003c28:	d8802504 	addi	r2,sp,148
10003c2c:	d9002d17 	ldw	r4,180(sp)
10003c30:	d8800215 	stw	r2,8(sp)
10003c34:	d8802604 	addi	r2,sp,152
10003c38:	d8c00015 	stw	r3,0(sp)
10003c3c:	d8800115 	stw	r2,4(sp)
10003c40:	01c00084 	movi	r7,2
10003c44:	980d883a 	mov	r6,r19
10003c48:	d8c03c15 	stw	r3,240(sp)
10003c4c:	da003d15 	stw	r8,244(sp)
10003c50:	0004b980 	call	10004b98 <_dtoa_r>
10003c54:	1021883a 	mov	r16,r2
10003c58:	008019c4 	movi	r2,103
10003c5c:	d8c03c17 	ldw	r3,240(sp)
10003c60:	da003d17 	ldw	r8,244(sp)
10003c64:	88817126 	beq	r17,r2,1000422c <___vfprintf_internal_r+0x1dc4>
10003c68:	008011c4 	movi	r2,71
10003c6c:	88829126 	beq	r17,r2,100046b4 <___vfprintf_internal_r+0x224c>
10003c70:	80f9883a 	add	fp,r16,r3
10003c74:	d9003617 	ldw	r4,216(sp)
10003c78:	000d883a 	mov	r6,zero
10003c7c:	000f883a 	mov	r7,zero
10003c80:	980b883a 	mov	r5,r19
10003c84:	da003d15 	stw	r8,244(sp)
10003c88:	000dba80 	call	1000dba8 <__eqdf2>
10003c8c:	da003d17 	ldw	r8,244(sp)
10003c90:	10018d26 	beq	r2,zero,100042c8 <___vfprintf_internal_r+0x1e60>
10003c94:	d8802117 	ldw	r2,132(sp)
10003c98:	1700062e 	bgeu	r2,fp,10003cb4 <___vfprintf_internal_r+0x184c>
10003c9c:	01000c04 	movi	r4,48
10003ca0:	10c00044 	addi	r3,r2,1
10003ca4:	d8c02115 	stw	r3,132(sp)
10003ca8:	11000005 	stb	r4,0(r2)
10003cac:	d8802117 	ldw	r2,132(sp)
10003cb0:	173ffb36 	bltu	r2,fp,10003ca0 <__alt_data_end+0xf8003ca0>
10003cb4:	1405c83a 	sub	r2,r2,r16
10003cb8:	d8803315 	stw	r2,204(sp)
10003cbc:	008011c4 	movi	r2,71
10003cc0:	b0817626 	beq	r22,r2,1000429c <___vfprintf_internal_r+0x1e34>
10003cc4:	00801944 	movi	r2,101
10003cc8:	1442800e 	bge	r2,r17,100046cc <___vfprintf_internal_r+0x2264>
10003ccc:	d8c02617 	ldw	r3,152(sp)
10003cd0:	00801984 	movi	r2,102
10003cd4:	d8c03215 	stw	r3,200(sp)
10003cd8:	8881fe26 	beq	r17,r2,100044d4 <___vfprintf_internal_r+0x206c>
10003cdc:	d8c03217 	ldw	r3,200(sp)
10003ce0:	d9003317 	ldw	r4,204(sp)
10003ce4:	1901dd16 	blt	r3,r4,1000445c <___vfprintf_internal_r+0x1ff4>
10003ce8:	9480004c 	andi	r18,r18,1
10003cec:	90022b1e 	bne	r18,zero,1000459c <___vfprintf_internal_r+0x2134>
10003cf0:	1805883a 	mov	r2,r3
10003cf4:	18028316 	blt	r3,zero,10004704 <___vfprintf_internal_r+0x229c>
10003cf8:	d8c03217 	ldw	r3,200(sp)
10003cfc:	044019c4 	movi	r17,103
10003d00:	d8c02b15 	stw	r3,172(sp)
10003d04:	df002907 	ldb	fp,164(sp)
10003d08:	e001531e 	bne	fp,zero,10004258 <___vfprintf_internal_r+0x1df0>
10003d0c:	df002783 	ldbu	fp,158(sp)
10003d10:	d8802915 	stw	r2,164(sp)
10003d14:	dc802c17 	ldw	r18,176(sp)
10003d18:	d8002a15 	stw	zero,168(sp)
10003d1c:	003baf06 	br	10002bdc <__alt_data_end+0xf8002bdc>
10003d20:	d8c02e17 	ldw	r3,184(sp)
10003d24:	d9002e17 	ldw	r4,184(sp)
10003d28:	d9402e17 	ldw	r5,184(sp)
10003d2c:	18c00017 	ldw	r3,0(r3)
10003d30:	21000117 	ldw	r4,4(r4)
10003d34:	29400204 	addi	r5,r5,8
10003d38:	d8c03615 	stw	r3,216(sp)
10003d3c:	d9003815 	stw	r4,224(sp)
10003d40:	d9402e15 	stw	r5,184(sp)
10003d44:	003b5006 	br	10002a88 <__alt_data_end+0xf8002a88>
10003d48:	ac400007 	ldb	r17,0(r21)
10003d4c:	003a2806 	br	100025f0 <__alt_data_end+0xf80025f0>
10003d50:	9080100c 	andi	r2,r18,64
10003d54:	1000a826 	beq	r2,zero,10003ff8 <___vfprintf_internal_r+0x1b90>
10003d58:	d8c02e17 	ldw	r3,184(sp)
10003d5c:	002d883a 	mov	r22,zero
10003d60:	1cc0000b 	ldhu	r19,0(r3)
10003d64:	18c00104 	addi	r3,r3,4
10003d68:	d8c02e15 	stw	r3,184(sp)
10003d6c:	003caf06 	br	1000302c <__alt_data_end+0xf800302c>
10003d70:	d9002e17 	ldw	r4,184(sp)
10003d74:	d9402a17 	ldw	r5,168(sp)
10003d78:	002d883a 	mov	r22,zero
10003d7c:	20800104 	addi	r2,r4,4
10003d80:	24c00017 	ldw	r19,0(r4)
10003d84:	283ebb0e 	bge	r5,zero,10003874 <__alt_data_end+0xf8003874>
10003d88:	003ef106 	br	10003950 <__alt_data_end+0xf8003950>
10003d8c:	9080040c 	andi	r2,r18,16
10003d90:	1000921e 	bne	r2,zero,10003fdc <___vfprintf_internal_r+0x1b74>
10003d94:	9480100c 	andi	r18,r18,64
10003d98:	90013926 	beq	r18,zero,10004280 <___vfprintf_internal_r+0x1e18>
10003d9c:	d9402e17 	ldw	r5,184(sp)
10003da0:	d8c02f17 	ldw	r3,188(sp)
10003da4:	28800017 	ldw	r2,0(r5)
10003da8:	29400104 	addi	r5,r5,4
10003dac:	d9402e15 	stw	r5,184(sp)
10003db0:	10c0000d 	sth	r3,0(r2)
10003db4:	0039e406 	br	10002548 <__alt_data_end+0xf8002548>
10003db8:	9080100c 	andi	r2,r18,64
10003dbc:	10008026 	beq	r2,zero,10003fc0 <___vfprintf_internal_r+0x1b58>
10003dc0:	d8802e17 	ldw	r2,184(sp)
10003dc4:	14c0000f 	ldh	r19,0(r2)
10003dc8:	10800104 	addi	r2,r2,4
10003dcc:	d8802e15 	stw	r2,184(sp)
10003dd0:	982dd7fa 	srai	r22,r19,31
10003dd4:	b005883a 	mov	r2,r22
10003dd8:	003af706 	br	100029b8 <__alt_data_end+0xf80029b8>
10003ddc:	9080100c 	andi	r2,r18,64
10003de0:	d8002785 	stb	zero,158(sp)
10003de4:	10008a1e 	bne	r2,zero,10004010 <___vfprintf_internal_r+0x1ba8>
10003de8:	d9002e17 	ldw	r4,184(sp)
10003dec:	d9402a17 	ldw	r5,168(sp)
10003df0:	002d883a 	mov	r22,zero
10003df4:	20800104 	addi	r2,r4,4
10003df8:	24c00017 	ldw	r19,0(r4)
10003dfc:	283e4b0e 	bge	r5,zero,1000372c <__alt_data_end+0xf800372c>
10003e00:	9d86b03a 	or	r3,r19,r22
10003e04:	d8802e15 	stw	r2,184(sp)
10003e08:	183e4c1e 	bne	r3,zero,1000373c <__alt_data_end+0xf800373c>
10003e0c:	0039883a 	mov	fp,zero
10003e10:	0005883a 	mov	r2,zero
10003e14:	003d4006 	br	10003318 <__alt_data_end+0xf8003318>
10003e18:	01440074 	movhi	r5,4097
10003e1c:	29486d84 	addi	r5,r5,8630
10003e20:	d9402c15 	stw	r5,176(sp)
10003e24:	d9402c17 	ldw	r5,176(sp)
10003e28:	1c47883a 	add	r3,r3,r17
10003e2c:	10800044 	addi	r2,r2,1
10003e30:	41400015 	stw	r5,0(r8)
10003e34:	44400115 	stw	r17,4(r8)
10003e38:	d8c02015 	stw	r3,128(sp)
10003e3c:	d8801f15 	stw	r2,124(sp)
10003e40:	010001c4 	movi	r4,7
10003e44:	20bec816 	blt	r4,r2,10003968 <__alt_data_end+0xf8003968>
10003e48:	42000204 	addi	r8,r8,8
10003e4c:	003ecd06 	br	10003984 <__alt_data_end+0xf8003984>
10003e50:	d9002a17 	ldw	r4,168(sp)
10003e54:	d8002785 	stb	zero,158(sp)
10003e58:	203d2d16 	blt	r4,zero,10003310 <__alt_data_end+0xf8003310>
10003e5c:	00bfdfc4 	movi	r2,-129
10003e60:	90a4703a 	and	r18,r18,r2
10003e64:	003a6106 	br	100027ec <__alt_data_end+0xf80027ec>
10003e68:	01040074 	movhi	r4,4097
10003e6c:	21086d84 	addi	r4,r4,8630
10003e70:	d9002c15 	stw	r4,176(sp)
10003e74:	003bea06 	br	10002e20 <__alt_data_end+0xf8002e20>
10003e78:	d9002d17 	ldw	r4,180(sp)
10003e7c:	d9801e04 	addi	r6,sp,120
10003e80:	b80b883a 	mov	r5,r23
10003e84:	0009c480 	call	10009c48 <__sprint_r>
10003e88:	103a7b1e 	bne	r2,zero,10002878 <__alt_data_end+0xf8002878>
10003e8c:	d8c02017 	ldw	r3,128(sp)
10003e90:	da000404 	addi	r8,sp,16
10003e94:	003d4106 	br	1000339c <__alt_data_end+0xf800339c>
10003e98:	d8801f17 	ldw	r2,124(sp)
10003e9c:	01440074 	movhi	r5,4097
10003ea0:	01000044 	movi	r4,1
10003ea4:	18c00044 	addi	r3,r3,1
10003ea8:	10800044 	addi	r2,r2,1
10003eac:	29486d04 	addi	r5,r5,8628
10003eb0:	41000115 	stw	r4,4(r8)
10003eb4:	41400015 	stw	r5,0(r8)
10003eb8:	d8c02015 	stw	r3,128(sp)
10003ebc:	d8801f15 	stw	r2,124(sp)
10003ec0:	010001c4 	movi	r4,7
10003ec4:	20805c16 	blt	r4,r2,10004038 <___vfprintf_internal_r+0x1bd0>
10003ec8:	42000204 	addi	r8,r8,8
10003ecc:	8800041e 	bne	r17,zero,10003ee0 <___vfprintf_internal_r+0x1a78>
10003ed0:	d8803317 	ldw	r2,204(sp)
10003ed4:	1000021e 	bne	r2,zero,10003ee0 <___vfprintf_internal_r+0x1a78>
10003ed8:	9080004c 	andi	r2,r18,1
10003edc:	103be726 	beq	r2,zero,10002e7c <__alt_data_end+0xf8002e7c>
10003ee0:	d9003717 	ldw	r4,220(sp)
10003ee4:	d8801f17 	ldw	r2,124(sp)
10003ee8:	d9403417 	ldw	r5,208(sp)
10003eec:	20c7883a 	add	r3,r4,r3
10003ef0:	10800044 	addi	r2,r2,1
10003ef4:	41000115 	stw	r4,4(r8)
10003ef8:	41400015 	stw	r5,0(r8)
10003efc:	d8c02015 	stw	r3,128(sp)
10003f00:	d8801f15 	stw	r2,124(sp)
10003f04:	010001c4 	movi	r4,7
10003f08:	20812116 	blt	r4,r2,10004390 <___vfprintf_internal_r+0x1f28>
10003f0c:	42000204 	addi	r8,r8,8
10003f10:	0463c83a 	sub	r17,zero,r17
10003f14:	0440730e 	bge	zero,r17,100040e4 <___vfprintf_internal_r+0x1c7c>
10003f18:	05800404 	movi	r22,16
10003f1c:	b440860e 	bge	r22,r17,10004138 <___vfprintf_internal_r+0x1cd0>
10003f20:	01440074 	movhi	r5,4097
10003f24:	29486d84 	addi	r5,r5,8630
10003f28:	d9402c15 	stw	r5,176(sp)
10003f2c:	070001c4 	movi	fp,7
10003f30:	dcc02d17 	ldw	r19,180(sp)
10003f34:	00000306 	br	10003f44 <___vfprintf_internal_r+0x1adc>
10003f38:	42000204 	addi	r8,r8,8
10003f3c:	8c7ffc04 	addi	r17,r17,-16
10003f40:	b440800e 	bge	r22,r17,10004144 <___vfprintf_internal_r+0x1cdc>
10003f44:	18c00404 	addi	r3,r3,16
10003f48:	10800044 	addi	r2,r2,1
10003f4c:	45000015 	stw	r20,0(r8)
10003f50:	45800115 	stw	r22,4(r8)
10003f54:	d8c02015 	stw	r3,128(sp)
10003f58:	d8801f15 	stw	r2,124(sp)
10003f5c:	e0bff60e 	bge	fp,r2,10003f38 <__alt_data_end+0xf8003f38>
10003f60:	d9801e04 	addi	r6,sp,120
10003f64:	b80b883a 	mov	r5,r23
10003f68:	9809883a 	mov	r4,r19
10003f6c:	0009c480 	call	10009c48 <__sprint_r>
10003f70:	103a411e 	bne	r2,zero,10002878 <__alt_data_end+0xf8002878>
10003f74:	d8c02017 	ldw	r3,128(sp)
10003f78:	d8801f17 	ldw	r2,124(sp)
10003f7c:	da000404 	addi	r8,sp,16
10003f80:	003fee06 	br	10003f3c <__alt_data_end+0xf8003f3c>
10003f84:	00bfffc4 	movi	r2,-1
10003f88:	003a3f06 	br	10002888 <__alt_data_end+0xf8002888>
10003f8c:	008011c4 	movi	r2,71
10003f90:	1440b816 	blt	r2,r17,10004274 <___vfprintf_internal_r+0x1e0c>
10003f94:	04040074 	movhi	r16,4097
10003f98:	84085f04 	addi	r16,r16,8572
10003f9c:	00c000c4 	movi	r3,3
10003fa0:	00bfdfc4 	movi	r2,-129
10003fa4:	d8c02915 	stw	r3,164(sp)
10003fa8:	90a4703a 	and	r18,r18,r2
10003fac:	df002783 	ldbu	fp,158(sp)
10003fb0:	d8c02b15 	stw	r3,172(sp)
10003fb4:	d8002a15 	stw	zero,168(sp)
10003fb8:	d8003215 	stw	zero,200(sp)
10003fbc:	003b0706 	br	10002bdc <__alt_data_end+0xf8002bdc>
10003fc0:	d8c02e17 	ldw	r3,184(sp)
10003fc4:	1cc00017 	ldw	r19,0(r3)
10003fc8:	18c00104 	addi	r3,r3,4
10003fcc:	d8c02e15 	stw	r3,184(sp)
10003fd0:	982dd7fa 	srai	r22,r19,31
10003fd4:	b005883a 	mov	r2,r22
10003fd8:	003a7706 	br	100029b8 <__alt_data_end+0xf80029b8>
10003fdc:	d8c02e17 	ldw	r3,184(sp)
10003fe0:	d9002f17 	ldw	r4,188(sp)
10003fe4:	18800017 	ldw	r2,0(r3)
10003fe8:	18c00104 	addi	r3,r3,4
10003fec:	d8c02e15 	stw	r3,184(sp)
10003ff0:	11000015 	stw	r4,0(r2)
10003ff4:	00395406 	br	10002548 <__alt_data_end+0xf8002548>
10003ff8:	d9002e17 	ldw	r4,184(sp)
10003ffc:	002d883a 	mov	r22,zero
10004000:	24c00017 	ldw	r19,0(r4)
10004004:	21000104 	addi	r4,r4,4
10004008:	d9002e15 	stw	r4,184(sp)
1000400c:	003c0706 	br	1000302c <__alt_data_end+0xf800302c>
10004010:	d9402e17 	ldw	r5,184(sp)
10004014:	d8c02a17 	ldw	r3,168(sp)
10004018:	002d883a 	mov	r22,zero
1000401c:	28800104 	addi	r2,r5,4
10004020:	2cc0000b 	ldhu	r19,0(r5)
10004024:	183dc10e 	bge	r3,zero,1000372c <__alt_data_end+0xf800372c>
10004028:	003f7506 	br	10003e00 <__alt_data_end+0xf8003e00>
1000402c:	04040074 	movhi	r16,4097
10004030:	84085d04 	addi	r16,r16,8564
10004034:	003aa706 	br	10002ad4 <__alt_data_end+0xf8002ad4>
10004038:	d9002d17 	ldw	r4,180(sp)
1000403c:	d9801e04 	addi	r6,sp,120
10004040:	b80b883a 	mov	r5,r23
10004044:	0009c480 	call	10009c48 <__sprint_r>
10004048:	103a0b1e 	bne	r2,zero,10002878 <__alt_data_end+0xf8002878>
1000404c:	dc402617 	ldw	r17,152(sp)
10004050:	d8c02017 	ldw	r3,128(sp)
10004054:	da000404 	addi	r8,sp,16
10004058:	003f9c06 	br	10003ecc <__alt_data_end+0xf8003ecc>
1000405c:	ac400043 	ldbu	r17,1(r21)
10004060:	84000814 	ori	r16,r16,32
10004064:	ad400044 	addi	r21,r21,1
10004068:	8c403fcc 	andi	r17,r17,255
1000406c:	8c40201c 	xori	r17,r17,128
10004070:	8c7fe004 	addi	r17,r17,-128
10004074:	00395e06 	br	100025f0 <__alt_data_end+0xf80025f0>
10004078:	d8c02e15 	stw	r3,184(sp)
1000407c:	0039883a 	mov	fp,zero
10004080:	003e3506 	br	10003958 <__alt_data_end+0xf8003958>
10004084:	d9002d17 	ldw	r4,180(sp)
10004088:	d9801e04 	addi	r6,sp,120
1000408c:	b80b883a 	mov	r5,r23
10004090:	0009c480 	call	10009c48 <__sprint_r>
10004094:	1039f81e 	bne	r2,zero,10002878 <__alt_data_end+0xf8002878>
10004098:	d8c02017 	ldw	r3,128(sp)
1000409c:	da000404 	addi	r8,sp,16
100040a0:	003cd006 	br	100033e4 <__alt_data_end+0xf80033e4>
100040a4:	8009883a 	mov	r4,r16
100040a8:	df003d15 	stw	fp,244(sp)
100040ac:	00023d00 	call	100023d0 <strlen>
100040b0:	d8802b15 	stw	r2,172(sp)
100040b4:	da003d17 	ldw	r8,244(sp)
100040b8:	103c200e 	bge	r2,zero,1000313c <__alt_data_end+0xf800313c>
100040bc:	0005883a 	mov	r2,zero
100040c0:	003c1e06 	br	1000313c <__alt_data_end+0xf800313c>
100040c4:	d9002d17 	ldw	r4,180(sp)
100040c8:	d9801e04 	addi	r6,sp,120
100040cc:	b80b883a 	mov	r5,r23
100040d0:	0009c480 	call	10009c48 <__sprint_r>
100040d4:	1039e81e 	bne	r2,zero,10002878 <__alt_data_end+0xf8002878>
100040d8:	d8c02017 	ldw	r3,128(sp)
100040dc:	d8801f17 	ldw	r2,124(sp)
100040e0:	da000404 	addi	r8,sp,16
100040e4:	d9403317 	ldw	r5,204(sp)
100040e8:	10800044 	addi	r2,r2,1
100040ec:	44000015 	stw	r16,0(r8)
100040f0:	28c7883a 	add	r3,r5,r3
100040f4:	003b5b06 	br	10002e64 <__alt_data_end+0xf8002e64>
100040f8:	01040074 	movhi	r4,4097
100040fc:	21087184 	addi	r4,r4,8646
10004100:	d9003515 	stw	r4,212(sp)
10004104:	003af206 	br	10002cd0 <__alt_data_end+0xf8002cd0>
10004108:	013fffc4 	movi	r4,-1
1000410c:	003a0806 	br	10002930 <__alt_data_end+0xf8002930>
10004110:	0023883a 	mov	r17,zero
10004114:	003d9d06 	br	1000378c <__alt_data_end+0xf800378c>
10004118:	d9002d17 	ldw	r4,180(sp)
1000411c:	d9801e04 	addi	r6,sp,120
10004120:	b80b883a 	mov	r5,r23
10004124:	0009c480 	call	10009c48 <__sprint_r>
10004128:	1039d31e 	bne	r2,zero,10002878 <__alt_data_end+0xf8002878>
1000412c:	d8c02017 	ldw	r3,128(sp)
10004130:	da000404 	addi	r8,sp,16
10004134:	003d9406 	br	10003788 <__alt_data_end+0xf8003788>
10004138:	01040074 	movhi	r4,4097
1000413c:	21086d84 	addi	r4,r4,8630
10004140:	d9002c15 	stw	r4,176(sp)
10004144:	d9002c17 	ldw	r4,176(sp)
10004148:	1c47883a 	add	r3,r3,r17
1000414c:	10800044 	addi	r2,r2,1
10004150:	41000015 	stw	r4,0(r8)
10004154:	44400115 	stw	r17,4(r8)
10004158:	d8c02015 	stw	r3,128(sp)
1000415c:	d8801f15 	stw	r2,124(sp)
10004160:	010001c4 	movi	r4,7
10004164:	20bfd716 	blt	r4,r2,100040c4 <__alt_data_end+0xf80040c4>
10004168:	42000204 	addi	r8,r8,8
1000416c:	003fdd06 	br	100040e4 <__alt_data_end+0xf80040e4>
10004170:	d9002d17 	ldw	r4,180(sp)
10004174:	d9801e04 	addi	r6,sp,120
10004178:	b80b883a 	mov	r5,r23
1000417c:	0009c480 	call	10009c48 <__sprint_r>
10004180:	1039bd1e 	bne	r2,zero,10002878 <__alt_data_end+0xf8002878>
10004184:	d8802617 	ldw	r2,152(sp)
10004188:	d8c02017 	ldw	r3,128(sp)
1000418c:	da000404 	addi	r8,sp,16
10004190:	003e1006 	br	100039d4 <__alt_data_end+0xf80039d4>
10004194:	00800044 	movi	r2,1
10004198:	10803fcc 	andi	r2,r2,255
1000419c:	00c00044 	movi	r3,1
100041a0:	10fa0d26 	beq	r2,r3,100029d8 <__alt_data_end+0xf80029d8>
100041a4:	00c00084 	movi	r3,2
100041a8:	10fbaf26 	beq	r2,r3,10003068 <__alt_data_end+0xf8003068>
100041ac:	003a6d06 	br	10002b64 <__alt_data_end+0xf8002b64>
100041b0:	01040074 	movhi	r4,4097
100041b4:	21087184 	addi	r4,r4,8646
100041b8:	d9003515 	stw	r4,212(sp)
100041bc:	003b5406 	br	10002f10 <__alt_data_end+0xf8002f10>
100041c0:	d8802a17 	ldw	r2,168(sp)
100041c4:	00c00184 	movi	r3,6
100041c8:	1880012e 	bgeu	r3,r2,100041d0 <___vfprintf_internal_r+0x1d68>
100041cc:	1805883a 	mov	r2,r3
100041d0:	d8802b15 	stw	r2,172(sp)
100041d4:	1000ef16 	blt	r2,zero,10004594 <___vfprintf_internal_r+0x212c>
100041d8:	04040074 	movhi	r16,4097
100041dc:	d8802915 	stw	r2,164(sp)
100041e0:	dcc02e15 	stw	r19,184(sp)
100041e4:	d8002a15 	stw	zero,168(sp)
100041e8:	d8003215 	stw	zero,200(sp)
100041ec:	84086b04 	addi	r16,r16,8620
100041f0:	0039883a 	mov	fp,zero
100041f4:	003a8006 	br	10002bf8 <__alt_data_end+0xf8002bf8>
100041f8:	0021883a 	mov	r16,zero
100041fc:	003e0706 	br	10003a1c <__alt_data_end+0xf8003a1c>
10004200:	d9002d17 	ldw	r4,180(sp)
10004204:	d9801e04 	addi	r6,sp,120
10004208:	b80b883a 	mov	r5,r23
1000420c:	0009c480 	call	10009c48 <__sprint_r>
10004210:	1039991e 	bne	r2,zero,10002878 <__alt_data_end+0xf8002878>
10004214:	d8802617 	ldw	r2,152(sp)
10004218:	d9403317 	ldw	r5,204(sp)
1000421c:	d8c02017 	ldw	r3,128(sp)
10004220:	da000404 	addi	r8,sp,16
10004224:	2885c83a 	sub	r2,r5,r2
10004228:	003dfb06 	br	10003a18 <__alt_data_end+0xf8003a18>
1000422c:	9080004c 	andi	r2,r18,1
10004230:	103e8f1e 	bne	r2,zero,10003c70 <__alt_data_end+0xf8003c70>
10004234:	d8802117 	ldw	r2,132(sp)
10004238:	003e9e06 	br	10003cb4 <__alt_data_end+0xf8003cb4>
1000423c:	1025883a 	mov	r18,r2
10004240:	0039883a 	mov	fp,zero
10004244:	00800084 	movi	r2,2
10004248:	003fd306 	br	10004198 <__alt_data_end+0xf8004198>
1000424c:	07000b44 	movi	fp,45
10004250:	df002785 	stb	fp,158(sp)
10004254:	003a1b06 	br	10002ac4 <__alt_data_end+0xf8002ac4>
10004258:	00c00b44 	movi	r3,45
1000425c:	d8c02785 	stb	r3,158(sp)
10004260:	d8802915 	stw	r2,164(sp)
10004264:	dc802c17 	ldw	r18,176(sp)
10004268:	d8002a15 	stw	zero,168(sp)
1000426c:	07000b44 	movi	fp,45
10004270:	003a5e06 	br	10002bec <__alt_data_end+0xf8002bec>
10004274:	04040074 	movhi	r16,4097
10004278:	84086004 	addi	r16,r16,8576
1000427c:	003f4706 	br	10003f9c <__alt_data_end+0xf8003f9c>
10004280:	d9002e17 	ldw	r4,184(sp)
10004284:	d9402f17 	ldw	r5,188(sp)
10004288:	20800017 	ldw	r2,0(r4)
1000428c:	21000104 	addi	r4,r4,4
10004290:	d9002e15 	stw	r4,184(sp)
10004294:	11400015 	stw	r5,0(r2)
10004298:	0038ab06 	br	10002548 <__alt_data_end+0xf8002548>
1000429c:	dd802617 	ldw	r22,152(sp)
100042a0:	00bfff44 	movi	r2,-3
100042a4:	b0801c16 	blt	r22,r2,10004318 <___vfprintf_internal_r+0x1eb0>
100042a8:	d9402a17 	ldw	r5,168(sp)
100042ac:	2d801a16 	blt	r5,r22,10004318 <___vfprintf_internal_r+0x1eb0>
100042b0:	dd803215 	stw	r22,200(sp)
100042b4:	003e8906 	br	10003cdc <__alt_data_end+0xf8003cdc>
100042b8:	01040074 	movhi	r4,4097
100042bc:	21086d84 	addi	r4,r4,8630
100042c0:	d9002c15 	stw	r4,176(sp)
100042c4:	003c9106 	br	1000350c <__alt_data_end+0xf800350c>
100042c8:	e005883a 	mov	r2,fp
100042cc:	003e7906 	br	10003cb4 <__alt_data_end+0xf8003cb4>
100042d0:	d9002a17 	ldw	r4,168(sp)
100042d4:	df002783 	ldbu	fp,158(sp)
100042d8:	dcc02e15 	stw	r19,184(sp)
100042dc:	d9002915 	stw	r4,164(sp)
100042e0:	d9002b15 	stw	r4,172(sp)
100042e4:	d8002a15 	stw	zero,168(sp)
100042e8:	d8003215 	stw	zero,200(sp)
100042ec:	003a3b06 	br	10002bdc <__alt_data_end+0xf8002bdc>
100042f0:	9080004c 	andi	r2,r18,1
100042f4:	0039883a 	mov	fp,zero
100042f8:	10000426 	beq	r2,zero,1000430c <___vfprintf_internal_r+0x1ea4>
100042fc:	00800c04 	movi	r2,48
10004300:	dc001dc4 	addi	r16,sp,119
10004304:	d8801dc5 	stb	r2,119(sp)
10004308:	003b6406 	br	1000309c <__alt_data_end+0xf800309c>
1000430c:	d8002b15 	stw	zero,172(sp)
10004310:	dc001e04 	addi	r16,sp,120
10004314:	003a2b06 	br	10002bc4 <__alt_data_end+0xf8002bc4>
10004318:	8c7fff84 	addi	r17,r17,-2
1000431c:	b5bfffc4 	addi	r22,r22,-1
10004320:	dd802615 	stw	r22,152(sp)
10004324:	dc4022c5 	stb	r17,139(sp)
10004328:	b000bf16 	blt	r22,zero,10004628 <___vfprintf_internal_r+0x21c0>
1000432c:	00800ac4 	movi	r2,43
10004330:	d8802305 	stb	r2,140(sp)
10004334:	00800244 	movi	r2,9
10004338:	15807016 	blt	r2,r22,100044fc <___vfprintf_internal_r+0x2094>
1000433c:	00800c04 	movi	r2,48
10004340:	b5800c04 	addi	r22,r22,48
10004344:	d8802345 	stb	r2,141(sp)
10004348:	dd802385 	stb	r22,142(sp)
1000434c:	d88023c4 	addi	r2,sp,143
10004350:	df0022c4 	addi	fp,sp,139
10004354:	d8c03317 	ldw	r3,204(sp)
10004358:	1739c83a 	sub	fp,r2,fp
1000435c:	d9003317 	ldw	r4,204(sp)
10004360:	e0c7883a 	add	r3,fp,r3
10004364:	df003a15 	stw	fp,232(sp)
10004368:	d8c02b15 	stw	r3,172(sp)
1000436c:	00800044 	movi	r2,1
10004370:	1100b30e 	bge	r2,r4,10004640 <___vfprintf_internal_r+0x21d8>
10004374:	d8c02b17 	ldw	r3,172(sp)
10004378:	18c00044 	addi	r3,r3,1
1000437c:	d8c02b15 	stw	r3,172(sp)
10004380:	1805883a 	mov	r2,r3
10004384:	1800ac16 	blt	r3,zero,10004638 <___vfprintf_internal_r+0x21d0>
10004388:	d8003215 	stw	zero,200(sp)
1000438c:	003e5d06 	br	10003d04 <__alt_data_end+0xf8003d04>
10004390:	d9002d17 	ldw	r4,180(sp)
10004394:	d9801e04 	addi	r6,sp,120
10004398:	b80b883a 	mov	r5,r23
1000439c:	0009c480 	call	10009c48 <__sprint_r>
100043a0:	1039351e 	bne	r2,zero,10002878 <__alt_data_end+0xf8002878>
100043a4:	dc402617 	ldw	r17,152(sp)
100043a8:	d8c02017 	ldw	r3,128(sp)
100043ac:	d8801f17 	ldw	r2,124(sp)
100043b0:	da000404 	addi	r8,sp,16
100043b4:	003ed606 	br	10003f10 <__alt_data_end+0xf8003f10>
100043b8:	182b883a 	mov	r21,r3
100043bc:	d8002a15 	stw	zero,168(sp)
100043c0:	00388c06 	br	100025f4 <__alt_data_end+0xf80025f4>
100043c4:	d8802a17 	ldw	r2,168(sp)
100043c8:	103e071e 	bne	r2,zero,10003be8 <__alt_data_end+0xf8003be8>
100043cc:	dc002a15 	stw	r16,168(sp)
100043d0:	003e0506 	br	10003be8 <__alt_data_end+0xf8003be8>
100043d4:	d9002a17 	ldw	r4,168(sp)
100043d8:	20c00044 	addi	r3,r4,1
100043dc:	003e0f06 	br	10003c1c <__alt_data_end+0xf8003c1c>
100043e0:	01400184 	movi	r5,6
100043e4:	d9402a15 	stw	r5,168(sp)
100043e8:	003dff06 	br	10003be8 <__alt_data_end+0xf8003be8>
100043ec:	d8802104 	addi	r2,sp,132
100043f0:	d8800315 	stw	r2,12(sp)
100043f4:	d8802504 	addi	r2,sp,148
100043f8:	d8800215 	stw	r2,8(sp)
100043fc:	d8802604 	addi	r2,sp,152
10004400:	d8800115 	stw	r2,4(sp)
10004404:	d8802a17 	ldw	r2,168(sp)
10004408:	d9403617 	ldw	r5,216(sp)
1000440c:	d9002d17 	ldw	r4,180(sp)
10004410:	d8800015 	stw	r2,0(sp)
10004414:	01c000c4 	movi	r7,3
10004418:	980d883a 	mov	r6,r19
1000441c:	da003d15 	stw	r8,244(sp)
10004420:	0004b980 	call	10004b98 <_dtoa_r>
10004424:	d8c02a17 	ldw	r3,168(sp)
10004428:	da003d17 	ldw	r8,244(sp)
1000442c:	1021883a 	mov	r16,r2
10004430:	10f9883a 	add	fp,r2,r3
10004434:	81000007 	ldb	r4,0(r16)
10004438:	00800c04 	movi	r2,48
1000443c:	20805e26 	beq	r4,r2,100045b8 <___vfprintf_internal_r+0x2150>
10004440:	d8c02617 	ldw	r3,152(sp)
10004444:	e0f9883a 	add	fp,fp,r3
10004448:	003e0a06 	br	10003c74 <__alt_data_end+0xf8003c74>
1000444c:	00c00b44 	movi	r3,45
10004450:	24e0003c 	xorhi	r19,r4,32768
10004454:	d8c02905 	stb	r3,164(sp)
10004458:	003de906 	br	10003c00 <__alt_data_end+0xf8003c00>
1000445c:	d8c03217 	ldw	r3,200(sp)
10004460:	00c07a0e 	bge	zero,r3,1000464c <___vfprintf_internal_r+0x21e4>
10004464:	00800044 	movi	r2,1
10004468:	d9003317 	ldw	r4,204(sp)
1000446c:	1105883a 	add	r2,r2,r4
10004470:	d8802b15 	stw	r2,172(sp)
10004474:	10004e16 	blt	r2,zero,100045b0 <___vfprintf_internal_r+0x2148>
10004478:	044019c4 	movi	r17,103
1000447c:	003e2106 	br	10003d04 <__alt_data_end+0xf8003d04>
10004480:	d9002a17 	ldw	r4,168(sp)
10004484:	d8802104 	addi	r2,sp,132
10004488:	d8800315 	stw	r2,12(sp)
1000448c:	d9000015 	stw	r4,0(sp)
10004490:	d8802504 	addi	r2,sp,148
10004494:	d9403617 	ldw	r5,216(sp)
10004498:	d9002d17 	ldw	r4,180(sp)
1000449c:	d8800215 	stw	r2,8(sp)
100044a0:	d8802604 	addi	r2,sp,152
100044a4:	d8800115 	stw	r2,4(sp)
100044a8:	01c000c4 	movi	r7,3
100044ac:	980d883a 	mov	r6,r19
100044b0:	da003d15 	stw	r8,244(sp)
100044b4:	0004b980 	call	10004b98 <_dtoa_r>
100044b8:	d8c02a17 	ldw	r3,168(sp)
100044bc:	da003d17 	ldw	r8,244(sp)
100044c0:	1021883a 	mov	r16,r2
100044c4:	00801184 	movi	r2,70
100044c8:	80f9883a 	add	fp,r16,r3
100044cc:	88bfd926 	beq	r17,r2,10004434 <__alt_data_end+0xf8004434>
100044d0:	003de806 	br	10003c74 <__alt_data_end+0xf8003c74>
100044d4:	d9002a17 	ldw	r4,168(sp)
100044d8:	00c04d0e 	bge	zero,r3,10004610 <___vfprintf_internal_r+0x21a8>
100044dc:	2000441e 	bne	r4,zero,100045f0 <___vfprintf_internal_r+0x2188>
100044e0:	9480004c 	andi	r18,r18,1
100044e4:	9000421e 	bne	r18,zero,100045f0 <___vfprintf_internal_r+0x2188>
100044e8:	1805883a 	mov	r2,r3
100044ec:	18006f16 	blt	r3,zero,100046ac <___vfprintf_internal_r+0x2244>
100044f0:	d8c03217 	ldw	r3,200(sp)
100044f4:	d8c02b15 	stw	r3,172(sp)
100044f8:	003e0206 	br	10003d04 <__alt_data_end+0xf8003d04>
100044fc:	df0022c4 	addi	fp,sp,139
10004500:	dc002a15 	stw	r16,168(sp)
10004504:	4027883a 	mov	r19,r8
10004508:	e021883a 	mov	r16,fp
1000450c:	b009883a 	mov	r4,r22
10004510:	01400284 	movi	r5,10
10004514:	000c7d40 	call	1000c7d4 <__modsi3>
10004518:	10800c04 	addi	r2,r2,48
1000451c:	843fffc4 	addi	r16,r16,-1
10004520:	b009883a 	mov	r4,r22
10004524:	01400284 	movi	r5,10
10004528:	80800005 	stb	r2,0(r16)
1000452c:	000c7500 	call	1000c750 <__divsi3>
10004530:	102d883a 	mov	r22,r2
10004534:	00800244 	movi	r2,9
10004538:	15bff416 	blt	r2,r22,1000450c <__alt_data_end+0xf800450c>
1000453c:	9811883a 	mov	r8,r19
10004540:	b0800c04 	addi	r2,r22,48
10004544:	8027883a 	mov	r19,r16
10004548:	997fffc4 	addi	r5,r19,-1
1000454c:	98bfffc5 	stb	r2,-1(r19)
10004550:	dc002a17 	ldw	r16,168(sp)
10004554:	2f006d2e 	bgeu	r5,fp,1000470c <___vfprintf_internal_r+0x22a4>
10004558:	d9c02384 	addi	r7,sp,142
1000455c:	3ccfc83a 	sub	r7,r7,r19
10004560:	d9002344 	addi	r4,sp,141
10004564:	e1cf883a 	add	r7,fp,r7
10004568:	00000106 	br	10004570 <___vfprintf_internal_r+0x2108>
1000456c:	28800003 	ldbu	r2,0(r5)
10004570:	20800005 	stb	r2,0(r4)
10004574:	21000044 	addi	r4,r4,1
10004578:	29400044 	addi	r5,r5,1
1000457c:	393ffb1e 	bne	r7,r4,1000456c <__alt_data_end+0xf800456c>
10004580:	d8802304 	addi	r2,sp,140
10004584:	14c5c83a 	sub	r2,r2,r19
10004588:	d8c02344 	addi	r3,sp,141
1000458c:	1885883a 	add	r2,r3,r2
10004590:	003f7006 	br	10004354 <__alt_data_end+0xf8004354>
10004594:	0005883a 	mov	r2,zero
10004598:	003f0f06 	br	100041d8 <__alt_data_end+0xf80041d8>
1000459c:	d8c03217 	ldw	r3,200(sp)
100045a0:	18c00044 	addi	r3,r3,1
100045a4:	d8c02b15 	stw	r3,172(sp)
100045a8:	1805883a 	mov	r2,r3
100045ac:	183fb20e 	bge	r3,zero,10004478 <__alt_data_end+0xf8004478>
100045b0:	0005883a 	mov	r2,zero
100045b4:	003fb006 	br	10004478 <__alt_data_end+0xf8004478>
100045b8:	d9003617 	ldw	r4,216(sp)
100045bc:	000d883a 	mov	r6,zero
100045c0:	000f883a 	mov	r7,zero
100045c4:	980b883a 	mov	r5,r19
100045c8:	d8c03c15 	stw	r3,240(sp)
100045cc:	da003d15 	stw	r8,244(sp)
100045d0:	000dba80 	call	1000dba8 <__eqdf2>
100045d4:	d8c03c17 	ldw	r3,240(sp)
100045d8:	da003d17 	ldw	r8,244(sp)
100045dc:	103f9826 	beq	r2,zero,10004440 <__alt_data_end+0xf8004440>
100045e0:	00800044 	movi	r2,1
100045e4:	10c7c83a 	sub	r3,r2,r3
100045e8:	d8c02615 	stw	r3,152(sp)
100045ec:	003f9506 	br	10004444 <__alt_data_end+0xf8004444>
100045f0:	d9002a17 	ldw	r4,168(sp)
100045f4:	d8c03217 	ldw	r3,200(sp)
100045f8:	20800044 	addi	r2,r4,1
100045fc:	1885883a 	add	r2,r3,r2
10004600:	d8802b15 	stw	r2,172(sp)
10004604:	103dbf0e 	bge	r2,zero,10003d04 <__alt_data_end+0xf8003d04>
10004608:	0005883a 	mov	r2,zero
1000460c:	003dbd06 	br	10003d04 <__alt_data_end+0xf8003d04>
10004610:	2000201e 	bne	r4,zero,10004694 <___vfprintf_internal_r+0x222c>
10004614:	9480004c 	andi	r18,r18,1
10004618:	90001e1e 	bne	r18,zero,10004694 <___vfprintf_internal_r+0x222c>
1000461c:	00800044 	movi	r2,1
10004620:	d8802b15 	stw	r2,172(sp)
10004624:	003db706 	br	10003d04 <__alt_data_end+0xf8003d04>
10004628:	00800b44 	movi	r2,45
1000462c:	05adc83a 	sub	r22,zero,r22
10004630:	d8802305 	stb	r2,140(sp)
10004634:	003f3f06 	br	10004334 <__alt_data_end+0xf8004334>
10004638:	0005883a 	mov	r2,zero
1000463c:	003f5206 	br	10004388 <__alt_data_end+0xf8004388>
10004640:	90a4703a 	and	r18,r18,r2
10004644:	903f4e26 	beq	r18,zero,10004380 <__alt_data_end+0xf8004380>
10004648:	003f4a06 	br	10004374 <__alt_data_end+0xf8004374>
1000464c:	00800084 	movi	r2,2
10004650:	10c5c83a 	sub	r2,r2,r3
10004654:	003f8406 	br	10004468 <__alt_data_end+0xf8004468>
10004658:	d9402e17 	ldw	r5,184(sp)
1000465c:	d9002e17 	ldw	r4,184(sp)
10004660:	ac400043 	ldbu	r17,1(r21)
10004664:	29400017 	ldw	r5,0(r5)
10004668:	20800104 	addi	r2,r4,4
1000466c:	d8802e15 	stw	r2,184(sp)
10004670:	d9402a15 	stw	r5,168(sp)
10004674:	182b883a 	mov	r21,r3
10004678:	283e7b0e 	bge	r5,zero,10004068 <__alt_data_end+0xf8004068>
1000467c:	8c403fcc 	andi	r17,r17,255
10004680:	017fffc4 	movi	r5,-1
10004684:	8c40201c 	xori	r17,r17,128
10004688:	d9402a15 	stw	r5,168(sp)
1000468c:	8c7fe004 	addi	r17,r17,-128
10004690:	0037d706 	br	100025f0 <__alt_data_end+0xf80025f0>
10004694:	d8c02a17 	ldw	r3,168(sp)
10004698:	18c00084 	addi	r3,r3,2
1000469c:	d8c02b15 	stw	r3,172(sp)
100046a0:	1805883a 	mov	r2,r3
100046a4:	183d970e 	bge	r3,zero,10003d04 <__alt_data_end+0xf8003d04>
100046a8:	003fd706 	br	10004608 <__alt_data_end+0xf8004608>
100046ac:	0005883a 	mov	r2,zero
100046b0:	003f8f06 	br	100044f0 <__alt_data_end+0xf80044f0>
100046b4:	9080004c 	andi	r2,r18,1
100046b8:	103f821e 	bne	r2,zero,100044c4 <__alt_data_end+0xf80044c4>
100046bc:	d8802117 	ldw	r2,132(sp)
100046c0:	1405c83a 	sub	r2,r2,r16
100046c4:	d8803315 	stw	r2,204(sp)
100046c8:	b47ef426 	beq	r22,r17,1000429c <__alt_data_end+0xf800429c>
100046cc:	dd802617 	ldw	r22,152(sp)
100046d0:	003f1206 	br	1000431c <__alt_data_end+0xf800431c>
100046d4:	d8c02b03 	ldbu	r3,172(sp)
100046d8:	d8c02785 	stb	r3,158(sp)
100046dc:	0038df06 	br	10002a5c <__alt_data_end+0xf8002a5c>
100046e0:	d8c02b03 	ldbu	r3,172(sp)
100046e4:	d8c02785 	stb	r3,158(sp)
100046e8:	0038aa06 	br	10002994 <__alt_data_end+0xf8002994>
100046ec:	d8c02b03 	ldbu	r3,172(sp)
100046f0:	d8c02785 	stb	r3,158(sp)
100046f4:	003a4306 	br	10003004 <__alt_data_end+0xf8003004>
100046f8:	d8c02b03 	ldbu	r3,172(sp)
100046fc:	d8c02785 	stb	r3,158(sp)
10004700:	003af506 	br	100032d8 <__alt_data_end+0xf80032d8>
10004704:	0005883a 	mov	r2,zero
10004708:	003d7b06 	br	10003cf8 <__alt_data_end+0xf8003cf8>
1000470c:	d8802344 	addi	r2,sp,141
10004710:	003f1006 	br	10004354 <__alt_data_end+0xf8004354>
10004714:	d8c02b03 	ldbu	r3,172(sp)
10004718:	d8c02785 	stb	r3,158(sp)
1000471c:	0038fd06 	br	10002b14 <__alt_data_end+0xf8002b14>
10004720:	d8c02b03 	ldbu	r3,172(sp)
10004724:	d8c02785 	stb	r3,158(sp)
10004728:	003a9706 	br	10003188 <__alt_data_end+0xf8003188>
1000472c:	d8c02b03 	ldbu	r3,172(sp)
10004730:	d8c02785 	stb	r3,158(sp)
10004734:	003a1806 	br	10002f98 <__alt_data_end+0xf8002f98>
10004738:	d8c02b03 	ldbu	r3,172(sp)
1000473c:	d8c02785 	stb	r3,158(sp)
10004740:	003abe06 	br	1000323c <__alt_data_end+0xf800323c>

10004744 <__vfprintf_internal>:
10004744:	00840074 	movhi	r2,4097
10004748:	108fc804 	addi	r2,r2,16160
1000474c:	300f883a 	mov	r7,r6
10004750:	280d883a 	mov	r6,r5
10004754:	200b883a 	mov	r5,r4
10004758:	11000017 	ldw	r4,0(r2)
1000475c:	00024681 	jmpi	10002468 <___vfprintf_internal_r>

10004760 <__sbprintf>:
10004760:	2880030b 	ldhu	r2,12(r5)
10004764:	2ac01917 	ldw	r11,100(r5)
10004768:	2a80038b 	ldhu	r10,14(r5)
1000476c:	2a400717 	ldw	r9,28(r5)
10004770:	2a000917 	ldw	r8,36(r5)
10004774:	defee204 	addi	sp,sp,-1144
10004778:	00c10004 	movi	r3,1024
1000477c:	dc011a15 	stw	r16,1128(sp)
10004780:	10bfff4c 	andi	r2,r2,65533
10004784:	2821883a 	mov	r16,r5
10004788:	d8cb883a 	add	r5,sp,r3
1000478c:	dc811c15 	stw	r18,1136(sp)
10004790:	dc411b15 	stw	r17,1132(sp)
10004794:	dfc11d15 	stw	ra,1140(sp)
10004798:	2025883a 	mov	r18,r4
1000479c:	d881030d 	sth	r2,1036(sp)
100047a0:	dac11915 	stw	r11,1124(sp)
100047a4:	da81038d 	sth	r10,1038(sp)
100047a8:	da410715 	stw	r9,1052(sp)
100047ac:	da010915 	stw	r8,1060(sp)
100047b0:	dec10015 	stw	sp,1024(sp)
100047b4:	dec10415 	stw	sp,1040(sp)
100047b8:	d8c10215 	stw	r3,1032(sp)
100047bc:	d8c10515 	stw	r3,1044(sp)
100047c0:	d8010615 	stw	zero,1048(sp)
100047c4:	00024680 	call	10002468 <___vfprintf_internal_r>
100047c8:	1023883a 	mov	r17,r2
100047cc:	10000416 	blt	r2,zero,100047e0 <__sbprintf+0x80>
100047d0:	d9410004 	addi	r5,sp,1024
100047d4:	9009883a 	mov	r4,r18
100047d8:	000643c0 	call	1000643c <_fflush_r>
100047dc:	10000d1e 	bne	r2,zero,10004814 <__sbprintf+0xb4>
100047e0:	d881030b 	ldhu	r2,1036(sp)
100047e4:	1080100c 	andi	r2,r2,64
100047e8:	10000326 	beq	r2,zero,100047f8 <__sbprintf+0x98>
100047ec:	8080030b 	ldhu	r2,12(r16)
100047f0:	10801014 	ori	r2,r2,64
100047f4:	8080030d 	sth	r2,12(r16)
100047f8:	8805883a 	mov	r2,r17
100047fc:	dfc11d17 	ldw	ra,1140(sp)
10004800:	dc811c17 	ldw	r18,1136(sp)
10004804:	dc411b17 	ldw	r17,1132(sp)
10004808:	dc011a17 	ldw	r16,1128(sp)
1000480c:	dec11e04 	addi	sp,sp,1144
10004810:	f800283a 	ret
10004814:	047fffc4 	movi	r17,-1
10004818:	003ff106 	br	100047e0 <__alt_data_end+0xf80047e0>

1000481c <__swsetup_r>:
1000481c:	00840074 	movhi	r2,4097
10004820:	defffd04 	addi	sp,sp,-12
10004824:	108fc804 	addi	r2,r2,16160
10004828:	dc400115 	stw	r17,4(sp)
1000482c:	2023883a 	mov	r17,r4
10004830:	11000017 	ldw	r4,0(r2)
10004834:	dc000015 	stw	r16,0(sp)
10004838:	dfc00215 	stw	ra,8(sp)
1000483c:	2821883a 	mov	r16,r5
10004840:	20000226 	beq	r4,zero,1000484c <__swsetup_r+0x30>
10004844:	20800e17 	ldw	r2,56(r4)
10004848:	10003126 	beq	r2,zero,10004910 <__swsetup_r+0xf4>
1000484c:	8080030b 	ldhu	r2,12(r16)
10004850:	10c0020c 	andi	r3,r2,8
10004854:	1009883a 	mov	r4,r2
10004858:	18000f26 	beq	r3,zero,10004898 <__swsetup_r+0x7c>
1000485c:	80c00417 	ldw	r3,16(r16)
10004860:	18001526 	beq	r3,zero,100048b8 <__swsetup_r+0x9c>
10004864:	1100004c 	andi	r4,r2,1
10004868:	20001c1e 	bne	r4,zero,100048dc <__swsetup_r+0xc0>
1000486c:	1080008c 	andi	r2,r2,2
10004870:	1000291e 	bne	r2,zero,10004918 <__swsetup_r+0xfc>
10004874:	80800517 	ldw	r2,20(r16)
10004878:	80800215 	stw	r2,8(r16)
1000487c:	18001c26 	beq	r3,zero,100048f0 <__swsetup_r+0xd4>
10004880:	0005883a 	mov	r2,zero
10004884:	dfc00217 	ldw	ra,8(sp)
10004888:	dc400117 	ldw	r17,4(sp)
1000488c:	dc000017 	ldw	r16,0(sp)
10004890:	dec00304 	addi	sp,sp,12
10004894:	f800283a 	ret
10004898:	2080040c 	andi	r2,r4,16
1000489c:	10002e26 	beq	r2,zero,10004958 <__swsetup_r+0x13c>
100048a0:	2080010c 	andi	r2,r4,4
100048a4:	10001e1e 	bne	r2,zero,10004920 <__swsetup_r+0x104>
100048a8:	80c00417 	ldw	r3,16(r16)
100048ac:	20800214 	ori	r2,r4,8
100048b0:	8080030d 	sth	r2,12(r16)
100048b4:	183feb1e 	bne	r3,zero,10004864 <__alt_data_end+0xf8004864>
100048b8:	1100a00c 	andi	r4,r2,640
100048bc:	01408004 	movi	r5,512
100048c0:	217fe826 	beq	r4,r5,10004864 <__alt_data_end+0xf8004864>
100048c4:	800b883a 	mov	r5,r16
100048c8:	8809883a 	mov	r4,r17
100048cc:	00073d80 	call	100073d8 <__smakebuf_r>
100048d0:	8080030b 	ldhu	r2,12(r16)
100048d4:	80c00417 	ldw	r3,16(r16)
100048d8:	003fe206 	br	10004864 <__alt_data_end+0xf8004864>
100048dc:	80800517 	ldw	r2,20(r16)
100048e0:	80000215 	stw	zero,8(r16)
100048e4:	0085c83a 	sub	r2,zero,r2
100048e8:	80800615 	stw	r2,24(r16)
100048ec:	183fe41e 	bne	r3,zero,10004880 <__alt_data_end+0xf8004880>
100048f0:	80c0030b 	ldhu	r3,12(r16)
100048f4:	0005883a 	mov	r2,zero
100048f8:	1900200c 	andi	r4,r3,128
100048fc:	203fe126 	beq	r4,zero,10004884 <__alt_data_end+0xf8004884>
10004900:	18c01014 	ori	r3,r3,64
10004904:	80c0030d 	sth	r3,12(r16)
10004908:	00bfffc4 	movi	r2,-1
1000490c:	003fdd06 	br	10004884 <__alt_data_end+0xf8004884>
10004910:	00068280 	call	10006828 <__sinit>
10004914:	003fcd06 	br	1000484c <__alt_data_end+0xf800484c>
10004918:	0005883a 	mov	r2,zero
1000491c:	003fd606 	br	10004878 <__alt_data_end+0xf8004878>
10004920:	81400c17 	ldw	r5,48(r16)
10004924:	28000626 	beq	r5,zero,10004940 <__swsetup_r+0x124>
10004928:	80801004 	addi	r2,r16,64
1000492c:	28800326 	beq	r5,r2,1000493c <__swsetup_r+0x120>
10004930:	8809883a 	mov	r4,r17
10004934:	000699c0 	call	1000699c <_free_r>
10004938:	8100030b 	ldhu	r4,12(r16)
1000493c:	80000c15 	stw	zero,48(r16)
10004940:	80c00417 	ldw	r3,16(r16)
10004944:	00bff6c4 	movi	r2,-37
10004948:	1108703a 	and	r4,r2,r4
1000494c:	80000115 	stw	zero,4(r16)
10004950:	80c00015 	stw	r3,0(r16)
10004954:	003fd506 	br	100048ac <__alt_data_end+0xf80048ac>
10004958:	00800244 	movi	r2,9
1000495c:	88800015 	stw	r2,0(r17)
10004960:	20801014 	ori	r2,r4,64
10004964:	8080030d 	sth	r2,12(r16)
10004968:	00bfffc4 	movi	r2,-1
1000496c:	003fc506 	br	10004884 <__alt_data_end+0xf8004884>

10004970 <quorem>:
10004970:	defff204 	addi	sp,sp,-56
10004974:	ddc00b15 	stw	r23,44(sp)
10004978:	20800417 	ldw	r2,16(r4)
1000497c:	2dc00417 	ldw	r23,16(r5)
10004980:	dfc00d15 	stw	ra,52(sp)
10004984:	df000c15 	stw	fp,48(sp)
10004988:	dd800a15 	stw	r22,40(sp)
1000498c:	dd400915 	stw	r21,36(sp)
10004990:	dd000815 	stw	r20,32(sp)
10004994:	dcc00715 	stw	r19,28(sp)
10004998:	dc800615 	stw	r18,24(sp)
1000499c:	dc400515 	stw	r17,20(sp)
100049a0:	dc000415 	stw	r16,16(sp)
100049a4:	15c07a16 	blt	r2,r23,10004b90 <quorem+0x220>
100049a8:	bdffffc4 	addi	r23,r23,-1
100049ac:	bde9883a 	add	r20,r23,r23
100049b0:	28c00504 	addi	r3,r5,20
100049b4:	a529883a 	add	r20,r20,r20
100049b8:	1d39883a 	add	fp,r3,r20
100049bc:	24c00504 	addi	r19,r4,20
100049c0:	d9400215 	stw	r5,8(sp)
100049c4:	9d29883a 	add	r20,r19,r20
100049c8:	e1400017 	ldw	r5,0(fp)
100049cc:	d9000015 	stw	r4,0(sp)
100049d0:	a1000017 	ldw	r4,0(r20)
100049d4:	29400044 	addi	r5,r5,1
100049d8:	d8c00115 	stw	r3,4(sp)
100049dc:	dd000315 	stw	r20,12(sp)
100049e0:	000c8480 	call	1000c848 <__udivsi3>
100049e4:	1025883a 	mov	r18,r2
100049e8:	10003026 	beq	r2,zero,10004aac <quorem+0x13c>
100049ec:	dc400117 	ldw	r17,4(sp)
100049f0:	9829883a 	mov	r20,r19
100049f4:	002d883a 	mov	r22,zero
100049f8:	0021883a 	mov	r16,zero
100049fc:	8d400017 	ldw	r21,0(r17)
10004a00:	900b883a 	mov	r5,r18
10004a04:	8c400104 	addi	r17,r17,4
10004a08:	a93fffcc 	andi	r4,r21,65535
10004a0c:	000c9040 	call	1000c904 <__mulsi3>
10004a10:	a808d43a 	srli	r4,r21,16
10004a14:	900b883a 	mov	r5,r18
10004a18:	15ad883a 	add	r22,r2,r22
10004a1c:	000c9040 	call	1000c904 <__mulsi3>
10004a20:	a1000017 	ldw	r4,0(r20)
10004a24:	b00cd43a 	srli	r6,r22,16
10004a28:	b0ffffcc 	andi	r3,r22,65535
10004a2c:	217fffcc 	andi	r5,r4,65535
10004a30:	2c21883a 	add	r16,r5,r16
10004a34:	80c7c83a 	sub	r3,r16,r3
10004a38:	2008d43a 	srli	r4,r4,16
10004a3c:	1185883a 	add	r2,r2,r6
10004a40:	1821d43a 	srai	r16,r3,16
10004a44:	117fffcc 	andi	r5,r2,65535
10004a48:	2149c83a 	sub	r4,r4,r5
10004a4c:	2421883a 	add	r16,r4,r16
10004a50:	8008943a 	slli	r4,r16,16
10004a54:	18ffffcc 	andi	r3,r3,65535
10004a58:	102cd43a 	srli	r22,r2,16
10004a5c:	20c8b03a 	or	r4,r4,r3
10004a60:	a1000015 	stw	r4,0(r20)
10004a64:	8021d43a 	srai	r16,r16,16
10004a68:	a5000104 	addi	r20,r20,4
10004a6c:	e47fe32e 	bgeu	fp,r17,100049fc <__alt_data_end+0xf80049fc>
10004a70:	d8c00317 	ldw	r3,12(sp)
10004a74:	18800017 	ldw	r2,0(r3)
10004a78:	10000c1e 	bne	r2,zero,10004aac <quorem+0x13c>
10004a7c:	18bfff04 	addi	r2,r3,-4
10004a80:	9880082e 	bgeu	r19,r2,10004aa4 <quorem+0x134>
10004a84:	18ffff17 	ldw	r3,-4(r3)
10004a88:	18000326 	beq	r3,zero,10004a98 <quorem+0x128>
10004a8c:	00000506 	br	10004aa4 <quorem+0x134>
10004a90:	10c00017 	ldw	r3,0(r2)
10004a94:	1800031e 	bne	r3,zero,10004aa4 <quorem+0x134>
10004a98:	10bfff04 	addi	r2,r2,-4
10004a9c:	bdffffc4 	addi	r23,r23,-1
10004aa0:	98bffb36 	bltu	r19,r2,10004a90 <__alt_data_end+0xf8004a90>
10004aa4:	d8c00017 	ldw	r3,0(sp)
10004aa8:	1dc00415 	stw	r23,16(r3)
10004aac:	d9400217 	ldw	r5,8(sp)
10004ab0:	d9000017 	ldw	r4,0(sp)
10004ab4:	0008bd40 	call	10008bd4 <__mcmp>
10004ab8:	10002816 	blt	r2,zero,10004b5c <quorem+0x1ec>
10004abc:	dc400117 	ldw	r17,4(sp)
10004ac0:	94800044 	addi	r18,r18,1
10004ac4:	980d883a 	mov	r6,r19
10004ac8:	0007883a 	mov	r3,zero
10004acc:	31000017 	ldw	r4,0(r6)
10004ad0:	89400017 	ldw	r5,0(r17)
10004ad4:	31800104 	addi	r6,r6,4
10004ad8:	20bfffcc 	andi	r2,r4,65535
10004adc:	10c7883a 	add	r3,r2,r3
10004ae0:	28bfffcc 	andi	r2,r5,65535
10004ae4:	1885c83a 	sub	r2,r3,r2
10004ae8:	280ad43a 	srli	r5,r5,16
10004aec:	2008d43a 	srli	r4,r4,16
10004af0:	1007d43a 	srai	r3,r2,16
10004af4:	10bfffcc 	andi	r2,r2,65535
10004af8:	2149c83a 	sub	r4,r4,r5
10004afc:	20c9883a 	add	r4,r4,r3
10004b00:	200a943a 	slli	r5,r4,16
10004b04:	8c400104 	addi	r17,r17,4
10004b08:	2007d43a 	srai	r3,r4,16
10004b0c:	2884b03a 	or	r2,r5,r2
10004b10:	30bfff15 	stw	r2,-4(r6)
10004b14:	e47fed2e 	bgeu	fp,r17,10004acc <__alt_data_end+0xf8004acc>
10004b18:	bdc5883a 	add	r2,r23,r23
10004b1c:	1085883a 	add	r2,r2,r2
10004b20:	9887883a 	add	r3,r19,r2
10004b24:	18800017 	ldw	r2,0(r3)
10004b28:	10000c1e 	bne	r2,zero,10004b5c <quorem+0x1ec>
10004b2c:	18bfff04 	addi	r2,r3,-4
10004b30:	9880082e 	bgeu	r19,r2,10004b54 <quorem+0x1e4>
10004b34:	18ffff17 	ldw	r3,-4(r3)
10004b38:	18000326 	beq	r3,zero,10004b48 <quorem+0x1d8>
10004b3c:	00000506 	br	10004b54 <quorem+0x1e4>
10004b40:	10c00017 	ldw	r3,0(r2)
10004b44:	1800031e 	bne	r3,zero,10004b54 <quorem+0x1e4>
10004b48:	10bfff04 	addi	r2,r2,-4
10004b4c:	bdffffc4 	addi	r23,r23,-1
10004b50:	98bffb36 	bltu	r19,r2,10004b40 <__alt_data_end+0xf8004b40>
10004b54:	d8c00017 	ldw	r3,0(sp)
10004b58:	1dc00415 	stw	r23,16(r3)
10004b5c:	9005883a 	mov	r2,r18
10004b60:	dfc00d17 	ldw	ra,52(sp)
10004b64:	df000c17 	ldw	fp,48(sp)
10004b68:	ddc00b17 	ldw	r23,44(sp)
10004b6c:	dd800a17 	ldw	r22,40(sp)
10004b70:	dd400917 	ldw	r21,36(sp)
10004b74:	dd000817 	ldw	r20,32(sp)
10004b78:	dcc00717 	ldw	r19,28(sp)
10004b7c:	dc800617 	ldw	r18,24(sp)
10004b80:	dc400517 	ldw	r17,20(sp)
10004b84:	dc000417 	ldw	r16,16(sp)
10004b88:	dec00e04 	addi	sp,sp,56
10004b8c:	f800283a 	ret
10004b90:	0005883a 	mov	r2,zero
10004b94:	003ff206 	br	10004b60 <__alt_data_end+0xf8004b60>

10004b98 <_dtoa_r>:
10004b98:	20801017 	ldw	r2,64(r4)
10004b9c:	deffde04 	addi	sp,sp,-136
10004ba0:	df002015 	stw	fp,128(sp)
10004ba4:	dcc01b15 	stw	r19,108(sp)
10004ba8:	dc801a15 	stw	r18,104(sp)
10004bac:	dc401915 	stw	r17,100(sp)
10004bb0:	dc001815 	stw	r16,96(sp)
10004bb4:	dfc02115 	stw	ra,132(sp)
10004bb8:	ddc01f15 	stw	r23,124(sp)
10004bbc:	dd801e15 	stw	r22,120(sp)
10004bc0:	dd401d15 	stw	r21,116(sp)
10004bc4:	dd001c15 	stw	r20,112(sp)
10004bc8:	d9c00315 	stw	r7,12(sp)
10004bcc:	2039883a 	mov	fp,r4
10004bd0:	3023883a 	mov	r17,r6
10004bd4:	2825883a 	mov	r18,r5
10004bd8:	dc002417 	ldw	r16,144(sp)
10004bdc:	3027883a 	mov	r19,r6
10004be0:	10000826 	beq	r2,zero,10004c04 <_dtoa_r+0x6c>
10004be4:	21801117 	ldw	r6,68(r4)
10004be8:	00c00044 	movi	r3,1
10004bec:	100b883a 	mov	r5,r2
10004bf0:	1986983a 	sll	r3,r3,r6
10004bf4:	11800115 	stw	r6,4(r2)
10004bf8:	10c00215 	stw	r3,8(r2)
10004bfc:	00082f80 	call	100082f8 <_Bfree>
10004c00:	e0001015 	stw	zero,64(fp)
10004c04:	88002e16 	blt	r17,zero,10004cc0 <_dtoa_r+0x128>
10004c08:	80000015 	stw	zero,0(r16)
10004c0c:	889ffc2c 	andhi	r2,r17,32752
10004c10:	00dffc34 	movhi	r3,32752
10004c14:	10c01c26 	beq	r2,r3,10004c88 <_dtoa_r+0xf0>
10004c18:	000d883a 	mov	r6,zero
10004c1c:	000f883a 	mov	r7,zero
10004c20:	9009883a 	mov	r4,r18
10004c24:	980b883a 	mov	r5,r19
10004c28:	000dba80 	call	1000dba8 <__eqdf2>
10004c2c:	10002b1e 	bne	r2,zero,10004cdc <_dtoa_r+0x144>
10004c30:	d9c02317 	ldw	r7,140(sp)
10004c34:	00800044 	movi	r2,1
10004c38:	38800015 	stw	r2,0(r7)
10004c3c:	d8802517 	ldw	r2,148(sp)
10004c40:	10019e26 	beq	r2,zero,100052bc <_dtoa_r+0x724>
10004c44:	d8c02517 	ldw	r3,148(sp)
10004c48:	00840074 	movhi	r2,4097
10004c4c:	10886d44 	addi	r2,r2,8629
10004c50:	18800015 	stw	r2,0(r3)
10004c54:	10bfffc4 	addi	r2,r2,-1
10004c58:	dfc02117 	ldw	ra,132(sp)
10004c5c:	df002017 	ldw	fp,128(sp)
10004c60:	ddc01f17 	ldw	r23,124(sp)
10004c64:	dd801e17 	ldw	r22,120(sp)
10004c68:	dd401d17 	ldw	r21,116(sp)
10004c6c:	dd001c17 	ldw	r20,112(sp)
10004c70:	dcc01b17 	ldw	r19,108(sp)
10004c74:	dc801a17 	ldw	r18,104(sp)
10004c78:	dc401917 	ldw	r17,100(sp)
10004c7c:	dc001817 	ldw	r16,96(sp)
10004c80:	dec02204 	addi	sp,sp,136
10004c84:	f800283a 	ret
10004c88:	d8c02317 	ldw	r3,140(sp)
10004c8c:	0089c3c4 	movi	r2,9999
10004c90:	18800015 	stw	r2,0(r3)
10004c94:	90017726 	beq	r18,zero,10005274 <_dtoa_r+0x6dc>
10004c98:	00840074 	movhi	r2,4097
10004c9c:	10887904 	addi	r2,r2,8676
10004ca0:	d9002517 	ldw	r4,148(sp)
10004ca4:	203fec26 	beq	r4,zero,10004c58 <__alt_data_end+0xf8004c58>
10004ca8:	10c000c7 	ldb	r3,3(r2)
10004cac:	1801781e 	bne	r3,zero,10005290 <_dtoa_r+0x6f8>
10004cb0:	10c000c4 	addi	r3,r2,3
10004cb4:	d9802517 	ldw	r6,148(sp)
10004cb8:	30c00015 	stw	r3,0(r6)
10004cbc:	003fe606 	br	10004c58 <__alt_data_end+0xf8004c58>
10004cc0:	04e00034 	movhi	r19,32768
10004cc4:	9cffffc4 	addi	r19,r19,-1
10004cc8:	00800044 	movi	r2,1
10004ccc:	8ce6703a 	and	r19,r17,r19
10004cd0:	80800015 	stw	r2,0(r16)
10004cd4:	9823883a 	mov	r17,r19
10004cd8:	003fcc06 	br	10004c0c <__alt_data_end+0xf8004c0c>
10004cdc:	d8800204 	addi	r2,sp,8
10004ce0:	d8800015 	stw	r2,0(sp)
10004ce4:	d9c00104 	addi	r7,sp,4
10004ce8:	900b883a 	mov	r5,r18
10004cec:	980d883a 	mov	r6,r19
10004cf0:	e009883a 	mov	r4,fp
10004cf4:	8820d53a 	srli	r16,r17,20
10004cf8:	0008fa00 	call	10008fa0 <__d2b>
10004cfc:	d8800915 	stw	r2,36(sp)
10004d00:	8001651e 	bne	r16,zero,10005298 <_dtoa_r+0x700>
10004d04:	dd800217 	ldw	r22,8(sp)
10004d08:	dc000117 	ldw	r16,4(sp)
10004d0c:	00800804 	movi	r2,32
10004d10:	b421883a 	add	r16,r22,r16
10004d14:	80c10c84 	addi	r3,r16,1074
10004d18:	10c2d10e 	bge	r2,r3,10005860 <_dtoa_r+0xcc8>
10004d1c:	00801004 	movi	r2,64
10004d20:	81010484 	addi	r4,r16,1042
10004d24:	10c7c83a 	sub	r3,r2,r3
10004d28:	9108d83a 	srl	r4,r18,r4
10004d2c:	88e2983a 	sll	r17,r17,r3
10004d30:	2448b03a 	or	r4,r4,r17
10004d34:	000f0c40 	call	1000f0c4 <__floatunsidf>
10004d38:	017f8434 	movhi	r5,65040
10004d3c:	01800044 	movi	r6,1
10004d40:	1009883a 	mov	r4,r2
10004d44:	194b883a 	add	r5,r3,r5
10004d48:	843fffc4 	addi	r16,r16,-1
10004d4c:	d9801115 	stw	r6,68(sp)
10004d50:	000d883a 	mov	r6,zero
10004d54:	01cffe34 	movhi	r7,16376
10004d58:	000e66c0 	call	1000e66c <__subdf3>
10004d5c:	0198dbf4 	movhi	r6,25455
10004d60:	01cff4f4 	movhi	r7,16339
10004d64:	3190d844 	addi	r6,r6,17249
10004d68:	39e1e9c4 	addi	r7,r7,-30809
10004d6c:	1009883a 	mov	r4,r2
10004d70:	180b883a 	mov	r5,r3
10004d74:	000de000 	call	1000de00 <__muldf3>
10004d78:	01a2d874 	movhi	r6,35681
10004d7c:	01cff1f4 	movhi	r7,16327
10004d80:	31b22cc4 	addi	r6,r6,-14157
10004d84:	39e28a04 	addi	r7,r7,-30168
10004d88:	180b883a 	mov	r5,r3
10004d8c:	1009883a 	mov	r4,r2
10004d90:	000c92c0 	call	1000c92c <__adddf3>
10004d94:	8009883a 	mov	r4,r16
10004d98:	1029883a 	mov	r20,r2
10004d9c:	1823883a 	mov	r17,r3
10004da0:	000efe80 	call	1000efe8 <__floatsidf>
10004da4:	019427f4 	movhi	r6,20639
10004da8:	01cff4f4 	movhi	r7,16339
10004dac:	319e7ec4 	addi	r6,r6,31227
10004db0:	39d104c4 	addi	r7,r7,17427
10004db4:	1009883a 	mov	r4,r2
10004db8:	180b883a 	mov	r5,r3
10004dbc:	000de000 	call	1000de00 <__muldf3>
10004dc0:	100d883a 	mov	r6,r2
10004dc4:	180f883a 	mov	r7,r3
10004dc8:	a009883a 	mov	r4,r20
10004dcc:	880b883a 	mov	r5,r17
10004dd0:	000c92c0 	call	1000c92c <__adddf3>
10004dd4:	1009883a 	mov	r4,r2
10004dd8:	180b883a 	mov	r5,r3
10004ddc:	1029883a 	mov	r20,r2
10004de0:	1823883a 	mov	r17,r3
10004de4:	000ef680 	call	1000ef68 <__fixdfsi>
10004de8:	000d883a 	mov	r6,zero
10004dec:	000f883a 	mov	r7,zero
10004df0:	a009883a 	mov	r4,r20
10004df4:	880b883a 	mov	r5,r17
10004df8:	d8800515 	stw	r2,20(sp)
10004dfc:	000dd0c0 	call	1000dd0c <__ledf2>
10004e00:	10028716 	blt	r2,zero,10005820 <_dtoa_r+0xc88>
10004e04:	d8c00517 	ldw	r3,20(sp)
10004e08:	00800584 	movi	r2,22
10004e0c:	10c27536 	bltu	r2,r3,100057e4 <_dtoa_r+0xc4c>
10004e10:	180490fa 	slli	r2,r3,3
10004e14:	00c40074 	movhi	r3,4097
10004e18:	18c89504 	addi	r3,r3,8788
10004e1c:	1885883a 	add	r2,r3,r2
10004e20:	11000017 	ldw	r4,0(r2)
10004e24:	11400117 	ldw	r5,4(r2)
10004e28:	900d883a 	mov	r6,r18
10004e2c:	980f883a 	mov	r7,r19
10004e30:	000dc300 	call	1000dc30 <__gedf2>
10004e34:	00828d0e 	bge	zero,r2,1000586c <_dtoa_r+0xcd4>
10004e38:	d9000517 	ldw	r4,20(sp)
10004e3c:	d8000e15 	stw	zero,56(sp)
10004e40:	213fffc4 	addi	r4,r4,-1
10004e44:	d9000515 	stw	r4,20(sp)
10004e48:	b42dc83a 	sub	r22,r22,r16
10004e4c:	b5bfffc4 	addi	r22,r22,-1
10004e50:	b0026f16 	blt	r22,zero,10005810 <_dtoa_r+0xc78>
10004e54:	d8000815 	stw	zero,32(sp)
10004e58:	d9c00517 	ldw	r7,20(sp)
10004e5c:	38026416 	blt	r7,zero,100057f0 <_dtoa_r+0xc58>
10004e60:	b1ed883a 	add	r22,r22,r7
10004e64:	d9c00d15 	stw	r7,52(sp)
10004e68:	d8000a15 	stw	zero,40(sp)
10004e6c:	d9800317 	ldw	r6,12(sp)
10004e70:	00800244 	movi	r2,9
10004e74:	11811436 	bltu	r2,r6,100052c8 <_dtoa_r+0x730>
10004e78:	00800144 	movi	r2,5
10004e7c:	1184e10e 	bge	r2,r6,10006204 <_dtoa_r+0x166c>
10004e80:	31bfff04 	addi	r6,r6,-4
10004e84:	d9800315 	stw	r6,12(sp)
10004e88:	0023883a 	mov	r17,zero
10004e8c:	d9800317 	ldw	r6,12(sp)
10004e90:	008000c4 	movi	r2,3
10004e94:	30836726 	beq	r6,r2,10005c34 <_dtoa_r+0x109c>
10004e98:	1183410e 	bge	r2,r6,10005ba0 <_dtoa_r+0x1008>
10004e9c:	d9c00317 	ldw	r7,12(sp)
10004ea0:	00800104 	movi	r2,4
10004ea4:	38827c26 	beq	r7,r2,10005898 <_dtoa_r+0xd00>
10004ea8:	00800144 	movi	r2,5
10004eac:	3884c41e 	bne	r7,r2,100061c0 <_dtoa_r+0x1628>
10004eb0:	00800044 	movi	r2,1
10004eb4:	d8800b15 	stw	r2,44(sp)
10004eb8:	d8c00517 	ldw	r3,20(sp)
10004ebc:	d9002217 	ldw	r4,136(sp)
10004ec0:	1907883a 	add	r3,r3,r4
10004ec4:	19800044 	addi	r6,r3,1
10004ec8:	d8c00c15 	stw	r3,48(sp)
10004ecc:	d9800615 	stw	r6,24(sp)
10004ed0:	0183a40e 	bge	zero,r6,10005d64 <_dtoa_r+0x11cc>
10004ed4:	d9800617 	ldw	r6,24(sp)
10004ed8:	3021883a 	mov	r16,r6
10004edc:	e0001115 	stw	zero,68(fp)
10004ee0:	008005c4 	movi	r2,23
10004ee4:	1184c92e 	bgeu	r2,r6,1000620c <_dtoa_r+0x1674>
10004ee8:	00c00044 	movi	r3,1
10004eec:	00800104 	movi	r2,4
10004ef0:	1085883a 	add	r2,r2,r2
10004ef4:	11000504 	addi	r4,r2,20
10004ef8:	180b883a 	mov	r5,r3
10004efc:	18c00044 	addi	r3,r3,1
10004f00:	313ffb2e 	bgeu	r6,r4,10004ef0 <__alt_data_end+0xf8004ef0>
10004f04:	e1401115 	stw	r5,68(fp)
10004f08:	e009883a 	mov	r4,fp
10004f0c:	00082500 	call	10008250 <_Balloc>
10004f10:	d8800715 	stw	r2,28(sp)
10004f14:	e0801015 	stw	r2,64(fp)
10004f18:	00800384 	movi	r2,14
10004f1c:	1400f736 	bltu	r2,r16,100052fc <_dtoa_r+0x764>
10004f20:	8800f626 	beq	r17,zero,100052fc <_dtoa_r+0x764>
10004f24:	d9c00517 	ldw	r7,20(sp)
10004f28:	01c39a0e 	bge	zero,r7,10005d94 <_dtoa_r+0x11fc>
10004f2c:	388003cc 	andi	r2,r7,15
10004f30:	100490fa 	slli	r2,r2,3
10004f34:	382bd13a 	srai	r21,r7,4
10004f38:	00c40074 	movhi	r3,4097
10004f3c:	18c89504 	addi	r3,r3,8788
10004f40:	1885883a 	add	r2,r3,r2
10004f44:	a8c0040c 	andi	r3,r21,16
10004f48:	12400017 	ldw	r9,0(r2)
10004f4c:	12000117 	ldw	r8,4(r2)
10004f50:	18037926 	beq	r3,zero,10005d38 <_dtoa_r+0x11a0>
10004f54:	00840074 	movhi	r2,4097
10004f58:	10888b04 	addi	r2,r2,8748
10004f5c:	11800817 	ldw	r6,32(r2)
10004f60:	11c00917 	ldw	r7,36(r2)
10004f64:	9009883a 	mov	r4,r18
10004f68:	980b883a 	mov	r5,r19
10004f6c:	da001715 	stw	r8,92(sp)
10004f70:	da401615 	stw	r9,88(sp)
10004f74:	000d1d80 	call	1000d1d8 <__divdf3>
10004f78:	da001717 	ldw	r8,92(sp)
10004f7c:	da401617 	ldw	r9,88(sp)
10004f80:	ad4003cc 	andi	r21,r21,15
10004f84:	040000c4 	movi	r16,3
10004f88:	1023883a 	mov	r17,r2
10004f8c:	1829883a 	mov	r20,r3
10004f90:	a8001126 	beq	r21,zero,10004fd8 <_dtoa_r+0x440>
10004f94:	05c40074 	movhi	r23,4097
10004f98:	bdc88b04 	addi	r23,r23,8748
10004f9c:	4805883a 	mov	r2,r9
10004fa0:	4007883a 	mov	r3,r8
10004fa4:	a980004c 	andi	r6,r21,1
10004fa8:	1009883a 	mov	r4,r2
10004fac:	a82bd07a 	srai	r21,r21,1
10004fb0:	180b883a 	mov	r5,r3
10004fb4:	30000426 	beq	r6,zero,10004fc8 <_dtoa_r+0x430>
10004fb8:	b9800017 	ldw	r6,0(r23)
10004fbc:	b9c00117 	ldw	r7,4(r23)
10004fc0:	84000044 	addi	r16,r16,1
10004fc4:	000de000 	call	1000de00 <__muldf3>
10004fc8:	bdc00204 	addi	r23,r23,8
10004fcc:	a83ff51e 	bne	r21,zero,10004fa4 <__alt_data_end+0xf8004fa4>
10004fd0:	1013883a 	mov	r9,r2
10004fd4:	1811883a 	mov	r8,r3
10004fd8:	480d883a 	mov	r6,r9
10004fdc:	400f883a 	mov	r7,r8
10004fe0:	8809883a 	mov	r4,r17
10004fe4:	a00b883a 	mov	r5,r20
10004fe8:	000d1d80 	call	1000d1d8 <__divdf3>
10004fec:	d8800f15 	stw	r2,60(sp)
10004ff0:	d8c01015 	stw	r3,64(sp)
10004ff4:	d8c00e17 	ldw	r3,56(sp)
10004ff8:	18000626 	beq	r3,zero,10005014 <_dtoa_r+0x47c>
10004ffc:	d9000f17 	ldw	r4,60(sp)
10005000:	d9401017 	ldw	r5,64(sp)
10005004:	000d883a 	mov	r6,zero
10005008:	01cffc34 	movhi	r7,16368
1000500c:	000dd0c0 	call	1000dd0c <__ledf2>
10005010:	10040b16 	blt	r2,zero,10006040 <_dtoa_r+0x14a8>
10005014:	8009883a 	mov	r4,r16
10005018:	000efe80 	call	1000efe8 <__floatsidf>
1000501c:	d9800f17 	ldw	r6,60(sp)
10005020:	d9c01017 	ldw	r7,64(sp)
10005024:	1009883a 	mov	r4,r2
10005028:	180b883a 	mov	r5,r3
1000502c:	000de000 	call	1000de00 <__muldf3>
10005030:	000d883a 	mov	r6,zero
10005034:	01d00734 	movhi	r7,16412
10005038:	1009883a 	mov	r4,r2
1000503c:	180b883a 	mov	r5,r3
10005040:	000c92c0 	call	1000c92c <__adddf3>
10005044:	1021883a 	mov	r16,r2
10005048:	d8800617 	ldw	r2,24(sp)
1000504c:	047f3034 	movhi	r17,64704
10005050:	1c63883a 	add	r17,r3,r17
10005054:	10031826 	beq	r2,zero,10005cb8 <_dtoa_r+0x1120>
10005058:	d8c00517 	ldw	r3,20(sp)
1000505c:	db000617 	ldw	r12,24(sp)
10005060:	d8c01315 	stw	r3,76(sp)
10005064:	d9000b17 	ldw	r4,44(sp)
10005068:	20038f26 	beq	r4,zero,10005ea8 <_dtoa_r+0x1310>
1000506c:	60bfffc4 	addi	r2,r12,-1
10005070:	100490fa 	slli	r2,r2,3
10005074:	00c40074 	movhi	r3,4097
10005078:	18c89504 	addi	r3,r3,8788
1000507c:	1885883a 	add	r2,r3,r2
10005080:	11800017 	ldw	r6,0(r2)
10005084:	11c00117 	ldw	r7,4(r2)
10005088:	d8800717 	ldw	r2,28(sp)
1000508c:	0009883a 	mov	r4,zero
10005090:	014ff834 	movhi	r5,16352
10005094:	db001615 	stw	r12,88(sp)
10005098:	15c00044 	addi	r23,r2,1
1000509c:	000d1d80 	call	1000d1d8 <__divdf3>
100050a0:	800d883a 	mov	r6,r16
100050a4:	880f883a 	mov	r7,r17
100050a8:	1009883a 	mov	r4,r2
100050ac:	180b883a 	mov	r5,r3
100050b0:	000e66c0 	call	1000e66c <__subdf3>
100050b4:	d9401017 	ldw	r5,64(sp)
100050b8:	d9000f17 	ldw	r4,60(sp)
100050bc:	102b883a 	mov	r21,r2
100050c0:	d8c01215 	stw	r3,72(sp)
100050c4:	000ef680 	call	1000ef68 <__fixdfsi>
100050c8:	1009883a 	mov	r4,r2
100050cc:	1029883a 	mov	r20,r2
100050d0:	000efe80 	call	1000efe8 <__floatsidf>
100050d4:	d9000f17 	ldw	r4,60(sp)
100050d8:	d9401017 	ldw	r5,64(sp)
100050dc:	100d883a 	mov	r6,r2
100050e0:	180f883a 	mov	r7,r3
100050e4:	000e66c0 	call	1000e66c <__subdf3>
100050e8:	1823883a 	mov	r17,r3
100050ec:	d8c00717 	ldw	r3,28(sp)
100050f0:	d9401217 	ldw	r5,72(sp)
100050f4:	a2000c04 	addi	r8,r20,48
100050f8:	1021883a 	mov	r16,r2
100050fc:	1a000005 	stb	r8,0(r3)
10005100:	800d883a 	mov	r6,r16
10005104:	880f883a 	mov	r7,r17
10005108:	a809883a 	mov	r4,r21
1000510c:	4029883a 	mov	r20,r8
10005110:	000dc300 	call	1000dc30 <__gedf2>
10005114:	00841d16 	blt	zero,r2,1000618c <_dtoa_r+0x15f4>
10005118:	800d883a 	mov	r6,r16
1000511c:	880f883a 	mov	r7,r17
10005120:	0009883a 	mov	r4,zero
10005124:	014ffc34 	movhi	r5,16368
10005128:	000e66c0 	call	1000e66c <__subdf3>
1000512c:	d9401217 	ldw	r5,72(sp)
10005130:	100d883a 	mov	r6,r2
10005134:	180f883a 	mov	r7,r3
10005138:	a809883a 	mov	r4,r21
1000513c:	000dc300 	call	1000dc30 <__gedf2>
10005140:	db001617 	ldw	r12,88(sp)
10005144:	00840e16 	blt	zero,r2,10006180 <_dtoa_r+0x15e8>
10005148:	00800044 	movi	r2,1
1000514c:	13006b0e 	bge	r2,r12,100052fc <_dtoa_r+0x764>
10005150:	d9000717 	ldw	r4,28(sp)
10005154:	dd800f15 	stw	r22,60(sp)
10005158:	dcc01015 	stw	r19,64(sp)
1000515c:	2319883a 	add	r12,r4,r12
10005160:	dcc01217 	ldw	r19,72(sp)
10005164:	602d883a 	mov	r22,r12
10005168:	dc801215 	stw	r18,72(sp)
1000516c:	b825883a 	mov	r18,r23
10005170:	00000906 	br	10005198 <_dtoa_r+0x600>
10005174:	000e66c0 	call	1000e66c <__subdf3>
10005178:	a80d883a 	mov	r6,r21
1000517c:	980f883a 	mov	r7,r19
10005180:	1009883a 	mov	r4,r2
10005184:	180b883a 	mov	r5,r3
10005188:	000dd0c0 	call	1000dd0c <__ledf2>
1000518c:	1003e816 	blt	r2,zero,10006130 <_dtoa_r+0x1598>
10005190:	b825883a 	mov	r18,r23
10005194:	bd83e926 	beq	r23,r22,1000613c <_dtoa_r+0x15a4>
10005198:	a809883a 	mov	r4,r21
1000519c:	980b883a 	mov	r5,r19
100051a0:	000d883a 	mov	r6,zero
100051a4:	01d00934 	movhi	r7,16420
100051a8:	000de000 	call	1000de00 <__muldf3>
100051ac:	000d883a 	mov	r6,zero
100051b0:	01d00934 	movhi	r7,16420
100051b4:	8009883a 	mov	r4,r16
100051b8:	880b883a 	mov	r5,r17
100051bc:	102b883a 	mov	r21,r2
100051c0:	1827883a 	mov	r19,r3
100051c4:	000de000 	call	1000de00 <__muldf3>
100051c8:	180b883a 	mov	r5,r3
100051cc:	1009883a 	mov	r4,r2
100051d0:	1821883a 	mov	r16,r3
100051d4:	1023883a 	mov	r17,r2
100051d8:	000ef680 	call	1000ef68 <__fixdfsi>
100051dc:	1009883a 	mov	r4,r2
100051e0:	1029883a 	mov	r20,r2
100051e4:	000efe80 	call	1000efe8 <__floatsidf>
100051e8:	8809883a 	mov	r4,r17
100051ec:	800b883a 	mov	r5,r16
100051f0:	100d883a 	mov	r6,r2
100051f4:	180f883a 	mov	r7,r3
100051f8:	000e66c0 	call	1000e66c <__subdf3>
100051fc:	a5000c04 	addi	r20,r20,48
10005200:	a80d883a 	mov	r6,r21
10005204:	980f883a 	mov	r7,r19
10005208:	1009883a 	mov	r4,r2
1000520c:	180b883a 	mov	r5,r3
10005210:	95000005 	stb	r20,0(r18)
10005214:	1021883a 	mov	r16,r2
10005218:	1823883a 	mov	r17,r3
1000521c:	000dd0c0 	call	1000dd0c <__ledf2>
10005220:	bdc00044 	addi	r23,r23,1
10005224:	800d883a 	mov	r6,r16
10005228:	880f883a 	mov	r7,r17
1000522c:	0009883a 	mov	r4,zero
10005230:	014ffc34 	movhi	r5,16368
10005234:	103fcf0e 	bge	r2,zero,10005174 <__alt_data_end+0xf8005174>
10005238:	d8c01317 	ldw	r3,76(sp)
1000523c:	d8c00515 	stw	r3,20(sp)
10005240:	d9400917 	ldw	r5,36(sp)
10005244:	e009883a 	mov	r4,fp
10005248:	00082f80 	call	100082f8 <_Bfree>
1000524c:	d9000517 	ldw	r4,20(sp)
10005250:	d9802317 	ldw	r6,140(sp)
10005254:	d9c02517 	ldw	r7,148(sp)
10005258:	b8000005 	stb	zero,0(r23)
1000525c:	20800044 	addi	r2,r4,1
10005260:	30800015 	stw	r2,0(r6)
10005264:	3802aa26 	beq	r7,zero,10005d10 <_dtoa_r+0x1178>
10005268:	3dc00015 	stw	r23,0(r7)
1000526c:	d8800717 	ldw	r2,28(sp)
10005270:	003e7906 	br	10004c58 <__alt_data_end+0xf8004c58>
10005274:	00800434 	movhi	r2,16
10005278:	10bfffc4 	addi	r2,r2,-1
1000527c:	88a2703a 	and	r17,r17,r2
10005280:	883e851e 	bne	r17,zero,10004c98 <__alt_data_end+0xf8004c98>
10005284:	00840074 	movhi	r2,4097
10005288:	10887604 	addi	r2,r2,8664
1000528c:	003e8406 	br	10004ca0 <__alt_data_end+0xf8004ca0>
10005290:	10c00204 	addi	r3,r2,8
10005294:	003e8706 	br	10004cb4 <__alt_data_end+0xf8004cb4>
10005298:	01400434 	movhi	r5,16
1000529c:	297fffc4 	addi	r5,r5,-1
100052a0:	994a703a 	and	r5,r19,r5
100052a4:	9009883a 	mov	r4,r18
100052a8:	843f0044 	addi	r16,r16,-1023
100052ac:	294ffc34 	orhi	r5,r5,16368
100052b0:	dd800217 	ldw	r22,8(sp)
100052b4:	d8001115 	stw	zero,68(sp)
100052b8:	003ea506 	br	10004d50 <__alt_data_end+0xf8004d50>
100052bc:	00840074 	movhi	r2,4097
100052c0:	10886d04 	addi	r2,r2,8628
100052c4:	003e6406 	br	10004c58 <__alt_data_end+0xf8004c58>
100052c8:	e0001115 	stw	zero,68(fp)
100052cc:	000b883a 	mov	r5,zero
100052d0:	e009883a 	mov	r4,fp
100052d4:	00082500 	call	10008250 <_Balloc>
100052d8:	01bfffc4 	movi	r6,-1
100052dc:	01c00044 	movi	r7,1
100052e0:	d8800715 	stw	r2,28(sp)
100052e4:	d9800c15 	stw	r6,48(sp)
100052e8:	e0801015 	stw	r2,64(fp)
100052ec:	d8000315 	stw	zero,12(sp)
100052f0:	d9c00b15 	stw	r7,44(sp)
100052f4:	d9800615 	stw	r6,24(sp)
100052f8:	d8002215 	stw	zero,136(sp)
100052fc:	d8800117 	ldw	r2,4(sp)
10005300:	10008916 	blt	r2,zero,10005528 <_dtoa_r+0x990>
10005304:	d9000517 	ldw	r4,20(sp)
10005308:	00c00384 	movi	r3,14
1000530c:	19008616 	blt	r3,r4,10005528 <_dtoa_r+0x990>
10005310:	200490fa 	slli	r2,r4,3
10005314:	00c40074 	movhi	r3,4097
10005318:	d9802217 	ldw	r6,136(sp)
1000531c:	18c89504 	addi	r3,r3,8788
10005320:	1885883a 	add	r2,r3,r2
10005324:	14000017 	ldw	r16,0(r2)
10005328:	14400117 	ldw	r17,4(r2)
1000532c:	30016316 	blt	r6,zero,100058bc <_dtoa_r+0xd24>
10005330:	800d883a 	mov	r6,r16
10005334:	880f883a 	mov	r7,r17
10005338:	9009883a 	mov	r4,r18
1000533c:	980b883a 	mov	r5,r19
10005340:	000d1d80 	call	1000d1d8 <__divdf3>
10005344:	180b883a 	mov	r5,r3
10005348:	1009883a 	mov	r4,r2
1000534c:	000ef680 	call	1000ef68 <__fixdfsi>
10005350:	1009883a 	mov	r4,r2
10005354:	102b883a 	mov	r21,r2
10005358:	000efe80 	call	1000efe8 <__floatsidf>
1000535c:	800d883a 	mov	r6,r16
10005360:	880f883a 	mov	r7,r17
10005364:	1009883a 	mov	r4,r2
10005368:	180b883a 	mov	r5,r3
1000536c:	000de000 	call	1000de00 <__muldf3>
10005370:	100d883a 	mov	r6,r2
10005374:	180f883a 	mov	r7,r3
10005378:	9009883a 	mov	r4,r18
1000537c:	980b883a 	mov	r5,r19
10005380:	000e66c0 	call	1000e66c <__subdf3>
10005384:	d9c00717 	ldw	r7,28(sp)
10005388:	1009883a 	mov	r4,r2
1000538c:	a8800c04 	addi	r2,r21,48
10005390:	38800005 	stb	r2,0(r7)
10005394:	3dc00044 	addi	r23,r7,1
10005398:	d9c00617 	ldw	r7,24(sp)
1000539c:	01800044 	movi	r6,1
100053a0:	180b883a 	mov	r5,r3
100053a4:	2005883a 	mov	r2,r4
100053a8:	39803826 	beq	r7,r6,1000548c <_dtoa_r+0x8f4>
100053ac:	000d883a 	mov	r6,zero
100053b0:	01d00934 	movhi	r7,16420
100053b4:	000de000 	call	1000de00 <__muldf3>
100053b8:	000d883a 	mov	r6,zero
100053bc:	000f883a 	mov	r7,zero
100053c0:	1009883a 	mov	r4,r2
100053c4:	180b883a 	mov	r5,r3
100053c8:	1025883a 	mov	r18,r2
100053cc:	1827883a 	mov	r19,r3
100053d0:	000dba80 	call	1000dba8 <__eqdf2>
100053d4:	103f9a26 	beq	r2,zero,10005240 <__alt_data_end+0xf8005240>
100053d8:	d9c00617 	ldw	r7,24(sp)
100053dc:	d8c00717 	ldw	r3,28(sp)
100053e0:	b829883a 	mov	r20,r23
100053e4:	38bfffc4 	addi	r2,r7,-1
100053e8:	18ad883a 	add	r22,r3,r2
100053ec:	00000a06 	br	10005418 <_dtoa_r+0x880>
100053f0:	000de000 	call	1000de00 <__muldf3>
100053f4:	000d883a 	mov	r6,zero
100053f8:	000f883a 	mov	r7,zero
100053fc:	1009883a 	mov	r4,r2
10005400:	180b883a 	mov	r5,r3
10005404:	1025883a 	mov	r18,r2
10005408:	1827883a 	mov	r19,r3
1000540c:	b829883a 	mov	r20,r23
10005410:	000dba80 	call	1000dba8 <__eqdf2>
10005414:	103f8a26 	beq	r2,zero,10005240 <__alt_data_end+0xf8005240>
10005418:	800d883a 	mov	r6,r16
1000541c:	880f883a 	mov	r7,r17
10005420:	9009883a 	mov	r4,r18
10005424:	980b883a 	mov	r5,r19
10005428:	000d1d80 	call	1000d1d8 <__divdf3>
1000542c:	180b883a 	mov	r5,r3
10005430:	1009883a 	mov	r4,r2
10005434:	000ef680 	call	1000ef68 <__fixdfsi>
10005438:	1009883a 	mov	r4,r2
1000543c:	102b883a 	mov	r21,r2
10005440:	000efe80 	call	1000efe8 <__floatsidf>
10005444:	800d883a 	mov	r6,r16
10005448:	880f883a 	mov	r7,r17
1000544c:	1009883a 	mov	r4,r2
10005450:	180b883a 	mov	r5,r3
10005454:	000de000 	call	1000de00 <__muldf3>
10005458:	100d883a 	mov	r6,r2
1000545c:	180f883a 	mov	r7,r3
10005460:	9009883a 	mov	r4,r18
10005464:	980b883a 	mov	r5,r19
10005468:	000e66c0 	call	1000e66c <__subdf3>
1000546c:	aa000c04 	addi	r8,r21,48
10005470:	a2000005 	stb	r8,0(r20)
10005474:	000d883a 	mov	r6,zero
10005478:	01d00934 	movhi	r7,16420
1000547c:	1009883a 	mov	r4,r2
10005480:	180b883a 	mov	r5,r3
10005484:	a5c00044 	addi	r23,r20,1
10005488:	b53fd91e 	bne	r22,r20,100053f0 <__alt_data_end+0xf80053f0>
1000548c:	100d883a 	mov	r6,r2
10005490:	180f883a 	mov	r7,r3
10005494:	1009883a 	mov	r4,r2
10005498:	180b883a 	mov	r5,r3
1000549c:	000c92c0 	call	1000c92c <__adddf3>
100054a0:	100d883a 	mov	r6,r2
100054a4:	180f883a 	mov	r7,r3
100054a8:	8009883a 	mov	r4,r16
100054ac:	880b883a 	mov	r5,r17
100054b0:	1027883a 	mov	r19,r2
100054b4:	1825883a 	mov	r18,r3
100054b8:	000dd0c0 	call	1000dd0c <__ledf2>
100054bc:	10000816 	blt	r2,zero,100054e0 <_dtoa_r+0x948>
100054c0:	980d883a 	mov	r6,r19
100054c4:	900f883a 	mov	r7,r18
100054c8:	8009883a 	mov	r4,r16
100054cc:	880b883a 	mov	r5,r17
100054d0:	000dba80 	call	1000dba8 <__eqdf2>
100054d4:	103f5a1e 	bne	r2,zero,10005240 <__alt_data_end+0xf8005240>
100054d8:	ad40004c 	andi	r21,r21,1
100054dc:	a83f5826 	beq	r21,zero,10005240 <__alt_data_end+0xf8005240>
100054e0:	bd3fffc3 	ldbu	r20,-1(r23)
100054e4:	b8bfffc4 	addi	r2,r23,-1
100054e8:	1007883a 	mov	r3,r2
100054ec:	01400e44 	movi	r5,57
100054f0:	d9800717 	ldw	r6,28(sp)
100054f4:	00000506 	br	1000550c <_dtoa_r+0x974>
100054f8:	18ffffc4 	addi	r3,r3,-1
100054fc:	11824726 	beq	r2,r6,10005e1c <_dtoa_r+0x1284>
10005500:	1d000003 	ldbu	r20,0(r3)
10005504:	102f883a 	mov	r23,r2
10005508:	10bfffc4 	addi	r2,r2,-1
1000550c:	a1003fcc 	andi	r4,r20,255
10005510:	2100201c 	xori	r4,r4,128
10005514:	213fe004 	addi	r4,r4,-128
10005518:	217ff726 	beq	r4,r5,100054f8 <__alt_data_end+0xf80054f8>
1000551c:	a2000044 	addi	r8,r20,1
10005520:	12000005 	stb	r8,0(r2)
10005524:	003f4606 	br	10005240 <__alt_data_end+0xf8005240>
10005528:	d9000b17 	ldw	r4,44(sp)
1000552c:	2000c826 	beq	r4,zero,10005850 <_dtoa_r+0xcb8>
10005530:	d9800317 	ldw	r6,12(sp)
10005534:	00c00044 	movi	r3,1
10005538:	1980f90e 	bge	r3,r6,10005920 <_dtoa_r+0xd88>
1000553c:	d8800617 	ldw	r2,24(sp)
10005540:	d8c00a17 	ldw	r3,40(sp)
10005544:	157fffc4 	addi	r21,r2,-1
10005548:	1d41f316 	blt	r3,r21,10005d18 <_dtoa_r+0x1180>
1000554c:	1d6bc83a 	sub	r21,r3,r21
10005550:	d9c00617 	ldw	r7,24(sp)
10005554:	3802aa16 	blt	r7,zero,10006000 <_dtoa_r+0x1468>
10005558:	dd000817 	ldw	r20,32(sp)
1000555c:	d8800617 	ldw	r2,24(sp)
10005560:	d8c00817 	ldw	r3,32(sp)
10005564:	01400044 	movi	r5,1
10005568:	e009883a 	mov	r4,fp
1000556c:	1887883a 	add	r3,r3,r2
10005570:	d8c00815 	stw	r3,32(sp)
10005574:	b0ad883a 	add	r22,r22,r2
10005578:	00086840 	call	10008684 <__i2b>
1000557c:	1023883a 	mov	r17,r2
10005580:	a0000826 	beq	r20,zero,100055a4 <_dtoa_r+0xa0c>
10005584:	0580070e 	bge	zero,r22,100055a4 <_dtoa_r+0xa0c>
10005588:	a005883a 	mov	r2,r20
1000558c:	b500b916 	blt	r22,r20,10005874 <_dtoa_r+0xcdc>
10005590:	d9000817 	ldw	r4,32(sp)
10005594:	a0a9c83a 	sub	r20,r20,r2
10005598:	b0adc83a 	sub	r22,r22,r2
1000559c:	2089c83a 	sub	r4,r4,r2
100055a0:	d9000815 	stw	r4,32(sp)
100055a4:	d9800a17 	ldw	r6,40(sp)
100055a8:	0181810e 	bge	zero,r6,10005bb0 <_dtoa_r+0x1018>
100055ac:	d9c00b17 	ldw	r7,44(sp)
100055b0:	3800b326 	beq	r7,zero,10005880 <_dtoa_r+0xce8>
100055b4:	a800b226 	beq	r21,zero,10005880 <_dtoa_r+0xce8>
100055b8:	880b883a 	mov	r5,r17
100055bc:	a80d883a 	mov	r6,r21
100055c0:	e009883a 	mov	r4,fp
100055c4:	000894c0 	call	1000894c <__pow5mult>
100055c8:	d9800917 	ldw	r6,36(sp)
100055cc:	100b883a 	mov	r5,r2
100055d0:	e009883a 	mov	r4,fp
100055d4:	1023883a 	mov	r17,r2
100055d8:	00086c00 	call	100086c0 <__multiply>
100055dc:	1021883a 	mov	r16,r2
100055e0:	d8800a17 	ldw	r2,40(sp)
100055e4:	d9400917 	ldw	r5,36(sp)
100055e8:	e009883a 	mov	r4,fp
100055ec:	1545c83a 	sub	r2,r2,r21
100055f0:	d8800a15 	stw	r2,40(sp)
100055f4:	00082f80 	call	100082f8 <_Bfree>
100055f8:	d8c00a17 	ldw	r3,40(sp)
100055fc:	18009f1e 	bne	r3,zero,1000587c <_dtoa_r+0xce4>
10005600:	05c00044 	movi	r23,1
10005604:	e009883a 	mov	r4,fp
10005608:	b80b883a 	mov	r5,r23
1000560c:	00086840 	call	10008684 <__i2b>
10005610:	d9000d17 	ldw	r4,52(sp)
10005614:	102b883a 	mov	r21,r2
10005618:	2000ce26 	beq	r4,zero,10005954 <_dtoa_r+0xdbc>
1000561c:	200d883a 	mov	r6,r4
10005620:	100b883a 	mov	r5,r2
10005624:	e009883a 	mov	r4,fp
10005628:	000894c0 	call	1000894c <__pow5mult>
1000562c:	d9800317 	ldw	r6,12(sp)
10005630:	102b883a 	mov	r21,r2
10005634:	b981810e 	bge	r23,r6,10005c3c <_dtoa_r+0x10a4>
10005638:	0027883a 	mov	r19,zero
1000563c:	a8800417 	ldw	r2,16(r21)
10005640:	05c00804 	movi	r23,32
10005644:	10800104 	addi	r2,r2,4
10005648:	1085883a 	add	r2,r2,r2
1000564c:	1085883a 	add	r2,r2,r2
10005650:	a885883a 	add	r2,r21,r2
10005654:	11000017 	ldw	r4,0(r2)
10005658:	000856c0 	call	1000856c <__hi0bits>
1000565c:	b885c83a 	sub	r2,r23,r2
10005660:	1585883a 	add	r2,r2,r22
10005664:	108007cc 	andi	r2,r2,31
10005668:	1000b326 	beq	r2,zero,10005938 <_dtoa_r+0xda0>
1000566c:	00c00804 	movi	r3,32
10005670:	1887c83a 	sub	r3,r3,r2
10005674:	01000104 	movi	r4,4
10005678:	20c2cd0e 	bge	r4,r3,100061b0 <_dtoa_r+0x1618>
1000567c:	00c00704 	movi	r3,28
10005680:	1885c83a 	sub	r2,r3,r2
10005684:	d8c00817 	ldw	r3,32(sp)
10005688:	a0a9883a 	add	r20,r20,r2
1000568c:	b0ad883a 	add	r22,r22,r2
10005690:	1887883a 	add	r3,r3,r2
10005694:	d8c00815 	stw	r3,32(sp)
10005698:	d9800817 	ldw	r6,32(sp)
1000569c:	0180040e 	bge	zero,r6,100056b0 <_dtoa_r+0xb18>
100056a0:	800b883a 	mov	r5,r16
100056a4:	e009883a 	mov	r4,fp
100056a8:	0008a8c0 	call	10008a8c <__lshift>
100056ac:	1021883a 	mov	r16,r2
100056b0:	0580050e 	bge	zero,r22,100056c8 <_dtoa_r+0xb30>
100056b4:	a80b883a 	mov	r5,r21
100056b8:	b00d883a 	mov	r6,r22
100056bc:	e009883a 	mov	r4,fp
100056c0:	0008a8c0 	call	10008a8c <__lshift>
100056c4:	102b883a 	mov	r21,r2
100056c8:	d9c00e17 	ldw	r7,56(sp)
100056cc:	3801211e 	bne	r7,zero,10005b54 <_dtoa_r+0xfbc>
100056d0:	d9800617 	ldw	r6,24(sp)
100056d4:	0181380e 	bge	zero,r6,10005bb8 <_dtoa_r+0x1020>
100056d8:	d8c00b17 	ldw	r3,44(sp)
100056dc:	1800ab1e 	bne	r3,zero,1000598c <_dtoa_r+0xdf4>
100056e0:	dc800717 	ldw	r18,28(sp)
100056e4:	dcc00617 	ldw	r19,24(sp)
100056e8:	9029883a 	mov	r20,r18
100056ec:	00000206 	br	100056f8 <_dtoa_r+0xb60>
100056f0:	00083200 	call	10008320 <__multadd>
100056f4:	1021883a 	mov	r16,r2
100056f8:	a80b883a 	mov	r5,r21
100056fc:	8009883a 	mov	r4,r16
10005700:	00049700 	call	10004970 <quorem>
10005704:	10800c04 	addi	r2,r2,48
10005708:	90800005 	stb	r2,0(r18)
1000570c:	94800044 	addi	r18,r18,1
10005710:	9507c83a 	sub	r3,r18,r20
10005714:	000f883a 	mov	r7,zero
10005718:	01800284 	movi	r6,10
1000571c:	800b883a 	mov	r5,r16
10005720:	e009883a 	mov	r4,fp
10005724:	1cfff216 	blt	r3,r19,100056f0 <__alt_data_end+0xf80056f0>
10005728:	1011883a 	mov	r8,r2
1000572c:	d8800617 	ldw	r2,24(sp)
10005730:	0082370e 	bge	zero,r2,10006010 <_dtoa_r+0x1478>
10005734:	d9000717 	ldw	r4,28(sp)
10005738:	0025883a 	mov	r18,zero
1000573c:	20af883a 	add	r23,r4,r2
10005740:	01800044 	movi	r6,1
10005744:	800b883a 	mov	r5,r16
10005748:	e009883a 	mov	r4,fp
1000574c:	da001715 	stw	r8,92(sp)
10005750:	0008a8c0 	call	10008a8c <__lshift>
10005754:	a80b883a 	mov	r5,r21
10005758:	1009883a 	mov	r4,r2
1000575c:	d8800915 	stw	r2,36(sp)
10005760:	0008bd40 	call	10008bd4 <__mcmp>
10005764:	da001717 	ldw	r8,92(sp)
10005768:	0081800e 	bge	zero,r2,10005d6c <_dtoa_r+0x11d4>
1000576c:	b93fffc3 	ldbu	r4,-1(r23)
10005770:	b8bfffc4 	addi	r2,r23,-1
10005774:	1007883a 	mov	r3,r2
10005778:	01800e44 	movi	r6,57
1000577c:	d9c00717 	ldw	r7,28(sp)
10005780:	00000506 	br	10005798 <_dtoa_r+0xc00>
10005784:	18ffffc4 	addi	r3,r3,-1
10005788:	11c12326 	beq	r2,r7,10005c18 <_dtoa_r+0x1080>
1000578c:	19000003 	ldbu	r4,0(r3)
10005790:	102f883a 	mov	r23,r2
10005794:	10bfffc4 	addi	r2,r2,-1
10005798:	21403fcc 	andi	r5,r4,255
1000579c:	2940201c 	xori	r5,r5,128
100057a0:	297fe004 	addi	r5,r5,-128
100057a4:	29bff726 	beq	r5,r6,10005784 <__alt_data_end+0xf8005784>
100057a8:	21000044 	addi	r4,r4,1
100057ac:	11000005 	stb	r4,0(r2)
100057b0:	a80b883a 	mov	r5,r21
100057b4:	e009883a 	mov	r4,fp
100057b8:	00082f80 	call	100082f8 <_Bfree>
100057bc:	883ea026 	beq	r17,zero,10005240 <__alt_data_end+0xf8005240>
100057c0:	90000426 	beq	r18,zero,100057d4 <_dtoa_r+0xc3c>
100057c4:	94400326 	beq	r18,r17,100057d4 <_dtoa_r+0xc3c>
100057c8:	900b883a 	mov	r5,r18
100057cc:	e009883a 	mov	r4,fp
100057d0:	00082f80 	call	100082f8 <_Bfree>
100057d4:	880b883a 	mov	r5,r17
100057d8:	e009883a 	mov	r4,fp
100057dc:	00082f80 	call	100082f8 <_Bfree>
100057e0:	003e9706 	br	10005240 <__alt_data_end+0xf8005240>
100057e4:	01800044 	movi	r6,1
100057e8:	d9800e15 	stw	r6,56(sp)
100057ec:	003d9606 	br	10004e48 <__alt_data_end+0xf8004e48>
100057f0:	d8800817 	ldw	r2,32(sp)
100057f4:	d8c00517 	ldw	r3,20(sp)
100057f8:	d8000d15 	stw	zero,52(sp)
100057fc:	10c5c83a 	sub	r2,r2,r3
10005800:	00c9c83a 	sub	r4,zero,r3
10005804:	d8800815 	stw	r2,32(sp)
10005808:	d9000a15 	stw	r4,40(sp)
1000580c:	003d9706 	br	10004e6c <__alt_data_end+0xf8004e6c>
10005810:	05adc83a 	sub	r22,zero,r22
10005814:	dd800815 	stw	r22,32(sp)
10005818:	002d883a 	mov	r22,zero
1000581c:	003d8e06 	br	10004e58 <__alt_data_end+0xf8004e58>
10005820:	d9000517 	ldw	r4,20(sp)
10005824:	000efe80 	call	1000efe8 <__floatsidf>
10005828:	100d883a 	mov	r6,r2
1000582c:	180f883a 	mov	r7,r3
10005830:	a009883a 	mov	r4,r20
10005834:	880b883a 	mov	r5,r17
10005838:	000dba80 	call	1000dba8 <__eqdf2>
1000583c:	103d7126 	beq	r2,zero,10004e04 <__alt_data_end+0xf8004e04>
10005840:	d9c00517 	ldw	r7,20(sp)
10005844:	39ffffc4 	addi	r7,r7,-1
10005848:	d9c00515 	stw	r7,20(sp)
1000584c:	003d6d06 	br	10004e04 <__alt_data_end+0xf8004e04>
10005850:	dd400a17 	ldw	r21,40(sp)
10005854:	dd000817 	ldw	r20,32(sp)
10005858:	0023883a 	mov	r17,zero
1000585c:	003f4806 	br	10005580 <__alt_data_end+0xf8005580>
10005860:	10e3c83a 	sub	r17,r2,r3
10005864:	9448983a 	sll	r4,r18,r17
10005868:	003d3206 	br	10004d34 <__alt_data_end+0xf8004d34>
1000586c:	d8000e15 	stw	zero,56(sp)
10005870:	003d7506 	br	10004e48 <__alt_data_end+0xf8004e48>
10005874:	b005883a 	mov	r2,r22
10005878:	003f4506 	br	10005590 <__alt_data_end+0xf8005590>
1000587c:	dc000915 	stw	r16,36(sp)
10005880:	d9800a17 	ldw	r6,40(sp)
10005884:	d9400917 	ldw	r5,36(sp)
10005888:	e009883a 	mov	r4,fp
1000588c:	000894c0 	call	1000894c <__pow5mult>
10005890:	1021883a 	mov	r16,r2
10005894:	003f5a06 	br	10005600 <__alt_data_end+0xf8005600>
10005898:	01c00044 	movi	r7,1
1000589c:	d9c00b15 	stw	r7,44(sp)
100058a0:	d8802217 	ldw	r2,136(sp)
100058a4:	0081280e 	bge	zero,r2,10005d48 <_dtoa_r+0x11b0>
100058a8:	100d883a 	mov	r6,r2
100058ac:	1021883a 	mov	r16,r2
100058b0:	d8800c15 	stw	r2,48(sp)
100058b4:	d8800615 	stw	r2,24(sp)
100058b8:	003d8806 	br	10004edc <__alt_data_end+0xf8004edc>
100058bc:	d8800617 	ldw	r2,24(sp)
100058c0:	00be9b16 	blt	zero,r2,10005330 <__alt_data_end+0xf8005330>
100058c4:	10010f1e 	bne	r2,zero,10005d04 <_dtoa_r+0x116c>
100058c8:	880b883a 	mov	r5,r17
100058cc:	000d883a 	mov	r6,zero
100058d0:	01d00534 	movhi	r7,16404
100058d4:	8009883a 	mov	r4,r16
100058d8:	000de000 	call	1000de00 <__muldf3>
100058dc:	900d883a 	mov	r6,r18
100058e0:	980f883a 	mov	r7,r19
100058e4:	1009883a 	mov	r4,r2
100058e8:	180b883a 	mov	r5,r3
100058ec:	000dc300 	call	1000dc30 <__gedf2>
100058f0:	002b883a 	mov	r21,zero
100058f4:	0023883a 	mov	r17,zero
100058f8:	1000bf16 	blt	r2,zero,10005bf8 <_dtoa_r+0x1060>
100058fc:	d9802217 	ldw	r6,136(sp)
10005900:	ddc00717 	ldw	r23,28(sp)
10005904:	018c303a 	nor	r6,zero,r6
10005908:	d9800515 	stw	r6,20(sp)
1000590c:	a80b883a 	mov	r5,r21
10005910:	e009883a 	mov	r4,fp
10005914:	00082f80 	call	100082f8 <_Bfree>
10005918:	883e4926 	beq	r17,zero,10005240 <__alt_data_end+0xf8005240>
1000591c:	003fad06 	br	100057d4 <__alt_data_end+0xf80057d4>
10005920:	d9c01117 	ldw	r7,68(sp)
10005924:	3801bc26 	beq	r7,zero,10006018 <_dtoa_r+0x1480>
10005928:	10810cc4 	addi	r2,r2,1075
1000592c:	dd400a17 	ldw	r21,40(sp)
10005930:	dd000817 	ldw	r20,32(sp)
10005934:	003f0a06 	br	10005560 <__alt_data_end+0xf8005560>
10005938:	00800704 	movi	r2,28
1000593c:	d9000817 	ldw	r4,32(sp)
10005940:	a0a9883a 	add	r20,r20,r2
10005944:	b0ad883a 	add	r22,r22,r2
10005948:	2089883a 	add	r4,r4,r2
1000594c:	d9000815 	stw	r4,32(sp)
10005950:	003f5106 	br	10005698 <__alt_data_end+0xf8005698>
10005954:	d8c00317 	ldw	r3,12(sp)
10005958:	b8c1fc0e 	bge	r23,r3,1000614c <_dtoa_r+0x15b4>
1000595c:	0027883a 	mov	r19,zero
10005960:	b805883a 	mov	r2,r23
10005964:	003f3e06 	br	10005660 <__alt_data_end+0xf8005660>
10005968:	880b883a 	mov	r5,r17
1000596c:	e009883a 	mov	r4,fp
10005970:	000f883a 	mov	r7,zero
10005974:	01800284 	movi	r6,10
10005978:	00083200 	call	10008320 <__multadd>
1000597c:	d9000c17 	ldw	r4,48(sp)
10005980:	1023883a 	mov	r17,r2
10005984:	0102040e 	bge	zero,r4,10006198 <_dtoa_r+0x1600>
10005988:	d9000615 	stw	r4,24(sp)
1000598c:	0500050e 	bge	zero,r20,100059a4 <_dtoa_r+0xe0c>
10005990:	880b883a 	mov	r5,r17
10005994:	a00d883a 	mov	r6,r20
10005998:	e009883a 	mov	r4,fp
1000599c:	0008a8c0 	call	10008a8c <__lshift>
100059a0:	1023883a 	mov	r17,r2
100059a4:	9801241e 	bne	r19,zero,10005e38 <_dtoa_r+0x12a0>
100059a8:	8829883a 	mov	r20,r17
100059ac:	d9000617 	ldw	r4,24(sp)
100059b0:	dcc00717 	ldw	r19,28(sp)
100059b4:	9480004c 	andi	r18,r18,1
100059b8:	20bfffc4 	addi	r2,r4,-1
100059bc:	9885883a 	add	r2,r19,r2
100059c0:	d8800415 	stw	r2,16(sp)
100059c4:	dc800615 	stw	r18,24(sp)
100059c8:	a80b883a 	mov	r5,r21
100059cc:	8009883a 	mov	r4,r16
100059d0:	00049700 	call	10004970 <quorem>
100059d4:	880b883a 	mov	r5,r17
100059d8:	8009883a 	mov	r4,r16
100059dc:	102f883a 	mov	r23,r2
100059e0:	0008bd40 	call	10008bd4 <__mcmp>
100059e4:	a80b883a 	mov	r5,r21
100059e8:	a00d883a 	mov	r6,r20
100059ec:	e009883a 	mov	r4,fp
100059f0:	102d883a 	mov	r22,r2
100059f4:	0008c340 	call	10008c34 <__mdiff>
100059f8:	1007883a 	mov	r3,r2
100059fc:	10800317 	ldw	r2,12(r2)
10005a00:	bc800c04 	addi	r18,r23,48
10005a04:	180b883a 	mov	r5,r3
10005a08:	10004e1e 	bne	r2,zero,10005b44 <_dtoa_r+0xfac>
10005a0c:	8009883a 	mov	r4,r16
10005a10:	d8c01615 	stw	r3,88(sp)
10005a14:	0008bd40 	call	10008bd4 <__mcmp>
10005a18:	d8c01617 	ldw	r3,88(sp)
10005a1c:	e009883a 	mov	r4,fp
10005a20:	d8801615 	stw	r2,88(sp)
10005a24:	180b883a 	mov	r5,r3
10005a28:	00082f80 	call	100082f8 <_Bfree>
10005a2c:	d8801617 	ldw	r2,88(sp)
10005a30:	1000041e 	bne	r2,zero,10005a44 <_dtoa_r+0xeac>
10005a34:	d9800317 	ldw	r6,12(sp)
10005a38:	3000021e 	bne	r6,zero,10005a44 <_dtoa_r+0xeac>
10005a3c:	d8c00617 	ldw	r3,24(sp)
10005a40:	18003726 	beq	r3,zero,10005b20 <_dtoa_r+0xf88>
10005a44:	b0002016 	blt	r22,zero,10005ac8 <_dtoa_r+0xf30>
10005a48:	b000041e 	bne	r22,zero,10005a5c <_dtoa_r+0xec4>
10005a4c:	d9000317 	ldw	r4,12(sp)
10005a50:	2000021e 	bne	r4,zero,10005a5c <_dtoa_r+0xec4>
10005a54:	d8c00617 	ldw	r3,24(sp)
10005a58:	18001b26 	beq	r3,zero,10005ac8 <_dtoa_r+0xf30>
10005a5c:	00810716 	blt	zero,r2,10005e7c <_dtoa_r+0x12e4>
10005a60:	d8c00417 	ldw	r3,16(sp)
10005a64:	9d800044 	addi	r22,r19,1
10005a68:	9c800005 	stb	r18,0(r19)
10005a6c:	b02f883a 	mov	r23,r22
10005a70:	98c10626 	beq	r19,r3,10005e8c <_dtoa_r+0x12f4>
10005a74:	800b883a 	mov	r5,r16
10005a78:	000f883a 	mov	r7,zero
10005a7c:	01800284 	movi	r6,10
10005a80:	e009883a 	mov	r4,fp
10005a84:	00083200 	call	10008320 <__multadd>
10005a88:	1021883a 	mov	r16,r2
10005a8c:	000f883a 	mov	r7,zero
10005a90:	01800284 	movi	r6,10
10005a94:	880b883a 	mov	r5,r17
10005a98:	e009883a 	mov	r4,fp
10005a9c:	8d002526 	beq	r17,r20,10005b34 <_dtoa_r+0xf9c>
10005aa0:	00083200 	call	10008320 <__multadd>
10005aa4:	a00b883a 	mov	r5,r20
10005aa8:	000f883a 	mov	r7,zero
10005aac:	01800284 	movi	r6,10
10005ab0:	e009883a 	mov	r4,fp
10005ab4:	1023883a 	mov	r17,r2
10005ab8:	00083200 	call	10008320 <__multadd>
10005abc:	1029883a 	mov	r20,r2
10005ac0:	b027883a 	mov	r19,r22
10005ac4:	003fc006 	br	100059c8 <__alt_data_end+0xf80059c8>
10005ac8:	9011883a 	mov	r8,r18
10005acc:	00800e0e 	bge	zero,r2,10005b08 <_dtoa_r+0xf70>
10005ad0:	800b883a 	mov	r5,r16
10005ad4:	01800044 	movi	r6,1
10005ad8:	e009883a 	mov	r4,fp
10005adc:	da001715 	stw	r8,92(sp)
10005ae0:	0008a8c0 	call	10008a8c <__lshift>
10005ae4:	a80b883a 	mov	r5,r21
10005ae8:	1009883a 	mov	r4,r2
10005aec:	1021883a 	mov	r16,r2
10005af0:	0008bd40 	call	10008bd4 <__mcmp>
10005af4:	da001717 	ldw	r8,92(sp)
10005af8:	0081960e 	bge	zero,r2,10006154 <_dtoa_r+0x15bc>
10005afc:	00800e44 	movi	r2,57
10005b00:	40817026 	beq	r8,r2,100060c4 <_dtoa_r+0x152c>
10005b04:	ba000c44 	addi	r8,r23,49
10005b08:	8825883a 	mov	r18,r17
10005b0c:	9dc00044 	addi	r23,r19,1
10005b10:	9a000005 	stb	r8,0(r19)
10005b14:	a023883a 	mov	r17,r20
10005b18:	dc000915 	stw	r16,36(sp)
10005b1c:	003f2406 	br	100057b0 <__alt_data_end+0xf80057b0>
10005b20:	00800e44 	movi	r2,57
10005b24:	9011883a 	mov	r8,r18
10005b28:	90816626 	beq	r18,r2,100060c4 <_dtoa_r+0x152c>
10005b2c:	05bff516 	blt	zero,r22,10005b04 <__alt_data_end+0xf8005b04>
10005b30:	003ff506 	br	10005b08 <__alt_data_end+0xf8005b08>
10005b34:	00083200 	call	10008320 <__multadd>
10005b38:	1023883a 	mov	r17,r2
10005b3c:	1029883a 	mov	r20,r2
10005b40:	003fdf06 	br	10005ac0 <__alt_data_end+0xf8005ac0>
10005b44:	e009883a 	mov	r4,fp
10005b48:	00082f80 	call	100082f8 <_Bfree>
10005b4c:	00800044 	movi	r2,1
10005b50:	003fbc06 	br	10005a44 <__alt_data_end+0xf8005a44>
10005b54:	a80b883a 	mov	r5,r21
10005b58:	8009883a 	mov	r4,r16
10005b5c:	0008bd40 	call	10008bd4 <__mcmp>
10005b60:	103edb0e 	bge	r2,zero,100056d0 <__alt_data_end+0xf80056d0>
10005b64:	800b883a 	mov	r5,r16
10005b68:	000f883a 	mov	r7,zero
10005b6c:	01800284 	movi	r6,10
10005b70:	e009883a 	mov	r4,fp
10005b74:	00083200 	call	10008320 <__multadd>
10005b78:	1021883a 	mov	r16,r2
10005b7c:	d8800517 	ldw	r2,20(sp)
10005b80:	d8c00b17 	ldw	r3,44(sp)
10005b84:	10bfffc4 	addi	r2,r2,-1
10005b88:	d8800515 	stw	r2,20(sp)
10005b8c:	183f761e 	bne	r3,zero,10005968 <__alt_data_end+0xf8005968>
10005b90:	d9000c17 	ldw	r4,48(sp)
10005b94:	0101730e 	bge	zero,r4,10006164 <_dtoa_r+0x15cc>
10005b98:	d9000615 	stw	r4,24(sp)
10005b9c:	003ed006 	br	100056e0 <__alt_data_end+0xf80056e0>
10005ba0:	00800084 	movi	r2,2
10005ba4:	3081861e 	bne	r6,r2,100061c0 <_dtoa_r+0x1628>
10005ba8:	d8000b15 	stw	zero,44(sp)
10005bac:	003f3c06 	br	100058a0 <__alt_data_end+0xf80058a0>
10005bb0:	dc000917 	ldw	r16,36(sp)
10005bb4:	003e9206 	br	10005600 <__alt_data_end+0xf8005600>
10005bb8:	d9c00317 	ldw	r7,12(sp)
10005bbc:	00800084 	movi	r2,2
10005bc0:	11fec50e 	bge	r2,r7,100056d8 <__alt_data_end+0xf80056d8>
10005bc4:	d9000617 	ldw	r4,24(sp)
10005bc8:	20013c1e 	bne	r4,zero,100060bc <_dtoa_r+0x1524>
10005bcc:	a80b883a 	mov	r5,r21
10005bd0:	000f883a 	mov	r7,zero
10005bd4:	01800144 	movi	r6,5
10005bd8:	e009883a 	mov	r4,fp
10005bdc:	00083200 	call	10008320 <__multadd>
10005be0:	100b883a 	mov	r5,r2
10005be4:	8009883a 	mov	r4,r16
10005be8:	102b883a 	mov	r21,r2
10005bec:	0008bd40 	call	10008bd4 <__mcmp>
10005bf0:	dc000915 	stw	r16,36(sp)
10005bf4:	00bf410e 	bge	zero,r2,100058fc <__alt_data_end+0xf80058fc>
10005bf8:	d9c00717 	ldw	r7,28(sp)
10005bfc:	00800c44 	movi	r2,49
10005c00:	38800005 	stb	r2,0(r7)
10005c04:	d8800517 	ldw	r2,20(sp)
10005c08:	3dc00044 	addi	r23,r7,1
10005c0c:	10800044 	addi	r2,r2,1
10005c10:	d8800515 	stw	r2,20(sp)
10005c14:	003f3d06 	br	1000590c <__alt_data_end+0xf800590c>
10005c18:	d9800517 	ldw	r6,20(sp)
10005c1c:	d9c00717 	ldw	r7,28(sp)
10005c20:	00800c44 	movi	r2,49
10005c24:	31800044 	addi	r6,r6,1
10005c28:	d9800515 	stw	r6,20(sp)
10005c2c:	38800005 	stb	r2,0(r7)
10005c30:	003edf06 	br	100057b0 <__alt_data_end+0xf80057b0>
10005c34:	d8000b15 	stw	zero,44(sp)
10005c38:	003c9f06 	br	10004eb8 <__alt_data_end+0xf8004eb8>
10005c3c:	903e7e1e 	bne	r18,zero,10005638 <__alt_data_end+0xf8005638>
10005c40:	00800434 	movhi	r2,16
10005c44:	10bfffc4 	addi	r2,r2,-1
10005c48:	9884703a 	and	r2,r19,r2
10005c4c:	1000ea1e 	bne	r2,zero,10005ff8 <_dtoa_r+0x1460>
10005c50:	9cdffc2c 	andhi	r19,r19,32752
10005c54:	9800e826 	beq	r19,zero,10005ff8 <_dtoa_r+0x1460>
10005c58:	d9c00817 	ldw	r7,32(sp)
10005c5c:	b5800044 	addi	r22,r22,1
10005c60:	04c00044 	movi	r19,1
10005c64:	39c00044 	addi	r7,r7,1
10005c68:	d9c00815 	stw	r7,32(sp)
10005c6c:	d8800d17 	ldw	r2,52(sp)
10005c70:	103e721e 	bne	r2,zero,1000563c <__alt_data_end+0xf800563c>
10005c74:	00800044 	movi	r2,1
10005c78:	003e7906 	br	10005660 <__alt_data_end+0xf8005660>
10005c7c:	8009883a 	mov	r4,r16
10005c80:	000efe80 	call	1000efe8 <__floatsidf>
10005c84:	d9800f17 	ldw	r6,60(sp)
10005c88:	d9c01017 	ldw	r7,64(sp)
10005c8c:	1009883a 	mov	r4,r2
10005c90:	180b883a 	mov	r5,r3
10005c94:	000de000 	call	1000de00 <__muldf3>
10005c98:	000d883a 	mov	r6,zero
10005c9c:	01d00734 	movhi	r7,16412
10005ca0:	1009883a 	mov	r4,r2
10005ca4:	180b883a 	mov	r5,r3
10005ca8:	000c92c0 	call	1000c92c <__adddf3>
10005cac:	047f3034 	movhi	r17,64704
10005cb0:	1021883a 	mov	r16,r2
10005cb4:	1c63883a 	add	r17,r3,r17
10005cb8:	d9000f17 	ldw	r4,60(sp)
10005cbc:	d9401017 	ldw	r5,64(sp)
10005cc0:	000d883a 	mov	r6,zero
10005cc4:	01d00534 	movhi	r7,16404
10005cc8:	000e66c0 	call	1000e66c <__subdf3>
10005ccc:	800d883a 	mov	r6,r16
10005cd0:	880f883a 	mov	r7,r17
10005cd4:	1009883a 	mov	r4,r2
10005cd8:	180b883a 	mov	r5,r3
10005cdc:	102b883a 	mov	r21,r2
10005ce0:	1829883a 	mov	r20,r3
10005ce4:	000dc300 	call	1000dc30 <__gedf2>
10005ce8:	00806c16 	blt	zero,r2,10005e9c <_dtoa_r+0x1304>
10005cec:	89e0003c 	xorhi	r7,r17,32768
10005cf0:	800d883a 	mov	r6,r16
10005cf4:	a809883a 	mov	r4,r21
10005cf8:	a00b883a 	mov	r5,r20
10005cfc:	000dd0c0 	call	1000dd0c <__ledf2>
10005d00:	103d7e0e 	bge	r2,zero,100052fc <__alt_data_end+0xf80052fc>
10005d04:	002b883a 	mov	r21,zero
10005d08:	0023883a 	mov	r17,zero
10005d0c:	003efb06 	br	100058fc <__alt_data_end+0xf80058fc>
10005d10:	d8800717 	ldw	r2,28(sp)
10005d14:	003bd006 	br	10004c58 <__alt_data_end+0xf8004c58>
10005d18:	d9000a17 	ldw	r4,40(sp)
10005d1c:	d9800d17 	ldw	r6,52(sp)
10005d20:	dd400a15 	stw	r21,40(sp)
10005d24:	a905c83a 	sub	r2,r21,r4
10005d28:	308d883a 	add	r6,r6,r2
10005d2c:	d9800d15 	stw	r6,52(sp)
10005d30:	002b883a 	mov	r21,zero
10005d34:	003e0606 	br	10005550 <__alt_data_end+0xf8005550>
10005d38:	9023883a 	mov	r17,r18
10005d3c:	9829883a 	mov	r20,r19
10005d40:	04000084 	movi	r16,2
10005d44:	003c9206 	br	10004f90 <__alt_data_end+0xf8004f90>
10005d48:	04000044 	movi	r16,1
10005d4c:	dc000c15 	stw	r16,48(sp)
10005d50:	dc000615 	stw	r16,24(sp)
10005d54:	dc002215 	stw	r16,136(sp)
10005d58:	e0001115 	stw	zero,68(fp)
10005d5c:	000b883a 	mov	r5,zero
10005d60:	003c6906 	br	10004f08 <__alt_data_end+0xf8004f08>
10005d64:	3021883a 	mov	r16,r6
10005d68:	003ffb06 	br	10005d58 <__alt_data_end+0xf8005d58>
10005d6c:	1000021e 	bne	r2,zero,10005d78 <_dtoa_r+0x11e0>
10005d70:	4200004c 	andi	r8,r8,1
10005d74:	403e7d1e 	bne	r8,zero,1000576c <__alt_data_end+0xf800576c>
10005d78:	01000c04 	movi	r4,48
10005d7c:	00000106 	br	10005d84 <_dtoa_r+0x11ec>
10005d80:	102f883a 	mov	r23,r2
10005d84:	b8bfffc4 	addi	r2,r23,-1
10005d88:	10c00007 	ldb	r3,0(r2)
10005d8c:	193ffc26 	beq	r3,r4,10005d80 <__alt_data_end+0xf8005d80>
10005d90:	003e8706 	br	100057b0 <__alt_data_end+0xf80057b0>
10005d94:	d8800517 	ldw	r2,20(sp)
10005d98:	00a3c83a 	sub	r17,zero,r2
10005d9c:	8800a426 	beq	r17,zero,10006030 <_dtoa_r+0x1498>
10005da0:	888003cc 	andi	r2,r17,15
10005da4:	100490fa 	slli	r2,r2,3
10005da8:	00c40074 	movhi	r3,4097
10005dac:	18c89504 	addi	r3,r3,8788
10005db0:	1885883a 	add	r2,r3,r2
10005db4:	11800017 	ldw	r6,0(r2)
10005db8:	11c00117 	ldw	r7,4(r2)
10005dbc:	9009883a 	mov	r4,r18
10005dc0:	980b883a 	mov	r5,r19
10005dc4:	8823d13a 	srai	r17,r17,4
10005dc8:	000de000 	call	1000de00 <__muldf3>
10005dcc:	d8800f15 	stw	r2,60(sp)
10005dd0:	d8c01015 	stw	r3,64(sp)
10005dd4:	8800e826 	beq	r17,zero,10006178 <_dtoa_r+0x15e0>
10005dd8:	05040074 	movhi	r20,4097
10005ddc:	a5088b04 	addi	r20,r20,8748
10005de0:	04000084 	movi	r16,2
10005de4:	8980004c 	andi	r6,r17,1
10005de8:	1009883a 	mov	r4,r2
10005dec:	8823d07a 	srai	r17,r17,1
10005df0:	180b883a 	mov	r5,r3
10005df4:	30000426 	beq	r6,zero,10005e08 <_dtoa_r+0x1270>
10005df8:	a1800017 	ldw	r6,0(r20)
10005dfc:	a1c00117 	ldw	r7,4(r20)
10005e00:	84000044 	addi	r16,r16,1
10005e04:	000de000 	call	1000de00 <__muldf3>
10005e08:	a5000204 	addi	r20,r20,8
10005e0c:	883ff51e 	bne	r17,zero,10005de4 <__alt_data_end+0xf8005de4>
10005e10:	d8800f15 	stw	r2,60(sp)
10005e14:	d8c01015 	stw	r3,64(sp)
10005e18:	003c7606 	br	10004ff4 <__alt_data_end+0xf8004ff4>
10005e1c:	00c00c04 	movi	r3,48
10005e20:	10c00005 	stb	r3,0(r2)
10005e24:	d8c00517 	ldw	r3,20(sp)
10005e28:	bd3fffc3 	ldbu	r20,-1(r23)
10005e2c:	18c00044 	addi	r3,r3,1
10005e30:	d8c00515 	stw	r3,20(sp)
10005e34:	003db906 	br	1000551c <__alt_data_end+0xf800551c>
10005e38:	89400117 	ldw	r5,4(r17)
10005e3c:	e009883a 	mov	r4,fp
10005e40:	00082500 	call	10008250 <_Balloc>
10005e44:	89800417 	ldw	r6,16(r17)
10005e48:	89400304 	addi	r5,r17,12
10005e4c:	11000304 	addi	r4,r2,12
10005e50:	31800084 	addi	r6,r6,2
10005e54:	318d883a 	add	r6,r6,r6
10005e58:	318d883a 	add	r6,r6,r6
10005e5c:	1027883a 	mov	r19,r2
10005e60:	0007e840 	call	10007e84 <memcpy>
10005e64:	01800044 	movi	r6,1
10005e68:	980b883a 	mov	r5,r19
10005e6c:	e009883a 	mov	r4,fp
10005e70:	0008a8c0 	call	10008a8c <__lshift>
10005e74:	1029883a 	mov	r20,r2
10005e78:	003ecc06 	br	100059ac <__alt_data_end+0xf80059ac>
10005e7c:	00800e44 	movi	r2,57
10005e80:	90809026 	beq	r18,r2,100060c4 <_dtoa_r+0x152c>
10005e84:	92000044 	addi	r8,r18,1
10005e88:	003f1f06 	br	10005b08 <__alt_data_end+0xf8005b08>
10005e8c:	9011883a 	mov	r8,r18
10005e90:	8825883a 	mov	r18,r17
10005e94:	a023883a 	mov	r17,r20
10005e98:	003e2906 	br	10005740 <__alt_data_end+0xf8005740>
10005e9c:	002b883a 	mov	r21,zero
10005ea0:	0023883a 	mov	r17,zero
10005ea4:	003f5406 	br	10005bf8 <__alt_data_end+0xf8005bf8>
10005ea8:	61bfffc4 	addi	r6,r12,-1
10005eac:	300490fa 	slli	r2,r6,3
10005eb0:	00c40074 	movhi	r3,4097
10005eb4:	18c89504 	addi	r3,r3,8788
10005eb8:	1885883a 	add	r2,r3,r2
10005ebc:	11000017 	ldw	r4,0(r2)
10005ec0:	11400117 	ldw	r5,4(r2)
10005ec4:	d8800717 	ldw	r2,28(sp)
10005ec8:	880f883a 	mov	r7,r17
10005ecc:	d9801215 	stw	r6,72(sp)
10005ed0:	800d883a 	mov	r6,r16
10005ed4:	db001615 	stw	r12,88(sp)
10005ed8:	15c00044 	addi	r23,r2,1
10005edc:	000de000 	call	1000de00 <__muldf3>
10005ee0:	d9401017 	ldw	r5,64(sp)
10005ee4:	d9000f17 	ldw	r4,60(sp)
10005ee8:	d8c01515 	stw	r3,84(sp)
10005eec:	d8801415 	stw	r2,80(sp)
10005ef0:	000ef680 	call	1000ef68 <__fixdfsi>
10005ef4:	1009883a 	mov	r4,r2
10005ef8:	1021883a 	mov	r16,r2
10005efc:	000efe80 	call	1000efe8 <__floatsidf>
10005f00:	d9000f17 	ldw	r4,60(sp)
10005f04:	d9401017 	ldw	r5,64(sp)
10005f08:	100d883a 	mov	r6,r2
10005f0c:	180f883a 	mov	r7,r3
10005f10:	000e66c0 	call	1000e66c <__subdf3>
10005f14:	1829883a 	mov	r20,r3
10005f18:	d8c00717 	ldw	r3,28(sp)
10005f1c:	84000c04 	addi	r16,r16,48
10005f20:	1023883a 	mov	r17,r2
10005f24:	1c000005 	stb	r16,0(r3)
10005f28:	db001617 	ldw	r12,88(sp)
10005f2c:	00800044 	movi	r2,1
10005f30:	60802226 	beq	r12,r2,10005fbc <_dtoa_r+0x1424>
10005f34:	d9c00717 	ldw	r7,28(sp)
10005f38:	8805883a 	mov	r2,r17
10005f3c:	b82b883a 	mov	r21,r23
10005f40:	3b19883a 	add	r12,r7,r12
10005f44:	6023883a 	mov	r17,r12
10005f48:	a007883a 	mov	r3,r20
10005f4c:	dc800f15 	stw	r18,60(sp)
10005f50:	000d883a 	mov	r6,zero
10005f54:	01d00934 	movhi	r7,16420
10005f58:	1009883a 	mov	r4,r2
10005f5c:	180b883a 	mov	r5,r3
10005f60:	000de000 	call	1000de00 <__muldf3>
10005f64:	180b883a 	mov	r5,r3
10005f68:	1009883a 	mov	r4,r2
10005f6c:	1829883a 	mov	r20,r3
10005f70:	1025883a 	mov	r18,r2
10005f74:	000ef680 	call	1000ef68 <__fixdfsi>
10005f78:	1009883a 	mov	r4,r2
10005f7c:	1021883a 	mov	r16,r2
10005f80:	000efe80 	call	1000efe8 <__floatsidf>
10005f84:	100d883a 	mov	r6,r2
10005f88:	180f883a 	mov	r7,r3
10005f8c:	9009883a 	mov	r4,r18
10005f90:	a00b883a 	mov	r5,r20
10005f94:	84000c04 	addi	r16,r16,48
10005f98:	000e66c0 	call	1000e66c <__subdf3>
10005f9c:	ad400044 	addi	r21,r21,1
10005fa0:	ac3fffc5 	stb	r16,-1(r21)
10005fa4:	ac7fea1e 	bne	r21,r17,10005f50 <__alt_data_end+0xf8005f50>
10005fa8:	1023883a 	mov	r17,r2
10005fac:	d8801217 	ldw	r2,72(sp)
10005fb0:	dc800f17 	ldw	r18,60(sp)
10005fb4:	1829883a 	mov	r20,r3
10005fb8:	b8af883a 	add	r23,r23,r2
10005fbc:	d9001417 	ldw	r4,80(sp)
10005fc0:	d9401517 	ldw	r5,84(sp)
10005fc4:	000d883a 	mov	r6,zero
10005fc8:	01cff834 	movhi	r7,16352
10005fcc:	000c92c0 	call	1000c92c <__adddf3>
10005fd0:	880d883a 	mov	r6,r17
10005fd4:	a00f883a 	mov	r7,r20
10005fd8:	1009883a 	mov	r4,r2
10005fdc:	180b883a 	mov	r5,r3
10005fe0:	000dd0c0 	call	1000dd0c <__ledf2>
10005fe4:	10003e0e 	bge	r2,zero,100060e0 <_dtoa_r+0x1548>
10005fe8:	d9001317 	ldw	r4,76(sp)
10005fec:	bd3fffc3 	ldbu	r20,-1(r23)
10005ff0:	d9000515 	stw	r4,20(sp)
10005ff4:	003d3b06 	br	100054e4 <__alt_data_end+0xf80054e4>
10005ff8:	0027883a 	mov	r19,zero
10005ffc:	003f1b06 	br	10005c6c <__alt_data_end+0xf8005c6c>
10006000:	d8800817 	ldw	r2,32(sp)
10006004:	11e9c83a 	sub	r20,r2,r7
10006008:	0005883a 	mov	r2,zero
1000600c:	003d5406 	br	10005560 <__alt_data_end+0xf8005560>
10006010:	00800044 	movi	r2,1
10006014:	003dc706 	br	10005734 <__alt_data_end+0xf8005734>
10006018:	d8c00217 	ldw	r3,8(sp)
1000601c:	00800d84 	movi	r2,54
10006020:	dd400a17 	ldw	r21,40(sp)
10006024:	10c5c83a 	sub	r2,r2,r3
10006028:	dd000817 	ldw	r20,32(sp)
1000602c:	003d4c06 	br	10005560 <__alt_data_end+0xf8005560>
10006030:	dc800f15 	stw	r18,60(sp)
10006034:	dcc01015 	stw	r19,64(sp)
10006038:	04000084 	movi	r16,2
1000603c:	003bed06 	br	10004ff4 <__alt_data_end+0xf8004ff4>
10006040:	d9000617 	ldw	r4,24(sp)
10006044:	203f0d26 	beq	r4,zero,10005c7c <__alt_data_end+0xf8005c7c>
10006048:	d9800c17 	ldw	r6,48(sp)
1000604c:	01bcab0e 	bge	zero,r6,100052fc <__alt_data_end+0xf80052fc>
10006050:	d9401017 	ldw	r5,64(sp)
10006054:	d9000f17 	ldw	r4,60(sp)
10006058:	000d883a 	mov	r6,zero
1000605c:	01d00934 	movhi	r7,16420
10006060:	000de000 	call	1000de00 <__muldf3>
10006064:	81000044 	addi	r4,r16,1
10006068:	d8800f15 	stw	r2,60(sp)
1000606c:	d8c01015 	stw	r3,64(sp)
10006070:	000efe80 	call	1000efe8 <__floatsidf>
10006074:	d9800f17 	ldw	r6,60(sp)
10006078:	d9c01017 	ldw	r7,64(sp)
1000607c:	1009883a 	mov	r4,r2
10006080:	180b883a 	mov	r5,r3
10006084:	000de000 	call	1000de00 <__muldf3>
10006088:	01d00734 	movhi	r7,16412
1000608c:	000d883a 	mov	r6,zero
10006090:	1009883a 	mov	r4,r2
10006094:	180b883a 	mov	r5,r3
10006098:	000c92c0 	call	1000c92c <__adddf3>
1000609c:	d9c00517 	ldw	r7,20(sp)
100060a0:	047f3034 	movhi	r17,64704
100060a4:	1021883a 	mov	r16,r2
100060a8:	39ffffc4 	addi	r7,r7,-1
100060ac:	d9c01315 	stw	r7,76(sp)
100060b0:	1c63883a 	add	r17,r3,r17
100060b4:	db000c17 	ldw	r12,48(sp)
100060b8:	003bea06 	br	10005064 <__alt_data_end+0xf8005064>
100060bc:	dc000915 	stw	r16,36(sp)
100060c0:	003e0e06 	br	100058fc <__alt_data_end+0xf80058fc>
100060c4:	01000e44 	movi	r4,57
100060c8:	8825883a 	mov	r18,r17
100060cc:	9dc00044 	addi	r23,r19,1
100060d0:	99000005 	stb	r4,0(r19)
100060d4:	a023883a 	mov	r17,r20
100060d8:	dc000915 	stw	r16,36(sp)
100060dc:	003da406 	br	10005770 <__alt_data_end+0xf8005770>
100060e0:	d9801417 	ldw	r6,80(sp)
100060e4:	d9c01517 	ldw	r7,84(sp)
100060e8:	0009883a 	mov	r4,zero
100060ec:	014ff834 	movhi	r5,16352
100060f0:	000e66c0 	call	1000e66c <__subdf3>
100060f4:	880d883a 	mov	r6,r17
100060f8:	a00f883a 	mov	r7,r20
100060fc:	1009883a 	mov	r4,r2
10006100:	180b883a 	mov	r5,r3
10006104:	000dc300 	call	1000dc30 <__gedf2>
10006108:	00bc7c0e 	bge	zero,r2,100052fc <__alt_data_end+0xf80052fc>
1000610c:	01000c04 	movi	r4,48
10006110:	00000106 	br	10006118 <_dtoa_r+0x1580>
10006114:	102f883a 	mov	r23,r2
10006118:	b8bfffc4 	addi	r2,r23,-1
1000611c:	10c00007 	ldb	r3,0(r2)
10006120:	193ffc26 	beq	r3,r4,10006114 <__alt_data_end+0xf8006114>
10006124:	d9801317 	ldw	r6,76(sp)
10006128:	d9800515 	stw	r6,20(sp)
1000612c:	003c4406 	br	10005240 <__alt_data_end+0xf8005240>
10006130:	d9801317 	ldw	r6,76(sp)
10006134:	d9800515 	stw	r6,20(sp)
10006138:	003cea06 	br	100054e4 <__alt_data_end+0xf80054e4>
1000613c:	dd800f17 	ldw	r22,60(sp)
10006140:	dcc01017 	ldw	r19,64(sp)
10006144:	dc801217 	ldw	r18,72(sp)
10006148:	003c6c06 	br	100052fc <__alt_data_end+0xf80052fc>
1000614c:	903e031e 	bne	r18,zero,1000595c <__alt_data_end+0xf800595c>
10006150:	003ebb06 	br	10005c40 <__alt_data_end+0xf8005c40>
10006154:	103e6c1e 	bne	r2,zero,10005b08 <__alt_data_end+0xf8005b08>
10006158:	4080004c 	andi	r2,r8,1
1000615c:	103e6a26 	beq	r2,zero,10005b08 <__alt_data_end+0xf8005b08>
10006160:	003e6606 	br	10005afc <__alt_data_end+0xf8005afc>
10006164:	d8c00317 	ldw	r3,12(sp)
10006168:	00800084 	movi	r2,2
1000616c:	10c02916 	blt	r2,r3,10006214 <_dtoa_r+0x167c>
10006170:	d9000c17 	ldw	r4,48(sp)
10006174:	003e8806 	br	10005b98 <__alt_data_end+0xf8005b98>
10006178:	04000084 	movi	r16,2
1000617c:	003b9d06 	br	10004ff4 <__alt_data_end+0xf8004ff4>
10006180:	d9001317 	ldw	r4,76(sp)
10006184:	d9000515 	stw	r4,20(sp)
10006188:	003cd606 	br	100054e4 <__alt_data_end+0xf80054e4>
1000618c:	d8801317 	ldw	r2,76(sp)
10006190:	d8800515 	stw	r2,20(sp)
10006194:	003c2a06 	br	10005240 <__alt_data_end+0xf8005240>
10006198:	d9800317 	ldw	r6,12(sp)
1000619c:	00800084 	movi	r2,2
100061a0:	11801516 	blt	r2,r6,100061f8 <_dtoa_r+0x1660>
100061a4:	d9c00c17 	ldw	r7,48(sp)
100061a8:	d9c00615 	stw	r7,24(sp)
100061ac:	003df706 	br	1000598c <__alt_data_end+0xf800598c>
100061b0:	193d3926 	beq	r3,r4,10005698 <__alt_data_end+0xf8005698>
100061b4:	00c00f04 	movi	r3,60
100061b8:	1885c83a 	sub	r2,r3,r2
100061bc:	003ddf06 	br	1000593c <__alt_data_end+0xf800593c>
100061c0:	e009883a 	mov	r4,fp
100061c4:	e0001115 	stw	zero,68(fp)
100061c8:	000b883a 	mov	r5,zero
100061cc:	00082500 	call	10008250 <_Balloc>
100061d0:	d8800715 	stw	r2,28(sp)
100061d4:	d8c00717 	ldw	r3,28(sp)
100061d8:	00bfffc4 	movi	r2,-1
100061dc:	01000044 	movi	r4,1
100061e0:	d8800c15 	stw	r2,48(sp)
100061e4:	e0c01015 	stw	r3,64(fp)
100061e8:	d9000b15 	stw	r4,44(sp)
100061ec:	d8800615 	stw	r2,24(sp)
100061f0:	d8002215 	stw	zero,136(sp)
100061f4:	003c4106 	br	100052fc <__alt_data_end+0xf80052fc>
100061f8:	d8c00c17 	ldw	r3,48(sp)
100061fc:	d8c00615 	stw	r3,24(sp)
10006200:	003e7006 	br	10005bc4 <__alt_data_end+0xf8005bc4>
10006204:	04400044 	movi	r17,1
10006208:	003b2006 	br	10004e8c <__alt_data_end+0xf8004e8c>
1000620c:	000b883a 	mov	r5,zero
10006210:	003b3d06 	br	10004f08 <__alt_data_end+0xf8004f08>
10006214:	d8800c17 	ldw	r2,48(sp)
10006218:	d8800615 	stw	r2,24(sp)
1000621c:	003e6906 	br	10005bc4 <__alt_data_end+0xf8005bc4>

10006220 <__sflush_r>:
10006220:	2880030b 	ldhu	r2,12(r5)
10006224:	defffb04 	addi	sp,sp,-20
10006228:	dcc00315 	stw	r19,12(sp)
1000622c:	dc400115 	stw	r17,4(sp)
10006230:	dfc00415 	stw	ra,16(sp)
10006234:	dc800215 	stw	r18,8(sp)
10006238:	dc000015 	stw	r16,0(sp)
1000623c:	10c0020c 	andi	r3,r2,8
10006240:	2823883a 	mov	r17,r5
10006244:	2027883a 	mov	r19,r4
10006248:	1800311e 	bne	r3,zero,10006310 <__sflush_r+0xf0>
1000624c:	28c00117 	ldw	r3,4(r5)
10006250:	10820014 	ori	r2,r2,2048
10006254:	2880030d 	sth	r2,12(r5)
10006258:	00c04b0e 	bge	zero,r3,10006388 <__sflush_r+0x168>
1000625c:	8a000a17 	ldw	r8,40(r17)
10006260:	40002326 	beq	r8,zero,100062f0 <__sflush_r+0xd0>
10006264:	9c000017 	ldw	r16,0(r19)
10006268:	10c4000c 	andi	r3,r2,4096
1000626c:	98000015 	stw	zero,0(r19)
10006270:	18004826 	beq	r3,zero,10006394 <__sflush_r+0x174>
10006274:	89801417 	ldw	r6,80(r17)
10006278:	10c0010c 	andi	r3,r2,4
1000627c:	18000626 	beq	r3,zero,10006298 <__sflush_r+0x78>
10006280:	88c00117 	ldw	r3,4(r17)
10006284:	88800c17 	ldw	r2,48(r17)
10006288:	30cdc83a 	sub	r6,r6,r3
1000628c:	10000226 	beq	r2,zero,10006298 <__sflush_r+0x78>
10006290:	88800f17 	ldw	r2,60(r17)
10006294:	308dc83a 	sub	r6,r6,r2
10006298:	89400717 	ldw	r5,28(r17)
1000629c:	000f883a 	mov	r7,zero
100062a0:	9809883a 	mov	r4,r19
100062a4:	403ee83a 	callr	r8
100062a8:	00ffffc4 	movi	r3,-1
100062ac:	10c04426 	beq	r2,r3,100063c0 <__sflush_r+0x1a0>
100062b0:	88c0030b 	ldhu	r3,12(r17)
100062b4:	89000417 	ldw	r4,16(r17)
100062b8:	88000115 	stw	zero,4(r17)
100062bc:	197dffcc 	andi	r5,r3,63487
100062c0:	8940030d 	sth	r5,12(r17)
100062c4:	89000015 	stw	r4,0(r17)
100062c8:	18c4000c 	andi	r3,r3,4096
100062cc:	18002c1e 	bne	r3,zero,10006380 <__sflush_r+0x160>
100062d0:	89400c17 	ldw	r5,48(r17)
100062d4:	9c000015 	stw	r16,0(r19)
100062d8:	28000526 	beq	r5,zero,100062f0 <__sflush_r+0xd0>
100062dc:	88801004 	addi	r2,r17,64
100062e0:	28800226 	beq	r5,r2,100062ec <__sflush_r+0xcc>
100062e4:	9809883a 	mov	r4,r19
100062e8:	000699c0 	call	1000699c <_free_r>
100062ec:	88000c15 	stw	zero,48(r17)
100062f0:	0005883a 	mov	r2,zero
100062f4:	dfc00417 	ldw	ra,16(sp)
100062f8:	dcc00317 	ldw	r19,12(sp)
100062fc:	dc800217 	ldw	r18,8(sp)
10006300:	dc400117 	ldw	r17,4(sp)
10006304:	dc000017 	ldw	r16,0(sp)
10006308:	dec00504 	addi	sp,sp,20
1000630c:	f800283a 	ret
10006310:	2c800417 	ldw	r18,16(r5)
10006314:	903ff626 	beq	r18,zero,100062f0 <__alt_data_end+0xf80062f0>
10006318:	2c000017 	ldw	r16,0(r5)
1000631c:	108000cc 	andi	r2,r2,3
10006320:	2c800015 	stw	r18,0(r5)
10006324:	84a1c83a 	sub	r16,r16,r18
10006328:	1000131e 	bne	r2,zero,10006378 <__sflush_r+0x158>
1000632c:	28800517 	ldw	r2,20(r5)
10006330:	88800215 	stw	r2,8(r17)
10006334:	04000316 	blt	zero,r16,10006344 <__sflush_r+0x124>
10006338:	003fed06 	br	100062f0 <__alt_data_end+0xf80062f0>
1000633c:	90a5883a 	add	r18,r18,r2
10006340:	043feb0e 	bge	zero,r16,100062f0 <__alt_data_end+0xf80062f0>
10006344:	88800917 	ldw	r2,36(r17)
10006348:	89400717 	ldw	r5,28(r17)
1000634c:	800f883a 	mov	r7,r16
10006350:	900d883a 	mov	r6,r18
10006354:	9809883a 	mov	r4,r19
10006358:	103ee83a 	callr	r2
1000635c:	80a1c83a 	sub	r16,r16,r2
10006360:	00bff616 	blt	zero,r2,1000633c <__alt_data_end+0xf800633c>
10006364:	88c0030b 	ldhu	r3,12(r17)
10006368:	00bfffc4 	movi	r2,-1
1000636c:	18c01014 	ori	r3,r3,64
10006370:	88c0030d 	sth	r3,12(r17)
10006374:	003fdf06 	br	100062f4 <__alt_data_end+0xf80062f4>
10006378:	0005883a 	mov	r2,zero
1000637c:	003fec06 	br	10006330 <__alt_data_end+0xf8006330>
10006380:	88801415 	stw	r2,80(r17)
10006384:	003fd206 	br	100062d0 <__alt_data_end+0xf80062d0>
10006388:	28c00f17 	ldw	r3,60(r5)
1000638c:	00ffb316 	blt	zero,r3,1000625c <__alt_data_end+0xf800625c>
10006390:	003fd706 	br	100062f0 <__alt_data_end+0xf80062f0>
10006394:	89400717 	ldw	r5,28(r17)
10006398:	000d883a 	mov	r6,zero
1000639c:	01c00044 	movi	r7,1
100063a0:	9809883a 	mov	r4,r19
100063a4:	403ee83a 	callr	r8
100063a8:	100d883a 	mov	r6,r2
100063ac:	00bfffc4 	movi	r2,-1
100063b0:	30801426 	beq	r6,r2,10006404 <__sflush_r+0x1e4>
100063b4:	8880030b 	ldhu	r2,12(r17)
100063b8:	8a000a17 	ldw	r8,40(r17)
100063bc:	003fae06 	br	10006278 <__alt_data_end+0xf8006278>
100063c0:	98c00017 	ldw	r3,0(r19)
100063c4:	183fba26 	beq	r3,zero,100062b0 <__alt_data_end+0xf80062b0>
100063c8:	01000744 	movi	r4,29
100063cc:	19000626 	beq	r3,r4,100063e8 <__sflush_r+0x1c8>
100063d0:	01000584 	movi	r4,22
100063d4:	19000426 	beq	r3,r4,100063e8 <__sflush_r+0x1c8>
100063d8:	88c0030b 	ldhu	r3,12(r17)
100063dc:	18c01014 	ori	r3,r3,64
100063e0:	88c0030d 	sth	r3,12(r17)
100063e4:	003fc306 	br	100062f4 <__alt_data_end+0xf80062f4>
100063e8:	8880030b 	ldhu	r2,12(r17)
100063ec:	88c00417 	ldw	r3,16(r17)
100063f0:	88000115 	stw	zero,4(r17)
100063f4:	10bdffcc 	andi	r2,r2,63487
100063f8:	8880030d 	sth	r2,12(r17)
100063fc:	88c00015 	stw	r3,0(r17)
10006400:	003fb306 	br	100062d0 <__alt_data_end+0xf80062d0>
10006404:	98800017 	ldw	r2,0(r19)
10006408:	103fea26 	beq	r2,zero,100063b4 <__alt_data_end+0xf80063b4>
1000640c:	00c00744 	movi	r3,29
10006410:	10c00226 	beq	r2,r3,1000641c <__sflush_r+0x1fc>
10006414:	00c00584 	movi	r3,22
10006418:	10c0031e 	bne	r2,r3,10006428 <__sflush_r+0x208>
1000641c:	9c000015 	stw	r16,0(r19)
10006420:	0005883a 	mov	r2,zero
10006424:	003fb306 	br	100062f4 <__alt_data_end+0xf80062f4>
10006428:	88c0030b 	ldhu	r3,12(r17)
1000642c:	3005883a 	mov	r2,r6
10006430:	18c01014 	ori	r3,r3,64
10006434:	88c0030d 	sth	r3,12(r17)
10006438:	003fae06 	br	100062f4 <__alt_data_end+0xf80062f4>

1000643c <_fflush_r>:
1000643c:	defffd04 	addi	sp,sp,-12
10006440:	dc000115 	stw	r16,4(sp)
10006444:	dfc00215 	stw	ra,8(sp)
10006448:	2021883a 	mov	r16,r4
1000644c:	20000226 	beq	r4,zero,10006458 <_fflush_r+0x1c>
10006450:	20800e17 	ldw	r2,56(r4)
10006454:	10000c26 	beq	r2,zero,10006488 <_fflush_r+0x4c>
10006458:	2880030f 	ldh	r2,12(r5)
1000645c:	1000051e 	bne	r2,zero,10006474 <_fflush_r+0x38>
10006460:	0005883a 	mov	r2,zero
10006464:	dfc00217 	ldw	ra,8(sp)
10006468:	dc000117 	ldw	r16,4(sp)
1000646c:	dec00304 	addi	sp,sp,12
10006470:	f800283a 	ret
10006474:	8009883a 	mov	r4,r16
10006478:	dfc00217 	ldw	ra,8(sp)
1000647c:	dc000117 	ldw	r16,4(sp)
10006480:	dec00304 	addi	sp,sp,12
10006484:	00062201 	jmpi	10006220 <__sflush_r>
10006488:	d9400015 	stw	r5,0(sp)
1000648c:	00068280 	call	10006828 <__sinit>
10006490:	d9400017 	ldw	r5,0(sp)
10006494:	003ff006 	br	10006458 <__alt_data_end+0xf8006458>

10006498 <fflush>:
10006498:	20000526 	beq	r4,zero,100064b0 <fflush+0x18>
1000649c:	00840074 	movhi	r2,4097
100064a0:	108fc804 	addi	r2,r2,16160
100064a4:	200b883a 	mov	r5,r4
100064a8:	11000017 	ldw	r4,0(r2)
100064ac:	000643c1 	jmpi	1000643c <_fflush_r>
100064b0:	00840074 	movhi	r2,4097
100064b4:	108fc704 	addi	r2,r2,16156
100064b8:	11000017 	ldw	r4,0(r2)
100064bc:	01440034 	movhi	r5,4096
100064c0:	29590f04 	addi	r5,r5,25660
100064c4:	00072381 	jmpi	10007238 <_fwalk_reent>

100064c8 <__fp_unlock>:
100064c8:	0005883a 	mov	r2,zero
100064cc:	f800283a 	ret

100064d0 <_cleanup_r>:
100064d0:	01440074 	movhi	r5,4097
100064d4:	296cf504 	addi	r5,r5,-19500
100064d8:	00072381 	jmpi	10007238 <_fwalk_reent>

100064dc <__sinit.part.1>:
100064dc:	defff704 	addi	sp,sp,-36
100064e0:	00c40034 	movhi	r3,4096
100064e4:	dfc00815 	stw	ra,32(sp)
100064e8:	ddc00715 	stw	r23,28(sp)
100064ec:	dd800615 	stw	r22,24(sp)
100064f0:	dd400515 	stw	r21,20(sp)
100064f4:	dd000415 	stw	r20,16(sp)
100064f8:	dcc00315 	stw	r19,12(sp)
100064fc:	dc800215 	stw	r18,8(sp)
10006500:	dc400115 	stw	r17,4(sp)
10006504:	dc000015 	stw	r16,0(sp)
10006508:	18d93404 	addi	r3,r3,25808
1000650c:	24000117 	ldw	r16,4(r4)
10006510:	20c00f15 	stw	r3,60(r4)
10006514:	2080bb04 	addi	r2,r4,748
10006518:	00c000c4 	movi	r3,3
1000651c:	20c0b915 	stw	r3,740(r4)
10006520:	2080ba15 	stw	r2,744(r4)
10006524:	2000b815 	stw	zero,736(r4)
10006528:	05c00204 	movi	r23,8
1000652c:	00800104 	movi	r2,4
10006530:	2025883a 	mov	r18,r4
10006534:	b80d883a 	mov	r6,r23
10006538:	81001704 	addi	r4,r16,92
1000653c:	000b883a 	mov	r5,zero
10006540:	80000015 	stw	zero,0(r16)
10006544:	80000115 	stw	zero,4(r16)
10006548:	80000215 	stw	zero,8(r16)
1000654c:	8080030d 	sth	r2,12(r16)
10006550:	80001915 	stw	zero,100(r16)
10006554:	8000038d 	sth	zero,14(r16)
10006558:	80000415 	stw	zero,16(r16)
1000655c:	80000515 	stw	zero,20(r16)
10006560:	80000615 	stw	zero,24(r16)
10006564:	00081280 	call	10008128 <memset>
10006568:	05840074 	movhi	r22,4097
1000656c:	94400217 	ldw	r17,8(r18)
10006570:	05440074 	movhi	r21,4097
10006574:	05040074 	movhi	r20,4097
10006578:	04c40074 	movhi	r19,4097
1000657c:	b5a64d04 	addi	r22,r22,-26316
10006580:	ad666404 	addi	r21,r21,-26224
10006584:	a5268304 	addi	r20,r20,-26100
10006588:	9ce69a04 	addi	r19,r19,-26008
1000658c:	85800815 	stw	r22,32(r16)
10006590:	85400915 	stw	r21,36(r16)
10006594:	85000a15 	stw	r20,40(r16)
10006598:	84c00b15 	stw	r19,44(r16)
1000659c:	84000715 	stw	r16,28(r16)
100065a0:	00800284 	movi	r2,10
100065a4:	8880030d 	sth	r2,12(r17)
100065a8:	00800044 	movi	r2,1
100065ac:	b80d883a 	mov	r6,r23
100065b0:	89001704 	addi	r4,r17,92
100065b4:	000b883a 	mov	r5,zero
100065b8:	88000015 	stw	zero,0(r17)
100065bc:	88000115 	stw	zero,4(r17)
100065c0:	88000215 	stw	zero,8(r17)
100065c4:	88001915 	stw	zero,100(r17)
100065c8:	8880038d 	sth	r2,14(r17)
100065cc:	88000415 	stw	zero,16(r17)
100065d0:	88000515 	stw	zero,20(r17)
100065d4:	88000615 	stw	zero,24(r17)
100065d8:	00081280 	call	10008128 <memset>
100065dc:	94000317 	ldw	r16,12(r18)
100065e0:	00800484 	movi	r2,18
100065e4:	8c400715 	stw	r17,28(r17)
100065e8:	8d800815 	stw	r22,32(r17)
100065ec:	8d400915 	stw	r21,36(r17)
100065f0:	8d000a15 	stw	r20,40(r17)
100065f4:	8cc00b15 	stw	r19,44(r17)
100065f8:	8080030d 	sth	r2,12(r16)
100065fc:	00800084 	movi	r2,2
10006600:	80000015 	stw	zero,0(r16)
10006604:	80000115 	stw	zero,4(r16)
10006608:	80000215 	stw	zero,8(r16)
1000660c:	80001915 	stw	zero,100(r16)
10006610:	8080038d 	sth	r2,14(r16)
10006614:	80000415 	stw	zero,16(r16)
10006618:	80000515 	stw	zero,20(r16)
1000661c:	80000615 	stw	zero,24(r16)
10006620:	b80d883a 	mov	r6,r23
10006624:	000b883a 	mov	r5,zero
10006628:	81001704 	addi	r4,r16,92
1000662c:	00081280 	call	10008128 <memset>
10006630:	00800044 	movi	r2,1
10006634:	84000715 	stw	r16,28(r16)
10006638:	85800815 	stw	r22,32(r16)
1000663c:	85400915 	stw	r21,36(r16)
10006640:	85000a15 	stw	r20,40(r16)
10006644:	84c00b15 	stw	r19,44(r16)
10006648:	90800e15 	stw	r2,56(r18)
1000664c:	dfc00817 	ldw	ra,32(sp)
10006650:	ddc00717 	ldw	r23,28(sp)
10006654:	dd800617 	ldw	r22,24(sp)
10006658:	dd400517 	ldw	r21,20(sp)
1000665c:	dd000417 	ldw	r20,16(sp)
10006660:	dcc00317 	ldw	r19,12(sp)
10006664:	dc800217 	ldw	r18,8(sp)
10006668:	dc400117 	ldw	r17,4(sp)
1000666c:	dc000017 	ldw	r16,0(sp)
10006670:	dec00904 	addi	sp,sp,36
10006674:	f800283a 	ret

10006678 <__fp_lock>:
10006678:	0005883a 	mov	r2,zero
1000667c:	f800283a 	ret

10006680 <__sfmoreglue>:
10006680:	defffc04 	addi	sp,sp,-16
10006684:	dc800215 	stw	r18,8(sp)
10006688:	2825883a 	mov	r18,r5
1000668c:	dc000015 	stw	r16,0(sp)
10006690:	01401a04 	movi	r5,104
10006694:	2021883a 	mov	r16,r4
10006698:	913fffc4 	addi	r4,r18,-1
1000669c:	dfc00315 	stw	ra,12(sp)
100066a0:	dc400115 	stw	r17,4(sp)
100066a4:	000c9040 	call	1000c904 <__mulsi3>
100066a8:	8009883a 	mov	r4,r16
100066ac:	11401d04 	addi	r5,r2,116
100066b0:	1023883a 	mov	r17,r2
100066b4:	00075940 	call	10007594 <_malloc_r>
100066b8:	1021883a 	mov	r16,r2
100066bc:	10000726 	beq	r2,zero,100066dc <__sfmoreglue+0x5c>
100066c0:	11000304 	addi	r4,r2,12
100066c4:	10000015 	stw	zero,0(r2)
100066c8:	14800115 	stw	r18,4(r2)
100066cc:	11000215 	stw	r4,8(r2)
100066d0:	89801a04 	addi	r6,r17,104
100066d4:	000b883a 	mov	r5,zero
100066d8:	00081280 	call	10008128 <memset>
100066dc:	8005883a 	mov	r2,r16
100066e0:	dfc00317 	ldw	ra,12(sp)
100066e4:	dc800217 	ldw	r18,8(sp)
100066e8:	dc400117 	ldw	r17,4(sp)
100066ec:	dc000017 	ldw	r16,0(sp)
100066f0:	dec00404 	addi	sp,sp,16
100066f4:	f800283a 	ret

100066f8 <__sfp>:
100066f8:	defffb04 	addi	sp,sp,-20
100066fc:	dc000015 	stw	r16,0(sp)
10006700:	04040074 	movhi	r16,4097
10006704:	840fc704 	addi	r16,r16,16156
10006708:	dcc00315 	stw	r19,12(sp)
1000670c:	2027883a 	mov	r19,r4
10006710:	81000017 	ldw	r4,0(r16)
10006714:	dfc00415 	stw	ra,16(sp)
10006718:	dc800215 	stw	r18,8(sp)
1000671c:	20800e17 	ldw	r2,56(r4)
10006720:	dc400115 	stw	r17,4(sp)
10006724:	1000021e 	bne	r2,zero,10006730 <__sfp+0x38>
10006728:	00064dc0 	call	100064dc <__sinit.part.1>
1000672c:	81000017 	ldw	r4,0(r16)
10006730:	2480b804 	addi	r18,r4,736
10006734:	047fffc4 	movi	r17,-1
10006738:	91000117 	ldw	r4,4(r18)
1000673c:	94000217 	ldw	r16,8(r18)
10006740:	213fffc4 	addi	r4,r4,-1
10006744:	20000a16 	blt	r4,zero,10006770 <__sfp+0x78>
10006748:	8080030f 	ldh	r2,12(r16)
1000674c:	10000c26 	beq	r2,zero,10006780 <__sfp+0x88>
10006750:	80c01d04 	addi	r3,r16,116
10006754:	00000206 	br	10006760 <__sfp+0x68>
10006758:	18bfe60f 	ldh	r2,-104(r3)
1000675c:	10000826 	beq	r2,zero,10006780 <__sfp+0x88>
10006760:	213fffc4 	addi	r4,r4,-1
10006764:	1c3ffd04 	addi	r16,r3,-12
10006768:	18c01a04 	addi	r3,r3,104
1000676c:	247ffa1e 	bne	r4,r17,10006758 <__alt_data_end+0xf8006758>
10006770:	90800017 	ldw	r2,0(r18)
10006774:	10001d26 	beq	r2,zero,100067ec <__sfp+0xf4>
10006778:	1025883a 	mov	r18,r2
1000677c:	003fee06 	br	10006738 <__alt_data_end+0xf8006738>
10006780:	00bfffc4 	movi	r2,-1
10006784:	8080038d 	sth	r2,14(r16)
10006788:	00800044 	movi	r2,1
1000678c:	8080030d 	sth	r2,12(r16)
10006790:	80001915 	stw	zero,100(r16)
10006794:	80000015 	stw	zero,0(r16)
10006798:	80000215 	stw	zero,8(r16)
1000679c:	80000115 	stw	zero,4(r16)
100067a0:	80000415 	stw	zero,16(r16)
100067a4:	80000515 	stw	zero,20(r16)
100067a8:	80000615 	stw	zero,24(r16)
100067ac:	01800204 	movi	r6,8
100067b0:	000b883a 	mov	r5,zero
100067b4:	81001704 	addi	r4,r16,92
100067b8:	00081280 	call	10008128 <memset>
100067bc:	8005883a 	mov	r2,r16
100067c0:	80000c15 	stw	zero,48(r16)
100067c4:	80000d15 	stw	zero,52(r16)
100067c8:	80001115 	stw	zero,68(r16)
100067cc:	80001215 	stw	zero,72(r16)
100067d0:	dfc00417 	ldw	ra,16(sp)
100067d4:	dcc00317 	ldw	r19,12(sp)
100067d8:	dc800217 	ldw	r18,8(sp)
100067dc:	dc400117 	ldw	r17,4(sp)
100067e0:	dc000017 	ldw	r16,0(sp)
100067e4:	dec00504 	addi	sp,sp,20
100067e8:	f800283a 	ret
100067ec:	01400104 	movi	r5,4
100067f0:	9809883a 	mov	r4,r19
100067f4:	00066800 	call	10006680 <__sfmoreglue>
100067f8:	90800015 	stw	r2,0(r18)
100067fc:	103fde1e 	bne	r2,zero,10006778 <__alt_data_end+0xf8006778>
10006800:	00800304 	movi	r2,12
10006804:	98800015 	stw	r2,0(r19)
10006808:	0005883a 	mov	r2,zero
1000680c:	003ff006 	br	100067d0 <__alt_data_end+0xf80067d0>

10006810 <_cleanup>:
10006810:	00840074 	movhi	r2,4097
10006814:	108fc704 	addi	r2,r2,16156
10006818:	11000017 	ldw	r4,0(r2)
1000681c:	01440074 	movhi	r5,4097
10006820:	296cf504 	addi	r5,r5,-19500
10006824:	00072381 	jmpi	10007238 <_fwalk_reent>

10006828 <__sinit>:
10006828:	20800e17 	ldw	r2,56(r4)
1000682c:	10000126 	beq	r2,zero,10006834 <__sinit+0xc>
10006830:	f800283a 	ret
10006834:	00064dc1 	jmpi	100064dc <__sinit.part.1>

10006838 <__sfp_lock_acquire>:
10006838:	f800283a 	ret

1000683c <__sfp_lock_release>:
1000683c:	f800283a 	ret

10006840 <__sinit_lock_acquire>:
10006840:	f800283a 	ret

10006844 <__sinit_lock_release>:
10006844:	f800283a 	ret

10006848 <__fp_lock_all>:
10006848:	00840074 	movhi	r2,4097
1000684c:	108fc804 	addi	r2,r2,16160
10006850:	11000017 	ldw	r4,0(r2)
10006854:	01440034 	movhi	r5,4096
10006858:	29599e04 	addi	r5,r5,26232
1000685c:	00071741 	jmpi	10007174 <_fwalk>

10006860 <__fp_unlock_all>:
10006860:	00840074 	movhi	r2,4097
10006864:	108fc804 	addi	r2,r2,16160
10006868:	11000017 	ldw	r4,0(r2)
1000686c:	01440034 	movhi	r5,4096
10006870:	29593204 	addi	r5,r5,25800
10006874:	00071741 	jmpi	10007174 <_fwalk>

10006878 <_malloc_trim_r>:
10006878:	defffb04 	addi	sp,sp,-20
1000687c:	dcc00315 	stw	r19,12(sp)
10006880:	04c40074 	movhi	r19,4097
10006884:	dc800215 	stw	r18,8(sp)
10006888:	dc400115 	stw	r17,4(sp)
1000688c:	dc000015 	stw	r16,0(sp)
10006890:	dfc00415 	stw	ra,16(sp)
10006894:	2821883a 	mov	r16,r5
10006898:	9cca4304 	addi	r19,r19,10508
1000689c:	2025883a 	mov	r18,r4
100068a0:	000f76c0 	call	1000f76c <__malloc_lock>
100068a4:	98800217 	ldw	r2,8(r19)
100068a8:	14400117 	ldw	r17,4(r2)
100068ac:	00bfff04 	movi	r2,-4
100068b0:	88a2703a 	and	r17,r17,r2
100068b4:	8c21c83a 	sub	r16,r17,r16
100068b8:	8403fbc4 	addi	r16,r16,4079
100068bc:	8020d33a 	srli	r16,r16,12
100068c0:	0083ffc4 	movi	r2,4095
100068c4:	843fffc4 	addi	r16,r16,-1
100068c8:	8020933a 	slli	r16,r16,12
100068cc:	1400060e 	bge	r2,r16,100068e8 <_malloc_trim_r+0x70>
100068d0:	000b883a 	mov	r5,zero
100068d4:	9009883a 	mov	r4,r18
100068d8:	00098e00 	call	100098e0 <_sbrk_r>
100068dc:	98c00217 	ldw	r3,8(r19)
100068e0:	1c47883a 	add	r3,r3,r17
100068e4:	10c00a26 	beq	r2,r3,10006910 <_malloc_trim_r+0x98>
100068e8:	9009883a 	mov	r4,r18
100068ec:	000f7900 	call	1000f790 <__malloc_unlock>
100068f0:	0005883a 	mov	r2,zero
100068f4:	dfc00417 	ldw	ra,16(sp)
100068f8:	dcc00317 	ldw	r19,12(sp)
100068fc:	dc800217 	ldw	r18,8(sp)
10006900:	dc400117 	ldw	r17,4(sp)
10006904:	dc000017 	ldw	r16,0(sp)
10006908:	dec00504 	addi	sp,sp,20
1000690c:	f800283a 	ret
10006910:	040bc83a 	sub	r5,zero,r16
10006914:	9009883a 	mov	r4,r18
10006918:	00098e00 	call	100098e0 <_sbrk_r>
1000691c:	00ffffc4 	movi	r3,-1
10006920:	10c00d26 	beq	r2,r3,10006958 <_malloc_trim_r+0xe0>
10006924:	00c40074 	movhi	r3,4097
10006928:	18d6a104 	addi	r3,r3,23172
1000692c:	18800017 	ldw	r2,0(r3)
10006930:	99000217 	ldw	r4,8(r19)
10006934:	8c23c83a 	sub	r17,r17,r16
10006938:	8c400054 	ori	r17,r17,1
1000693c:	1421c83a 	sub	r16,r2,r16
10006940:	24400115 	stw	r17,4(r4)
10006944:	9009883a 	mov	r4,r18
10006948:	1c000015 	stw	r16,0(r3)
1000694c:	000f7900 	call	1000f790 <__malloc_unlock>
10006950:	00800044 	movi	r2,1
10006954:	003fe706 	br	100068f4 <__alt_data_end+0xf80068f4>
10006958:	000b883a 	mov	r5,zero
1000695c:	9009883a 	mov	r4,r18
10006960:	00098e00 	call	100098e0 <_sbrk_r>
10006964:	99000217 	ldw	r4,8(r19)
10006968:	014003c4 	movi	r5,15
1000696c:	1107c83a 	sub	r3,r2,r4
10006970:	28ffdd0e 	bge	r5,r3,100068e8 <__alt_data_end+0xf80068e8>
10006974:	01440074 	movhi	r5,4097
10006978:	294fca04 	addi	r5,r5,16168
1000697c:	29400017 	ldw	r5,0(r5)
10006980:	18c00054 	ori	r3,r3,1
10006984:	20c00115 	stw	r3,4(r4)
10006988:	00c40074 	movhi	r3,4097
1000698c:	1145c83a 	sub	r2,r2,r5
10006990:	18d6a104 	addi	r3,r3,23172
10006994:	18800015 	stw	r2,0(r3)
10006998:	003fd306 	br	100068e8 <__alt_data_end+0xf80068e8>

1000699c <_free_r>:
1000699c:	28004126 	beq	r5,zero,10006aa4 <_free_r+0x108>
100069a0:	defffd04 	addi	sp,sp,-12
100069a4:	dc400115 	stw	r17,4(sp)
100069a8:	dc000015 	stw	r16,0(sp)
100069ac:	2023883a 	mov	r17,r4
100069b0:	2821883a 	mov	r16,r5
100069b4:	dfc00215 	stw	ra,8(sp)
100069b8:	000f76c0 	call	1000f76c <__malloc_lock>
100069bc:	81ffff17 	ldw	r7,-4(r16)
100069c0:	00bfff84 	movi	r2,-2
100069c4:	01040074 	movhi	r4,4097
100069c8:	81bffe04 	addi	r6,r16,-8
100069cc:	3884703a 	and	r2,r7,r2
100069d0:	210a4304 	addi	r4,r4,10508
100069d4:	308b883a 	add	r5,r6,r2
100069d8:	2a400117 	ldw	r9,4(r5)
100069dc:	22000217 	ldw	r8,8(r4)
100069e0:	00ffff04 	movi	r3,-4
100069e4:	48c6703a 	and	r3,r9,r3
100069e8:	2a005726 	beq	r5,r8,10006b48 <_free_r+0x1ac>
100069ec:	28c00115 	stw	r3,4(r5)
100069f0:	39c0004c 	andi	r7,r7,1
100069f4:	3800091e 	bne	r7,zero,10006a1c <_free_r+0x80>
100069f8:	823ffe17 	ldw	r8,-8(r16)
100069fc:	22400204 	addi	r9,r4,8
10006a00:	320dc83a 	sub	r6,r6,r8
10006a04:	31c00217 	ldw	r7,8(r6)
10006a08:	1205883a 	add	r2,r2,r8
10006a0c:	3a406526 	beq	r7,r9,10006ba4 <_free_r+0x208>
10006a10:	32000317 	ldw	r8,12(r6)
10006a14:	3a000315 	stw	r8,12(r7)
10006a18:	41c00215 	stw	r7,8(r8)
10006a1c:	28cf883a 	add	r7,r5,r3
10006a20:	39c00117 	ldw	r7,4(r7)
10006a24:	39c0004c 	andi	r7,r7,1
10006a28:	38003a26 	beq	r7,zero,10006b14 <_free_r+0x178>
10006a2c:	10c00054 	ori	r3,r2,1
10006a30:	30c00115 	stw	r3,4(r6)
10006a34:	3087883a 	add	r3,r6,r2
10006a38:	18800015 	stw	r2,0(r3)
10006a3c:	00c07fc4 	movi	r3,511
10006a40:	18801936 	bltu	r3,r2,10006aa8 <_free_r+0x10c>
10006a44:	1004d0fa 	srli	r2,r2,3
10006a48:	01c00044 	movi	r7,1
10006a4c:	21400117 	ldw	r5,4(r4)
10006a50:	10c00044 	addi	r3,r2,1
10006a54:	18c7883a 	add	r3,r3,r3
10006a58:	1005d0ba 	srai	r2,r2,2
10006a5c:	18c7883a 	add	r3,r3,r3
10006a60:	18c7883a 	add	r3,r3,r3
10006a64:	1907883a 	add	r3,r3,r4
10006a68:	3884983a 	sll	r2,r7,r2
10006a6c:	19c00017 	ldw	r7,0(r3)
10006a70:	1a3ffe04 	addi	r8,r3,-8
10006a74:	1144b03a 	or	r2,r2,r5
10006a78:	32000315 	stw	r8,12(r6)
10006a7c:	31c00215 	stw	r7,8(r6)
10006a80:	20800115 	stw	r2,4(r4)
10006a84:	19800015 	stw	r6,0(r3)
10006a88:	39800315 	stw	r6,12(r7)
10006a8c:	8809883a 	mov	r4,r17
10006a90:	dfc00217 	ldw	ra,8(sp)
10006a94:	dc400117 	ldw	r17,4(sp)
10006a98:	dc000017 	ldw	r16,0(sp)
10006a9c:	dec00304 	addi	sp,sp,12
10006aa0:	000f7901 	jmpi	1000f790 <__malloc_unlock>
10006aa4:	f800283a 	ret
10006aa8:	100ad27a 	srli	r5,r2,9
10006aac:	00c00104 	movi	r3,4
10006ab0:	19404a36 	bltu	r3,r5,10006bdc <_free_r+0x240>
10006ab4:	100ad1ba 	srli	r5,r2,6
10006ab8:	28c00e44 	addi	r3,r5,57
10006abc:	18c7883a 	add	r3,r3,r3
10006ac0:	29400e04 	addi	r5,r5,56
10006ac4:	18c7883a 	add	r3,r3,r3
10006ac8:	18c7883a 	add	r3,r3,r3
10006acc:	1909883a 	add	r4,r3,r4
10006ad0:	20c00017 	ldw	r3,0(r4)
10006ad4:	01c40074 	movhi	r7,4097
10006ad8:	213ffe04 	addi	r4,r4,-8
10006adc:	39ca4304 	addi	r7,r7,10508
10006ae0:	20c04426 	beq	r4,r3,10006bf4 <_free_r+0x258>
10006ae4:	01ffff04 	movi	r7,-4
10006ae8:	19400117 	ldw	r5,4(r3)
10006aec:	29ca703a 	and	r5,r5,r7
10006af0:	1140022e 	bgeu	r2,r5,10006afc <_free_r+0x160>
10006af4:	18c00217 	ldw	r3,8(r3)
10006af8:	20fffb1e 	bne	r4,r3,10006ae8 <__alt_data_end+0xf8006ae8>
10006afc:	19000317 	ldw	r4,12(r3)
10006b00:	31000315 	stw	r4,12(r6)
10006b04:	30c00215 	stw	r3,8(r6)
10006b08:	21800215 	stw	r6,8(r4)
10006b0c:	19800315 	stw	r6,12(r3)
10006b10:	003fde06 	br	10006a8c <__alt_data_end+0xf8006a8c>
10006b14:	29c00217 	ldw	r7,8(r5)
10006b18:	10c5883a 	add	r2,r2,r3
10006b1c:	00c40074 	movhi	r3,4097
10006b20:	18ca4504 	addi	r3,r3,10516
10006b24:	38c03b26 	beq	r7,r3,10006c14 <_free_r+0x278>
10006b28:	2a000317 	ldw	r8,12(r5)
10006b2c:	11400054 	ori	r5,r2,1
10006b30:	3087883a 	add	r3,r6,r2
10006b34:	3a000315 	stw	r8,12(r7)
10006b38:	41c00215 	stw	r7,8(r8)
10006b3c:	31400115 	stw	r5,4(r6)
10006b40:	18800015 	stw	r2,0(r3)
10006b44:	003fbd06 	br	10006a3c <__alt_data_end+0xf8006a3c>
10006b48:	39c0004c 	andi	r7,r7,1
10006b4c:	10c5883a 	add	r2,r2,r3
10006b50:	3800071e 	bne	r7,zero,10006b70 <_free_r+0x1d4>
10006b54:	81fffe17 	ldw	r7,-8(r16)
10006b58:	31cdc83a 	sub	r6,r6,r7
10006b5c:	30c00317 	ldw	r3,12(r6)
10006b60:	31400217 	ldw	r5,8(r6)
10006b64:	11c5883a 	add	r2,r2,r7
10006b68:	28c00315 	stw	r3,12(r5)
10006b6c:	19400215 	stw	r5,8(r3)
10006b70:	10c00054 	ori	r3,r2,1
10006b74:	30c00115 	stw	r3,4(r6)
10006b78:	00c40074 	movhi	r3,4097
10006b7c:	18cfcb04 	addi	r3,r3,16172
10006b80:	18c00017 	ldw	r3,0(r3)
10006b84:	21800215 	stw	r6,8(r4)
10006b88:	10ffc036 	bltu	r2,r3,10006a8c <__alt_data_end+0xf8006a8c>
10006b8c:	00840074 	movhi	r2,4097
10006b90:	10969804 	addi	r2,r2,23136
10006b94:	11400017 	ldw	r5,0(r2)
10006b98:	8809883a 	mov	r4,r17
10006b9c:	00068780 	call	10006878 <_malloc_trim_r>
10006ba0:	003fba06 	br	10006a8c <__alt_data_end+0xf8006a8c>
10006ba4:	28c9883a 	add	r4,r5,r3
10006ba8:	21000117 	ldw	r4,4(r4)
10006bac:	2100004c 	andi	r4,r4,1
10006bb0:	2000391e 	bne	r4,zero,10006c98 <_free_r+0x2fc>
10006bb4:	29c00217 	ldw	r7,8(r5)
10006bb8:	29000317 	ldw	r4,12(r5)
10006bbc:	1885883a 	add	r2,r3,r2
10006bc0:	10c00054 	ori	r3,r2,1
10006bc4:	39000315 	stw	r4,12(r7)
10006bc8:	21c00215 	stw	r7,8(r4)
10006bcc:	30c00115 	stw	r3,4(r6)
10006bd0:	308d883a 	add	r6,r6,r2
10006bd4:	30800015 	stw	r2,0(r6)
10006bd8:	003fac06 	br	10006a8c <__alt_data_end+0xf8006a8c>
10006bdc:	00c00504 	movi	r3,20
10006be0:	19401536 	bltu	r3,r5,10006c38 <_free_r+0x29c>
10006be4:	28c01704 	addi	r3,r5,92
10006be8:	18c7883a 	add	r3,r3,r3
10006bec:	294016c4 	addi	r5,r5,91
10006bf0:	003fb406 	br	10006ac4 <__alt_data_end+0xf8006ac4>
10006bf4:	280bd0ba 	srai	r5,r5,2
10006bf8:	00c00044 	movi	r3,1
10006bfc:	38800117 	ldw	r2,4(r7)
10006c00:	194a983a 	sll	r5,r3,r5
10006c04:	2007883a 	mov	r3,r4
10006c08:	2884b03a 	or	r2,r5,r2
10006c0c:	38800115 	stw	r2,4(r7)
10006c10:	003fbb06 	br	10006b00 <__alt_data_end+0xf8006b00>
10006c14:	21800515 	stw	r6,20(r4)
10006c18:	21800415 	stw	r6,16(r4)
10006c1c:	10c00054 	ori	r3,r2,1
10006c20:	31c00315 	stw	r7,12(r6)
10006c24:	31c00215 	stw	r7,8(r6)
10006c28:	30c00115 	stw	r3,4(r6)
10006c2c:	308d883a 	add	r6,r6,r2
10006c30:	30800015 	stw	r2,0(r6)
10006c34:	003f9506 	br	10006a8c <__alt_data_end+0xf8006a8c>
10006c38:	00c01504 	movi	r3,84
10006c3c:	19400536 	bltu	r3,r5,10006c54 <_free_r+0x2b8>
10006c40:	100ad33a 	srli	r5,r2,12
10006c44:	28c01bc4 	addi	r3,r5,111
10006c48:	18c7883a 	add	r3,r3,r3
10006c4c:	29401b84 	addi	r5,r5,110
10006c50:	003f9c06 	br	10006ac4 <__alt_data_end+0xf8006ac4>
10006c54:	00c05504 	movi	r3,340
10006c58:	19400536 	bltu	r3,r5,10006c70 <_free_r+0x2d4>
10006c5c:	100ad3fa 	srli	r5,r2,15
10006c60:	28c01e04 	addi	r3,r5,120
10006c64:	18c7883a 	add	r3,r3,r3
10006c68:	29401dc4 	addi	r5,r5,119
10006c6c:	003f9506 	br	10006ac4 <__alt_data_end+0xf8006ac4>
10006c70:	00c15504 	movi	r3,1364
10006c74:	19400536 	bltu	r3,r5,10006c8c <_free_r+0x2f0>
10006c78:	100ad4ba 	srli	r5,r2,18
10006c7c:	28c01f44 	addi	r3,r5,125
10006c80:	18c7883a 	add	r3,r3,r3
10006c84:	29401f04 	addi	r5,r5,124
10006c88:	003f8e06 	br	10006ac4 <__alt_data_end+0xf8006ac4>
10006c8c:	00c03f84 	movi	r3,254
10006c90:	01401f84 	movi	r5,126
10006c94:	003f8b06 	br	10006ac4 <__alt_data_end+0xf8006ac4>
10006c98:	10c00054 	ori	r3,r2,1
10006c9c:	30c00115 	stw	r3,4(r6)
10006ca0:	308d883a 	add	r6,r6,r2
10006ca4:	30800015 	stw	r2,0(r6)
10006ca8:	003f7806 	br	10006a8c <__alt_data_end+0xf8006a8c>

10006cac <__sfvwrite_r>:
10006cac:	30800217 	ldw	r2,8(r6)
10006cb0:	10006726 	beq	r2,zero,10006e50 <__sfvwrite_r+0x1a4>
10006cb4:	28c0030b 	ldhu	r3,12(r5)
10006cb8:	defff404 	addi	sp,sp,-48
10006cbc:	dd400715 	stw	r21,28(sp)
10006cc0:	dd000615 	stw	r20,24(sp)
10006cc4:	dc000215 	stw	r16,8(sp)
10006cc8:	dfc00b15 	stw	ra,44(sp)
10006ccc:	df000a15 	stw	fp,40(sp)
10006cd0:	ddc00915 	stw	r23,36(sp)
10006cd4:	dd800815 	stw	r22,32(sp)
10006cd8:	dcc00515 	stw	r19,20(sp)
10006cdc:	dc800415 	stw	r18,16(sp)
10006ce0:	dc400315 	stw	r17,12(sp)
10006ce4:	1880020c 	andi	r2,r3,8
10006ce8:	2821883a 	mov	r16,r5
10006cec:	202b883a 	mov	r21,r4
10006cf0:	3029883a 	mov	r20,r6
10006cf4:	10002726 	beq	r2,zero,10006d94 <__sfvwrite_r+0xe8>
10006cf8:	28800417 	ldw	r2,16(r5)
10006cfc:	10002526 	beq	r2,zero,10006d94 <__sfvwrite_r+0xe8>
10006d00:	1880008c 	andi	r2,r3,2
10006d04:	a4400017 	ldw	r17,0(r20)
10006d08:	10002a26 	beq	r2,zero,10006db4 <__sfvwrite_r+0x108>
10006d0c:	05a00034 	movhi	r22,32768
10006d10:	0027883a 	mov	r19,zero
10006d14:	0025883a 	mov	r18,zero
10006d18:	b5bf0004 	addi	r22,r22,-1024
10006d1c:	980d883a 	mov	r6,r19
10006d20:	a809883a 	mov	r4,r21
10006d24:	90004626 	beq	r18,zero,10006e40 <__sfvwrite_r+0x194>
10006d28:	900f883a 	mov	r7,r18
10006d2c:	b480022e 	bgeu	r22,r18,10006d38 <__sfvwrite_r+0x8c>
10006d30:	01e00034 	movhi	r7,32768
10006d34:	39ff0004 	addi	r7,r7,-1024
10006d38:	80800917 	ldw	r2,36(r16)
10006d3c:	81400717 	ldw	r5,28(r16)
10006d40:	103ee83a 	callr	r2
10006d44:	00805a0e 	bge	zero,r2,10006eb0 <__sfvwrite_r+0x204>
10006d48:	a0c00217 	ldw	r3,8(r20)
10006d4c:	98a7883a 	add	r19,r19,r2
10006d50:	90a5c83a 	sub	r18,r18,r2
10006d54:	1885c83a 	sub	r2,r3,r2
10006d58:	a0800215 	stw	r2,8(r20)
10006d5c:	103fef1e 	bne	r2,zero,10006d1c <__alt_data_end+0xf8006d1c>
10006d60:	0005883a 	mov	r2,zero
10006d64:	dfc00b17 	ldw	ra,44(sp)
10006d68:	df000a17 	ldw	fp,40(sp)
10006d6c:	ddc00917 	ldw	r23,36(sp)
10006d70:	dd800817 	ldw	r22,32(sp)
10006d74:	dd400717 	ldw	r21,28(sp)
10006d78:	dd000617 	ldw	r20,24(sp)
10006d7c:	dcc00517 	ldw	r19,20(sp)
10006d80:	dc800417 	ldw	r18,16(sp)
10006d84:	dc400317 	ldw	r17,12(sp)
10006d88:	dc000217 	ldw	r16,8(sp)
10006d8c:	dec00c04 	addi	sp,sp,48
10006d90:	f800283a 	ret
10006d94:	800b883a 	mov	r5,r16
10006d98:	a809883a 	mov	r4,r21
10006d9c:	000481c0 	call	1000481c <__swsetup_r>
10006da0:	1000ee1e 	bne	r2,zero,1000715c <__sfvwrite_r+0x4b0>
10006da4:	80c0030b 	ldhu	r3,12(r16)
10006da8:	a4400017 	ldw	r17,0(r20)
10006dac:	1880008c 	andi	r2,r3,2
10006db0:	103fd61e 	bne	r2,zero,10006d0c <__alt_data_end+0xf8006d0c>
10006db4:	1880004c 	andi	r2,r3,1
10006db8:	1000421e 	bne	r2,zero,10006ec4 <__sfvwrite_r+0x218>
10006dbc:	0039883a 	mov	fp,zero
10006dc0:	0025883a 	mov	r18,zero
10006dc4:	90001a26 	beq	r18,zero,10006e30 <__sfvwrite_r+0x184>
10006dc8:	1880800c 	andi	r2,r3,512
10006dcc:	84c00217 	ldw	r19,8(r16)
10006dd0:	10002126 	beq	r2,zero,10006e58 <__sfvwrite_r+0x1ac>
10006dd4:	982f883a 	mov	r23,r19
10006dd8:	94c09636 	bltu	r18,r19,10007034 <__sfvwrite_r+0x388>
10006ddc:	1881200c 	andi	r2,r3,1152
10006de0:	1000a11e 	bne	r2,zero,10007068 <__sfvwrite_r+0x3bc>
10006de4:	81000017 	ldw	r4,0(r16)
10006de8:	b80d883a 	mov	r6,r23
10006dec:	e00b883a 	mov	r5,fp
10006df0:	0007fcc0 	call	10007fcc <memmove>
10006df4:	80c00217 	ldw	r3,8(r16)
10006df8:	81000017 	ldw	r4,0(r16)
10006dfc:	9005883a 	mov	r2,r18
10006e00:	1ce7c83a 	sub	r19,r3,r19
10006e04:	25cf883a 	add	r7,r4,r23
10006e08:	84c00215 	stw	r19,8(r16)
10006e0c:	81c00015 	stw	r7,0(r16)
10006e10:	a0c00217 	ldw	r3,8(r20)
10006e14:	e0b9883a 	add	fp,fp,r2
10006e18:	90a5c83a 	sub	r18,r18,r2
10006e1c:	18a7c83a 	sub	r19,r3,r2
10006e20:	a4c00215 	stw	r19,8(r20)
10006e24:	983fce26 	beq	r19,zero,10006d60 <__alt_data_end+0xf8006d60>
10006e28:	80c0030b 	ldhu	r3,12(r16)
10006e2c:	903fe61e 	bne	r18,zero,10006dc8 <__alt_data_end+0xf8006dc8>
10006e30:	8f000017 	ldw	fp,0(r17)
10006e34:	8c800117 	ldw	r18,4(r17)
10006e38:	8c400204 	addi	r17,r17,8
10006e3c:	003fe106 	br	10006dc4 <__alt_data_end+0xf8006dc4>
10006e40:	8cc00017 	ldw	r19,0(r17)
10006e44:	8c800117 	ldw	r18,4(r17)
10006e48:	8c400204 	addi	r17,r17,8
10006e4c:	003fb306 	br	10006d1c <__alt_data_end+0xf8006d1c>
10006e50:	0005883a 	mov	r2,zero
10006e54:	f800283a 	ret
10006e58:	81000017 	ldw	r4,0(r16)
10006e5c:	80800417 	ldw	r2,16(r16)
10006e60:	11005a36 	bltu	r2,r4,10006fcc <__sfvwrite_r+0x320>
10006e64:	85c00517 	ldw	r23,20(r16)
10006e68:	95c05836 	bltu	r18,r23,10006fcc <__sfvwrite_r+0x320>
10006e6c:	00a00034 	movhi	r2,32768
10006e70:	10bfffc4 	addi	r2,r2,-1
10006e74:	9009883a 	mov	r4,r18
10006e78:	1480012e 	bgeu	r2,r18,10006e80 <__sfvwrite_r+0x1d4>
10006e7c:	1009883a 	mov	r4,r2
10006e80:	b80b883a 	mov	r5,r23
10006e84:	000c7500 	call	1000c750 <__divsi3>
10006e88:	b80b883a 	mov	r5,r23
10006e8c:	1009883a 	mov	r4,r2
10006e90:	000c9040 	call	1000c904 <__mulsi3>
10006e94:	81400717 	ldw	r5,28(r16)
10006e98:	80c00917 	ldw	r3,36(r16)
10006e9c:	100f883a 	mov	r7,r2
10006ea0:	e00d883a 	mov	r6,fp
10006ea4:	a809883a 	mov	r4,r21
10006ea8:	183ee83a 	callr	r3
10006eac:	00bfd816 	blt	zero,r2,10006e10 <__alt_data_end+0xf8006e10>
10006eb0:	8080030b 	ldhu	r2,12(r16)
10006eb4:	10801014 	ori	r2,r2,64
10006eb8:	8080030d 	sth	r2,12(r16)
10006ebc:	00bfffc4 	movi	r2,-1
10006ec0:	003fa806 	br	10006d64 <__alt_data_end+0xf8006d64>
10006ec4:	0027883a 	mov	r19,zero
10006ec8:	0011883a 	mov	r8,zero
10006ecc:	0039883a 	mov	fp,zero
10006ed0:	0025883a 	mov	r18,zero
10006ed4:	90001f26 	beq	r18,zero,10006f54 <__sfvwrite_r+0x2a8>
10006ed8:	40005a26 	beq	r8,zero,10007044 <__sfvwrite_r+0x398>
10006edc:	982d883a 	mov	r22,r19
10006ee0:	94c0012e 	bgeu	r18,r19,10006ee8 <__sfvwrite_r+0x23c>
10006ee4:	902d883a 	mov	r22,r18
10006ee8:	81000017 	ldw	r4,0(r16)
10006eec:	80800417 	ldw	r2,16(r16)
10006ef0:	b02f883a 	mov	r23,r22
10006ef4:	81c00517 	ldw	r7,20(r16)
10006ef8:	1100032e 	bgeu	r2,r4,10006f08 <__sfvwrite_r+0x25c>
10006efc:	80c00217 	ldw	r3,8(r16)
10006f00:	38c7883a 	add	r3,r7,r3
10006f04:	1d801816 	blt	r3,r22,10006f68 <__sfvwrite_r+0x2bc>
10006f08:	b1c03e16 	blt	r22,r7,10007004 <__sfvwrite_r+0x358>
10006f0c:	80800917 	ldw	r2,36(r16)
10006f10:	81400717 	ldw	r5,28(r16)
10006f14:	e00d883a 	mov	r6,fp
10006f18:	da000115 	stw	r8,4(sp)
10006f1c:	a809883a 	mov	r4,r21
10006f20:	103ee83a 	callr	r2
10006f24:	102f883a 	mov	r23,r2
10006f28:	da000117 	ldw	r8,4(sp)
10006f2c:	00bfe00e 	bge	zero,r2,10006eb0 <__alt_data_end+0xf8006eb0>
10006f30:	9de7c83a 	sub	r19,r19,r23
10006f34:	98001f26 	beq	r19,zero,10006fb4 <__sfvwrite_r+0x308>
10006f38:	a0800217 	ldw	r2,8(r20)
10006f3c:	e5f9883a 	add	fp,fp,r23
10006f40:	95e5c83a 	sub	r18,r18,r23
10006f44:	15efc83a 	sub	r23,r2,r23
10006f48:	a5c00215 	stw	r23,8(r20)
10006f4c:	b83f8426 	beq	r23,zero,10006d60 <__alt_data_end+0xf8006d60>
10006f50:	903fe11e 	bne	r18,zero,10006ed8 <__alt_data_end+0xf8006ed8>
10006f54:	8f000017 	ldw	fp,0(r17)
10006f58:	8c800117 	ldw	r18,4(r17)
10006f5c:	0011883a 	mov	r8,zero
10006f60:	8c400204 	addi	r17,r17,8
10006f64:	003fdb06 	br	10006ed4 <__alt_data_end+0xf8006ed4>
10006f68:	180d883a 	mov	r6,r3
10006f6c:	e00b883a 	mov	r5,fp
10006f70:	da000115 	stw	r8,4(sp)
10006f74:	d8c00015 	stw	r3,0(sp)
10006f78:	0007fcc0 	call	10007fcc <memmove>
10006f7c:	d8c00017 	ldw	r3,0(sp)
10006f80:	80800017 	ldw	r2,0(r16)
10006f84:	800b883a 	mov	r5,r16
10006f88:	a809883a 	mov	r4,r21
10006f8c:	10c5883a 	add	r2,r2,r3
10006f90:	80800015 	stw	r2,0(r16)
10006f94:	d8c00015 	stw	r3,0(sp)
10006f98:	000643c0 	call	1000643c <_fflush_r>
10006f9c:	d8c00017 	ldw	r3,0(sp)
10006fa0:	da000117 	ldw	r8,4(sp)
10006fa4:	103fc21e 	bne	r2,zero,10006eb0 <__alt_data_end+0xf8006eb0>
10006fa8:	182f883a 	mov	r23,r3
10006fac:	9de7c83a 	sub	r19,r19,r23
10006fb0:	983fe11e 	bne	r19,zero,10006f38 <__alt_data_end+0xf8006f38>
10006fb4:	800b883a 	mov	r5,r16
10006fb8:	a809883a 	mov	r4,r21
10006fbc:	000643c0 	call	1000643c <_fflush_r>
10006fc0:	103fbb1e 	bne	r2,zero,10006eb0 <__alt_data_end+0xf8006eb0>
10006fc4:	0011883a 	mov	r8,zero
10006fc8:	003fdb06 	br	10006f38 <__alt_data_end+0xf8006f38>
10006fcc:	94c0012e 	bgeu	r18,r19,10006fd4 <__sfvwrite_r+0x328>
10006fd0:	9027883a 	mov	r19,r18
10006fd4:	980d883a 	mov	r6,r19
10006fd8:	e00b883a 	mov	r5,fp
10006fdc:	0007fcc0 	call	10007fcc <memmove>
10006fe0:	80800217 	ldw	r2,8(r16)
10006fe4:	80c00017 	ldw	r3,0(r16)
10006fe8:	14c5c83a 	sub	r2,r2,r19
10006fec:	1cc7883a 	add	r3,r3,r19
10006ff0:	80800215 	stw	r2,8(r16)
10006ff4:	80c00015 	stw	r3,0(r16)
10006ff8:	10004326 	beq	r2,zero,10007108 <__sfvwrite_r+0x45c>
10006ffc:	9805883a 	mov	r2,r19
10007000:	003f8306 	br	10006e10 <__alt_data_end+0xf8006e10>
10007004:	b00d883a 	mov	r6,r22
10007008:	e00b883a 	mov	r5,fp
1000700c:	da000115 	stw	r8,4(sp)
10007010:	0007fcc0 	call	10007fcc <memmove>
10007014:	80800217 	ldw	r2,8(r16)
10007018:	80c00017 	ldw	r3,0(r16)
1000701c:	da000117 	ldw	r8,4(sp)
10007020:	1585c83a 	sub	r2,r2,r22
10007024:	1dad883a 	add	r22,r3,r22
10007028:	80800215 	stw	r2,8(r16)
1000702c:	85800015 	stw	r22,0(r16)
10007030:	003fbf06 	br	10006f30 <__alt_data_end+0xf8006f30>
10007034:	81000017 	ldw	r4,0(r16)
10007038:	9027883a 	mov	r19,r18
1000703c:	902f883a 	mov	r23,r18
10007040:	003f6906 	br	10006de8 <__alt_data_end+0xf8006de8>
10007044:	900d883a 	mov	r6,r18
10007048:	01400284 	movi	r5,10
1000704c:	e009883a 	mov	r4,fp
10007050:	0007da00 	call	10007da0 <memchr>
10007054:	10003e26 	beq	r2,zero,10007150 <__sfvwrite_r+0x4a4>
10007058:	10800044 	addi	r2,r2,1
1000705c:	1727c83a 	sub	r19,r2,fp
10007060:	02000044 	movi	r8,1
10007064:	003f9d06 	br	10006edc <__alt_data_end+0xf8006edc>
10007068:	80800517 	ldw	r2,20(r16)
1000706c:	81400417 	ldw	r5,16(r16)
10007070:	81c00017 	ldw	r7,0(r16)
10007074:	10a7883a 	add	r19,r2,r2
10007078:	9885883a 	add	r2,r19,r2
1000707c:	1026d7fa 	srli	r19,r2,31
10007080:	396dc83a 	sub	r22,r7,r5
10007084:	b1000044 	addi	r4,r22,1
10007088:	9885883a 	add	r2,r19,r2
1000708c:	1027d07a 	srai	r19,r2,1
10007090:	2485883a 	add	r2,r4,r18
10007094:	980d883a 	mov	r6,r19
10007098:	9880022e 	bgeu	r19,r2,100070a4 <__sfvwrite_r+0x3f8>
1000709c:	1027883a 	mov	r19,r2
100070a0:	100d883a 	mov	r6,r2
100070a4:	18c1000c 	andi	r3,r3,1024
100070a8:	18001c26 	beq	r3,zero,1000711c <__sfvwrite_r+0x470>
100070ac:	300b883a 	mov	r5,r6
100070b0:	a809883a 	mov	r4,r21
100070b4:	00075940 	call	10007594 <_malloc_r>
100070b8:	102f883a 	mov	r23,r2
100070bc:	10002926 	beq	r2,zero,10007164 <__sfvwrite_r+0x4b8>
100070c0:	81400417 	ldw	r5,16(r16)
100070c4:	b00d883a 	mov	r6,r22
100070c8:	1009883a 	mov	r4,r2
100070cc:	0007e840 	call	10007e84 <memcpy>
100070d0:	8080030b 	ldhu	r2,12(r16)
100070d4:	00fedfc4 	movi	r3,-1153
100070d8:	10c4703a 	and	r2,r2,r3
100070dc:	10802014 	ori	r2,r2,128
100070e0:	8080030d 	sth	r2,12(r16)
100070e4:	bd89883a 	add	r4,r23,r22
100070e8:	9d8fc83a 	sub	r7,r19,r22
100070ec:	85c00415 	stw	r23,16(r16)
100070f0:	84c00515 	stw	r19,20(r16)
100070f4:	81000015 	stw	r4,0(r16)
100070f8:	9027883a 	mov	r19,r18
100070fc:	81c00215 	stw	r7,8(r16)
10007100:	902f883a 	mov	r23,r18
10007104:	003f3806 	br	10006de8 <__alt_data_end+0xf8006de8>
10007108:	800b883a 	mov	r5,r16
1000710c:	a809883a 	mov	r4,r21
10007110:	000643c0 	call	1000643c <_fflush_r>
10007114:	103fb926 	beq	r2,zero,10006ffc <__alt_data_end+0xf8006ffc>
10007118:	003f6506 	br	10006eb0 <__alt_data_end+0xf8006eb0>
1000711c:	a809883a 	mov	r4,r21
10007120:	00093080 	call	10009308 <_realloc_r>
10007124:	102f883a 	mov	r23,r2
10007128:	103fee1e 	bne	r2,zero,100070e4 <__alt_data_end+0xf80070e4>
1000712c:	81400417 	ldw	r5,16(r16)
10007130:	a809883a 	mov	r4,r21
10007134:	000699c0 	call	1000699c <_free_r>
10007138:	8080030b 	ldhu	r2,12(r16)
1000713c:	00ffdfc4 	movi	r3,-129
10007140:	1884703a 	and	r2,r3,r2
10007144:	00c00304 	movi	r3,12
10007148:	a8c00015 	stw	r3,0(r21)
1000714c:	003f5906 	br	10006eb4 <__alt_data_end+0xf8006eb4>
10007150:	94c00044 	addi	r19,r18,1
10007154:	02000044 	movi	r8,1
10007158:	003f6006 	br	10006edc <__alt_data_end+0xf8006edc>
1000715c:	00bfffc4 	movi	r2,-1
10007160:	003f0006 	br	10006d64 <__alt_data_end+0xf8006d64>
10007164:	00800304 	movi	r2,12
10007168:	a8800015 	stw	r2,0(r21)
1000716c:	8080030b 	ldhu	r2,12(r16)
10007170:	003f5006 	br	10006eb4 <__alt_data_end+0xf8006eb4>

10007174 <_fwalk>:
10007174:	defff704 	addi	sp,sp,-36
10007178:	dd000415 	stw	r20,16(sp)
1000717c:	dfc00815 	stw	ra,32(sp)
10007180:	ddc00715 	stw	r23,28(sp)
10007184:	dd800615 	stw	r22,24(sp)
10007188:	dd400515 	stw	r21,20(sp)
1000718c:	dcc00315 	stw	r19,12(sp)
10007190:	dc800215 	stw	r18,8(sp)
10007194:	dc400115 	stw	r17,4(sp)
10007198:	dc000015 	stw	r16,0(sp)
1000719c:	2500b804 	addi	r20,r4,736
100071a0:	a0002326 	beq	r20,zero,10007230 <_fwalk+0xbc>
100071a4:	282b883a 	mov	r21,r5
100071a8:	002f883a 	mov	r23,zero
100071ac:	05800044 	movi	r22,1
100071b0:	04ffffc4 	movi	r19,-1
100071b4:	a4400117 	ldw	r17,4(r20)
100071b8:	a4800217 	ldw	r18,8(r20)
100071bc:	8c7fffc4 	addi	r17,r17,-1
100071c0:	88000d16 	blt	r17,zero,100071f8 <_fwalk+0x84>
100071c4:	94000304 	addi	r16,r18,12
100071c8:	94800384 	addi	r18,r18,14
100071cc:	8080000b 	ldhu	r2,0(r16)
100071d0:	8c7fffc4 	addi	r17,r17,-1
100071d4:	813ffd04 	addi	r4,r16,-12
100071d8:	b080042e 	bgeu	r22,r2,100071ec <_fwalk+0x78>
100071dc:	9080000f 	ldh	r2,0(r18)
100071e0:	14c00226 	beq	r2,r19,100071ec <_fwalk+0x78>
100071e4:	a83ee83a 	callr	r21
100071e8:	b8aeb03a 	or	r23,r23,r2
100071ec:	84001a04 	addi	r16,r16,104
100071f0:	94801a04 	addi	r18,r18,104
100071f4:	8cfff51e 	bne	r17,r19,100071cc <__alt_data_end+0xf80071cc>
100071f8:	a5000017 	ldw	r20,0(r20)
100071fc:	a03fed1e 	bne	r20,zero,100071b4 <__alt_data_end+0xf80071b4>
10007200:	b805883a 	mov	r2,r23
10007204:	dfc00817 	ldw	ra,32(sp)
10007208:	ddc00717 	ldw	r23,28(sp)
1000720c:	dd800617 	ldw	r22,24(sp)
10007210:	dd400517 	ldw	r21,20(sp)
10007214:	dd000417 	ldw	r20,16(sp)
10007218:	dcc00317 	ldw	r19,12(sp)
1000721c:	dc800217 	ldw	r18,8(sp)
10007220:	dc400117 	ldw	r17,4(sp)
10007224:	dc000017 	ldw	r16,0(sp)
10007228:	dec00904 	addi	sp,sp,36
1000722c:	f800283a 	ret
10007230:	002f883a 	mov	r23,zero
10007234:	003ff206 	br	10007200 <__alt_data_end+0xf8007200>

10007238 <_fwalk_reent>:
10007238:	defff704 	addi	sp,sp,-36
1000723c:	dd000415 	stw	r20,16(sp)
10007240:	dfc00815 	stw	ra,32(sp)
10007244:	ddc00715 	stw	r23,28(sp)
10007248:	dd800615 	stw	r22,24(sp)
1000724c:	dd400515 	stw	r21,20(sp)
10007250:	dcc00315 	stw	r19,12(sp)
10007254:	dc800215 	stw	r18,8(sp)
10007258:	dc400115 	stw	r17,4(sp)
1000725c:	dc000015 	stw	r16,0(sp)
10007260:	2500b804 	addi	r20,r4,736
10007264:	a0002326 	beq	r20,zero,100072f4 <_fwalk_reent+0xbc>
10007268:	282b883a 	mov	r21,r5
1000726c:	2027883a 	mov	r19,r4
10007270:	002f883a 	mov	r23,zero
10007274:	05800044 	movi	r22,1
10007278:	04bfffc4 	movi	r18,-1
1000727c:	a4400117 	ldw	r17,4(r20)
10007280:	a4000217 	ldw	r16,8(r20)
10007284:	8c7fffc4 	addi	r17,r17,-1
10007288:	88000c16 	blt	r17,zero,100072bc <_fwalk_reent+0x84>
1000728c:	84000304 	addi	r16,r16,12
10007290:	8080000b 	ldhu	r2,0(r16)
10007294:	8c7fffc4 	addi	r17,r17,-1
10007298:	817ffd04 	addi	r5,r16,-12
1000729c:	b080052e 	bgeu	r22,r2,100072b4 <_fwalk_reent+0x7c>
100072a0:	8080008f 	ldh	r2,2(r16)
100072a4:	9809883a 	mov	r4,r19
100072a8:	14800226 	beq	r2,r18,100072b4 <_fwalk_reent+0x7c>
100072ac:	a83ee83a 	callr	r21
100072b0:	b8aeb03a 	or	r23,r23,r2
100072b4:	84001a04 	addi	r16,r16,104
100072b8:	8cbff51e 	bne	r17,r18,10007290 <__alt_data_end+0xf8007290>
100072bc:	a5000017 	ldw	r20,0(r20)
100072c0:	a03fee1e 	bne	r20,zero,1000727c <__alt_data_end+0xf800727c>
100072c4:	b805883a 	mov	r2,r23
100072c8:	dfc00817 	ldw	ra,32(sp)
100072cc:	ddc00717 	ldw	r23,28(sp)
100072d0:	dd800617 	ldw	r22,24(sp)
100072d4:	dd400517 	ldw	r21,20(sp)
100072d8:	dd000417 	ldw	r20,16(sp)
100072dc:	dcc00317 	ldw	r19,12(sp)
100072e0:	dc800217 	ldw	r18,8(sp)
100072e4:	dc400117 	ldw	r17,4(sp)
100072e8:	dc000017 	ldw	r16,0(sp)
100072ec:	dec00904 	addi	sp,sp,36
100072f0:	f800283a 	ret
100072f4:	002f883a 	mov	r23,zero
100072f8:	003ff206 	br	100072c4 <__alt_data_end+0xf80072c4>

100072fc <_setlocale_r>:
100072fc:	30001b26 	beq	r6,zero,1000736c <_setlocale_r+0x70>
10007300:	01440074 	movhi	r5,4097
10007304:	defffe04 	addi	sp,sp,-8
10007308:	29487b04 	addi	r5,r5,8684
1000730c:	3009883a 	mov	r4,r6
10007310:	dc000015 	stw	r16,0(sp)
10007314:	dfc00115 	stw	ra,4(sp)
10007318:	3021883a 	mov	r16,r6
1000731c:	0009a700 	call	10009a70 <strcmp>
10007320:	1000061e 	bne	r2,zero,1000733c <_setlocale_r+0x40>
10007324:	00840074 	movhi	r2,4097
10007328:	10887a04 	addi	r2,r2,8680
1000732c:	dfc00117 	ldw	ra,4(sp)
10007330:	dc000017 	ldw	r16,0(sp)
10007334:	dec00204 	addi	sp,sp,8
10007338:	f800283a 	ret
1000733c:	01440074 	movhi	r5,4097
10007340:	29487a04 	addi	r5,r5,8680
10007344:	8009883a 	mov	r4,r16
10007348:	0009a700 	call	10009a70 <strcmp>
1000734c:	103ff526 	beq	r2,zero,10007324 <__alt_data_end+0xf8007324>
10007350:	01440074 	movhi	r5,4097
10007354:	29486504 	addi	r5,r5,8596
10007358:	8009883a 	mov	r4,r16
1000735c:	0009a700 	call	10009a70 <strcmp>
10007360:	103ff026 	beq	r2,zero,10007324 <__alt_data_end+0xf8007324>
10007364:	0005883a 	mov	r2,zero
10007368:	003ff006 	br	1000732c <__alt_data_end+0xf800732c>
1000736c:	00840074 	movhi	r2,4097
10007370:	10887a04 	addi	r2,r2,8680
10007374:	f800283a 	ret

10007378 <__locale_charset>:
10007378:	00840074 	movhi	r2,4097
1000737c:	108a2d04 	addi	r2,r2,10420
10007380:	f800283a 	ret

10007384 <__locale_mb_cur_max>:
10007384:	00840074 	movhi	r2,4097
10007388:	108fc904 	addi	r2,r2,16164
1000738c:	10800017 	ldw	r2,0(r2)
10007390:	f800283a 	ret

10007394 <__locale_msgcharset>:
10007394:	00840074 	movhi	r2,4097
10007398:	108a2504 	addi	r2,r2,10388
1000739c:	f800283a 	ret

100073a0 <__locale_cjk_lang>:
100073a0:	0005883a 	mov	r2,zero
100073a4:	f800283a 	ret

100073a8 <_localeconv_r>:
100073a8:	00840074 	movhi	r2,4097
100073ac:	108a3504 	addi	r2,r2,10452
100073b0:	f800283a 	ret

100073b4 <setlocale>:
100073b4:	00840074 	movhi	r2,4097
100073b8:	108fc804 	addi	r2,r2,16160
100073bc:	280d883a 	mov	r6,r5
100073c0:	200b883a 	mov	r5,r4
100073c4:	11000017 	ldw	r4,0(r2)
100073c8:	00072fc1 	jmpi	100072fc <_setlocale_r>

100073cc <localeconv>:
100073cc:	00840074 	movhi	r2,4097
100073d0:	108a3504 	addi	r2,r2,10452
100073d4:	f800283a 	ret

100073d8 <__smakebuf_r>:
100073d8:	2880030b 	ldhu	r2,12(r5)
100073dc:	10c0008c 	andi	r3,r2,2
100073e0:	1800411e 	bne	r3,zero,100074e8 <__smakebuf_r+0x110>
100073e4:	deffec04 	addi	sp,sp,-80
100073e8:	dc000f15 	stw	r16,60(sp)
100073ec:	2821883a 	mov	r16,r5
100073f0:	2940038f 	ldh	r5,14(r5)
100073f4:	dc401015 	stw	r17,64(sp)
100073f8:	dfc01315 	stw	ra,76(sp)
100073fc:	dcc01215 	stw	r19,72(sp)
10007400:	dc801115 	stw	r18,68(sp)
10007404:	2023883a 	mov	r17,r4
10007408:	28001c16 	blt	r5,zero,1000747c <__smakebuf_r+0xa4>
1000740c:	d80d883a 	mov	r6,sp
10007410:	000b6e00 	call	1000b6e0 <_fstat_r>
10007414:	10001816 	blt	r2,zero,10007478 <__smakebuf_r+0xa0>
10007418:	d8800117 	ldw	r2,4(sp)
1000741c:	00e00014 	movui	r3,32768
10007420:	10bc000c 	andi	r2,r2,61440
10007424:	14c80020 	cmpeqi	r19,r2,8192
10007428:	10c03726 	beq	r2,r3,10007508 <__smakebuf_r+0x130>
1000742c:	80c0030b 	ldhu	r3,12(r16)
10007430:	18c20014 	ori	r3,r3,2048
10007434:	80c0030d 	sth	r3,12(r16)
10007438:	00c80004 	movi	r3,8192
1000743c:	10c0521e 	bne	r2,r3,10007588 <__smakebuf_r+0x1b0>
10007440:	8140038f 	ldh	r5,14(r16)
10007444:	8809883a 	mov	r4,r17
10007448:	000b73c0 	call	1000b73c <_isatty_r>
1000744c:	10004c26 	beq	r2,zero,10007580 <__smakebuf_r+0x1a8>
10007450:	8080030b 	ldhu	r2,12(r16)
10007454:	80c010c4 	addi	r3,r16,67
10007458:	80c00015 	stw	r3,0(r16)
1000745c:	10800054 	ori	r2,r2,1
10007460:	8080030d 	sth	r2,12(r16)
10007464:	00800044 	movi	r2,1
10007468:	80c00415 	stw	r3,16(r16)
1000746c:	80800515 	stw	r2,20(r16)
10007470:	04810004 	movi	r18,1024
10007474:	00000706 	br	10007494 <__smakebuf_r+0xbc>
10007478:	8080030b 	ldhu	r2,12(r16)
1000747c:	10c0200c 	andi	r3,r2,128
10007480:	18001f1e 	bne	r3,zero,10007500 <__smakebuf_r+0x128>
10007484:	04810004 	movi	r18,1024
10007488:	10820014 	ori	r2,r2,2048
1000748c:	8080030d 	sth	r2,12(r16)
10007490:	0027883a 	mov	r19,zero
10007494:	900b883a 	mov	r5,r18
10007498:	8809883a 	mov	r4,r17
1000749c:	00075940 	call	10007594 <_malloc_r>
100074a0:	10002c26 	beq	r2,zero,10007554 <__smakebuf_r+0x17c>
100074a4:	80c0030b 	ldhu	r3,12(r16)
100074a8:	01040034 	movhi	r4,4096
100074ac:	21193404 	addi	r4,r4,25808
100074b0:	89000f15 	stw	r4,60(r17)
100074b4:	18c02014 	ori	r3,r3,128
100074b8:	80c0030d 	sth	r3,12(r16)
100074bc:	80800015 	stw	r2,0(r16)
100074c0:	80800415 	stw	r2,16(r16)
100074c4:	84800515 	stw	r18,20(r16)
100074c8:	98001a1e 	bne	r19,zero,10007534 <__smakebuf_r+0x15c>
100074cc:	dfc01317 	ldw	ra,76(sp)
100074d0:	dcc01217 	ldw	r19,72(sp)
100074d4:	dc801117 	ldw	r18,68(sp)
100074d8:	dc401017 	ldw	r17,64(sp)
100074dc:	dc000f17 	ldw	r16,60(sp)
100074e0:	dec01404 	addi	sp,sp,80
100074e4:	f800283a 	ret
100074e8:	288010c4 	addi	r2,r5,67
100074ec:	28800015 	stw	r2,0(r5)
100074f0:	28800415 	stw	r2,16(r5)
100074f4:	00800044 	movi	r2,1
100074f8:	28800515 	stw	r2,20(r5)
100074fc:	f800283a 	ret
10007500:	04801004 	movi	r18,64
10007504:	003fe006 	br	10007488 <__alt_data_end+0xf8007488>
10007508:	81000a17 	ldw	r4,40(r16)
1000750c:	00c40074 	movhi	r3,4097
10007510:	18e68304 	addi	r3,r3,-26100
10007514:	20ffc51e 	bne	r4,r3,1000742c <__alt_data_end+0xf800742c>
10007518:	8080030b 	ldhu	r2,12(r16)
1000751c:	04810004 	movi	r18,1024
10007520:	84801315 	stw	r18,76(r16)
10007524:	1484b03a 	or	r2,r2,r18
10007528:	8080030d 	sth	r2,12(r16)
1000752c:	0027883a 	mov	r19,zero
10007530:	003fd806 	br	10007494 <__alt_data_end+0xf8007494>
10007534:	8140038f 	ldh	r5,14(r16)
10007538:	8809883a 	mov	r4,r17
1000753c:	000b73c0 	call	1000b73c <_isatty_r>
10007540:	103fe226 	beq	r2,zero,100074cc <__alt_data_end+0xf80074cc>
10007544:	8080030b 	ldhu	r2,12(r16)
10007548:	10800054 	ori	r2,r2,1
1000754c:	8080030d 	sth	r2,12(r16)
10007550:	003fde06 	br	100074cc <__alt_data_end+0xf80074cc>
10007554:	8080030b 	ldhu	r2,12(r16)
10007558:	10c0800c 	andi	r3,r2,512
1000755c:	183fdb1e 	bne	r3,zero,100074cc <__alt_data_end+0xf80074cc>
10007560:	10800094 	ori	r2,r2,2
10007564:	80c010c4 	addi	r3,r16,67
10007568:	8080030d 	sth	r2,12(r16)
1000756c:	00800044 	movi	r2,1
10007570:	80c00015 	stw	r3,0(r16)
10007574:	80c00415 	stw	r3,16(r16)
10007578:	80800515 	stw	r2,20(r16)
1000757c:	003fd306 	br	100074cc <__alt_data_end+0xf80074cc>
10007580:	04810004 	movi	r18,1024
10007584:	003fc306 	br	10007494 <__alt_data_end+0xf8007494>
10007588:	0027883a 	mov	r19,zero
1000758c:	04810004 	movi	r18,1024
10007590:	003fc006 	br	10007494 <__alt_data_end+0xf8007494>

10007594 <_malloc_r>:
10007594:	defff504 	addi	sp,sp,-44
10007598:	dc800315 	stw	r18,12(sp)
1000759c:	dfc00a15 	stw	ra,40(sp)
100075a0:	df000915 	stw	fp,36(sp)
100075a4:	ddc00815 	stw	r23,32(sp)
100075a8:	dd800715 	stw	r22,28(sp)
100075ac:	dd400615 	stw	r21,24(sp)
100075b0:	dd000515 	stw	r20,20(sp)
100075b4:	dcc00415 	stw	r19,16(sp)
100075b8:	dc400215 	stw	r17,8(sp)
100075bc:	dc000115 	stw	r16,4(sp)
100075c0:	288002c4 	addi	r2,r5,11
100075c4:	00c00584 	movi	r3,22
100075c8:	2025883a 	mov	r18,r4
100075cc:	18807f2e 	bgeu	r3,r2,100077cc <_malloc_r+0x238>
100075d0:	047ffe04 	movi	r17,-8
100075d4:	1462703a 	and	r17,r2,r17
100075d8:	8800a316 	blt	r17,zero,10007868 <_malloc_r+0x2d4>
100075dc:	8940a236 	bltu	r17,r5,10007868 <_malloc_r+0x2d4>
100075e0:	000f76c0 	call	1000f76c <__malloc_lock>
100075e4:	00807dc4 	movi	r2,503
100075e8:	1441e92e 	bgeu	r2,r17,10007d90 <_malloc_r+0x7fc>
100075ec:	8804d27a 	srli	r2,r17,9
100075f0:	1000a126 	beq	r2,zero,10007878 <_malloc_r+0x2e4>
100075f4:	00c00104 	movi	r3,4
100075f8:	18811e36 	bltu	r3,r2,10007a74 <_malloc_r+0x4e0>
100075fc:	8804d1ba 	srli	r2,r17,6
10007600:	12000e44 	addi	r8,r2,57
10007604:	11c00e04 	addi	r7,r2,56
10007608:	4209883a 	add	r4,r8,r8
1000760c:	04c40074 	movhi	r19,4097
10007610:	2109883a 	add	r4,r4,r4
10007614:	9cca4304 	addi	r19,r19,10508
10007618:	2109883a 	add	r4,r4,r4
1000761c:	9909883a 	add	r4,r19,r4
10007620:	24000117 	ldw	r16,4(r4)
10007624:	213ffe04 	addi	r4,r4,-8
10007628:	24009726 	beq	r4,r16,10007888 <_malloc_r+0x2f4>
1000762c:	80800117 	ldw	r2,4(r16)
10007630:	01bfff04 	movi	r6,-4
10007634:	014003c4 	movi	r5,15
10007638:	1184703a 	and	r2,r2,r6
1000763c:	1447c83a 	sub	r3,r2,r17
10007640:	28c00716 	blt	r5,r3,10007660 <_malloc_r+0xcc>
10007644:	1800920e 	bge	r3,zero,10007890 <_malloc_r+0x2fc>
10007648:	84000317 	ldw	r16,12(r16)
1000764c:	24008e26 	beq	r4,r16,10007888 <_malloc_r+0x2f4>
10007650:	80800117 	ldw	r2,4(r16)
10007654:	1184703a 	and	r2,r2,r6
10007658:	1447c83a 	sub	r3,r2,r17
1000765c:	28fff90e 	bge	r5,r3,10007644 <__alt_data_end+0xf8007644>
10007660:	3809883a 	mov	r4,r7
10007664:	01840074 	movhi	r6,4097
10007668:	9c000417 	ldw	r16,16(r19)
1000766c:	318a4304 	addi	r6,r6,10508
10007670:	32000204 	addi	r8,r6,8
10007674:	82013426 	beq	r16,r8,10007b48 <_malloc_r+0x5b4>
10007678:	80c00117 	ldw	r3,4(r16)
1000767c:	00bfff04 	movi	r2,-4
10007680:	188e703a 	and	r7,r3,r2
10007684:	3c45c83a 	sub	r2,r7,r17
10007688:	00c003c4 	movi	r3,15
1000768c:	18811f16 	blt	r3,r2,10007b0c <_malloc_r+0x578>
10007690:	32000515 	stw	r8,20(r6)
10007694:	32000415 	stw	r8,16(r6)
10007698:	10007f0e 	bge	r2,zero,10007898 <_malloc_r+0x304>
1000769c:	00807fc4 	movi	r2,511
100076a0:	11c0fd36 	bltu	r2,r7,10007a98 <_malloc_r+0x504>
100076a4:	3806d0fa 	srli	r3,r7,3
100076a8:	01c00044 	movi	r7,1
100076ac:	30800117 	ldw	r2,4(r6)
100076b0:	19400044 	addi	r5,r3,1
100076b4:	294b883a 	add	r5,r5,r5
100076b8:	1807d0ba 	srai	r3,r3,2
100076bc:	294b883a 	add	r5,r5,r5
100076c0:	294b883a 	add	r5,r5,r5
100076c4:	298b883a 	add	r5,r5,r6
100076c8:	38c6983a 	sll	r3,r7,r3
100076cc:	29c00017 	ldw	r7,0(r5)
100076d0:	2a7ffe04 	addi	r9,r5,-8
100076d4:	1886b03a 	or	r3,r3,r2
100076d8:	82400315 	stw	r9,12(r16)
100076dc:	81c00215 	stw	r7,8(r16)
100076e0:	30c00115 	stw	r3,4(r6)
100076e4:	2c000015 	stw	r16,0(r5)
100076e8:	3c000315 	stw	r16,12(r7)
100076ec:	2005d0ba 	srai	r2,r4,2
100076f0:	01400044 	movi	r5,1
100076f4:	288a983a 	sll	r5,r5,r2
100076f8:	19406f36 	bltu	r3,r5,100078b8 <_malloc_r+0x324>
100076fc:	28c4703a 	and	r2,r5,r3
10007700:	10000a1e 	bne	r2,zero,1000772c <_malloc_r+0x198>
10007704:	00bfff04 	movi	r2,-4
10007708:	294b883a 	add	r5,r5,r5
1000770c:	2088703a 	and	r4,r4,r2
10007710:	28c4703a 	and	r2,r5,r3
10007714:	21000104 	addi	r4,r4,4
10007718:	1000041e 	bne	r2,zero,1000772c <_malloc_r+0x198>
1000771c:	294b883a 	add	r5,r5,r5
10007720:	28c4703a 	and	r2,r5,r3
10007724:	21000104 	addi	r4,r4,4
10007728:	103ffc26 	beq	r2,zero,1000771c <__alt_data_end+0xf800771c>
1000772c:	02bfff04 	movi	r10,-4
10007730:	024003c4 	movi	r9,15
10007734:	21800044 	addi	r6,r4,1
10007738:	318d883a 	add	r6,r6,r6
1000773c:	318d883a 	add	r6,r6,r6
10007740:	318d883a 	add	r6,r6,r6
10007744:	998d883a 	add	r6,r19,r6
10007748:	333ffe04 	addi	r12,r6,-8
1000774c:	2017883a 	mov	r11,r4
10007750:	31800104 	addi	r6,r6,4
10007754:	34000017 	ldw	r16,0(r6)
10007758:	31fffd04 	addi	r7,r6,-12
1000775c:	81c0041e 	bne	r16,r7,10007770 <_malloc_r+0x1dc>
10007760:	0000fb06 	br	10007b50 <_malloc_r+0x5bc>
10007764:	1801030e 	bge	r3,zero,10007b74 <_malloc_r+0x5e0>
10007768:	84000317 	ldw	r16,12(r16)
1000776c:	81c0f826 	beq	r16,r7,10007b50 <_malloc_r+0x5bc>
10007770:	80800117 	ldw	r2,4(r16)
10007774:	1284703a 	and	r2,r2,r10
10007778:	1447c83a 	sub	r3,r2,r17
1000777c:	48fff90e 	bge	r9,r3,10007764 <__alt_data_end+0xf8007764>
10007780:	80800317 	ldw	r2,12(r16)
10007784:	81000217 	ldw	r4,8(r16)
10007788:	89400054 	ori	r5,r17,1
1000778c:	81400115 	stw	r5,4(r16)
10007790:	20800315 	stw	r2,12(r4)
10007794:	11000215 	stw	r4,8(r2)
10007798:	8463883a 	add	r17,r16,r17
1000779c:	9c400515 	stw	r17,20(r19)
100077a0:	9c400415 	stw	r17,16(r19)
100077a4:	18800054 	ori	r2,r3,1
100077a8:	88800115 	stw	r2,4(r17)
100077ac:	8a000315 	stw	r8,12(r17)
100077b0:	8a000215 	stw	r8,8(r17)
100077b4:	88e3883a 	add	r17,r17,r3
100077b8:	88c00015 	stw	r3,0(r17)
100077bc:	9009883a 	mov	r4,r18
100077c0:	000f7900 	call	1000f790 <__malloc_unlock>
100077c4:	80800204 	addi	r2,r16,8
100077c8:	00001b06 	br	10007838 <_malloc_r+0x2a4>
100077cc:	04400404 	movi	r17,16
100077d0:	89402536 	bltu	r17,r5,10007868 <_malloc_r+0x2d4>
100077d4:	000f76c0 	call	1000f76c <__malloc_lock>
100077d8:	00800184 	movi	r2,6
100077dc:	01000084 	movi	r4,2
100077e0:	04c40074 	movhi	r19,4097
100077e4:	1085883a 	add	r2,r2,r2
100077e8:	9cca4304 	addi	r19,r19,10508
100077ec:	1085883a 	add	r2,r2,r2
100077f0:	9885883a 	add	r2,r19,r2
100077f4:	14000117 	ldw	r16,4(r2)
100077f8:	10fffe04 	addi	r3,r2,-8
100077fc:	80c0d926 	beq	r16,r3,10007b64 <_malloc_r+0x5d0>
10007800:	80c00117 	ldw	r3,4(r16)
10007804:	81000317 	ldw	r4,12(r16)
10007808:	00bfff04 	movi	r2,-4
1000780c:	1884703a 	and	r2,r3,r2
10007810:	81400217 	ldw	r5,8(r16)
10007814:	8085883a 	add	r2,r16,r2
10007818:	10c00117 	ldw	r3,4(r2)
1000781c:	29000315 	stw	r4,12(r5)
10007820:	21400215 	stw	r5,8(r4)
10007824:	18c00054 	ori	r3,r3,1
10007828:	10c00115 	stw	r3,4(r2)
1000782c:	9009883a 	mov	r4,r18
10007830:	000f7900 	call	1000f790 <__malloc_unlock>
10007834:	80800204 	addi	r2,r16,8
10007838:	dfc00a17 	ldw	ra,40(sp)
1000783c:	df000917 	ldw	fp,36(sp)
10007840:	ddc00817 	ldw	r23,32(sp)
10007844:	dd800717 	ldw	r22,28(sp)
10007848:	dd400617 	ldw	r21,24(sp)
1000784c:	dd000517 	ldw	r20,20(sp)
10007850:	dcc00417 	ldw	r19,16(sp)
10007854:	dc800317 	ldw	r18,12(sp)
10007858:	dc400217 	ldw	r17,8(sp)
1000785c:	dc000117 	ldw	r16,4(sp)
10007860:	dec00b04 	addi	sp,sp,44
10007864:	f800283a 	ret
10007868:	00800304 	movi	r2,12
1000786c:	90800015 	stw	r2,0(r18)
10007870:	0005883a 	mov	r2,zero
10007874:	003ff006 	br	10007838 <__alt_data_end+0xf8007838>
10007878:	01002004 	movi	r4,128
1000787c:	02001004 	movi	r8,64
10007880:	01c00fc4 	movi	r7,63
10007884:	003f6106 	br	1000760c <__alt_data_end+0xf800760c>
10007888:	4009883a 	mov	r4,r8
1000788c:	003f7506 	br	10007664 <__alt_data_end+0xf8007664>
10007890:	81000317 	ldw	r4,12(r16)
10007894:	003fde06 	br	10007810 <__alt_data_end+0xf8007810>
10007898:	81c5883a 	add	r2,r16,r7
1000789c:	11400117 	ldw	r5,4(r2)
100078a0:	9009883a 	mov	r4,r18
100078a4:	29400054 	ori	r5,r5,1
100078a8:	11400115 	stw	r5,4(r2)
100078ac:	000f7900 	call	1000f790 <__malloc_unlock>
100078b0:	80800204 	addi	r2,r16,8
100078b4:	003fe006 	br	10007838 <__alt_data_end+0xf8007838>
100078b8:	9c000217 	ldw	r16,8(r19)
100078bc:	00bfff04 	movi	r2,-4
100078c0:	85800117 	ldw	r22,4(r16)
100078c4:	b0ac703a 	and	r22,r22,r2
100078c8:	b4400336 	bltu	r22,r17,100078d8 <_malloc_r+0x344>
100078cc:	b445c83a 	sub	r2,r22,r17
100078d0:	00c003c4 	movi	r3,15
100078d4:	18805d16 	blt	r3,r2,10007a4c <_malloc_r+0x4b8>
100078d8:	05c40074 	movhi	r23,4097
100078dc:	00840074 	movhi	r2,4097
100078e0:	10969804 	addi	r2,r2,23136
100078e4:	bdcfca04 	addi	r23,r23,16168
100078e8:	15400017 	ldw	r21,0(r2)
100078ec:	b8c00017 	ldw	r3,0(r23)
100078f0:	00bfffc4 	movi	r2,-1
100078f4:	858d883a 	add	r6,r16,r22
100078f8:	8d6b883a 	add	r21,r17,r21
100078fc:	1880ea26 	beq	r3,r2,10007ca8 <_malloc_r+0x714>
10007900:	ad4403c4 	addi	r21,r21,4111
10007904:	00bc0004 	movi	r2,-4096
10007908:	a8aa703a 	and	r21,r21,r2
1000790c:	a80b883a 	mov	r5,r21
10007910:	9009883a 	mov	r4,r18
10007914:	d9800015 	stw	r6,0(sp)
10007918:	00098e00 	call	100098e0 <_sbrk_r>
1000791c:	1029883a 	mov	r20,r2
10007920:	00bfffc4 	movi	r2,-1
10007924:	d9800017 	ldw	r6,0(sp)
10007928:	a080e826 	beq	r20,r2,10007ccc <_malloc_r+0x738>
1000792c:	a180a636 	bltu	r20,r6,10007bc8 <_malloc_r+0x634>
10007930:	07040074 	movhi	fp,4097
10007934:	e716a104 	addi	fp,fp,23172
10007938:	e0800017 	ldw	r2,0(fp)
1000793c:	a887883a 	add	r3,r21,r2
10007940:	e0c00015 	stw	r3,0(fp)
10007944:	3500e626 	beq	r6,r20,10007ce0 <_malloc_r+0x74c>
10007948:	b9000017 	ldw	r4,0(r23)
1000794c:	00bfffc4 	movi	r2,-1
10007950:	2080ee26 	beq	r4,r2,10007d0c <_malloc_r+0x778>
10007954:	a185c83a 	sub	r2,r20,r6
10007958:	10c5883a 	add	r2,r2,r3
1000795c:	e0800015 	stw	r2,0(fp)
10007960:	a0c001cc 	andi	r3,r20,7
10007964:	1800bc26 	beq	r3,zero,10007c58 <_malloc_r+0x6c4>
10007968:	a0e9c83a 	sub	r20,r20,r3
1000796c:	00840204 	movi	r2,4104
10007970:	a5000204 	addi	r20,r20,8
10007974:	10c7c83a 	sub	r3,r2,r3
10007978:	a545883a 	add	r2,r20,r21
1000797c:	1083ffcc 	andi	r2,r2,4095
10007980:	18abc83a 	sub	r21,r3,r2
10007984:	a80b883a 	mov	r5,r21
10007988:	9009883a 	mov	r4,r18
1000798c:	00098e00 	call	100098e0 <_sbrk_r>
10007990:	00ffffc4 	movi	r3,-1
10007994:	10c0e126 	beq	r2,r3,10007d1c <_malloc_r+0x788>
10007998:	1505c83a 	sub	r2,r2,r20
1000799c:	1545883a 	add	r2,r2,r21
100079a0:	10800054 	ori	r2,r2,1
100079a4:	e0c00017 	ldw	r3,0(fp)
100079a8:	9d000215 	stw	r20,8(r19)
100079ac:	a0800115 	stw	r2,4(r20)
100079b0:	a8c7883a 	add	r3,r21,r3
100079b4:	e0c00015 	stw	r3,0(fp)
100079b8:	84c00e26 	beq	r16,r19,100079f4 <_malloc_r+0x460>
100079bc:	018003c4 	movi	r6,15
100079c0:	3580a72e 	bgeu	r6,r22,10007c60 <_malloc_r+0x6cc>
100079c4:	81400117 	ldw	r5,4(r16)
100079c8:	013ffe04 	movi	r4,-8
100079cc:	b0bffd04 	addi	r2,r22,-12
100079d0:	1104703a 	and	r2,r2,r4
100079d4:	2900004c 	andi	r4,r5,1
100079d8:	2088b03a 	or	r4,r4,r2
100079dc:	81000115 	stw	r4,4(r16)
100079e0:	01400144 	movi	r5,5
100079e4:	8089883a 	add	r4,r16,r2
100079e8:	21400115 	stw	r5,4(r4)
100079ec:	21400215 	stw	r5,8(r4)
100079f0:	3080cd36 	bltu	r6,r2,10007d28 <_malloc_r+0x794>
100079f4:	00840074 	movhi	r2,4097
100079f8:	10969704 	addi	r2,r2,23132
100079fc:	11000017 	ldw	r4,0(r2)
10007a00:	20c0012e 	bgeu	r4,r3,10007a08 <_malloc_r+0x474>
10007a04:	10c00015 	stw	r3,0(r2)
10007a08:	00840074 	movhi	r2,4097
10007a0c:	10969604 	addi	r2,r2,23128
10007a10:	11000017 	ldw	r4,0(r2)
10007a14:	9c000217 	ldw	r16,8(r19)
10007a18:	20c0012e 	bgeu	r4,r3,10007a20 <_malloc_r+0x48c>
10007a1c:	10c00015 	stw	r3,0(r2)
10007a20:	80c00117 	ldw	r3,4(r16)
10007a24:	00bfff04 	movi	r2,-4
10007a28:	1886703a 	and	r3,r3,r2
10007a2c:	1c45c83a 	sub	r2,r3,r17
10007a30:	1c400236 	bltu	r3,r17,10007a3c <_malloc_r+0x4a8>
10007a34:	00c003c4 	movi	r3,15
10007a38:	18800416 	blt	r3,r2,10007a4c <_malloc_r+0x4b8>
10007a3c:	9009883a 	mov	r4,r18
10007a40:	000f7900 	call	1000f790 <__malloc_unlock>
10007a44:	0005883a 	mov	r2,zero
10007a48:	003f7b06 	br	10007838 <__alt_data_end+0xf8007838>
10007a4c:	88c00054 	ori	r3,r17,1
10007a50:	80c00115 	stw	r3,4(r16)
10007a54:	8463883a 	add	r17,r16,r17
10007a58:	10800054 	ori	r2,r2,1
10007a5c:	9c400215 	stw	r17,8(r19)
10007a60:	88800115 	stw	r2,4(r17)
10007a64:	9009883a 	mov	r4,r18
10007a68:	000f7900 	call	1000f790 <__malloc_unlock>
10007a6c:	80800204 	addi	r2,r16,8
10007a70:	003f7106 	br	10007838 <__alt_data_end+0xf8007838>
10007a74:	00c00504 	movi	r3,20
10007a78:	18804a2e 	bgeu	r3,r2,10007ba4 <_malloc_r+0x610>
10007a7c:	00c01504 	movi	r3,84
10007a80:	18806e36 	bltu	r3,r2,10007c3c <_malloc_r+0x6a8>
10007a84:	8804d33a 	srli	r2,r17,12
10007a88:	12001bc4 	addi	r8,r2,111
10007a8c:	11c01b84 	addi	r7,r2,110
10007a90:	4209883a 	add	r4,r8,r8
10007a94:	003edd06 	br	1000760c <__alt_data_end+0xf800760c>
10007a98:	3804d27a 	srli	r2,r7,9
10007a9c:	00c00104 	movi	r3,4
10007aa0:	1880442e 	bgeu	r3,r2,10007bb4 <_malloc_r+0x620>
10007aa4:	00c00504 	movi	r3,20
10007aa8:	18808136 	bltu	r3,r2,10007cb0 <_malloc_r+0x71c>
10007aac:	11401704 	addi	r5,r2,92
10007ab0:	10c016c4 	addi	r3,r2,91
10007ab4:	294b883a 	add	r5,r5,r5
10007ab8:	294b883a 	add	r5,r5,r5
10007abc:	294b883a 	add	r5,r5,r5
10007ac0:	994b883a 	add	r5,r19,r5
10007ac4:	28800017 	ldw	r2,0(r5)
10007ac8:	01840074 	movhi	r6,4097
10007acc:	297ffe04 	addi	r5,r5,-8
10007ad0:	318a4304 	addi	r6,r6,10508
10007ad4:	28806526 	beq	r5,r2,10007c6c <_malloc_r+0x6d8>
10007ad8:	01bfff04 	movi	r6,-4
10007adc:	10c00117 	ldw	r3,4(r2)
10007ae0:	1986703a 	and	r3,r3,r6
10007ae4:	38c0022e 	bgeu	r7,r3,10007af0 <_malloc_r+0x55c>
10007ae8:	10800217 	ldw	r2,8(r2)
10007aec:	28bffb1e 	bne	r5,r2,10007adc <__alt_data_end+0xf8007adc>
10007af0:	11400317 	ldw	r5,12(r2)
10007af4:	98c00117 	ldw	r3,4(r19)
10007af8:	81400315 	stw	r5,12(r16)
10007afc:	80800215 	stw	r2,8(r16)
10007b00:	2c000215 	stw	r16,8(r5)
10007b04:	14000315 	stw	r16,12(r2)
10007b08:	003ef806 	br	100076ec <__alt_data_end+0xf80076ec>
10007b0c:	88c00054 	ori	r3,r17,1
10007b10:	80c00115 	stw	r3,4(r16)
10007b14:	8463883a 	add	r17,r16,r17
10007b18:	34400515 	stw	r17,20(r6)
10007b1c:	34400415 	stw	r17,16(r6)
10007b20:	10c00054 	ori	r3,r2,1
10007b24:	8a000315 	stw	r8,12(r17)
10007b28:	8a000215 	stw	r8,8(r17)
10007b2c:	88c00115 	stw	r3,4(r17)
10007b30:	88a3883a 	add	r17,r17,r2
10007b34:	88800015 	stw	r2,0(r17)
10007b38:	9009883a 	mov	r4,r18
10007b3c:	000f7900 	call	1000f790 <__malloc_unlock>
10007b40:	80800204 	addi	r2,r16,8
10007b44:	003f3c06 	br	10007838 <__alt_data_end+0xf8007838>
10007b48:	30c00117 	ldw	r3,4(r6)
10007b4c:	003ee706 	br	100076ec <__alt_data_end+0xf80076ec>
10007b50:	5ac00044 	addi	r11,r11,1
10007b54:	588000cc 	andi	r2,r11,3
10007b58:	31800204 	addi	r6,r6,8
10007b5c:	103efd1e 	bne	r2,zero,10007754 <__alt_data_end+0xf8007754>
10007b60:	00002406 	br	10007bf4 <_malloc_r+0x660>
10007b64:	14000317 	ldw	r16,12(r2)
10007b68:	143f251e 	bne	r2,r16,10007800 <__alt_data_end+0xf8007800>
10007b6c:	21000084 	addi	r4,r4,2
10007b70:	003ebc06 	br	10007664 <__alt_data_end+0xf8007664>
10007b74:	8085883a 	add	r2,r16,r2
10007b78:	10c00117 	ldw	r3,4(r2)
10007b7c:	81000317 	ldw	r4,12(r16)
10007b80:	81400217 	ldw	r5,8(r16)
10007b84:	18c00054 	ori	r3,r3,1
10007b88:	10c00115 	stw	r3,4(r2)
10007b8c:	29000315 	stw	r4,12(r5)
10007b90:	21400215 	stw	r5,8(r4)
10007b94:	9009883a 	mov	r4,r18
10007b98:	000f7900 	call	1000f790 <__malloc_unlock>
10007b9c:	80800204 	addi	r2,r16,8
10007ba0:	003f2506 	br	10007838 <__alt_data_end+0xf8007838>
10007ba4:	12001704 	addi	r8,r2,92
10007ba8:	11c016c4 	addi	r7,r2,91
10007bac:	4209883a 	add	r4,r8,r8
10007bb0:	003e9606 	br	1000760c <__alt_data_end+0xf800760c>
10007bb4:	3804d1ba 	srli	r2,r7,6
10007bb8:	11400e44 	addi	r5,r2,57
10007bbc:	10c00e04 	addi	r3,r2,56
10007bc0:	294b883a 	add	r5,r5,r5
10007bc4:	003fbc06 	br	10007ab8 <__alt_data_end+0xf8007ab8>
10007bc8:	84ff5926 	beq	r16,r19,10007930 <__alt_data_end+0xf8007930>
10007bcc:	00840074 	movhi	r2,4097
10007bd0:	108a4304 	addi	r2,r2,10508
10007bd4:	14000217 	ldw	r16,8(r2)
10007bd8:	00bfff04 	movi	r2,-4
10007bdc:	80c00117 	ldw	r3,4(r16)
10007be0:	1886703a 	and	r3,r3,r2
10007be4:	003f9106 	br	10007a2c <__alt_data_end+0xf8007a2c>
10007be8:	60800217 	ldw	r2,8(r12)
10007bec:	213fffc4 	addi	r4,r4,-1
10007bf0:	1300651e 	bne	r2,r12,10007d88 <_malloc_r+0x7f4>
10007bf4:	208000cc 	andi	r2,r4,3
10007bf8:	633ffe04 	addi	r12,r12,-8
10007bfc:	103ffa1e 	bne	r2,zero,10007be8 <__alt_data_end+0xf8007be8>
10007c00:	98800117 	ldw	r2,4(r19)
10007c04:	0146303a 	nor	r3,zero,r5
10007c08:	1884703a 	and	r2,r3,r2
10007c0c:	98800115 	stw	r2,4(r19)
10007c10:	294b883a 	add	r5,r5,r5
10007c14:	117f2836 	bltu	r2,r5,100078b8 <__alt_data_end+0xf80078b8>
10007c18:	283f2726 	beq	r5,zero,100078b8 <__alt_data_end+0xf80078b8>
10007c1c:	2886703a 	and	r3,r5,r2
10007c20:	5809883a 	mov	r4,r11
10007c24:	183ec31e 	bne	r3,zero,10007734 <__alt_data_end+0xf8007734>
10007c28:	294b883a 	add	r5,r5,r5
10007c2c:	2886703a 	and	r3,r5,r2
10007c30:	21000104 	addi	r4,r4,4
10007c34:	183ffc26 	beq	r3,zero,10007c28 <__alt_data_end+0xf8007c28>
10007c38:	003ebe06 	br	10007734 <__alt_data_end+0xf8007734>
10007c3c:	00c05504 	movi	r3,340
10007c40:	18801236 	bltu	r3,r2,10007c8c <_malloc_r+0x6f8>
10007c44:	8804d3fa 	srli	r2,r17,15
10007c48:	12001e04 	addi	r8,r2,120
10007c4c:	11c01dc4 	addi	r7,r2,119
10007c50:	4209883a 	add	r4,r8,r8
10007c54:	003e6d06 	br	1000760c <__alt_data_end+0xf800760c>
10007c58:	00c40004 	movi	r3,4096
10007c5c:	003f4606 	br	10007978 <__alt_data_end+0xf8007978>
10007c60:	00800044 	movi	r2,1
10007c64:	a0800115 	stw	r2,4(r20)
10007c68:	003f7406 	br	10007a3c <__alt_data_end+0xf8007a3c>
10007c6c:	1805d0ba 	srai	r2,r3,2
10007c70:	01c00044 	movi	r7,1
10007c74:	30c00117 	ldw	r3,4(r6)
10007c78:	388e983a 	sll	r7,r7,r2
10007c7c:	2805883a 	mov	r2,r5
10007c80:	38c6b03a 	or	r3,r7,r3
10007c84:	30c00115 	stw	r3,4(r6)
10007c88:	003f9b06 	br	10007af8 <__alt_data_end+0xf8007af8>
10007c8c:	00c15504 	movi	r3,1364
10007c90:	18801a36 	bltu	r3,r2,10007cfc <_malloc_r+0x768>
10007c94:	8804d4ba 	srli	r2,r17,18
10007c98:	12001f44 	addi	r8,r2,125
10007c9c:	11c01f04 	addi	r7,r2,124
10007ca0:	4209883a 	add	r4,r8,r8
10007ca4:	003e5906 	br	1000760c <__alt_data_end+0xf800760c>
10007ca8:	ad400404 	addi	r21,r21,16
10007cac:	003f1706 	br	1000790c <__alt_data_end+0xf800790c>
10007cb0:	00c01504 	movi	r3,84
10007cb4:	18802336 	bltu	r3,r2,10007d44 <_malloc_r+0x7b0>
10007cb8:	3804d33a 	srli	r2,r7,12
10007cbc:	11401bc4 	addi	r5,r2,111
10007cc0:	10c01b84 	addi	r3,r2,110
10007cc4:	294b883a 	add	r5,r5,r5
10007cc8:	003f7b06 	br	10007ab8 <__alt_data_end+0xf8007ab8>
10007ccc:	9c000217 	ldw	r16,8(r19)
10007cd0:	00bfff04 	movi	r2,-4
10007cd4:	80c00117 	ldw	r3,4(r16)
10007cd8:	1886703a 	and	r3,r3,r2
10007cdc:	003f5306 	br	10007a2c <__alt_data_end+0xf8007a2c>
10007ce0:	3083ffcc 	andi	r2,r6,4095
10007ce4:	103f181e 	bne	r2,zero,10007948 <__alt_data_end+0xf8007948>
10007ce8:	99000217 	ldw	r4,8(r19)
10007cec:	b545883a 	add	r2,r22,r21
10007cf0:	10800054 	ori	r2,r2,1
10007cf4:	20800115 	stw	r2,4(r4)
10007cf8:	003f3e06 	br	100079f4 <__alt_data_end+0xf80079f4>
10007cfc:	01003f84 	movi	r4,254
10007d00:	02001fc4 	movi	r8,127
10007d04:	01c01f84 	movi	r7,126
10007d08:	003e4006 	br	1000760c <__alt_data_end+0xf800760c>
10007d0c:	00840074 	movhi	r2,4097
10007d10:	108fca04 	addi	r2,r2,16168
10007d14:	15000015 	stw	r20,0(r2)
10007d18:	003f1106 	br	10007960 <__alt_data_end+0xf8007960>
10007d1c:	00800044 	movi	r2,1
10007d20:	002b883a 	mov	r21,zero
10007d24:	003f1f06 	br	100079a4 <__alt_data_end+0xf80079a4>
10007d28:	81400204 	addi	r5,r16,8
10007d2c:	9009883a 	mov	r4,r18
10007d30:	000699c0 	call	1000699c <_free_r>
10007d34:	00840074 	movhi	r2,4097
10007d38:	1096a104 	addi	r2,r2,23172
10007d3c:	10c00017 	ldw	r3,0(r2)
10007d40:	003f2c06 	br	100079f4 <__alt_data_end+0xf80079f4>
10007d44:	00c05504 	movi	r3,340
10007d48:	18800536 	bltu	r3,r2,10007d60 <_malloc_r+0x7cc>
10007d4c:	3804d3fa 	srli	r2,r7,15
10007d50:	11401e04 	addi	r5,r2,120
10007d54:	10c01dc4 	addi	r3,r2,119
10007d58:	294b883a 	add	r5,r5,r5
10007d5c:	003f5606 	br	10007ab8 <__alt_data_end+0xf8007ab8>
10007d60:	00c15504 	movi	r3,1364
10007d64:	18800536 	bltu	r3,r2,10007d7c <_malloc_r+0x7e8>
10007d68:	3804d4ba 	srli	r2,r7,18
10007d6c:	11401f44 	addi	r5,r2,125
10007d70:	10c01f04 	addi	r3,r2,124
10007d74:	294b883a 	add	r5,r5,r5
10007d78:	003f4f06 	br	10007ab8 <__alt_data_end+0xf8007ab8>
10007d7c:	01403f84 	movi	r5,254
10007d80:	00c01f84 	movi	r3,126
10007d84:	003f4c06 	br	10007ab8 <__alt_data_end+0xf8007ab8>
10007d88:	98800117 	ldw	r2,4(r19)
10007d8c:	003fa006 	br	10007c10 <__alt_data_end+0xf8007c10>
10007d90:	8808d0fa 	srli	r4,r17,3
10007d94:	20800044 	addi	r2,r4,1
10007d98:	1085883a 	add	r2,r2,r2
10007d9c:	003e9006 	br	100077e0 <__alt_data_end+0xf80077e0>

10007da0 <memchr>:
10007da0:	208000cc 	andi	r2,r4,3
10007da4:	280f883a 	mov	r7,r5
10007da8:	10003426 	beq	r2,zero,10007e7c <memchr+0xdc>
10007dac:	30bfffc4 	addi	r2,r6,-1
10007db0:	30001a26 	beq	r6,zero,10007e1c <memchr+0x7c>
10007db4:	20c00003 	ldbu	r3,0(r4)
10007db8:	29803fcc 	andi	r6,r5,255
10007dbc:	30c0051e 	bne	r6,r3,10007dd4 <memchr+0x34>
10007dc0:	00001806 	br	10007e24 <memchr+0x84>
10007dc4:	10001526 	beq	r2,zero,10007e1c <memchr+0x7c>
10007dc8:	20c00003 	ldbu	r3,0(r4)
10007dcc:	10bfffc4 	addi	r2,r2,-1
10007dd0:	30c01426 	beq	r6,r3,10007e24 <memchr+0x84>
10007dd4:	21000044 	addi	r4,r4,1
10007dd8:	20c000cc 	andi	r3,r4,3
10007ddc:	183ff91e 	bne	r3,zero,10007dc4 <__alt_data_end+0xf8007dc4>
10007de0:	020000c4 	movi	r8,3
10007de4:	40801136 	bltu	r8,r2,10007e2c <memchr+0x8c>
10007de8:	10000c26 	beq	r2,zero,10007e1c <memchr+0x7c>
10007dec:	20c00003 	ldbu	r3,0(r4)
10007df0:	29403fcc 	andi	r5,r5,255
10007df4:	28c00b26 	beq	r5,r3,10007e24 <memchr+0x84>
10007df8:	20c00044 	addi	r3,r4,1
10007dfc:	39803fcc 	andi	r6,r7,255
10007e00:	2089883a 	add	r4,r4,r2
10007e04:	00000306 	br	10007e14 <memchr+0x74>
10007e08:	18c00044 	addi	r3,r3,1
10007e0c:	197fffc3 	ldbu	r5,-1(r3)
10007e10:	31400526 	beq	r6,r5,10007e28 <memchr+0x88>
10007e14:	1805883a 	mov	r2,r3
10007e18:	20fffb1e 	bne	r4,r3,10007e08 <__alt_data_end+0xf8007e08>
10007e1c:	0005883a 	mov	r2,zero
10007e20:	f800283a 	ret
10007e24:	2005883a 	mov	r2,r4
10007e28:	f800283a 	ret
10007e2c:	28c03fcc 	andi	r3,r5,255
10007e30:	1812923a 	slli	r9,r3,8
10007e34:	02ffbff4 	movhi	r11,65279
10007e38:	02a02074 	movhi	r10,32897
10007e3c:	48d2b03a 	or	r9,r9,r3
10007e40:	4806943a 	slli	r3,r9,16
10007e44:	5affbfc4 	addi	r11,r11,-257
10007e48:	52a02004 	addi	r10,r10,-32640
10007e4c:	48d2b03a 	or	r9,r9,r3
10007e50:	20c00017 	ldw	r3,0(r4)
10007e54:	48c6f03a 	xor	r3,r9,r3
10007e58:	1acd883a 	add	r6,r3,r11
10007e5c:	00c6303a 	nor	r3,zero,r3
10007e60:	30c6703a 	and	r3,r6,r3
10007e64:	1a86703a 	and	r3,r3,r10
10007e68:	183fe01e 	bne	r3,zero,10007dec <__alt_data_end+0xf8007dec>
10007e6c:	10bfff04 	addi	r2,r2,-4
10007e70:	21000104 	addi	r4,r4,4
10007e74:	40bff636 	bltu	r8,r2,10007e50 <__alt_data_end+0xf8007e50>
10007e78:	003fdb06 	br	10007de8 <__alt_data_end+0xf8007de8>
10007e7c:	3005883a 	mov	r2,r6
10007e80:	003fd706 	br	10007de0 <__alt_data_end+0xf8007de0>

10007e84 <memcpy>:
10007e84:	defffd04 	addi	sp,sp,-12
10007e88:	dfc00215 	stw	ra,8(sp)
10007e8c:	dc400115 	stw	r17,4(sp)
10007e90:	dc000015 	stw	r16,0(sp)
10007e94:	00c003c4 	movi	r3,15
10007e98:	2005883a 	mov	r2,r4
10007e9c:	1980452e 	bgeu	r3,r6,10007fb4 <memcpy+0x130>
10007ea0:	2906b03a 	or	r3,r5,r4
10007ea4:	18c000cc 	andi	r3,r3,3
10007ea8:	1800441e 	bne	r3,zero,10007fbc <memcpy+0x138>
10007eac:	347ffc04 	addi	r17,r6,-16
10007eb0:	8822d13a 	srli	r17,r17,4
10007eb4:	28c00104 	addi	r3,r5,4
10007eb8:	23400104 	addi	r13,r4,4
10007ebc:	8820913a 	slli	r16,r17,4
10007ec0:	2b000204 	addi	r12,r5,8
10007ec4:	22c00204 	addi	r11,r4,8
10007ec8:	84000504 	addi	r16,r16,20
10007ecc:	2a800304 	addi	r10,r5,12
10007ed0:	22400304 	addi	r9,r4,12
10007ed4:	2c21883a 	add	r16,r5,r16
10007ed8:	2811883a 	mov	r8,r5
10007edc:	200f883a 	mov	r7,r4
10007ee0:	41000017 	ldw	r4,0(r8)
10007ee4:	1fc00017 	ldw	ra,0(r3)
10007ee8:	63c00017 	ldw	r15,0(r12)
10007eec:	39000015 	stw	r4,0(r7)
10007ef0:	53800017 	ldw	r14,0(r10)
10007ef4:	6fc00015 	stw	ra,0(r13)
10007ef8:	5bc00015 	stw	r15,0(r11)
10007efc:	4b800015 	stw	r14,0(r9)
10007f00:	18c00404 	addi	r3,r3,16
10007f04:	39c00404 	addi	r7,r7,16
10007f08:	42000404 	addi	r8,r8,16
10007f0c:	6b400404 	addi	r13,r13,16
10007f10:	63000404 	addi	r12,r12,16
10007f14:	5ac00404 	addi	r11,r11,16
10007f18:	52800404 	addi	r10,r10,16
10007f1c:	4a400404 	addi	r9,r9,16
10007f20:	1c3fef1e 	bne	r3,r16,10007ee0 <__alt_data_end+0xf8007ee0>
10007f24:	89c00044 	addi	r7,r17,1
10007f28:	380e913a 	slli	r7,r7,4
10007f2c:	310003cc 	andi	r4,r6,15
10007f30:	02c000c4 	movi	r11,3
10007f34:	11c7883a 	add	r3,r2,r7
10007f38:	29cb883a 	add	r5,r5,r7
10007f3c:	5900212e 	bgeu	r11,r4,10007fc4 <memcpy+0x140>
10007f40:	1813883a 	mov	r9,r3
10007f44:	2811883a 	mov	r8,r5
10007f48:	200f883a 	mov	r7,r4
10007f4c:	42800017 	ldw	r10,0(r8)
10007f50:	4a400104 	addi	r9,r9,4
10007f54:	39ffff04 	addi	r7,r7,-4
10007f58:	4abfff15 	stw	r10,-4(r9)
10007f5c:	42000104 	addi	r8,r8,4
10007f60:	59fffa36 	bltu	r11,r7,10007f4c <__alt_data_end+0xf8007f4c>
10007f64:	213fff04 	addi	r4,r4,-4
10007f68:	2008d0ba 	srli	r4,r4,2
10007f6c:	318000cc 	andi	r6,r6,3
10007f70:	21000044 	addi	r4,r4,1
10007f74:	2109883a 	add	r4,r4,r4
10007f78:	2109883a 	add	r4,r4,r4
10007f7c:	1907883a 	add	r3,r3,r4
10007f80:	290b883a 	add	r5,r5,r4
10007f84:	30000626 	beq	r6,zero,10007fa0 <memcpy+0x11c>
10007f88:	198d883a 	add	r6,r3,r6
10007f8c:	29c00003 	ldbu	r7,0(r5)
10007f90:	18c00044 	addi	r3,r3,1
10007f94:	29400044 	addi	r5,r5,1
10007f98:	19ffffc5 	stb	r7,-1(r3)
10007f9c:	19bffb1e 	bne	r3,r6,10007f8c <__alt_data_end+0xf8007f8c>
10007fa0:	dfc00217 	ldw	ra,8(sp)
10007fa4:	dc400117 	ldw	r17,4(sp)
10007fa8:	dc000017 	ldw	r16,0(sp)
10007fac:	dec00304 	addi	sp,sp,12
10007fb0:	f800283a 	ret
10007fb4:	2007883a 	mov	r3,r4
10007fb8:	003ff206 	br	10007f84 <__alt_data_end+0xf8007f84>
10007fbc:	2007883a 	mov	r3,r4
10007fc0:	003ff106 	br	10007f88 <__alt_data_end+0xf8007f88>
10007fc4:	200d883a 	mov	r6,r4
10007fc8:	003fee06 	br	10007f84 <__alt_data_end+0xf8007f84>

10007fcc <memmove>:
10007fcc:	2005883a 	mov	r2,r4
10007fd0:	29000b2e 	bgeu	r5,r4,10008000 <memmove+0x34>
10007fd4:	298f883a 	add	r7,r5,r6
10007fd8:	21c0092e 	bgeu	r4,r7,10008000 <memmove+0x34>
10007fdc:	2187883a 	add	r3,r4,r6
10007fe0:	198bc83a 	sub	r5,r3,r6
10007fe4:	30004826 	beq	r6,zero,10008108 <memmove+0x13c>
10007fe8:	39ffffc4 	addi	r7,r7,-1
10007fec:	39000003 	ldbu	r4,0(r7)
10007ff0:	18ffffc4 	addi	r3,r3,-1
10007ff4:	19000005 	stb	r4,0(r3)
10007ff8:	28fffb1e 	bne	r5,r3,10007fe8 <__alt_data_end+0xf8007fe8>
10007ffc:	f800283a 	ret
10008000:	00c003c4 	movi	r3,15
10008004:	1980412e 	bgeu	r3,r6,1000810c <memmove+0x140>
10008008:	2886b03a 	or	r3,r5,r2
1000800c:	18c000cc 	andi	r3,r3,3
10008010:	1800401e 	bne	r3,zero,10008114 <memmove+0x148>
10008014:	33fffc04 	addi	r15,r6,-16
10008018:	781ed13a 	srli	r15,r15,4
1000801c:	28c00104 	addi	r3,r5,4
10008020:	13400104 	addi	r13,r2,4
10008024:	781c913a 	slli	r14,r15,4
10008028:	2b000204 	addi	r12,r5,8
1000802c:	12c00204 	addi	r11,r2,8
10008030:	73800504 	addi	r14,r14,20
10008034:	2a800304 	addi	r10,r5,12
10008038:	12400304 	addi	r9,r2,12
1000803c:	2b9d883a 	add	r14,r5,r14
10008040:	2811883a 	mov	r8,r5
10008044:	100f883a 	mov	r7,r2
10008048:	41000017 	ldw	r4,0(r8)
1000804c:	39c00404 	addi	r7,r7,16
10008050:	18c00404 	addi	r3,r3,16
10008054:	393ffc15 	stw	r4,-16(r7)
10008058:	193ffc17 	ldw	r4,-16(r3)
1000805c:	6b400404 	addi	r13,r13,16
10008060:	5ac00404 	addi	r11,r11,16
10008064:	693ffc15 	stw	r4,-16(r13)
10008068:	61000017 	ldw	r4,0(r12)
1000806c:	4a400404 	addi	r9,r9,16
10008070:	42000404 	addi	r8,r8,16
10008074:	593ffc15 	stw	r4,-16(r11)
10008078:	51000017 	ldw	r4,0(r10)
1000807c:	63000404 	addi	r12,r12,16
10008080:	52800404 	addi	r10,r10,16
10008084:	493ffc15 	stw	r4,-16(r9)
10008088:	1bbfef1e 	bne	r3,r14,10008048 <__alt_data_end+0xf8008048>
1000808c:	79000044 	addi	r4,r15,1
10008090:	2008913a 	slli	r4,r4,4
10008094:	328003cc 	andi	r10,r6,15
10008098:	02c000c4 	movi	r11,3
1000809c:	1107883a 	add	r3,r2,r4
100080a0:	290b883a 	add	r5,r5,r4
100080a4:	5a801e2e 	bgeu	r11,r10,10008120 <memmove+0x154>
100080a8:	1813883a 	mov	r9,r3
100080ac:	2811883a 	mov	r8,r5
100080b0:	500f883a 	mov	r7,r10
100080b4:	41000017 	ldw	r4,0(r8)
100080b8:	4a400104 	addi	r9,r9,4
100080bc:	39ffff04 	addi	r7,r7,-4
100080c0:	493fff15 	stw	r4,-4(r9)
100080c4:	42000104 	addi	r8,r8,4
100080c8:	59fffa36 	bltu	r11,r7,100080b4 <__alt_data_end+0xf80080b4>
100080cc:	513fff04 	addi	r4,r10,-4
100080d0:	2008d0ba 	srli	r4,r4,2
100080d4:	318000cc 	andi	r6,r6,3
100080d8:	21000044 	addi	r4,r4,1
100080dc:	2109883a 	add	r4,r4,r4
100080e0:	2109883a 	add	r4,r4,r4
100080e4:	1907883a 	add	r3,r3,r4
100080e8:	290b883a 	add	r5,r5,r4
100080ec:	30000b26 	beq	r6,zero,1000811c <memmove+0x150>
100080f0:	198d883a 	add	r6,r3,r6
100080f4:	29c00003 	ldbu	r7,0(r5)
100080f8:	18c00044 	addi	r3,r3,1
100080fc:	29400044 	addi	r5,r5,1
10008100:	19ffffc5 	stb	r7,-1(r3)
10008104:	19bffb1e 	bne	r3,r6,100080f4 <__alt_data_end+0xf80080f4>
10008108:	f800283a 	ret
1000810c:	1007883a 	mov	r3,r2
10008110:	003ff606 	br	100080ec <__alt_data_end+0xf80080ec>
10008114:	1007883a 	mov	r3,r2
10008118:	003ff506 	br	100080f0 <__alt_data_end+0xf80080f0>
1000811c:	f800283a 	ret
10008120:	500d883a 	mov	r6,r10
10008124:	003ff106 	br	100080ec <__alt_data_end+0xf80080ec>

10008128 <memset>:
10008128:	20c000cc 	andi	r3,r4,3
1000812c:	2005883a 	mov	r2,r4
10008130:	18004426 	beq	r3,zero,10008244 <memset+0x11c>
10008134:	31ffffc4 	addi	r7,r6,-1
10008138:	30004026 	beq	r6,zero,1000823c <memset+0x114>
1000813c:	2813883a 	mov	r9,r5
10008140:	200d883a 	mov	r6,r4
10008144:	2007883a 	mov	r3,r4
10008148:	00000406 	br	1000815c <memset+0x34>
1000814c:	3a3fffc4 	addi	r8,r7,-1
10008150:	31800044 	addi	r6,r6,1
10008154:	38003926 	beq	r7,zero,1000823c <memset+0x114>
10008158:	400f883a 	mov	r7,r8
1000815c:	18c00044 	addi	r3,r3,1
10008160:	32400005 	stb	r9,0(r6)
10008164:	1a0000cc 	andi	r8,r3,3
10008168:	403ff81e 	bne	r8,zero,1000814c <__alt_data_end+0xf800814c>
1000816c:	010000c4 	movi	r4,3
10008170:	21c02d2e 	bgeu	r4,r7,10008228 <memset+0x100>
10008174:	29003fcc 	andi	r4,r5,255
10008178:	200c923a 	slli	r6,r4,8
1000817c:	3108b03a 	or	r4,r6,r4
10008180:	200c943a 	slli	r6,r4,16
10008184:	218cb03a 	or	r6,r4,r6
10008188:	010003c4 	movi	r4,15
1000818c:	21c0182e 	bgeu	r4,r7,100081f0 <memset+0xc8>
10008190:	3b3ffc04 	addi	r12,r7,-16
10008194:	6018d13a 	srli	r12,r12,4
10008198:	1a000104 	addi	r8,r3,4
1000819c:	1ac00204 	addi	r11,r3,8
100081a0:	6008913a 	slli	r4,r12,4
100081a4:	1a800304 	addi	r10,r3,12
100081a8:	1813883a 	mov	r9,r3
100081ac:	21000504 	addi	r4,r4,20
100081b0:	1909883a 	add	r4,r3,r4
100081b4:	49800015 	stw	r6,0(r9)
100081b8:	41800015 	stw	r6,0(r8)
100081bc:	59800015 	stw	r6,0(r11)
100081c0:	51800015 	stw	r6,0(r10)
100081c4:	42000404 	addi	r8,r8,16
100081c8:	4a400404 	addi	r9,r9,16
100081cc:	5ac00404 	addi	r11,r11,16
100081d0:	52800404 	addi	r10,r10,16
100081d4:	413ff71e 	bne	r8,r4,100081b4 <__alt_data_end+0xf80081b4>
100081d8:	63000044 	addi	r12,r12,1
100081dc:	6018913a 	slli	r12,r12,4
100081e0:	39c003cc 	andi	r7,r7,15
100081e4:	010000c4 	movi	r4,3
100081e8:	1b07883a 	add	r3,r3,r12
100081ec:	21c00e2e 	bgeu	r4,r7,10008228 <memset+0x100>
100081f0:	1813883a 	mov	r9,r3
100081f4:	3811883a 	mov	r8,r7
100081f8:	010000c4 	movi	r4,3
100081fc:	49800015 	stw	r6,0(r9)
10008200:	423fff04 	addi	r8,r8,-4
10008204:	4a400104 	addi	r9,r9,4
10008208:	223ffc36 	bltu	r4,r8,100081fc <__alt_data_end+0xf80081fc>
1000820c:	393fff04 	addi	r4,r7,-4
10008210:	2008d0ba 	srli	r4,r4,2
10008214:	39c000cc 	andi	r7,r7,3
10008218:	21000044 	addi	r4,r4,1
1000821c:	2109883a 	add	r4,r4,r4
10008220:	2109883a 	add	r4,r4,r4
10008224:	1907883a 	add	r3,r3,r4
10008228:	38000526 	beq	r7,zero,10008240 <memset+0x118>
1000822c:	19cf883a 	add	r7,r3,r7
10008230:	19400005 	stb	r5,0(r3)
10008234:	18c00044 	addi	r3,r3,1
10008238:	38fffd1e 	bne	r7,r3,10008230 <__alt_data_end+0xf8008230>
1000823c:	f800283a 	ret
10008240:	f800283a 	ret
10008244:	2007883a 	mov	r3,r4
10008248:	300f883a 	mov	r7,r6
1000824c:	003fc706 	br	1000816c <__alt_data_end+0xf800816c>

10008250 <_Balloc>:
10008250:	20801317 	ldw	r2,76(r4)
10008254:	defffc04 	addi	sp,sp,-16
10008258:	dc400115 	stw	r17,4(sp)
1000825c:	dc000015 	stw	r16,0(sp)
10008260:	dfc00315 	stw	ra,12(sp)
10008264:	dc800215 	stw	r18,8(sp)
10008268:	2023883a 	mov	r17,r4
1000826c:	2821883a 	mov	r16,r5
10008270:	10000f26 	beq	r2,zero,100082b0 <_Balloc+0x60>
10008274:	8407883a 	add	r3,r16,r16
10008278:	18c7883a 	add	r3,r3,r3
1000827c:	10c7883a 	add	r3,r2,r3
10008280:	18800017 	ldw	r2,0(r3)
10008284:	10001126 	beq	r2,zero,100082cc <_Balloc+0x7c>
10008288:	11000017 	ldw	r4,0(r2)
1000828c:	19000015 	stw	r4,0(r3)
10008290:	10000415 	stw	zero,16(r2)
10008294:	10000315 	stw	zero,12(r2)
10008298:	dfc00317 	ldw	ra,12(sp)
1000829c:	dc800217 	ldw	r18,8(sp)
100082a0:	dc400117 	ldw	r17,4(sp)
100082a4:	dc000017 	ldw	r16,0(sp)
100082a8:	dec00404 	addi	sp,sp,16
100082ac:	f800283a 	ret
100082b0:	01800844 	movi	r6,33
100082b4:	01400104 	movi	r5,4
100082b8:	000b2f80 	call	1000b2f8 <_calloc_r>
100082bc:	88801315 	stw	r2,76(r17)
100082c0:	103fec1e 	bne	r2,zero,10008274 <__alt_data_end+0xf8008274>
100082c4:	0005883a 	mov	r2,zero
100082c8:	003ff306 	br	10008298 <__alt_data_end+0xf8008298>
100082cc:	01400044 	movi	r5,1
100082d0:	2c24983a 	sll	r18,r5,r16
100082d4:	8809883a 	mov	r4,r17
100082d8:	91800144 	addi	r6,r18,5
100082dc:	318d883a 	add	r6,r6,r6
100082e0:	318d883a 	add	r6,r6,r6
100082e4:	000b2f80 	call	1000b2f8 <_calloc_r>
100082e8:	103ff626 	beq	r2,zero,100082c4 <__alt_data_end+0xf80082c4>
100082ec:	14000115 	stw	r16,4(r2)
100082f0:	14800215 	stw	r18,8(r2)
100082f4:	003fe606 	br	10008290 <__alt_data_end+0xf8008290>

100082f8 <_Bfree>:
100082f8:	28000826 	beq	r5,zero,1000831c <_Bfree+0x24>
100082fc:	28c00117 	ldw	r3,4(r5)
10008300:	20801317 	ldw	r2,76(r4)
10008304:	18c7883a 	add	r3,r3,r3
10008308:	18c7883a 	add	r3,r3,r3
1000830c:	10c5883a 	add	r2,r2,r3
10008310:	10c00017 	ldw	r3,0(r2)
10008314:	28c00015 	stw	r3,0(r5)
10008318:	11400015 	stw	r5,0(r2)
1000831c:	f800283a 	ret

10008320 <__multadd>:
10008320:	defff704 	addi	sp,sp,-36
10008324:	dc800215 	stw	r18,8(sp)
10008328:	2c800417 	ldw	r18,16(r5)
1000832c:	dd800615 	stw	r22,24(sp)
10008330:	dd400515 	stw	r21,20(sp)
10008334:	dd000415 	stw	r20,16(sp)
10008338:	dcc00315 	stw	r19,12(sp)
1000833c:	dc400115 	stw	r17,4(sp)
10008340:	dc000015 	stw	r16,0(sp)
10008344:	dfc00815 	stw	ra,32(sp)
10008348:	ddc00715 	stw	r23,28(sp)
1000834c:	2827883a 	mov	r19,r5
10008350:	2029883a 	mov	r20,r4
10008354:	3023883a 	mov	r17,r6
10008358:	3821883a 	mov	r16,r7
1000835c:	2d400504 	addi	r21,r5,20
10008360:	002d883a 	mov	r22,zero
10008364:	adc00017 	ldw	r23,0(r21)
10008368:	880b883a 	mov	r5,r17
1000836c:	ad400104 	addi	r21,r21,4
10008370:	b93fffcc 	andi	r4,r23,65535
10008374:	000c9040 	call	1000c904 <__mulsi3>
10008378:	b808d43a 	srli	r4,r23,16
1000837c:	880b883a 	mov	r5,r17
10008380:	1421883a 	add	r16,r2,r16
10008384:	000c9040 	call	1000c904 <__mulsi3>
10008388:	800ed43a 	srli	r7,r16,16
1000838c:	80ffffcc 	andi	r3,r16,65535
10008390:	b5800044 	addi	r22,r22,1
10008394:	11c5883a 	add	r2,r2,r7
10008398:	100e943a 	slli	r7,r2,16
1000839c:	1020d43a 	srli	r16,r2,16
100083a0:	38c7883a 	add	r3,r7,r3
100083a4:	a8ffff15 	stw	r3,-4(r21)
100083a8:	b4bfee16 	blt	r22,r18,10008364 <__alt_data_end+0xf8008364>
100083ac:	80000926 	beq	r16,zero,100083d4 <__multadd+0xb4>
100083b0:	98800217 	ldw	r2,8(r19)
100083b4:	9080130e 	bge	r18,r2,10008404 <__multadd+0xe4>
100083b8:	90800144 	addi	r2,r18,5
100083bc:	1085883a 	add	r2,r2,r2
100083c0:	1085883a 	add	r2,r2,r2
100083c4:	9885883a 	add	r2,r19,r2
100083c8:	14000015 	stw	r16,0(r2)
100083cc:	94800044 	addi	r18,r18,1
100083d0:	9c800415 	stw	r18,16(r19)
100083d4:	9805883a 	mov	r2,r19
100083d8:	dfc00817 	ldw	ra,32(sp)
100083dc:	ddc00717 	ldw	r23,28(sp)
100083e0:	dd800617 	ldw	r22,24(sp)
100083e4:	dd400517 	ldw	r21,20(sp)
100083e8:	dd000417 	ldw	r20,16(sp)
100083ec:	dcc00317 	ldw	r19,12(sp)
100083f0:	dc800217 	ldw	r18,8(sp)
100083f4:	dc400117 	ldw	r17,4(sp)
100083f8:	dc000017 	ldw	r16,0(sp)
100083fc:	dec00904 	addi	sp,sp,36
10008400:	f800283a 	ret
10008404:	99400117 	ldw	r5,4(r19)
10008408:	a009883a 	mov	r4,r20
1000840c:	29400044 	addi	r5,r5,1
10008410:	00082500 	call	10008250 <_Balloc>
10008414:	99800417 	ldw	r6,16(r19)
10008418:	99400304 	addi	r5,r19,12
1000841c:	11000304 	addi	r4,r2,12
10008420:	31800084 	addi	r6,r6,2
10008424:	318d883a 	add	r6,r6,r6
10008428:	318d883a 	add	r6,r6,r6
1000842c:	1023883a 	mov	r17,r2
10008430:	0007e840 	call	10007e84 <memcpy>
10008434:	98000a26 	beq	r19,zero,10008460 <__multadd+0x140>
10008438:	98c00117 	ldw	r3,4(r19)
1000843c:	a0801317 	ldw	r2,76(r20)
10008440:	18c7883a 	add	r3,r3,r3
10008444:	18c7883a 	add	r3,r3,r3
10008448:	10c5883a 	add	r2,r2,r3
1000844c:	10c00017 	ldw	r3,0(r2)
10008450:	98c00015 	stw	r3,0(r19)
10008454:	14c00015 	stw	r19,0(r2)
10008458:	8827883a 	mov	r19,r17
1000845c:	003fd606 	br	100083b8 <__alt_data_end+0xf80083b8>
10008460:	8827883a 	mov	r19,r17
10008464:	003fd406 	br	100083b8 <__alt_data_end+0xf80083b8>

10008468 <__s2b>:
10008468:	defff904 	addi	sp,sp,-28
1000846c:	dc400115 	stw	r17,4(sp)
10008470:	dc000015 	stw	r16,0(sp)
10008474:	2023883a 	mov	r17,r4
10008478:	2821883a 	mov	r16,r5
1000847c:	39000204 	addi	r4,r7,8
10008480:	01400244 	movi	r5,9
10008484:	dcc00315 	stw	r19,12(sp)
10008488:	dc800215 	stw	r18,8(sp)
1000848c:	dfc00615 	stw	ra,24(sp)
10008490:	dd400515 	stw	r21,20(sp)
10008494:	dd000415 	stw	r20,16(sp)
10008498:	3825883a 	mov	r18,r7
1000849c:	3027883a 	mov	r19,r6
100084a0:	000c7500 	call	1000c750 <__divsi3>
100084a4:	00c00044 	movi	r3,1
100084a8:	000b883a 	mov	r5,zero
100084ac:	1880030e 	bge	r3,r2,100084bc <__s2b+0x54>
100084b0:	18c7883a 	add	r3,r3,r3
100084b4:	29400044 	addi	r5,r5,1
100084b8:	18bffd16 	blt	r3,r2,100084b0 <__alt_data_end+0xf80084b0>
100084bc:	8809883a 	mov	r4,r17
100084c0:	00082500 	call	10008250 <_Balloc>
100084c4:	d8c00717 	ldw	r3,28(sp)
100084c8:	10c00515 	stw	r3,20(r2)
100084cc:	00c00044 	movi	r3,1
100084d0:	10c00415 	stw	r3,16(r2)
100084d4:	00c00244 	movi	r3,9
100084d8:	1cc0210e 	bge	r3,r19,10008560 <__s2b+0xf8>
100084dc:	80eb883a 	add	r21,r16,r3
100084e0:	a829883a 	mov	r20,r21
100084e4:	84e1883a 	add	r16,r16,r19
100084e8:	a1c00007 	ldb	r7,0(r20)
100084ec:	01800284 	movi	r6,10
100084f0:	a5000044 	addi	r20,r20,1
100084f4:	100b883a 	mov	r5,r2
100084f8:	39fff404 	addi	r7,r7,-48
100084fc:	8809883a 	mov	r4,r17
10008500:	00083200 	call	10008320 <__multadd>
10008504:	a43ff81e 	bne	r20,r16,100084e8 <__alt_data_end+0xf80084e8>
10008508:	ace1883a 	add	r16,r21,r19
1000850c:	843ffe04 	addi	r16,r16,-8
10008510:	9c800a0e 	bge	r19,r18,1000853c <__s2b+0xd4>
10008514:	94e5c83a 	sub	r18,r18,r19
10008518:	84a5883a 	add	r18,r16,r18
1000851c:	81c00007 	ldb	r7,0(r16)
10008520:	01800284 	movi	r6,10
10008524:	84000044 	addi	r16,r16,1
10008528:	100b883a 	mov	r5,r2
1000852c:	39fff404 	addi	r7,r7,-48
10008530:	8809883a 	mov	r4,r17
10008534:	00083200 	call	10008320 <__multadd>
10008538:	84bff81e 	bne	r16,r18,1000851c <__alt_data_end+0xf800851c>
1000853c:	dfc00617 	ldw	ra,24(sp)
10008540:	dd400517 	ldw	r21,20(sp)
10008544:	dd000417 	ldw	r20,16(sp)
10008548:	dcc00317 	ldw	r19,12(sp)
1000854c:	dc800217 	ldw	r18,8(sp)
10008550:	dc400117 	ldw	r17,4(sp)
10008554:	dc000017 	ldw	r16,0(sp)
10008558:	dec00704 	addi	sp,sp,28
1000855c:	f800283a 	ret
10008560:	84000284 	addi	r16,r16,10
10008564:	1827883a 	mov	r19,r3
10008568:	003fe906 	br	10008510 <__alt_data_end+0xf8008510>

1000856c <__hi0bits>:
1000856c:	20bfffec 	andhi	r2,r4,65535
10008570:	1000141e 	bne	r2,zero,100085c4 <__hi0bits+0x58>
10008574:	2008943a 	slli	r4,r4,16
10008578:	00800404 	movi	r2,16
1000857c:	20ffc02c 	andhi	r3,r4,65280
10008580:	1800021e 	bne	r3,zero,1000858c <__hi0bits+0x20>
10008584:	2008923a 	slli	r4,r4,8
10008588:	10800204 	addi	r2,r2,8
1000858c:	20fc002c 	andhi	r3,r4,61440
10008590:	1800021e 	bne	r3,zero,1000859c <__hi0bits+0x30>
10008594:	2008913a 	slli	r4,r4,4
10008598:	10800104 	addi	r2,r2,4
1000859c:	20f0002c 	andhi	r3,r4,49152
100085a0:	1800031e 	bne	r3,zero,100085b0 <__hi0bits+0x44>
100085a4:	2109883a 	add	r4,r4,r4
100085a8:	10800084 	addi	r2,r2,2
100085ac:	2109883a 	add	r4,r4,r4
100085b0:	20000316 	blt	r4,zero,100085c0 <__hi0bits+0x54>
100085b4:	2110002c 	andhi	r4,r4,16384
100085b8:	2000041e 	bne	r4,zero,100085cc <__hi0bits+0x60>
100085bc:	00800804 	movi	r2,32
100085c0:	f800283a 	ret
100085c4:	0005883a 	mov	r2,zero
100085c8:	003fec06 	br	1000857c <__alt_data_end+0xf800857c>
100085cc:	10800044 	addi	r2,r2,1
100085d0:	f800283a 	ret

100085d4 <__lo0bits>:
100085d4:	20c00017 	ldw	r3,0(r4)
100085d8:	188001cc 	andi	r2,r3,7
100085dc:	10000826 	beq	r2,zero,10008600 <__lo0bits+0x2c>
100085e0:	1880004c 	andi	r2,r3,1
100085e4:	1000211e 	bne	r2,zero,1000866c <__lo0bits+0x98>
100085e8:	1880008c 	andi	r2,r3,2
100085ec:	1000211e 	bne	r2,zero,10008674 <__lo0bits+0xa0>
100085f0:	1806d0ba 	srli	r3,r3,2
100085f4:	00800084 	movi	r2,2
100085f8:	20c00015 	stw	r3,0(r4)
100085fc:	f800283a 	ret
10008600:	18bfffcc 	andi	r2,r3,65535
10008604:	10001326 	beq	r2,zero,10008654 <__lo0bits+0x80>
10008608:	0005883a 	mov	r2,zero
1000860c:	19403fcc 	andi	r5,r3,255
10008610:	2800021e 	bne	r5,zero,1000861c <__lo0bits+0x48>
10008614:	1806d23a 	srli	r3,r3,8
10008618:	10800204 	addi	r2,r2,8
1000861c:	194003cc 	andi	r5,r3,15
10008620:	2800021e 	bne	r5,zero,1000862c <__lo0bits+0x58>
10008624:	1806d13a 	srli	r3,r3,4
10008628:	10800104 	addi	r2,r2,4
1000862c:	194000cc 	andi	r5,r3,3
10008630:	2800021e 	bne	r5,zero,1000863c <__lo0bits+0x68>
10008634:	1806d0ba 	srli	r3,r3,2
10008638:	10800084 	addi	r2,r2,2
1000863c:	1940004c 	andi	r5,r3,1
10008640:	2800081e 	bne	r5,zero,10008664 <__lo0bits+0x90>
10008644:	1806d07a 	srli	r3,r3,1
10008648:	1800051e 	bne	r3,zero,10008660 <__lo0bits+0x8c>
1000864c:	00800804 	movi	r2,32
10008650:	f800283a 	ret
10008654:	1806d43a 	srli	r3,r3,16
10008658:	00800404 	movi	r2,16
1000865c:	003feb06 	br	1000860c <__alt_data_end+0xf800860c>
10008660:	10800044 	addi	r2,r2,1
10008664:	20c00015 	stw	r3,0(r4)
10008668:	f800283a 	ret
1000866c:	0005883a 	mov	r2,zero
10008670:	f800283a 	ret
10008674:	1806d07a 	srli	r3,r3,1
10008678:	00800044 	movi	r2,1
1000867c:	20c00015 	stw	r3,0(r4)
10008680:	f800283a 	ret

10008684 <__i2b>:
10008684:	defffd04 	addi	sp,sp,-12
10008688:	dc000015 	stw	r16,0(sp)
1000868c:	04000044 	movi	r16,1
10008690:	dc400115 	stw	r17,4(sp)
10008694:	2823883a 	mov	r17,r5
10008698:	800b883a 	mov	r5,r16
1000869c:	dfc00215 	stw	ra,8(sp)
100086a0:	00082500 	call	10008250 <_Balloc>
100086a4:	14400515 	stw	r17,20(r2)
100086a8:	14000415 	stw	r16,16(r2)
100086ac:	dfc00217 	ldw	ra,8(sp)
100086b0:	dc400117 	ldw	r17,4(sp)
100086b4:	dc000017 	ldw	r16,0(sp)
100086b8:	dec00304 	addi	sp,sp,12
100086bc:	f800283a 	ret

100086c0 <__multiply>:
100086c0:	deffef04 	addi	sp,sp,-68
100086c4:	dc400815 	stw	r17,32(sp)
100086c8:	dc000715 	stw	r16,28(sp)
100086cc:	34400417 	ldw	r17,16(r6)
100086d0:	2c000417 	ldw	r16,16(r5)
100086d4:	dd800d15 	stw	r22,52(sp)
100086d8:	dc800915 	stw	r18,36(sp)
100086dc:	dfc01015 	stw	ra,64(sp)
100086e0:	df000f15 	stw	fp,60(sp)
100086e4:	ddc00e15 	stw	r23,56(sp)
100086e8:	dd400c15 	stw	r21,48(sp)
100086ec:	dd000b15 	stw	r20,44(sp)
100086f0:	dcc00a15 	stw	r19,40(sp)
100086f4:	2825883a 	mov	r18,r5
100086f8:	302d883a 	mov	r22,r6
100086fc:	8440050e 	bge	r16,r17,10008714 <__multiply+0x54>
10008700:	8007883a 	mov	r3,r16
10008704:	3025883a 	mov	r18,r6
10008708:	8821883a 	mov	r16,r17
1000870c:	282d883a 	mov	r22,r5
10008710:	1823883a 	mov	r17,r3
10008714:	90800217 	ldw	r2,8(r18)
10008718:	8447883a 	add	r3,r16,r17
1000871c:	d8c00215 	stw	r3,8(sp)
10008720:	91400117 	ldw	r5,4(r18)
10008724:	10c0010e 	bge	r2,r3,1000872c <__multiply+0x6c>
10008728:	29400044 	addi	r5,r5,1
1000872c:	00082500 	call	10008250 <_Balloc>
10008730:	d8c00217 	ldw	r3,8(sp)
10008734:	d8800615 	stw	r2,24(sp)
10008738:	18eb883a 	add	r21,r3,r3
1000873c:	ad6b883a 	add	r21,r21,r21
10008740:	10c00504 	addi	r3,r2,20
10008744:	1d6b883a 	add	r21,r3,r21
10008748:	d8c00115 	stw	r3,4(sp)
1000874c:	dd400315 	stw	r21,12(sp)
10008750:	1805883a 	mov	r2,r3
10008754:	1d40042e 	bgeu	r3,r21,10008768 <__multiply+0xa8>
10008758:	d8c00317 	ldw	r3,12(sp)
1000875c:	10000015 	stw	zero,0(r2)
10008760:	10800104 	addi	r2,r2,4
10008764:	10fffc36 	bltu	r2,r3,10008758 <__alt_data_end+0xf8008758>
10008768:	8c63883a 	add	r17,r17,r17
1000876c:	b5800504 	addi	r22,r22,20
10008770:	8c63883a 	add	r17,r17,r17
10008774:	94800504 	addi	r18,r18,20
10008778:	8421883a 	add	r16,r16,r16
1000877c:	b463883a 	add	r17,r22,r17
10008780:	8421883a 	add	r16,r16,r16
10008784:	dd800015 	stw	r22,0(sp)
10008788:	dc800415 	stw	r18,16(sp)
1000878c:	dc400515 	stw	r17,20(sp)
10008790:	9429883a 	add	r20,r18,r16
10008794:	b4404f2e 	bgeu	r22,r17,100088d4 <__multiply+0x214>
10008798:	d8c00017 	ldw	r3,0(sp)
1000879c:	1c800017 	ldw	r18,0(r3)
100087a0:	947fffcc 	andi	r17,r18,65535
100087a4:	88001e26 	beq	r17,zero,10008820 <__multiply+0x160>
100087a8:	dd800117 	ldw	r22,4(sp)
100087ac:	dd400417 	ldw	r21,16(sp)
100087b0:	0027883a 	mov	r19,zero
100087b4:	ac800017 	ldw	r18,0(r21)
100087b8:	b4000017 	ldw	r16,0(r22)
100087bc:	880b883a 	mov	r5,r17
100087c0:	913fffcc 	andi	r4,r18,65535
100087c4:	000c9040 	call	1000c904 <__mulsi3>
100087c8:	9008d43a 	srli	r4,r18,16
100087cc:	84bfffcc 	andi	r18,r16,65535
100087d0:	1485883a 	add	r2,r2,r18
100087d4:	14e5883a 	add	r18,r2,r19
100087d8:	8020d43a 	srli	r16,r16,16
100087dc:	9026d43a 	srli	r19,r18,16
100087e0:	880b883a 	mov	r5,r17
100087e4:	000c9040 	call	1000c904 <__mulsi3>
100087e8:	1405883a 	add	r2,r2,r16
100087ec:	14e1883a 	add	r16,r2,r19
100087f0:	90ffffcc 	andi	r3,r18,65535
100087f4:	8024943a 	slli	r18,r16,16
100087f8:	ad400104 	addi	r21,r21,4
100087fc:	b005883a 	mov	r2,r22
10008800:	90c6b03a 	or	r3,r18,r3
10008804:	b0c00015 	stw	r3,0(r22)
10008808:	8026d43a 	srli	r19,r16,16
1000880c:	b5800104 	addi	r22,r22,4
10008810:	ad3fe836 	bltu	r21,r20,100087b4 <__alt_data_end+0xf80087b4>
10008814:	d8c00017 	ldw	r3,0(sp)
10008818:	14c00115 	stw	r19,4(r2)
1000881c:	1c800017 	ldw	r18,0(r3)
10008820:	9024d43a 	srli	r18,r18,16
10008824:	90002226 	beq	r18,zero,100088b0 <__multiply+0x1f0>
10008828:	d8c00117 	ldw	r3,4(sp)
1000882c:	dd800417 	ldw	r22,16(sp)
10008830:	002f883a 	mov	r23,zero
10008834:	1f000017 	ldw	fp,0(r3)
10008838:	1823883a 	mov	r17,r3
1000883c:	182b883a 	mov	r21,r3
10008840:	e021883a 	mov	r16,fp
10008844:	00000106 	br	1000884c <__multiply+0x18c>
10008848:	982b883a 	mov	r21,r19
1000884c:	b100000b 	ldhu	r4,0(r22)
10008850:	8020d43a 	srli	r16,r16,16
10008854:	900b883a 	mov	r5,r18
10008858:	000c9040 	call	1000c904 <__mulsi3>
1000885c:	1405883a 	add	r2,r2,r16
10008860:	15ef883a 	add	r23,r2,r23
10008864:	b804943a 	slli	r2,r23,16
10008868:	e0ffffcc 	andi	r3,fp,65535
1000886c:	8c400104 	addi	r17,r17,4
10008870:	10c6b03a 	or	r3,r2,r3
10008874:	88ffff15 	stw	r3,-4(r17)
10008878:	b5800104 	addi	r22,r22,4
1000887c:	b13fff17 	ldw	r4,-4(r22)
10008880:	acc00104 	addi	r19,r21,4
10008884:	900b883a 	mov	r5,r18
10008888:	2008d43a 	srli	r4,r4,16
1000888c:	9c000017 	ldw	r16,0(r19)
10008890:	000c9040 	call	1000c904 <__mulsi3>
10008894:	b806d43a 	srli	r3,r23,16
10008898:	813fffcc 	andi	r4,r16,65535
1000889c:	1105883a 	add	r2,r2,r4
100088a0:	10f9883a 	add	fp,r2,r3
100088a4:	e02ed43a 	srli	r23,fp,16
100088a8:	b53fe736 	bltu	r22,r20,10008848 <__alt_data_end+0xf8008848>
100088ac:	af000115 	stw	fp,4(r21)
100088b0:	d8c00017 	ldw	r3,0(sp)
100088b4:	d9000517 	ldw	r4,20(sp)
100088b8:	18c00104 	addi	r3,r3,4
100088bc:	d8c00015 	stw	r3,0(sp)
100088c0:	d8c00117 	ldw	r3,4(sp)
100088c4:	18c00104 	addi	r3,r3,4
100088c8:	d8c00115 	stw	r3,4(sp)
100088cc:	d8c00017 	ldw	r3,0(sp)
100088d0:	193fb136 	bltu	r3,r4,10008798 <__alt_data_end+0xf8008798>
100088d4:	d8c00217 	ldw	r3,8(sp)
100088d8:	00c00c0e 	bge	zero,r3,1000890c <__multiply+0x24c>
100088dc:	d8c00317 	ldw	r3,12(sp)
100088e0:	18bfff17 	ldw	r2,-4(r3)
100088e4:	1d7fff04 	addi	r21,r3,-4
100088e8:	10000326 	beq	r2,zero,100088f8 <__multiply+0x238>
100088ec:	00000706 	br	1000890c <__multiply+0x24c>
100088f0:	a8800017 	ldw	r2,0(r21)
100088f4:	1000051e 	bne	r2,zero,1000890c <__multiply+0x24c>
100088f8:	d8c00217 	ldw	r3,8(sp)
100088fc:	ad7fff04 	addi	r21,r21,-4
10008900:	18ffffc4 	addi	r3,r3,-1
10008904:	d8c00215 	stw	r3,8(sp)
10008908:	183ff91e 	bne	r3,zero,100088f0 <__alt_data_end+0xf80088f0>
1000890c:	d8c00617 	ldw	r3,24(sp)
10008910:	d9000217 	ldw	r4,8(sp)
10008914:	1805883a 	mov	r2,r3
10008918:	19000415 	stw	r4,16(r3)
1000891c:	dfc01017 	ldw	ra,64(sp)
10008920:	df000f17 	ldw	fp,60(sp)
10008924:	ddc00e17 	ldw	r23,56(sp)
10008928:	dd800d17 	ldw	r22,52(sp)
1000892c:	dd400c17 	ldw	r21,48(sp)
10008930:	dd000b17 	ldw	r20,44(sp)
10008934:	dcc00a17 	ldw	r19,40(sp)
10008938:	dc800917 	ldw	r18,36(sp)
1000893c:	dc400817 	ldw	r17,32(sp)
10008940:	dc000717 	ldw	r16,28(sp)
10008944:	dec01104 	addi	sp,sp,68
10008948:	f800283a 	ret

1000894c <__pow5mult>:
1000894c:	defffa04 	addi	sp,sp,-24
10008950:	dcc00315 	stw	r19,12(sp)
10008954:	dc000015 	stw	r16,0(sp)
10008958:	dfc00515 	stw	ra,20(sp)
1000895c:	dd000415 	stw	r20,16(sp)
10008960:	dc800215 	stw	r18,8(sp)
10008964:	dc400115 	stw	r17,4(sp)
10008968:	308000cc 	andi	r2,r6,3
1000896c:	3021883a 	mov	r16,r6
10008970:	2027883a 	mov	r19,r4
10008974:	10002f1e 	bne	r2,zero,10008a34 <__pow5mult+0xe8>
10008978:	2825883a 	mov	r18,r5
1000897c:	8021d0ba 	srai	r16,r16,2
10008980:	80001a26 	beq	r16,zero,100089ec <__pow5mult+0xa0>
10008984:	9c401217 	ldw	r17,72(r19)
10008988:	8800061e 	bne	r17,zero,100089a4 <__pow5mult+0x58>
1000898c:	00003406 	br	10008a60 <__pow5mult+0x114>
10008990:	8021d07a 	srai	r16,r16,1
10008994:	80001526 	beq	r16,zero,100089ec <__pow5mult+0xa0>
10008998:	88800017 	ldw	r2,0(r17)
1000899c:	10001c26 	beq	r2,zero,10008a10 <__pow5mult+0xc4>
100089a0:	1023883a 	mov	r17,r2
100089a4:	8080004c 	andi	r2,r16,1
100089a8:	103ff926 	beq	r2,zero,10008990 <__alt_data_end+0xf8008990>
100089ac:	880d883a 	mov	r6,r17
100089b0:	900b883a 	mov	r5,r18
100089b4:	9809883a 	mov	r4,r19
100089b8:	00086c00 	call	100086c0 <__multiply>
100089bc:	90001b26 	beq	r18,zero,10008a2c <__pow5mult+0xe0>
100089c0:	91000117 	ldw	r4,4(r18)
100089c4:	98c01317 	ldw	r3,76(r19)
100089c8:	8021d07a 	srai	r16,r16,1
100089cc:	2109883a 	add	r4,r4,r4
100089d0:	2109883a 	add	r4,r4,r4
100089d4:	1907883a 	add	r3,r3,r4
100089d8:	19000017 	ldw	r4,0(r3)
100089dc:	91000015 	stw	r4,0(r18)
100089e0:	1c800015 	stw	r18,0(r3)
100089e4:	1025883a 	mov	r18,r2
100089e8:	803feb1e 	bne	r16,zero,10008998 <__alt_data_end+0xf8008998>
100089ec:	9005883a 	mov	r2,r18
100089f0:	dfc00517 	ldw	ra,20(sp)
100089f4:	dd000417 	ldw	r20,16(sp)
100089f8:	dcc00317 	ldw	r19,12(sp)
100089fc:	dc800217 	ldw	r18,8(sp)
10008a00:	dc400117 	ldw	r17,4(sp)
10008a04:	dc000017 	ldw	r16,0(sp)
10008a08:	dec00604 	addi	sp,sp,24
10008a0c:	f800283a 	ret
10008a10:	880d883a 	mov	r6,r17
10008a14:	880b883a 	mov	r5,r17
10008a18:	9809883a 	mov	r4,r19
10008a1c:	00086c00 	call	100086c0 <__multiply>
10008a20:	88800015 	stw	r2,0(r17)
10008a24:	10000015 	stw	zero,0(r2)
10008a28:	003fdd06 	br	100089a0 <__alt_data_end+0xf80089a0>
10008a2c:	1025883a 	mov	r18,r2
10008a30:	003fd706 	br	10008990 <__alt_data_end+0xf8008990>
10008a34:	10bfffc4 	addi	r2,r2,-1
10008a38:	1085883a 	add	r2,r2,r2
10008a3c:	00c40074 	movhi	r3,4097
10008a40:	18c87e04 	addi	r3,r3,8696
10008a44:	1085883a 	add	r2,r2,r2
10008a48:	1885883a 	add	r2,r3,r2
10008a4c:	11800017 	ldw	r6,0(r2)
10008a50:	000f883a 	mov	r7,zero
10008a54:	00083200 	call	10008320 <__multadd>
10008a58:	1025883a 	mov	r18,r2
10008a5c:	003fc706 	br	1000897c <__alt_data_end+0xf800897c>
10008a60:	05000044 	movi	r20,1
10008a64:	a00b883a 	mov	r5,r20
10008a68:	9809883a 	mov	r4,r19
10008a6c:	00082500 	call	10008250 <_Balloc>
10008a70:	1023883a 	mov	r17,r2
10008a74:	00809c44 	movi	r2,625
10008a78:	88800515 	stw	r2,20(r17)
10008a7c:	8d000415 	stw	r20,16(r17)
10008a80:	9c401215 	stw	r17,72(r19)
10008a84:	88000015 	stw	zero,0(r17)
10008a88:	003fc606 	br	100089a4 <__alt_data_end+0xf80089a4>

10008a8c <__lshift>:
10008a8c:	defff904 	addi	sp,sp,-28
10008a90:	dd400515 	stw	r21,20(sp)
10008a94:	dcc00315 	stw	r19,12(sp)
10008a98:	302bd17a 	srai	r21,r6,5
10008a9c:	2cc00417 	ldw	r19,16(r5)
10008aa0:	28800217 	ldw	r2,8(r5)
10008aa4:	dd000415 	stw	r20,16(sp)
10008aa8:	ace7883a 	add	r19,r21,r19
10008aac:	dc800215 	stw	r18,8(sp)
10008ab0:	dc400115 	stw	r17,4(sp)
10008ab4:	dc000015 	stw	r16,0(sp)
10008ab8:	dfc00615 	stw	ra,24(sp)
10008abc:	9c000044 	addi	r16,r19,1
10008ac0:	2823883a 	mov	r17,r5
10008ac4:	3029883a 	mov	r20,r6
10008ac8:	2025883a 	mov	r18,r4
10008acc:	29400117 	ldw	r5,4(r5)
10008ad0:	1400030e 	bge	r2,r16,10008ae0 <__lshift+0x54>
10008ad4:	1085883a 	add	r2,r2,r2
10008ad8:	29400044 	addi	r5,r5,1
10008adc:	143ffd16 	blt	r2,r16,10008ad4 <__alt_data_end+0xf8008ad4>
10008ae0:	9009883a 	mov	r4,r18
10008ae4:	00082500 	call	10008250 <_Balloc>
10008ae8:	10c00504 	addi	r3,r2,20
10008aec:	0540070e 	bge	zero,r21,10008b0c <__lshift+0x80>
10008af0:	ad6b883a 	add	r21,r21,r21
10008af4:	ad6b883a 	add	r21,r21,r21
10008af8:	1809883a 	mov	r4,r3
10008afc:	1d47883a 	add	r3,r3,r21
10008b00:	20000015 	stw	zero,0(r4)
10008b04:	21000104 	addi	r4,r4,4
10008b08:	193ffd1e 	bne	r3,r4,10008b00 <__alt_data_end+0xf8008b00>
10008b0c:	8a000417 	ldw	r8,16(r17)
10008b10:	89000504 	addi	r4,r17,20
10008b14:	a18007cc 	andi	r6,r20,31
10008b18:	4211883a 	add	r8,r8,r8
10008b1c:	4211883a 	add	r8,r8,r8
10008b20:	2211883a 	add	r8,r4,r8
10008b24:	30002326 	beq	r6,zero,10008bb4 <__lshift+0x128>
10008b28:	02400804 	movi	r9,32
10008b2c:	4993c83a 	sub	r9,r9,r6
10008b30:	000b883a 	mov	r5,zero
10008b34:	21c00017 	ldw	r7,0(r4)
10008b38:	1815883a 	mov	r10,r3
10008b3c:	18c00104 	addi	r3,r3,4
10008b40:	398e983a 	sll	r7,r7,r6
10008b44:	21000104 	addi	r4,r4,4
10008b48:	394ab03a 	or	r5,r7,r5
10008b4c:	197fff15 	stw	r5,-4(r3)
10008b50:	217fff17 	ldw	r5,-4(r4)
10008b54:	2a4ad83a 	srl	r5,r5,r9
10008b58:	223ff636 	bltu	r4,r8,10008b34 <__alt_data_end+0xf8008b34>
10008b5c:	51400115 	stw	r5,4(r10)
10008b60:	28001a1e 	bne	r5,zero,10008bcc <__lshift+0x140>
10008b64:	843fffc4 	addi	r16,r16,-1
10008b68:	14000415 	stw	r16,16(r2)
10008b6c:	88000826 	beq	r17,zero,10008b90 <__lshift+0x104>
10008b70:	89000117 	ldw	r4,4(r17)
10008b74:	90c01317 	ldw	r3,76(r18)
10008b78:	2109883a 	add	r4,r4,r4
10008b7c:	2109883a 	add	r4,r4,r4
10008b80:	1907883a 	add	r3,r3,r4
10008b84:	19000017 	ldw	r4,0(r3)
10008b88:	89000015 	stw	r4,0(r17)
10008b8c:	1c400015 	stw	r17,0(r3)
10008b90:	dfc00617 	ldw	ra,24(sp)
10008b94:	dd400517 	ldw	r21,20(sp)
10008b98:	dd000417 	ldw	r20,16(sp)
10008b9c:	dcc00317 	ldw	r19,12(sp)
10008ba0:	dc800217 	ldw	r18,8(sp)
10008ba4:	dc400117 	ldw	r17,4(sp)
10008ba8:	dc000017 	ldw	r16,0(sp)
10008bac:	dec00704 	addi	sp,sp,28
10008bb0:	f800283a 	ret
10008bb4:	21400017 	ldw	r5,0(r4)
10008bb8:	18c00104 	addi	r3,r3,4
10008bbc:	21000104 	addi	r4,r4,4
10008bc0:	197fff15 	stw	r5,-4(r3)
10008bc4:	223ffb36 	bltu	r4,r8,10008bb4 <__alt_data_end+0xf8008bb4>
10008bc8:	003fe606 	br	10008b64 <__alt_data_end+0xf8008b64>
10008bcc:	9c000084 	addi	r16,r19,2
10008bd0:	003fe406 	br	10008b64 <__alt_data_end+0xf8008b64>

10008bd4 <__mcmp>:
10008bd4:	20800417 	ldw	r2,16(r4)
10008bd8:	28c00417 	ldw	r3,16(r5)
10008bdc:	10c5c83a 	sub	r2,r2,r3
10008be0:	1000111e 	bne	r2,zero,10008c28 <__mcmp+0x54>
10008be4:	18c7883a 	add	r3,r3,r3
10008be8:	18c7883a 	add	r3,r3,r3
10008bec:	21000504 	addi	r4,r4,20
10008bf0:	29400504 	addi	r5,r5,20
10008bf4:	20c5883a 	add	r2,r4,r3
10008bf8:	28cb883a 	add	r5,r5,r3
10008bfc:	00000106 	br	10008c04 <__mcmp+0x30>
10008c00:	20800a2e 	bgeu	r4,r2,10008c2c <__mcmp+0x58>
10008c04:	10bfff04 	addi	r2,r2,-4
10008c08:	297fff04 	addi	r5,r5,-4
10008c0c:	11800017 	ldw	r6,0(r2)
10008c10:	28c00017 	ldw	r3,0(r5)
10008c14:	30fffa26 	beq	r6,r3,10008c00 <__alt_data_end+0xf8008c00>
10008c18:	30c00236 	bltu	r6,r3,10008c24 <__mcmp+0x50>
10008c1c:	00800044 	movi	r2,1
10008c20:	f800283a 	ret
10008c24:	00bfffc4 	movi	r2,-1
10008c28:	f800283a 	ret
10008c2c:	0005883a 	mov	r2,zero
10008c30:	f800283a 	ret

10008c34 <__mdiff>:
10008c34:	28c00417 	ldw	r3,16(r5)
10008c38:	30800417 	ldw	r2,16(r6)
10008c3c:	defffa04 	addi	sp,sp,-24
10008c40:	dcc00315 	stw	r19,12(sp)
10008c44:	dc800215 	stw	r18,8(sp)
10008c48:	dfc00515 	stw	ra,20(sp)
10008c4c:	dd000415 	stw	r20,16(sp)
10008c50:	dc400115 	stw	r17,4(sp)
10008c54:	dc000015 	stw	r16,0(sp)
10008c58:	1887c83a 	sub	r3,r3,r2
10008c5c:	2825883a 	mov	r18,r5
10008c60:	3027883a 	mov	r19,r6
10008c64:	1800141e 	bne	r3,zero,10008cb8 <__mdiff+0x84>
10008c68:	1085883a 	add	r2,r2,r2
10008c6c:	1085883a 	add	r2,r2,r2
10008c70:	2a000504 	addi	r8,r5,20
10008c74:	34000504 	addi	r16,r6,20
10008c78:	4087883a 	add	r3,r8,r2
10008c7c:	8085883a 	add	r2,r16,r2
10008c80:	00000106 	br	10008c88 <__mdiff+0x54>
10008c84:	40c0592e 	bgeu	r8,r3,10008dec <__mdiff+0x1b8>
10008c88:	18ffff04 	addi	r3,r3,-4
10008c8c:	10bfff04 	addi	r2,r2,-4
10008c90:	19c00017 	ldw	r7,0(r3)
10008c94:	11400017 	ldw	r5,0(r2)
10008c98:	397ffa26 	beq	r7,r5,10008c84 <__alt_data_end+0xf8008c84>
10008c9c:	3940592e 	bgeu	r7,r5,10008e04 <__mdiff+0x1d0>
10008ca0:	9005883a 	mov	r2,r18
10008ca4:	4023883a 	mov	r17,r8
10008ca8:	9825883a 	mov	r18,r19
10008cac:	05000044 	movi	r20,1
10008cb0:	1027883a 	mov	r19,r2
10008cb4:	00000406 	br	10008cc8 <__mdiff+0x94>
10008cb8:	18005616 	blt	r3,zero,10008e14 <__mdiff+0x1e0>
10008cbc:	34400504 	addi	r17,r6,20
10008cc0:	2c000504 	addi	r16,r5,20
10008cc4:	0029883a 	mov	r20,zero
10008cc8:	91400117 	ldw	r5,4(r18)
10008ccc:	00082500 	call	10008250 <_Balloc>
10008cd0:	92400417 	ldw	r9,16(r18)
10008cd4:	9b000417 	ldw	r12,16(r19)
10008cd8:	12c00504 	addi	r11,r2,20
10008cdc:	4a51883a 	add	r8,r9,r9
10008ce0:	6319883a 	add	r12,r12,r12
10008ce4:	4211883a 	add	r8,r8,r8
10008ce8:	6319883a 	add	r12,r12,r12
10008cec:	15000315 	stw	r20,12(r2)
10008cf0:	8211883a 	add	r8,r16,r8
10008cf4:	8b19883a 	add	r12,r17,r12
10008cf8:	0007883a 	mov	r3,zero
10008cfc:	81400017 	ldw	r5,0(r16)
10008d00:	89c00017 	ldw	r7,0(r17)
10008d04:	59800104 	addi	r6,r11,4
10008d08:	293fffcc 	andi	r4,r5,65535
10008d0c:	20c7883a 	add	r3,r4,r3
10008d10:	393fffcc 	andi	r4,r7,65535
10008d14:	1909c83a 	sub	r4,r3,r4
10008d18:	280ad43a 	srli	r5,r5,16
10008d1c:	380ed43a 	srli	r7,r7,16
10008d20:	2007d43a 	srai	r3,r4,16
10008d24:	213fffcc 	andi	r4,r4,65535
10008d28:	29cbc83a 	sub	r5,r5,r7
10008d2c:	28c7883a 	add	r3,r5,r3
10008d30:	180a943a 	slli	r5,r3,16
10008d34:	8c400104 	addi	r17,r17,4
10008d38:	84000104 	addi	r16,r16,4
10008d3c:	2908b03a 	or	r4,r5,r4
10008d40:	59000015 	stw	r4,0(r11)
10008d44:	1807d43a 	srai	r3,r3,16
10008d48:	3015883a 	mov	r10,r6
10008d4c:	3017883a 	mov	r11,r6
10008d50:	8b3fea36 	bltu	r17,r12,10008cfc <__alt_data_end+0xf8008cfc>
10008d54:	8200162e 	bgeu	r16,r8,10008db0 <__mdiff+0x17c>
10008d58:	8017883a 	mov	r11,r16
10008d5c:	59400017 	ldw	r5,0(r11)
10008d60:	31800104 	addi	r6,r6,4
10008d64:	5ac00104 	addi	r11,r11,4
10008d68:	293fffcc 	andi	r4,r5,65535
10008d6c:	20c7883a 	add	r3,r4,r3
10008d70:	280ed43a 	srli	r7,r5,16
10008d74:	180bd43a 	srai	r5,r3,16
10008d78:	193fffcc 	andi	r4,r3,65535
10008d7c:	3947883a 	add	r3,r7,r5
10008d80:	180a943a 	slli	r5,r3,16
10008d84:	1807d43a 	srai	r3,r3,16
10008d88:	2908b03a 	or	r4,r5,r4
10008d8c:	313fff15 	stw	r4,-4(r6)
10008d90:	5a3ff236 	bltu	r11,r8,10008d5c <__alt_data_end+0xf8008d5c>
10008d94:	0406303a 	nor	r3,zero,r16
10008d98:	1a07883a 	add	r3,r3,r8
10008d9c:	1806d0ba 	srli	r3,r3,2
10008da0:	18c00044 	addi	r3,r3,1
10008da4:	18c7883a 	add	r3,r3,r3
10008da8:	18c7883a 	add	r3,r3,r3
10008dac:	50d5883a 	add	r10,r10,r3
10008db0:	50ffff04 	addi	r3,r10,-4
10008db4:	2000041e 	bne	r4,zero,10008dc8 <__mdiff+0x194>
10008db8:	18ffff04 	addi	r3,r3,-4
10008dbc:	19000017 	ldw	r4,0(r3)
10008dc0:	4a7fffc4 	addi	r9,r9,-1
10008dc4:	203ffc26 	beq	r4,zero,10008db8 <__alt_data_end+0xf8008db8>
10008dc8:	12400415 	stw	r9,16(r2)
10008dcc:	dfc00517 	ldw	ra,20(sp)
10008dd0:	dd000417 	ldw	r20,16(sp)
10008dd4:	dcc00317 	ldw	r19,12(sp)
10008dd8:	dc800217 	ldw	r18,8(sp)
10008ddc:	dc400117 	ldw	r17,4(sp)
10008de0:	dc000017 	ldw	r16,0(sp)
10008de4:	dec00604 	addi	sp,sp,24
10008de8:	f800283a 	ret
10008dec:	000b883a 	mov	r5,zero
10008df0:	00082500 	call	10008250 <_Balloc>
10008df4:	00c00044 	movi	r3,1
10008df8:	10c00415 	stw	r3,16(r2)
10008dfc:	10000515 	stw	zero,20(r2)
10008e00:	003ff206 	br	10008dcc <__alt_data_end+0xf8008dcc>
10008e04:	8023883a 	mov	r17,r16
10008e08:	0029883a 	mov	r20,zero
10008e0c:	4021883a 	mov	r16,r8
10008e10:	003fad06 	br	10008cc8 <__alt_data_end+0xf8008cc8>
10008e14:	9005883a 	mov	r2,r18
10008e18:	94400504 	addi	r17,r18,20
10008e1c:	9c000504 	addi	r16,r19,20
10008e20:	9825883a 	mov	r18,r19
10008e24:	05000044 	movi	r20,1
10008e28:	1027883a 	mov	r19,r2
10008e2c:	003fa606 	br	10008cc8 <__alt_data_end+0xf8008cc8>

10008e30 <__ulp>:
10008e30:	295ffc2c 	andhi	r5,r5,32752
10008e34:	00bf3034 	movhi	r2,64704
10008e38:	2887883a 	add	r3,r5,r2
10008e3c:	00c0020e 	bge	zero,r3,10008e48 <__ulp+0x18>
10008e40:	0005883a 	mov	r2,zero
10008e44:	f800283a 	ret
10008e48:	00c7c83a 	sub	r3,zero,r3
10008e4c:	1807d53a 	srai	r3,r3,20
10008e50:	008004c4 	movi	r2,19
10008e54:	10c00b0e 	bge	r2,r3,10008e84 <__ulp+0x54>
10008e58:	18bffb04 	addi	r2,r3,-20
10008e5c:	01000784 	movi	r4,30
10008e60:	0007883a 	mov	r3,zero
10008e64:	20800516 	blt	r4,r2,10008e7c <__ulp+0x4c>
10008e68:	010007c4 	movi	r4,31
10008e6c:	2089c83a 	sub	r4,r4,r2
10008e70:	00800044 	movi	r2,1
10008e74:	1104983a 	sll	r2,r2,r4
10008e78:	f800283a 	ret
10008e7c:	00800044 	movi	r2,1
10008e80:	f800283a 	ret
10008e84:	01400234 	movhi	r5,8
10008e88:	28c7d83a 	sra	r3,r5,r3
10008e8c:	0005883a 	mov	r2,zero
10008e90:	f800283a 	ret

10008e94 <__b2d>:
10008e94:	defffa04 	addi	sp,sp,-24
10008e98:	dc000015 	stw	r16,0(sp)
10008e9c:	24000417 	ldw	r16,16(r4)
10008ea0:	dc400115 	stw	r17,4(sp)
10008ea4:	24400504 	addi	r17,r4,20
10008ea8:	8421883a 	add	r16,r16,r16
10008eac:	8421883a 	add	r16,r16,r16
10008eb0:	8c21883a 	add	r16,r17,r16
10008eb4:	dc800215 	stw	r18,8(sp)
10008eb8:	84bfff17 	ldw	r18,-4(r16)
10008ebc:	dd000415 	stw	r20,16(sp)
10008ec0:	dcc00315 	stw	r19,12(sp)
10008ec4:	9009883a 	mov	r4,r18
10008ec8:	2829883a 	mov	r20,r5
10008ecc:	dfc00515 	stw	ra,20(sp)
10008ed0:	000856c0 	call	1000856c <__hi0bits>
10008ed4:	00c00804 	movi	r3,32
10008ed8:	1889c83a 	sub	r4,r3,r2
10008edc:	a1000015 	stw	r4,0(r20)
10008ee0:	01000284 	movi	r4,10
10008ee4:	84ffff04 	addi	r19,r16,-4
10008ee8:	20801216 	blt	r4,r2,10008f34 <__b2d+0xa0>
10008eec:	018002c4 	movi	r6,11
10008ef0:	308dc83a 	sub	r6,r6,r2
10008ef4:	9186d83a 	srl	r3,r18,r6
10008ef8:	18cffc34 	orhi	r3,r3,16368
10008efc:	8cc0212e 	bgeu	r17,r19,10008f84 <__b2d+0xf0>
10008f00:	813ffe17 	ldw	r4,-8(r16)
10008f04:	218cd83a 	srl	r6,r4,r6
10008f08:	10800544 	addi	r2,r2,21
10008f0c:	9084983a 	sll	r2,r18,r2
10008f10:	1184b03a 	or	r2,r2,r6
10008f14:	dfc00517 	ldw	ra,20(sp)
10008f18:	dd000417 	ldw	r20,16(sp)
10008f1c:	dcc00317 	ldw	r19,12(sp)
10008f20:	dc800217 	ldw	r18,8(sp)
10008f24:	dc400117 	ldw	r17,4(sp)
10008f28:	dc000017 	ldw	r16,0(sp)
10008f2c:	dec00604 	addi	sp,sp,24
10008f30:	f800283a 	ret
10008f34:	8cc00f2e 	bgeu	r17,r19,10008f74 <__b2d+0xe0>
10008f38:	117ffd44 	addi	r5,r2,-11
10008f3c:	80bffe17 	ldw	r2,-8(r16)
10008f40:	28000e26 	beq	r5,zero,10008f7c <__b2d+0xe8>
10008f44:	1949c83a 	sub	r4,r3,r5
10008f48:	9164983a 	sll	r18,r18,r5
10008f4c:	1106d83a 	srl	r3,r2,r4
10008f50:	81bffe04 	addi	r6,r16,-8
10008f54:	948ffc34 	orhi	r18,r18,16368
10008f58:	90c6b03a 	or	r3,r18,r3
10008f5c:	89800e2e 	bgeu	r17,r6,10008f98 <__b2d+0x104>
10008f60:	81bffd17 	ldw	r6,-12(r16)
10008f64:	1144983a 	sll	r2,r2,r5
10008f68:	310ad83a 	srl	r5,r6,r4
10008f6c:	2884b03a 	or	r2,r5,r2
10008f70:	003fe806 	br	10008f14 <__alt_data_end+0xf8008f14>
10008f74:	10bffd44 	addi	r2,r2,-11
10008f78:	1000041e 	bne	r2,zero,10008f8c <__b2d+0xf8>
10008f7c:	90cffc34 	orhi	r3,r18,16368
10008f80:	003fe406 	br	10008f14 <__alt_data_end+0xf8008f14>
10008f84:	000d883a 	mov	r6,zero
10008f88:	003fdf06 	br	10008f08 <__alt_data_end+0xf8008f08>
10008f8c:	90a4983a 	sll	r18,r18,r2
10008f90:	0005883a 	mov	r2,zero
10008f94:	003ff906 	br	10008f7c <__alt_data_end+0xf8008f7c>
10008f98:	1144983a 	sll	r2,r2,r5
10008f9c:	003fdd06 	br	10008f14 <__alt_data_end+0xf8008f14>

10008fa0 <__d2b>:
10008fa0:	defff804 	addi	sp,sp,-32
10008fa4:	dc000215 	stw	r16,8(sp)
10008fa8:	3021883a 	mov	r16,r6
10008fac:	dc400315 	stw	r17,12(sp)
10008fb0:	8022907a 	slli	r17,r16,1
10008fb4:	dd000615 	stw	r20,24(sp)
10008fb8:	2829883a 	mov	r20,r5
10008fbc:	01400044 	movi	r5,1
10008fc0:	dcc00515 	stw	r19,20(sp)
10008fc4:	dc800415 	stw	r18,16(sp)
10008fc8:	dfc00715 	stw	ra,28(sp)
10008fcc:	3825883a 	mov	r18,r7
10008fd0:	8822d57a 	srli	r17,r17,21
10008fd4:	00082500 	call	10008250 <_Balloc>
10008fd8:	1027883a 	mov	r19,r2
10008fdc:	00800434 	movhi	r2,16
10008fe0:	10bfffc4 	addi	r2,r2,-1
10008fe4:	808c703a 	and	r6,r16,r2
10008fe8:	88000126 	beq	r17,zero,10008ff0 <__d2b+0x50>
10008fec:	31800434 	orhi	r6,r6,16
10008ff0:	d9800015 	stw	r6,0(sp)
10008ff4:	a0002426 	beq	r20,zero,10009088 <__d2b+0xe8>
10008ff8:	d9000104 	addi	r4,sp,4
10008ffc:	dd000115 	stw	r20,4(sp)
10009000:	00085d40 	call	100085d4 <__lo0bits>
10009004:	d8c00017 	ldw	r3,0(sp)
10009008:	10002f1e 	bne	r2,zero,100090c8 <__d2b+0x128>
1000900c:	d9000117 	ldw	r4,4(sp)
10009010:	99000515 	stw	r4,20(r19)
10009014:	1821003a 	cmpeq	r16,r3,zero
10009018:	01000084 	movi	r4,2
1000901c:	2421c83a 	sub	r16,r4,r16
10009020:	98c00615 	stw	r3,24(r19)
10009024:	9c000415 	stw	r16,16(r19)
10009028:	88001f1e 	bne	r17,zero,100090a8 <__d2b+0x108>
1000902c:	10bef384 	addi	r2,r2,-1074
10009030:	90800015 	stw	r2,0(r18)
10009034:	00900034 	movhi	r2,16384
10009038:	10bfffc4 	addi	r2,r2,-1
1000903c:	8085883a 	add	r2,r16,r2
10009040:	1085883a 	add	r2,r2,r2
10009044:	1085883a 	add	r2,r2,r2
10009048:	9885883a 	add	r2,r19,r2
1000904c:	11000517 	ldw	r4,20(r2)
10009050:	8020917a 	slli	r16,r16,5
10009054:	000856c0 	call	1000856c <__hi0bits>
10009058:	d8c00817 	ldw	r3,32(sp)
1000905c:	8085c83a 	sub	r2,r16,r2
10009060:	18800015 	stw	r2,0(r3)
10009064:	9805883a 	mov	r2,r19
10009068:	dfc00717 	ldw	ra,28(sp)
1000906c:	dd000617 	ldw	r20,24(sp)
10009070:	dcc00517 	ldw	r19,20(sp)
10009074:	dc800417 	ldw	r18,16(sp)
10009078:	dc400317 	ldw	r17,12(sp)
1000907c:	dc000217 	ldw	r16,8(sp)
10009080:	dec00804 	addi	sp,sp,32
10009084:	f800283a 	ret
10009088:	d809883a 	mov	r4,sp
1000908c:	00085d40 	call	100085d4 <__lo0bits>
10009090:	d8c00017 	ldw	r3,0(sp)
10009094:	04000044 	movi	r16,1
10009098:	9c000415 	stw	r16,16(r19)
1000909c:	98c00515 	stw	r3,20(r19)
100090a0:	10800804 	addi	r2,r2,32
100090a4:	883fe126 	beq	r17,zero,1000902c <__alt_data_end+0xf800902c>
100090a8:	00c00d44 	movi	r3,53
100090ac:	8c7ef344 	addi	r17,r17,-1075
100090b0:	88a3883a 	add	r17,r17,r2
100090b4:	1885c83a 	sub	r2,r3,r2
100090b8:	d8c00817 	ldw	r3,32(sp)
100090bc:	94400015 	stw	r17,0(r18)
100090c0:	18800015 	stw	r2,0(r3)
100090c4:	003fe706 	br	10009064 <__alt_data_end+0xf8009064>
100090c8:	01000804 	movi	r4,32
100090cc:	2089c83a 	sub	r4,r4,r2
100090d0:	1908983a 	sll	r4,r3,r4
100090d4:	d9400117 	ldw	r5,4(sp)
100090d8:	1886d83a 	srl	r3,r3,r2
100090dc:	2148b03a 	or	r4,r4,r5
100090e0:	99000515 	stw	r4,20(r19)
100090e4:	d8c00015 	stw	r3,0(sp)
100090e8:	003fca06 	br	10009014 <__alt_data_end+0xf8009014>

100090ec <__ratio>:
100090ec:	defff904 	addi	sp,sp,-28
100090f0:	dc400315 	stw	r17,12(sp)
100090f4:	2823883a 	mov	r17,r5
100090f8:	d9400104 	addi	r5,sp,4
100090fc:	dfc00615 	stw	ra,24(sp)
10009100:	dcc00515 	stw	r19,20(sp)
10009104:	dc800415 	stw	r18,16(sp)
10009108:	2027883a 	mov	r19,r4
1000910c:	dc000215 	stw	r16,8(sp)
10009110:	0008e940 	call	10008e94 <__b2d>
10009114:	d80b883a 	mov	r5,sp
10009118:	8809883a 	mov	r4,r17
1000911c:	1025883a 	mov	r18,r2
10009120:	1821883a 	mov	r16,r3
10009124:	0008e940 	call	10008e94 <__b2d>
10009128:	8a000417 	ldw	r8,16(r17)
1000912c:	99000417 	ldw	r4,16(r19)
10009130:	d9400117 	ldw	r5,4(sp)
10009134:	2209c83a 	sub	r4,r4,r8
10009138:	2010917a 	slli	r8,r4,5
1000913c:	d9000017 	ldw	r4,0(sp)
10009140:	2909c83a 	sub	r4,r5,r4
10009144:	4109883a 	add	r4,r8,r4
10009148:	01000e0e 	bge	zero,r4,10009184 <__ratio+0x98>
1000914c:	2008953a 	slli	r4,r4,20
10009150:	2421883a 	add	r16,r4,r16
10009154:	100d883a 	mov	r6,r2
10009158:	180f883a 	mov	r7,r3
1000915c:	9009883a 	mov	r4,r18
10009160:	800b883a 	mov	r5,r16
10009164:	000d1d80 	call	1000d1d8 <__divdf3>
10009168:	dfc00617 	ldw	ra,24(sp)
1000916c:	dcc00517 	ldw	r19,20(sp)
10009170:	dc800417 	ldw	r18,16(sp)
10009174:	dc400317 	ldw	r17,12(sp)
10009178:	dc000217 	ldw	r16,8(sp)
1000917c:	dec00704 	addi	sp,sp,28
10009180:	f800283a 	ret
10009184:	2008953a 	slli	r4,r4,20
10009188:	1907c83a 	sub	r3,r3,r4
1000918c:	003ff106 	br	10009154 <__alt_data_end+0xf8009154>

10009190 <_mprec_log10>:
10009190:	defffe04 	addi	sp,sp,-8
10009194:	dc000015 	stw	r16,0(sp)
10009198:	dfc00115 	stw	ra,4(sp)
1000919c:	008005c4 	movi	r2,23
100091a0:	2021883a 	mov	r16,r4
100091a4:	11000d0e 	bge	r2,r4,100091dc <_mprec_log10+0x4c>
100091a8:	0005883a 	mov	r2,zero
100091ac:	00cffc34 	movhi	r3,16368
100091b0:	843fffc4 	addi	r16,r16,-1
100091b4:	000d883a 	mov	r6,zero
100091b8:	01d00934 	movhi	r7,16420
100091bc:	1009883a 	mov	r4,r2
100091c0:	180b883a 	mov	r5,r3
100091c4:	000de000 	call	1000de00 <__muldf3>
100091c8:	803ff91e 	bne	r16,zero,100091b0 <__alt_data_end+0xf80091b0>
100091cc:	dfc00117 	ldw	ra,4(sp)
100091d0:	dc000017 	ldw	r16,0(sp)
100091d4:	dec00204 	addi	sp,sp,8
100091d8:	f800283a 	ret
100091dc:	202090fa 	slli	r16,r4,3
100091e0:	00840074 	movhi	r2,4097
100091e4:	10889504 	addi	r2,r2,8788
100091e8:	1421883a 	add	r16,r2,r16
100091ec:	80800017 	ldw	r2,0(r16)
100091f0:	80c00117 	ldw	r3,4(r16)
100091f4:	dfc00117 	ldw	ra,4(sp)
100091f8:	dc000017 	ldw	r16,0(sp)
100091fc:	dec00204 	addi	sp,sp,8
10009200:	f800283a 	ret

10009204 <__copybits>:
10009204:	297fffc4 	addi	r5,r5,-1
10009208:	280fd17a 	srai	r7,r5,5
1000920c:	30c00417 	ldw	r3,16(r6)
10009210:	30800504 	addi	r2,r6,20
10009214:	39c00044 	addi	r7,r7,1
10009218:	18c7883a 	add	r3,r3,r3
1000921c:	39cf883a 	add	r7,r7,r7
10009220:	18c7883a 	add	r3,r3,r3
10009224:	39cf883a 	add	r7,r7,r7
10009228:	10c7883a 	add	r3,r2,r3
1000922c:	21cf883a 	add	r7,r4,r7
10009230:	10c00d2e 	bgeu	r2,r3,10009268 <__copybits+0x64>
10009234:	200b883a 	mov	r5,r4
10009238:	12000017 	ldw	r8,0(r2)
1000923c:	29400104 	addi	r5,r5,4
10009240:	10800104 	addi	r2,r2,4
10009244:	2a3fff15 	stw	r8,-4(r5)
10009248:	10fffb36 	bltu	r2,r3,10009238 <__alt_data_end+0xf8009238>
1000924c:	1985c83a 	sub	r2,r3,r6
10009250:	10bffac4 	addi	r2,r2,-21
10009254:	1004d0ba 	srli	r2,r2,2
10009258:	10800044 	addi	r2,r2,1
1000925c:	1085883a 	add	r2,r2,r2
10009260:	1085883a 	add	r2,r2,r2
10009264:	2089883a 	add	r4,r4,r2
10009268:	21c0032e 	bgeu	r4,r7,10009278 <__copybits+0x74>
1000926c:	20000015 	stw	zero,0(r4)
10009270:	21000104 	addi	r4,r4,4
10009274:	21fffd36 	bltu	r4,r7,1000926c <__alt_data_end+0xf800926c>
10009278:	f800283a 	ret

1000927c <__any_on>:
1000927c:	20c00417 	ldw	r3,16(r4)
10009280:	2805d17a 	srai	r2,r5,5
10009284:	21000504 	addi	r4,r4,20
10009288:	18800d0e 	bge	r3,r2,100092c0 <__any_on+0x44>
1000928c:	18c7883a 	add	r3,r3,r3
10009290:	18c7883a 	add	r3,r3,r3
10009294:	20c7883a 	add	r3,r4,r3
10009298:	20c0192e 	bgeu	r4,r3,10009300 <__any_on+0x84>
1000929c:	18bfff17 	ldw	r2,-4(r3)
100092a0:	18ffff04 	addi	r3,r3,-4
100092a4:	1000041e 	bne	r2,zero,100092b8 <__any_on+0x3c>
100092a8:	20c0142e 	bgeu	r4,r3,100092fc <__any_on+0x80>
100092ac:	18ffff04 	addi	r3,r3,-4
100092b0:	19400017 	ldw	r5,0(r3)
100092b4:	283ffc26 	beq	r5,zero,100092a8 <__alt_data_end+0xf80092a8>
100092b8:	00800044 	movi	r2,1
100092bc:	f800283a 	ret
100092c0:	10c00a0e 	bge	r2,r3,100092ec <__any_on+0x70>
100092c4:	1085883a 	add	r2,r2,r2
100092c8:	1085883a 	add	r2,r2,r2
100092cc:	294007cc 	andi	r5,r5,31
100092d0:	2087883a 	add	r3,r4,r2
100092d4:	283ff026 	beq	r5,zero,10009298 <__alt_data_end+0xf8009298>
100092d8:	19800017 	ldw	r6,0(r3)
100092dc:	3144d83a 	srl	r2,r6,r5
100092e0:	114a983a 	sll	r5,r2,r5
100092e4:	317ff41e 	bne	r6,r5,100092b8 <__alt_data_end+0xf80092b8>
100092e8:	003feb06 	br	10009298 <__alt_data_end+0xf8009298>
100092ec:	1085883a 	add	r2,r2,r2
100092f0:	1085883a 	add	r2,r2,r2
100092f4:	2087883a 	add	r3,r4,r2
100092f8:	003fe706 	br	10009298 <__alt_data_end+0xf8009298>
100092fc:	f800283a 	ret
10009300:	0005883a 	mov	r2,zero
10009304:	f800283a 	ret

10009308 <_realloc_r>:
10009308:	defff604 	addi	sp,sp,-40
1000930c:	dc800215 	stw	r18,8(sp)
10009310:	dfc00915 	stw	ra,36(sp)
10009314:	df000815 	stw	fp,32(sp)
10009318:	ddc00715 	stw	r23,28(sp)
1000931c:	dd800615 	stw	r22,24(sp)
10009320:	dd400515 	stw	r21,20(sp)
10009324:	dd000415 	stw	r20,16(sp)
10009328:	dcc00315 	stw	r19,12(sp)
1000932c:	dc400115 	stw	r17,4(sp)
10009330:	dc000015 	stw	r16,0(sp)
10009334:	3025883a 	mov	r18,r6
10009338:	2800b726 	beq	r5,zero,10009618 <_realloc_r+0x310>
1000933c:	282b883a 	mov	r21,r5
10009340:	2029883a 	mov	r20,r4
10009344:	000f76c0 	call	1000f76c <__malloc_lock>
10009348:	a8bfff17 	ldw	r2,-4(r21)
1000934c:	043fff04 	movi	r16,-4
10009350:	90c002c4 	addi	r3,r18,11
10009354:	01000584 	movi	r4,22
10009358:	acfffe04 	addi	r19,r21,-8
1000935c:	1420703a 	and	r16,r2,r16
10009360:	20c0332e 	bgeu	r4,r3,10009430 <_realloc_r+0x128>
10009364:	047ffe04 	movi	r17,-8
10009368:	1c62703a 	and	r17,r3,r17
1000936c:	8807883a 	mov	r3,r17
10009370:	88005816 	blt	r17,zero,100094d4 <_realloc_r+0x1cc>
10009374:	8c805736 	bltu	r17,r18,100094d4 <_realloc_r+0x1cc>
10009378:	80c0300e 	bge	r16,r3,1000943c <_realloc_r+0x134>
1000937c:	07040074 	movhi	fp,4097
10009380:	e70a4304 	addi	fp,fp,10508
10009384:	e1c00217 	ldw	r7,8(fp)
10009388:	9c09883a 	add	r4,r19,r16
1000938c:	22000117 	ldw	r8,4(r4)
10009390:	21c06326 	beq	r4,r7,10009520 <_realloc_r+0x218>
10009394:	017fff84 	movi	r5,-2
10009398:	414a703a 	and	r5,r8,r5
1000939c:	214b883a 	add	r5,r4,r5
100093a0:	29800117 	ldw	r6,4(r5)
100093a4:	3180004c 	andi	r6,r6,1
100093a8:	30003f26 	beq	r6,zero,100094a8 <_realloc_r+0x1a0>
100093ac:	1080004c 	andi	r2,r2,1
100093b0:	10008326 	beq	r2,zero,100095c0 <_realloc_r+0x2b8>
100093b4:	900b883a 	mov	r5,r18
100093b8:	a009883a 	mov	r4,r20
100093bc:	00075940 	call	10007594 <_malloc_r>
100093c0:	1025883a 	mov	r18,r2
100093c4:	10011e26 	beq	r2,zero,10009840 <_realloc_r+0x538>
100093c8:	a93fff17 	ldw	r4,-4(r21)
100093cc:	10fffe04 	addi	r3,r2,-8
100093d0:	00bfff84 	movi	r2,-2
100093d4:	2084703a 	and	r2,r4,r2
100093d8:	9885883a 	add	r2,r19,r2
100093dc:	1880ee26 	beq	r3,r2,10009798 <_realloc_r+0x490>
100093e0:	81bfff04 	addi	r6,r16,-4
100093e4:	00800904 	movi	r2,36
100093e8:	1180b836 	bltu	r2,r6,100096cc <_realloc_r+0x3c4>
100093ec:	00c004c4 	movi	r3,19
100093f0:	19809636 	bltu	r3,r6,1000964c <_realloc_r+0x344>
100093f4:	9005883a 	mov	r2,r18
100093f8:	a807883a 	mov	r3,r21
100093fc:	19000017 	ldw	r4,0(r3)
10009400:	11000015 	stw	r4,0(r2)
10009404:	19000117 	ldw	r4,4(r3)
10009408:	11000115 	stw	r4,4(r2)
1000940c:	18c00217 	ldw	r3,8(r3)
10009410:	10c00215 	stw	r3,8(r2)
10009414:	a80b883a 	mov	r5,r21
10009418:	a009883a 	mov	r4,r20
1000941c:	000699c0 	call	1000699c <_free_r>
10009420:	a009883a 	mov	r4,r20
10009424:	000f7900 	call	1000f790 <__malloc_unlock>
10009428:	9005883a 	mov	r2,r18
1000942c:	00001206 	br	10009478 <_realloc_r+0x170>
10009430:	00c00404 	movi	r3,16
10009434:	1823883a 	mov	r17,r3
10009438:	003fce06 	br	10009374 <__alt_data_end+0xf8009374>
1000943c:	a825883a 	mov	r18,r21
10009440:	8445c83a 	sub	r2,r16,r17
10009444:	00c003c4 	movi	r3,15
10009448:	18802636 	bltu	r3,r2,100094e4 <_realloc_r+0x1dc>
1000944c:	99800117 	ldw	r6,4(r19)
10009450:	9c07883a 	add	r3,r19,r16
10009454:	3180004c 	andi	r6,r6,1
10009458:	3420b03a 	or	r16,r6,r16
1000945c:	9c000115 	stw	r16,4(r19)
10009460:	18800117 	ldw	r2,4(r3)
10009464:	10800054 	ori	r2,r2,1
10009468:	18800115 	stw	r2,4(r3)
1000946c:	a009883a 	mov	r4,r20
10009470:	000f7900 	call	1000f790 <__malloc_unlock>
10009474:	9005883a 	mov	r2,r18
10009478:	dfc00917 	ldw	ra,36(sp)
1000947c:	df000817 	ldw	fp,32(sp)
10009480:	ddc00717 	ldw	r23,28(sp)
10009484:	dd800617 	ldw	r22,24(sp)
10009488:	dd400517 	ldw	r21,20(sp)
1000948c:	dd000417 	ldw	r20,16(sp)
10009490:	dcc00317 	ldw	r19,12(sp)
10009494:	dc800217 	ldw	r18,8(sp)
10009498:	dc400117 	ldw	r17,4(sp)
1000949c:	dc000017 	ldw	r16,0(sp)
100094a0:	dec00a04 	addi	sp,sp,40
100094a4:	f800283a 	ret
100094a8:	017fff04 	movi	r5,-4
100094ac:	414a703a 	and	r5,r8,r5
100094b0:	814d883a 	add	r6,r16,r5
100094b4:	30c01f16 	blt	r6,r3,10009534 <_realloc_r+0x22c>
100094b8:	20800317 	ldw	r2,12(r4)
100094bc:	20c00217 	ldw	r3,8(r4)
100094c0:	a825883a 	mov	r18,r21
100094c4:	3021883a 	mov	r16,r6
100094c8:	18800315 	stw	r2,12(r3)
100094cc:	10c00215 	stw	r3,8(r2)
100094d0:	003fdb06 	br	10009440 <__alt_data_end+0xf8009440>
100094d4:	00800304 	movi	r2,12
100094d8:	a0800015 	stw	r2,0(r20)
100094dc:	0005883a 	mov	r2,zero
100094e0:	003fe506 	br	10009478 <__alt_data_end+0xf8009478>
100094e4:	98c00117 	ldw	r3,4(r19)
100094e8:	9c4b883a 	add	r5,r19,r17
100094ec:	11000054 	ori	r4,r2,1
100094f0:	18c0004c 	andi	r3,r3,1
100094f4:	1c62b03a 	or	r17,r3,r17
100094f8:	9c400115 	stw	r17,4(r19)
100094fc:	29000115 	stw	r4,4(r5)
10009500:	2885883a 	add	r2,r5,r2
10009504:	10c00117 	ldw	r3,4(r2)
10009508:	29400204 	addi	r5,r5,8
1000950c:	a009883a 	mov	r4,r20
10009510:	18c00054 	ori	r3,r3,1
10009514:	10c00115 	stw	r3,4(r2)
10009518:	000699c0 	call	1000699c <_free_r>
1000951c:	003fd306 	br	1000946c <__alt_data_end+0xf800946c>
10009520:	017fff04 	movi	r5,-4
10009524:	414a703a 	and	r5,r8,r5
10009528:	89800404 	addi	r6,r17,16
1000952c:	8151883a 	add	r8,r16,r5
10009530:	4180590e 	bge	r8,r6,10009698 <_realloc_r+0x390>
10009534:	1080004c 	andi	r2,r2,1
10009538:	103f9e1e 	bne	r2,zero,100093b4 <__alt_data_end+0xf80093b4>
1000953c:	adbffe17 	ldw	r22,-8(r21)
10009540:	00bfff04 	movi	r2,-4
10009544:	9dadc83a 	sub	r22,r19,r22
10009548:	b1800117 	ldw	r6,4(r22)
1000954c:	3084703a 	and	r2,r6,r2
10009550:	20002026 	beq	r4,zero,100095d4 <_realloc_r+0x2cc>
10009554:	80af883a 	add	r23,r16,r2
10009558:	b96f883a 	add	r23,r23,r5
1000955c:	21c05f26 	beq	r4,r7,100096dc <_realloc_r+0x3d4>
10009560:	b8c01c16 	blt	r23,r3,100095d4 <_realloc_r+0x2cc>
10009564:	20800317 	ldw	r2,12(r4)
10009568:	20c00217 	ldw	r3,8(r4)
1000956c:	81bfff04 	addi	r6,r16,-4
10009570:	01000904 	movi	r4,36
10009574:	18800315 	stw	r2,12(r3)
10009578:	10c00215 	stw	r3,8(r2)
1000957c:	b0c00217 	ldw	r3,8(r22)
10009580:	b0800317 	ldw	r2,12(r22)
10009584:	b4800204 	addi	r18,r22,8
10009588:	18800315 	stw	r2,12(r3)
1000958c:	10c00215 	stw	r3,8(r2)
10009590:	21801b36 	bltu	r4,r6,10009600 <_realloc_r+0x2f8>
10009594:	008004c4 	movi	r2,19
10009598:	1180352e 	bgeu	r2,r6,10009670 <_realloc_r+0x368>
1000959c:	a8800017 	ldw	r2,0(r21)
100095a0:	b0800215 	stw	r2,8(r22)
100095a4:	a8800117 	ldw	r2,4(r21)
100095a8:	b0800315 	stw	r2,12(r22)
100095ac:	008006c4 	movi	r2,27
100095b0:	11807f36 	bltu	r2,r6,100097b0 <_realloc_r+0x4a8>
100095b4:	b0800404 	addi	r2,r22,16
100095b8:	ad400204 	addi	r21,r21,8
100095bc:	00002d06 	br	10009674 <_realloc_r+0x36c>
100095c0:	adbffe17 	ldw	r22,-8(r21)
100095c4:	00bfff04 	movi	r2,-4
100095c8:	9dadc83a 	sub	r22,r19,r22
100095cc:	b1000117 	ldw	r4,4(r22)
100095d0:	2084703a 	and	r2,r4,r2
100095d4:	b03f7726 	beq	r22,zero,100093b4 <__alt_data_end+0xf80093b4>
100095d8:	80af883a 	add	r23,r16,r2
100095dc:	b8ff7516 	blt	r23,r3,100093b4 <__alt_data_end+0xf80093b4>
100095e0:	b0800317 	ldw	r2,12(r22)
100095e4:	b0c00217 	ldw	r3,8(r22)
100095e8:	81bfff04 	addi	r6,r16,-4
100095ec:	01000904 	movi	r4,36
100095f0:	18800315 	stw	r2,12(r3)
100095f4:	10c00215 	stw	r3,8(r2)
100095f8:	b4800204 	addi	r18,r22,8
100095fc:	21bfe52e 	bgeu	r4,r6,10009594 <__alt_data_end+0xf8009594>
10009600:	a80b883a 	mov	r5,r21
10009604:	9009883a 	mov	r4,r18
10009608:	0007fcc0 	call	10007fcc <memmove>
1000960c:	b821883a 	mov	r16,r23
10009610:	b027883a 	mov	r19,r22
10009614:	003f8a06 	br	10009440 <__alt_data_end+0xf8009440>
10009618:	300b883a 	mov	r5,r6
1000961c:	dfc00917 	ldw	ra,36(sp)
10009620:	df000817 	ldw	fp,32(sp)
10009624:	ddc00717 	ldw	r23,28(sp)
10009628:	dd800617 	ldw	r22,24(sp)
1000962c:	dd400517 	ldw	r21,20(sp)
10009630:	dd000417 	ldw	r20,16(sp)
10009634:	dcc00317 	ldw	r19,12(sp)
10009638:	dc800217 	ldw	r18,8(sp)
1000963c:	dc400117 	ldw	r17,4(sp)
10009640:	dc000017 	ldw	r16,0(sp)
10009644:	dec00a04 	addi	sp,sp,40
10009648:	00075941 	jmpi	10007594 <_malloc_r>
1000964c:	a8c00017 	ldw	r3,0(r21)
10009650:	90c00015 	stw	r3,0(r18)
10009654:	a8c00117 	ldw	r3,4(r21)
10009658:	90c00115 	stw	r3,4(r18)
1000965c:	00c006c4 	movi	r3,27
10009660:	19804536 	bltu	r3,r6,10009778 <_realloc_r+0x470>
10009664:	90800204 	addi	r2,r18,8
10009668:	a8c00204 	addi	r3,r21,8
1000966c:	003f6306 	br	100093fc <__alt_data_end+0xf80093fc>
10009670:	9005883a 	mov	r2,r18
10009674:	a8c00017 	ldw	r3,0(r21)
10009678:	b821883a 	mov	r16,r23
1000967c:	b027883a 	mov	r19,r22
10009680:	10c00015 	stw	r3,0(r2)
10009684:	a8c00117 	ldw	r3,4(r21)
10009688:	10c00115 	stw	r3,4(r2)
1000968c:	a8c00217 	ldw	r3,8(r21)
10009690:	10c00215 	stw	r3,8(r2)
10009694:	003f6a06 	br	10009440 <__alt_data_end+0xf8009440>
10009698:	9c67883a 	add	r19,r19,r17
1000969c:	4445c83a 	sub	r2,r8,r17
100096a0:	e4c00215 	stw	r19,8(fp)
100096a4:	10800054 	ori	r2,r2,1
100096a8:	98800115 	stw	r2,4(r19)
100096ac:	a8bfff17 	ldw	r2,-4(r21)
100096b0:	a009883a 	mov	r4,r20
100096b4:	1080004c 	andi	r2,r2,1
100096b8:	1462b03a 	or	r17,r2,r17
100096bc:	ac7fff15 	stw	r17,-4(r21)
100096c0:	000f7900 	call	1000f790 <__malloc_unlock>
100096c4:	a805883a 	mov	r2,r21
100096c8:	003f6b06 	br	10009478 <__alt_data_end+0xf8009478>
100096cc:	a80b883a 	mov	r5,r21
100096d0:	9009883a 	mov	r4,r18
100096d4:	0007fcc0 	call	10007fcc <memmove>
100096d8:	003f4e06 	br	10009414 <__alt_data_end+0xf8009414>
100096dc:	89000404 	addi	r4,r17,16
100096e0:	b93fbc16 	blt	r23,r4,100095d4 <__alt_data_end+0xf80095d4>
100096e4:	b0800317 	ldw	r2,12(r22)
100096e8:	b0c00217 	ldw	r3,8(r22)
100096ec:	81bfff04 	addi	r6,r16,-4
100096f0:	01000904 	movi	r4,36
100096f4:	18800315 	stw	r2,12(r3)
100096f8:	10c00215 	stw	r3,8(r2)
100096fc:	b4800204 	addi	r18,r22,8
10009700:	21804336 	bltu	r4,r6,10009810 <_realloc_r+0x508>
10009704:	008004c4 	movi	r2,19
10009708:	11803f2e 	bgeu	r2,r6,10009808 <_realloc_r+0x500>
1000970c:	a8800017 	ldw	r2,0(r21)
10009710:	b0800215 	stw	r2,8(r22)
10009714:	a8800117 	ldw	r2,4(r21)
10009718:	b0800315 	stw	r2,12(r22)
1000971c:	008006c4 	movi	r2,27
10009720:	11803f36 	bltu	r2,r6,10009820 <_realloc_r+0x518>
10009724:	b0800404 	addi	r2,r22,16
10009728:	ad400204 	addi	r21,r21,8
1000972c:	a8c00017 	ldw	r3,0(r21)
10009730:	10c00015 	stw	r3,0(r2)
10009734:	a8c00117 	ldw	r3,4(r21)
10009738:	10c00115 	stw	r3,4(r2)
1000973c:	a8c00217 	ldw	r3,8(r21)
10009740:	10c00215 	stw	r3,8(r2)
10009744:	b447883a 	add	r3,r22,r17
10009748:	bc45c83a 	sub	r2,r23,r17
1000974c:	e0c00215 	stw	r3,8(fp)
10009750:	10800054 	ori	r2,r2,1
10009754:	18800115 	stw	r2,4(r3)
10009758:	b0800117 	ldw	r2,4(r22)
1000975c:	a009883a 	mov	r4,r20
10009760:	1080004c 	andi	r2,r2,1
10009764:	1462b03a 	or	r17,r2,r17
10009768:	b4400115 	stw	r17,4(r22)
1000976c:	000f7900 	call	1000f790 <__malloc_unlock>
10009770:	9005883a 	mov	r2,r18
10009774:	003f4006 	br	10009478 <__alt_data_end+0xf8009478>
10009778:	a8c00217 	ldw	r3,8(r21)
1000977c:	90c00215 	stw	r3,8(r18)
10009780:	a8c00317 	ldw	r3,12(r21)
10009784:	90c00315 	stw	r3,12(r18)
10009788:	30801126 	beq	r6,r2,100097d0 <_realloc_r+0x4c8>
1000978c:	90800404 	addi	r2,r18,16
10009790:	a8c00404 	addi	r3,r21,16
10009794:	003f1906 	br	100093fc <__alt_data_end+0xf80093fc>
10009798:	90ffff17 	ldw	r3,-4(r18)
1000979c:	00bfff04 	movi	r2,-4
100097a0:	a825883a 	mov	r18,r21
100097a4:	1884703a 	and	r2,r3,r2
100097a8:	80a1883a 	add	r16,r16,r2
100097ac:	003f2406 	br	10009440 <__alt_data_end+0xf8009440>
100097b0:	a8800217 	ldw	r2,8(r21)
100097b4:	b0800415 	stw	r2,16(r22)
100097b8:	a8800317 	ldw	r2,12(r21)
100097bc:	b0800515 	stw	r2,20(r22)
100097c0:	31000a26 	beq	r6,r4,100097ec <_realloc_r+0x4e4>
100097c4:	b0800604 	addi	r2,r22,24
100097c8:	ad400404 	addi	r21,r21,16
100097cc:	003fa906 	br	10009674 <__alt_data_end+0xf8009674>
100097d0:	a9000417 	ldw	r4,16(r21)
100097d4:	90800604 	addi	r2,r18,24
100097d8:	a8c00604 	addi	r3,r21,24
100097dc:	91000415 	stw	r4,16(r18)
100097e0:	a9000517 	ldw	r4,20(r21)
100097e4:	91000515 	stw	r4,20(r18)
100097e8:	003f0406 	br	100093fc <__alt_data_end+0xf80093fc>
100097ec:	a8c00417 	ldw	r3,16(r21)
100097f0:	ad400604 	addi	r21,r21,24
100097f4:	b0800804 	addi	r2,r22,32
100097f8:	b0c00615 	stw	r3,24(r22)
100097fc:	a8ffff17 	ldw	r3,-4(r21)
10009800:	b0c00715 	stw	r3,28(r22)
10009804:	003f9b06 	br	10009674 <__alt_data_end+0xf8009674>
10009808:	9005883a 	mov	r2,r18
1000980c:	003fc706 	br	1000972c <__alt_data_end+0xf800972c>
10009810:	a80b883a 	mov	r5,r21
10009814:	9009883a 	mov	r4,r18
10009818:	0007fcc0 	call	10007fcc <memmove>
1000981c:	003fc906 	br	10009744 <__alt_data_end+0xf8009744>
10009820:	a8800217 	ldw	r2,8(r21)
10009824:	b0800415 	stw	r2,16(r22)
10009828:	a8800317 	ldw	r2,12(r21)
1000982c:	b0800515 	stw	r2,20(r22)
10009830:	31000726 	beq	r6,r4,10009850 <_realloc_r+0x548>
10009834:	b0800604 	addi	r2,r22,24
10009838:	ad400404 	addi	r21,r21,16
1000983c:	003fbb06 	br	1000972c <__alt_data_end+0xf800972c>
10009840:	a009883a 	mov	r4,r20
10009844:	000f7900 	call	1000f790 <__malloc_unlock>
10009848:	0005883a 	mov	r2,zero
1000984c:	003f0a06 	br	10009478 <__alt_data_end+0xf8009478>
10009850:	a8c00417 	ldw	r3,16(r21)
10009854:	ad400604 	addi	r21,r21,24
10009858:	b0800804 	addi	r2,r22,32
1000985c:	b0c00615 	stw	r3,24(r22)
10009860:	a8ffff17 	ldw	r3,-4(r21)
10009864:	b0c00715 	stw	r3,28(r22)
10009868:	003fb006 	br	1000972c <__alt_data_end+0xf800972c>

1000986c <__fpclassifyd>:
1000986c:	00a00034 	movhi	r2,32768
10009870:	10bfffc4 	addi	r2,r2,-1
10009874:	2884703a 	and	r2,r5,r2
10009878:	10000726 	beq	r2,zero,10009898 <__fpclassifyd+0x2c>
1000987c:	00fffc34 	movhi	r3,65520
10009880:	019ff834 	movhi	r6,32736
10009884:	28c7883a 	add	r3,r5,r3
10009888:	31bfffc4 	addi	r6,r6,-1
1000988c:	30c00536 	bltu	r6,r3,100098a4 <__fpclassifyd+0x38>
10009890:	00800104 	movi	r2,4
10009894:	f800283a 	ret
10009898:	2000021e 	bne	r4,zero,100098a4 <__fpclassifyd+0x38>
1000989c:	00800084 	movi	r2,2
100098a0:	f800283a 	ret
100098a4:	00dffc34 	movhi	r3,32752
100098a8:	019ff834 	movhi	r6,32736
100098ac:	28cb883a 	add	r5,r5,r3
100098b0:	31bfffc4 	addi	r6,r6,-1
100098b4:	317ff62e 	bgeu	r6,r5,10009890 <__alt_data_end+0xf8009890>
100098b8:	01400434 	movhi	r5,16
100098bc:	297fffc4 	addi	r5,r5,-1
100098c0:	28800236 	bltu	r5,r2,100098cc <__fpclassifyd+0x60>
100098c4:	008000c4 	movi	r2,3
100098c8:	f800283a 	ret
100098cc:	10c00226 	beq	r2,r3,100098d8 <__fpclassifyd+0x6c>
100098d0:	0005883a 	mov	r2,zero
100098d4:	f800283a 	ret
100098d8:	2005003a 	cmpeq	r2,r4,zero
100098dc:	f800283a 	ret

100098e0 <_sbrk_r>:
100098e0:	defffd04 	addi	sp,sp,-12
100098e4:	dc000015 	stw	r16,0(sp)
100098e8:	04040074 	movhi	r16,4097
100098ec:	dc400115 	stw	r17,4(sp)
100098f0:	84169904 	addi	r16,r16,23140
100098f4:	2023883a 	mov	r17,r4
100098f8:	2809883a 	mov	r4,r5
100098fc:	dfc00215 	stw	ra,8(sp)
10009900:	80000015 	stw	zero,0(r16)
10009904:	000f9780 	call	1000f978 <sbrk>
10009908:	00ffffc4 	movi	r3,-1
1000990c:	10c00526 	beq	r2,r3,10009924 <_sbrk_r+0x44>
10009910:	dfc00217 	ldw	ra,8(sp)
10009914:	dc400117 	ldw	r17,4(sp)
10009918:	dc000017 	ldw	r16,0(sp)
1000991c:	dec00304 	addi	sp,sp,12
10009920:	f800283a 	ret
10009924:	80c00017 	ldw	r3,0(r16)
10009928:	183ff926 	beq	r3,zero,10009910 <__alt_data_end+0xf8009910>
1000992c:	88c00015 	stw	r3,0(r17)
10009930:	003ff706 	br	10009910 <__alt_data_end+0xf8009910>

10009934 <__sread>:
10009934:	defffe04 	addi	sp,sp,-8
10009938:	dc000015 	stw	r16,0(sp)
1000993c:	2821883a 	mov	r16,r5
10009940:	2940038f 	ldh	r5,14(r5)
10009944:	dfc00115 	stw	ra,4(sp)
10009948:	000b7f00 	call	1000b7f0 <_read_r>
1000994c:	10000716 	blt	r2,zero,1000996c <__sread+0x38>
10009950:	80c01417 	ldw	r3,80(r16)
10009954:	1887883a 	add	r3,r3,r2
10009958:	80c01415 	stw	r3,80(r16)
1000995c:	dfc00117 	ldw	ra,4(sp)
10009960:	dc000017 	ldw	r16,0(sp)
10009964:	dec00204 	addi	sp,sp,8
10009968:	f800283a 	ret
1000996c:	80c0030b 	ldhu	r3,12(r16)
10009970:	18fbffcc 	andi	r3,r3,61439
10009974:	80c0030d 	sth	r3,12(r16)
10009978:	dfc00117 	ldw	ra,4(sp)
1000997c:	dc000017 	ldw	r16,0(sp)
10009980:	dec00204 	addi	sp,sp,8
10009984:	f800283a 	ret

10009988 <__seofread>:
10009988:	0005883a 	mov	r2,zero
1000998c:	f800283a 	ret

10009990 <__swrite>:
10009990:	2880030b 	ldhu	r2,12(r5)
10009994:	defffb04 	addi	sp,sp,-20
10009998:	dcc00315 	stw	r19,12(sp)
1000999c:	dc800215 	stw	r18,8(sp)
100099a0:	dc400115 	stw	r17,4(sp)
100099a4:	dc000015 	stw	r16,0(sp)
100099a8:	dfc00415 	stw	ra,16(sp)
100099ac:	10c0400c 	andi	r3,r2,256
100099b0:	2821883a 	mov	r16,r5
100099b4:	2023883a 	mov	r17,r4
100099b8:	3025883a 	mov	r18,r6
100099bc:	3827883a 	mov	r19,r7
100099c0:	18000526 	beq	r3,zero,100099d8 <__swrite+0x48>
100099c4:	2940038f 	ldh	r5,14(r5)
100099c8:	01c00084 	movi	r7,2
100099cc:	000d883a 	mov	r6,zero
100099d0:	000b7900 	call	1000b790 <_lseek_r>
100099d4:	8080030b 	ldhu	r2,12(r16)
100099d8:	8140038f 	ldh	r5,14(r16)
100099dc:	10bbffcc 	andi	r2,r2,61439
100099e0:	980f883a 	mov	r7,r19
100099e4:	900d883a 	mov	r6,r18
100099e8:	8809883a 	mov	r4,r17
100099ec:	8080030d 	sth	r2,12(r16)
100099f0:	dfc00417 	ldw	ra,16(sp)
100099f4:	dcc00317 	ldw	r19,12(sp)
100099f8:	dc800217 	ldw	r18,8(sp)
100099fc:	dc400117 	ldw	r17,4(sp)
10009a00:	dc000017 	ldw	r16,0(sp)
10009a04:	dec00504 	addi	sp,sp,20
10009a08:	000b2441 	jmpi	1000b244 <_write_r>

10009a0c <__sseek>:
10009a0c:	defffe04 	addi	sp,sp,-8
10009a10:	dc000015 	stw	r16,0(sp)
10009a14:	2821883a 	mov	r16,r5
10009a18:	2940038f 	ldh	r5,14(r5)
10009a1c:	dfc00115 	stw	ra,4(sp)
10009a20:	000b7900 	call	1000b790 <_lseek_r>
10009a24:	00ffffc4 	movi	r3,-1
10009a28:	10c00826 	beq	r2,r3,10009a4c <__sseek+0x40>
10009a2c:	80c0030b 	ldhu	r3,12(r16)
10009a30:	80801415 	stw	r2,80(r16)
10009a34:	18c40014 	ori	r3,r3,4096
10009a38:	80c0030d 	sth	r3,12(r16)
10009a3c:	dfc00117 	ldw	ra,4(sp)
10009a40:	dc000017 	ldw	r16,0(sp)
10009a44:	dec00204 	addi	sp,sp,8
10009a48:	f800283a 	ret
10009a4c:	80c0030b 	ldhu	r3,12(r16)
10009a50:	18fbffcc 	andi	r3,r3,61439
10009a54:	80c0030d 	sth	r3,12(r16)
10009a58:	dfc00117 	ldw	ra,4(sp)
10009a5c:	dc000017 	ldw	r16,0(sp)
10009a60:	dec00204 	addi	sp,sp,8
10009a64:	f800283a 	ret

10009a68 <__sclose>:
10009a68:	2940038f 	ldh	r5,14(r5)
10009a6c:	000b2a41 	jmpi	1000b2a4 <_close_r>

10009a70 <strcmp>:
10009a70:	2144b03a 	or	r2,r4,r5
10009a74:	108000cc 	andi	r2,r2,3
10009a78:	1000171e 	bne	r2,zero,10009ad8 <strcmp+0x68>
10009a7c:	20800017 	ldw	r2,0(r4)
10009a80:	28c00017 	ldw	r3,0(r5)
10009a84:	10c0141e 	bne	r2,r3,10009ad8 <strcmp+0x68>
10009a88:	027fbff4 	movhi	r9,65279
10009a8c:	4a7fbfc4 	addi	r9,r9,-257
10009a90:	0086303a 	nor	r3,zero,r2
10009a94:	02202074 	movhi	r8,32897
10009a98:	1245883a 	add	r2,r2,r9
10009a9c:	42202004 	addi	r8,r8,-32640
10009aa0:	10c4703a 	and	r2,r2,r3
10009aa4:	1204703a 	and	r2,r2,r8
10009aa8:	10000226 	beq	r2,zero,10009ab4 <strcmp+0x44>
10009aac:	00002306 	br	10009b3c <strcmp+0xcc>
10009ab0:	1000221e 	bne	r2,zero,10009b3c <strcmp+0xcc>
10009ab4:	21000104 	addi	r4,r4,4
10009ab8:	20c00017 	ldw	r3,0(r4)
10009abc:	29400104 	addi	r5,r5,4
10009ac0:	29800017 	ldw	r6,0(r5)
10009ac4:	1a4f883a 	add	r7,r3,r9
10009ac8:	00c4303a 	nor	r2,zero,r3
10009acc:	3884703a 	and	r2,r7,r2
10009ad0:	1204703a 	and	r2,r2,r8
10009ad4:	19bff626 	beq	r3,r6,10009ab0 <__alt_data_end+0xf8009ab0>
10009ad8:	20800003 	ldbu	r2,0(r4)
10009adc:	10c03fcc 	andi	r3,r2,255
10009ae0:	18c0201c 	xori	r3,r3,128
10009ae4:	18ffe004 	addi	r3,r3,-128
10009ae8:	18000c26 	beq	r3,zero,10009b1c <strcmp+0xac>
10009aec:	29800007 	ldb	r6,0(r5)
10009af0:	19800326 	beq	r3,r6,10009b00 <strcmp+0x90>
10009af4:	00001306 	br	10009b44 <strcmp+0xd4>
10009af8:	29800007 	ldb	r6,0(r5)
10009afc:	11800b1e 	bne	r2,r6,10009b2c <strcmp+0xbc>
10009b00:	21000044 	addi	r4,r4,1
10009b04:	20c00003 	ldbu	r3,0(r4)
10009b08:	29400044 	addi	r5,r5,1
10009b0c:	18803fcc 	andi	r2,r3,255
10009b10:	1080201c 	xori	r2,r2,128
10009b14:	10bfe004 	addi	r2,r2,-128
10009b18:	103ff71e 	bne	r2,zero,10009af8 <__alt_data_end+0xf8009af8>
10009b1c:	0007883a 	mov	r3,zero
10009b20:	28800003 	ldbu	r2,0(r5)
10009b24:	1885c83a 	sub	r2,r3,r2
10009b28:	f800283a 	ret
10009b2c:	28800003 	ldbu	r2,0(r5)
10009b30:	18c03fcc 	andi	r3,r3,255
10009b34:	1885c83a 	sub	r2,r3,r2
10009b38:	f800283a 	ret
10009b3c:	0005883a 	mov	r2,zero
10009b40:	f800283a 	ret
10009b44:	10c03fcc 	andi	r3,r2,255
10009b48:	003ff506 	br	10009b20 <__alt_data_end+0xf8009b20>

10009b4c <__sprint_r.part.0>:
10009b4c:	28801917 	ldw	r2,100(r5)
10009b50:	defff604 	addi	sp,sp,-40
10009b54:	dd400515 	stw	r21,20(sp)
10009b58:	dfc00915 	stw	ra,36(sp)
10009b5c:	df000815 	stw	fp,32(sp)
10009b60:	ddc00715 	stw	r23,28(sp)
10009b64:	dd800615 	stw	r22,24(sp)
10009b68:	dd000415 	stw	r20,16(sp)
10009b6c:	dcc00315 	stw	r19,12(sp)
10009b70:	dc800215 	stw	r18,8(sp)
10009b74:	dc400115 	stw	r17,4(sp)
10009b78:	dc000015 	stw	r16,0(sp)
10009b7c:	1088000c 	andi	r2,r2,8192
10009b80:	302b883a 	mov	r21,r6
10009b84:	10002e26 	beq	r2,zero,10009c40 <__sprint_r.part.0+0xf4>
10009b88:	30800217 	ldw	r2,8(r6)
10009b8c:	35800017 	ldw	r22,0(r6)
10009b90:	10002926 	beq	r2,zero,10009c38 <__sprint_r.part.0+0xec>
10009b94:	2827883a 	mov	r19,r5
10009b98:	2029883a 	mov	r20,r4
10009b9c:	b5c00104 	addi	r23,r22,4
10009ba0:	04bfffc4 	movi	r18,-1
10009ba4:	bc400017 	ldw	r17,0(r23)
10009ba8:	b4000017 	ldw	r16,0(r22)
10009bac:	0039883a 	mov	fp,zero
10009bb0:	8822d0ba 	srli	r17,r17,2
10009bb4:	8800031e 	bne	r17,zero,10009bc4 <__sprint_r.part.0+0x78>
10009bb8:	00001806 	br	10009c1c <__sprint_r.part.0+0xd0>
10009bbc:	84000104 	addi	r16,r16,4
10009bc0:	8f001526 	beq	r17,fp,10009c18 <__sprint_r.part.0+0xcc>
10009bc4:	81400017 	ldw	r5,0(r16)
10009bc8:	980d883a 	mov	r6,r19
10009bcc:	a009883a 	mov	r4,r20
10009bd0:	000b63c0 	call	1000b63c <_fputwc_r>
10009bd4:	e7000044 	addi	fp,fp,1
10009bd8:	14bff81e 	bne	r2,r18,10009bbc <__alt_data_end+0xf8009bbc>
10009bdc:	9005883a 	mov	r2,r18
10009be0:	a8000215 	stw	zero,8(r21)
10009be4:	a8000115 	stw	zero,4(r21)
10009be8:	dfc00917 	ldw	ra,36(sp)
10009bec:	df000817 	ldw	fp,32(sp)
10009bf0:	ddc00717 	ldw	r23,28(sp)
10009bf4:	dd800617 	ldw	r22,24(sp)
10009bf8:	dd400517 	ldw	r21,20(sp)
10009bfc:	dd000417 	ldw	r20,16(sp)
10009c00:	dcc00317 	ldw	r19,12(sp)
10009c04:	dc800217 	ldw	r18,8(sp)
10009c08:	dc400117 	ldw	r17,4(sp)
10009c0c:	dc000017 	ldw	r16,0(sp)
10009c10:	dec00a04 	addi	sp,sp,40
10009c14:	f800283a 	ret
10009c18:	a8800217 	ldw	r2,8(r21)
10009c1c:	8c63883a 	add	r17,r17,r17
10009c20:	8c63883a 	add	r17,r17,r17
10009c24:	1445c83a 	sub	r2,r2,r17
10009c28:	a8800215 	stw	r2,8(r21)
10009c2c:	b5800204 	addi	r22,r22,8
10009c30:	bdc00204 	addi	r23,r23,8
10009c34:	103fdb1e 	bne	r2,zero,10009ba4 <__alt_data_end+0xf8009ba4>
10009c38:	0005883a 	mov	r2,zero
10009c3c:	003fe806 	br	10009be0 <__alt_data_end+0xf8009be0>
10009c40:	0006cac0 	call	10006cac <__sfvwrite_r>
10009c44:	003fe606 	br	10009be0 <__alt_data_end+0xf8009be0>

10009c48 <__sprint_r>:
10009c48:	30c00217 	ldw	r3,8(r6)
10009c4c:	18000126 	beq	r3,zero,10009c54 <__sprint_r+0xc>
10009c50:	0009b4c1 	jmpi	10009b4c <__sprint_r.part.0>
10009c54:	30000115 	stw	zero,4(r6)
10009c58:	0005883a 	mov	r2,zero
10009c5c:	f800283a 	ret

10009c60 <___vfiprintf_internal_r>:
10009c60:	deffca04 	addi	sp,sp,-216
10009c64:	dd403115 	stw	r21,196(sp)
10009c68:	dfc03515 	stw	ra,212(sp)
10009c6c:	df003415 	stw	fp,208(sp)
10009c70:	ddc03315 	stw	r23,204(sp)
10009c74:	dd803215 	stw	r22,200(sp)
10009c78:	dd003015 	stw	r20,192(sp)
10009c7c:	dcc02f15 	stw	r19,188(sp)
10009c80:	dc802e15 	stw	r18,184(sp)
10009c84:	dc402d15 	stw	r17,180(sp)
10009c88:	dc002c15 	stw	r16,176(sp)
10009c8c:	d9002115 	stw	r4,132(sp)
10009c90:	d9402015 	stw	r5,128(sp)
10009c94:	d9c02215 	stw	r7,136(sp)
10009c98:	302b883a 	mov	r21,r6
10009c9c:	20000226 	beq	r4,zero,10009ca8 <___vfiprintf_internal_r+0x48>
10009ca0:	20800e17 	ldw	r2,56(r4)
10009ca4:	1000cf26 	beq	r2,zero,10009fe4 <___vfiprintf_internal_r+0x384>
10009ca8:	d8c02017 	ldw	r3,128(sp)
10009cac:	1880030b 	ldhu	r2,12(r3)
10009cb0:	10c8000c 	andi	r3,r2,8192
10009cb4:	1800071e 	bne	r3,zero,10009cd4 <___vfiprintf_internal_r+0x74>
10009cb8:	d9402017 	ldw	r5,128(sp)
10009cbc:	00f7ffc4 	movi	r3,-8193
10009cc0:	10880014 	ori	r2,r2,8192
10009cc4:	29001917 	ldw	r4,100(r5)
10009cc8:	2880030d 	sth	r2,12(r5)
10009ccc:	20c6703a 	and	r3,r4,r3
10009cd0:	28c01915 	stw	r3,100(r5)
10009cd4:	10c0020c 	andi	r3,r2,8
10009cd8:	1800a526 	beq	r3,zero,10009f70 <___vfiprintf_internal_r+0x310>
10009cdc:	d9002017 	ldw	r4,128(sp)
10009ce0:	20c00417 	ldw	r3,16(r4)
10009ce4:	1800a226 	beq	r3,zero,10009f70 <___vfiprintf_internal_r+0x310>
10009ce8:	1080068c 	andi	r2,r2,26
10009cec:	00c00284 	movi	r3,10
10009cf0:	10c0a826 	beq	r2,r3,10009f94 <___vfiprintf_internal_r+0x334>
10009cf4:	d9001a04 	addi	r4,sp,104
10009cf8:	d94019c4 	addi	r5,sp,103
10009cfc:	04840074 	movhi	r18,4097
10009d00:	2145c83a 	sub	r2,r4,r5
10009d04:	9488c704 	addi	r18,r18,8988
10009d08:	d9001e15 	stw	r4,120(sp)
10009d0c:	d9401f15 	stw	r5,124(sp)
10009d10:	dec01a15 	stw	sp,104(sp)
10009d14:	d8001c15 	stw	zero,112(sp)
10009d18:	d8001b15 	stw	zero,108(sp)
10009d1c:	d811883a 	mov	r8,sp
10009d20:	d8002615 	stw	zero,152(sp)
10009d24:	d8002415 	stw	zero,144(sp)
10009d28:	d8802815 	stw	r2,160(sp)
10009d2c:	a82d883a 	mov	r22,r21
10009d30:	b0800007 	ldb	r2,0(r22)
10009d34:	10040d26 	beq	r2,zero,1000ad6c <___vfiprintf_internal_r+0x110c>
10009d38:	00c00944 	movi	r3,37
10009d3c:	b029883a 	mov	r20,r22
10009d40:	10c0021e 	bne	r2,r3,10009d4c <___vfiprintf_internal_r+0xec>
10009d44:	00001606 	br	10009da0 <___vfiprintf_internal_r+0x140>
10009d48:	10c00326 	beq	r2,r3,10009d58 <___vfiprintf_internal_r+0xf8>
10009d4c:	a5000044 	addi	r20,r20,1
10009d50:	a0800007 	ldb	r2,0(r20)
10009d54:	103ffc1e 	bne	r2,zero,10009d48 <__alt_data_end+0xf8009d48>
10009d58:	a5a1c83a 	sub	r16,r20,r22
10009d5c:	80001026 	beq	r16,zero,10009da0 <___vfiprintf_internal_r+0x140>
10009d60:	d8c01c17 	ldw	r3,112(sp)
10009d64:	d8801b17 	ldw	r2,108(sp)
10009d68:	45800015 	stw	r22,0(r8)
10009d6c:	80c7883a 	add	r3,r16,r3
10009d70:	10800044 	addi	r2,r2,1
10009d74:	44000115 	stw	r16,4(r8)
10009d78:	d8c01c15 	stw	r3,112(sp)
10009d7c:	d8801b15 	stw	r2,108(sp)
10009d80:	010001c4 	movi	r4,7
10009d84:	2080750e 	bge	r4,r2,10009f5c <___vfiprintf_internal_r+0x2fc>
10009d88:	1803951e 	bne	r3,zero,1000abe0 <___vfiprintf_internal_r+0xf80>
10009d8c:	d8c02417 	ldw	r3,144(sp)
10009d90:	d8001b15 	stw	zero,108(sp)
10009d94:	d811883a 	mov	r8,sp
10009d98:	1c07883a 	add	r3,r3,r16
10009d9c:	d8c02415 	stw	r3,144(sp)
10009da0:	a0800007 	ldb	r2,0(r20)
10009da4:	1002e026 	beq	r2,zero,1000a928 <___vfiprintf_internal_r+0xcc8>
10009da8:	a5800044 	addi	r22,r20,1
10009dac:	a0c00047 	ldb	r3,1(r20)
10009db0:	d8001d85 	stb	zero,118(sp)
10009db4:	0027883a 	mov	r19,zero
10009db8:	d8002305 	stb	zero,140(sp)
10009dbc:	043fffc4 	movi	r16,-1
10009dc0:	d8002515 	stw	zero,148(sp)
10009dc4:	0023883a 	mov	r17,zero
10009dc8:	05001604 	movi	r20,88
10009dcc:	05400244 	movi	r21,9
10009dd0:	402f883a 	mov	r23,r8
10009dd4:	b5800044 	addi	r22,r22,1
10009dd8:	18bff804 	addi	r2,r3,-32
10009ddc:	a0827736 	bltu	r20,r2,1000a7bc <___vfiprintf_internal_r+0xb5c>
10009de0:	100490ba 	slli	r2,r2,2
10009de4:	01040074 	movhi	r4,4097
10009de8:	21277e04 	addi	r4,r4,-25096
10009dec:	1105883a 	add	r2,r2,r4
10009df0:	10800017 	ldw	r2,0(r2)
10009df4:	1000683a 	jmp	r2
10009df8:	1000a4bc 	xorhi	zero,r2,658
10009dfc:	1000a7bc 	xorhi	zero,r2,670
10009e00:	1000a7bc 	xorhi	zero,r2,670
10009e04:	1000a4d8 	cmpnei	zero,r2,659
10009e08:	1000a7bc 	xorhi	zero,r2,670
10009e0c:	1000a7bc 	xorhi	zero,r2,670
10009e10:	1000a7bc 	xorhi	zero,r2,670
10009e14:	1000a7bc 	xorhi	zero,r2,670
10009e18:	1000a7bc 	xorhi	zero,r2,670
10009e1c:	1000a7bc 	xorhi	zero,r2,670
10009e20:	1000a6e0 	cmpeqi	zero,r2,667
10009e24:	1000a704 	addi	zero,r2,668
10009e28:	1000a7bc 	xorhi	zero,r2,670
10009e2c:	10009ffc 	xorhi	zero,r2,639
10009e30:	1000a718 	cmpnei	zero,r2,668
10009e34:	1000a7bc 	xorhi	zero,r2,670
10009e38:	1000a4e4 	muli	zero,r2,659
10009e3c:	1000a4f0 	cmpltui	zero,r2,659
10009e40:	1000a4f0 	cmpltui	zero,r2,659
10009e44:	1000a4f0 	cmpltui	zero,r2,659
10009e48:	1000a4f0 	cmpltui	zero,r2,659
10009e4c:	1000a4f0 	cmpltui	zero,r2,659
10009e50:	1000a4f0 	cmpltui	zero,r2,659
10009e54:	1000a4f0 	cmpltui	zero,r2,659
10009e58:	1000a4f0 	cmpltui	zero,r2,659
10009e5c:	1000a4f0 	cmpltui	zero,r2,659
10009e60:	1000a7bc 	xorhi	zero,r2,670
10009e64:	1000a7bc 	xorhi	zero,r2,670
10009e68:	1000a7bc 	xorhi	zero,r2,670
10009e6c:	1000a7bc 	xorhi	zero,r2,670
10009e70:	1000a7bc 	xorhi	zero,r2,670
10009e74:	1000a7bc 	xorhi	zero,r2,670
10009e78:	1000a7bc 	xorhi	zero,r2,670
10009e7c:	1000a7bc 	xorhi	zero,r2,670
10009e80:	1000a7bc 	xorhi	zero,r2,670
10009e84:	1000a7bc 	xorhi	zero,r2,670
10009e88:	1000a530 	cmpltui	zero,r2,660
10009e8c:	1000a7bc 	xorhi	zero,r2,670
10009e90:	1000a7bc 	xorhi	zero,r2,670
10009e94:	1000a7bc 	xorhi	zero,r2,670
10009e98:	1000a7bc 	xorhi	zero,r2,670
10009e9c:	1000a7bc 	xorhi	zero,r2,670
10009ea0:	1000a7bc 	xorhi	zero,r2,670
10009ea4:	1000a7bc 	xorhi	zero,r2,670
10009ea8:	1000a7bc 	xorhi	zero,r2,670
10009eac:	1000a7bc 	xorhi	zero,r2,670
10009eb0:	1000a7bc 	xorhi	zero,r2,670
10009eb4:	1000a56c 	andhi	zero,r2,661
10009eb8:	1000a7bc 	xorhi	zero,r2,670
10009ebc:	1000a7bc 	xorhi	zero,r2,670
10009ec0:	1000a7bc 	xorhi	zero,r2,670
10009ec4:	1000a7bc 	xorhi	zero,r2,670
10009ec8:	1000a7bc 	xorhi	zero,r2,670
10009ecc:	1000a5c8 	cmpgei	zero,r2,663
10009ed0:	1000a7bc 	xorhi	zero,r2,670
10009ed4:	1000a7bc 	xorhi	zero,r2,670
10009ed8:	1000a63c 	xorhi	zero,r2,664
10009edc:	1000a7bc 	xorhi	zero,r2,670
10009ee0:	1000a7bc 	xorhi	zero,r2,670
10009ee4:	1000a7bc 	xorhi	zero,r2,670
10009ee8:	1000a7bc 	xorhi	zero,r2,670
10009eec:	1000a7bc 	xorhi	zero,r2,670
10009ef0:	1000a7bc 	xorhi	zero,r2,670
10009ef4:	1000a7bc 	xorhi	zero,r2,670
10009ef8:	1000a7bc 	xorhi	zero,r2,670
10009efc:	1000a7bc 	xorhi	zero,r2,670
10009f00:	1000a7bc 	xorhi	zero,r2,670
10009f04:	1000a3e4 	muli	zero,r2,655
10009f08:	1000a414 	ori	zero,r2,656
10009f0c:	1000a7bc 	xorhi	zero,r2,670
10009f10:	1000a7bc 	xorhi	zero,r2,670
10009f14:	1000a7bc 	xorhi	zero,r2,670
10009f18:	1000a764 	muli	zero,r2,669
10009f1c:	1000a414 	ori	zero,r2,656
10009f20:	1000a7bc 	xorhi	zero,r2,670
10009f24:	1000a7bc 	xorhi	zero,r2,670
10009f28:	1000a2bc 	xorhi	zero,r2,650
10009f2c:	1000a7bc 	xorhi	zero,r2,670
10009f30:	1000a2d0 	cmplti	zero,r2,651
10009f34:	1000a308 	cmpgei	zero,r2,652
10009f38:	1000a008 	cmpgei	zero,r2,640
10009f3c:	1000a2b0 	cmpltui	zero,r2,650
10009f40:	1000a7bc 	xorhi	zero,r2,670
10009f44:	1000a67c 	xorhi	zero,r2,665
10009f48:	1000a7bc 	xorhi	zero,r2,670
10009f4c:	1000a6c8 	cmpgei	zero,r2,667
10009f50:	1000a7bc 	xorhi	zero,r2,670
10009f54:	1000a7bc 	xorhi	zero,r2,670
10009f58:	1000a38c 	andi	zero,r2,654
10009f5c:	42000204 	addi	r8,r8,8
10009f60:	d8c02417 	ldw	r3,144(sp)
10009f64:	1c07883a 	add	r3,r3,r16
10009f68:	d8c02415 	stw	r3,144(sp)
10009f6c:	003f8c06 	br	10009da0 <__alt_data_end+0xf8009da0>
10009f70:	d9402017 	ldw	r5,128(sp)
10009f74:	d9002117 	ldw	r4,132(sp)
10009f78:	000481c0 	call	1000481c <__swsetup_r>
10009f7c:	1003c11e 	bne	r2,zero,1000ae84 <___vfiprintf_internal_r+0x1224>
10009f80:	d9402017 	ldw	r5,128(sp)
10009f84:	00c00284 	movi	r3,10
10009f88:	2880030b 	ldhu	r2,12(r5)
10009f8c:	1080068c 	andi	r2,r2,26
10009f90:	10ff581e 	bne	r2,r3,10009cf4 <__alt_data_end+0xf8009cf4>
10009f94:	d8c02017 	ldw	r3,128(sp)
10009f98:	1880038f 	ldh	r2,14(r3)
10009f9c:	103f5516 	blt	r2,zero,10009cf4 <__alt_data_end+0xf8009cf4>
10009fa0:	d9c02217 	ldw	r7,136(sp)
10009fa4:	d9002117 	ldw	r4,132(sp)
10009fa8:	a80d883a 	mov	r6,r21
10009fac:	180b883a 	mov	r5,r3
10009fb0:	000b1880 	call	1000b188 <__sbprintf>
10009fb4:	dfc03517 	ldw	ra,212(sp)
10009fb8:	df003417 	ldw	fp,208(sp)
10009fbc:	ddc03317 	ldw	r23,204(sp)
10009fc0:	dd803217 	ldw	r22,200(sp)
10009fc4:	dd403117 	ldw	r21,196(sp)
10009fc8:	dd003017 	ldw	r20,192(sp)
10009fcc:	dcc02f17 	ldw	r19,188(sp)
10009fd0:	dc802e17 	ldw	r18,184(sp)
10009fd4:	dc402d17 	ldw	r17,180(sp)
10009fd8:	dc002c17 	ldw	r16,176(sp)
10009fdc:	dec03604 	addi	sp,sp,216
10009fe0:	f800283a 	ret
10009fe4:	00068280 	call	10006828 <__sinit>
10009fe8:	003f2f06 	br	10009ca8 <__alt_data_end+0xf8009ca8>
10009fec:	d8c02517 	ldw	r3,148(sp)
10009ff0:	d8802215 	stw	r2,136(sp)
10009ff4:	00c7c83a 	sub	r3,zero,r3
10009ff8:	d8c02515 	stw	r3,148(sp)
10009ffc:	8c400114 	ori	r17,r17,4
1000a000:	b0c00007 	ldb	r3,0(r22)
1000a004:	003f7306 	br	10009dd4 <__alt_data_end+0xf8009dd4>
1000a008:	00800c04 	movi	r2,48
1000a00c:	d9402217 	ldw	r5,136(sp)
1000a010:	d8801d05 	stb	r2,116(sp)
1000a014:	00801e04 	movi	r2,120
1000a018:	d8801d45 	stb	r2,117(sp)
1000a01c:	d8001d85 	stb	zero,118(sp)
1000a020:	b811883a 	mov	r8,r23
1000a024:	28c00104 	addi	r3,r5,4
1000a028:	2cc00017 	ldw	r19,0(r5)
1000a02c:	0029883a 	mov	r20,zero
1000a030:	88800094 	ori	r2,r17,2
1000a034:	80032516 	blt	r16,zero,1000accc <___vfiprintf_internal_r+0x106c>
1000a038:	00bfdfc4 	movi	r2,-129
1000a03c:	88a2703a 	and	r17,r17,r2
1000a040:	d8c02215 	stw	r3,136(sp)
1000a044:	8c400094 	ori	r17,r17,2
1000a048:	98032a1e 	bne	r19,zero,1000acf4 <___vfiprintf_internal_r+0x1094>
1000a04c:	00840074 	movhi	r2,4097
1000a050:	10886604 	addi	r2,r2,8600
1000a054:	d8802615 	stw	r2,152(sp)
1000a058:	002b883a 	mov	r21,zero
1000a05c:	8001741e 	bne	r16,zero,1000a630 <___vfiprintf_internal_r+0x9d0>
1000a060:	0021883a 	mov	r16,zero
1000a064:	0029883a 	mov	r20,zero
1000a068:	ddc01a04 	addi	r23,sp,104
1000a06c:	8027883a 	mov	r19,r16
1000a070:	8500010e 	bge	r16,r20,1000a078 <___vfiprintf_internal_r+0x418>
1000a074:	a027883a 	mov	r19,r20
1000a078:	ad403fcc 	andi	r21,r21,255
1000a07c:	ad40201c 	xori	r21,r21,128
1000a080:	ad7fe004 	addi	r21,r21,-128
1000a084:	a8000126 	beq	r21,zero,1000a08c <___vfiprintf_internal_r+0x42c>
1000a088:	9cc00044 	addi	r19,r19,1
1000a08c:	89c0008c 	andi	r7,r17,2
1000a090:	38000126 	beq	r7,zero,1000a098 <___vfiprintf_internal_r+0x438>
1000a094:	9cc00084 	addi	r19,r19,2
1000a098:	88c0210c 	andi	r3,r17,132
1000a09c:	1801dd1e 	bne	r3,zero,1000a814 <___vfiprintf_internal_r+0xbb4>
1000a0a0:	d9402517 	ldw	r5,148(sp)
1000a0a4:	2cebc83a 	sub	r21,r5,r19
1000a0a8:	0541da0e 	bge	zero,r21,1000a814 <___vfiprintf_internal_r+0xbb4>
1000a0ac:	07000404 	movi	fp,16
1000a0b0:	d8801c17 	ldw	r2,112(sp)
1000a0b4:	e543be0e 	bge	fp,r21,1000afb0 <___vfiprintf_internal_r+0x1350>
1000a0b8:	01440074 	movhi	r5,4097
1000a0bc:	2948cb04 	addi	r5,r5,9004
1000a0c0:	dc002715 	stw	r16,156(sp)
1000a0c4:	d9801b17 	ldw	r6,108(sp)
1000a0c8:	a821883a 	mov	r16,r21
1000a0cc:	d9402315 	stw	r5,140(sp)
1000a0d0:	028001c4 	movi	r10,7
1000a0d4:	d9c02915 	stw	r7,164(sp)
1000a0d8:	182b883a 	mov	r21,r3
1000a0dc:	00000506 	br	1000a0f4 <___vfiprintf_internal_r+0x494>
1000a0e0:	31000084 	addi	r4,r6,2
1000a0e4:	42000204 	addi	r8,r8,8
1000a0e8:	180d883a 	mov	r6,r3
1000a0ec:	843ffc04 	addi	r16,r16,-16
1000a0f0:	e4000f0e 	bge	fp,r16,1000a130 <___vfiprintf_internal_r+0x4d0>
1000a0f4:	01040074 	movhi	r4,4097
1000a0f8:	10800404 	addi	r2,r2,16
1000a0fc:	30c00044 	addi	r3,r6,1
1000a100:	2108cb04 	addi	r4,r4,9004
1000a104:	41000015 	stw	r4,0(r8)
1000a108:	47000115 	stw	fp,4(r8)
1000a10c:	d8801c15 	stw	r2,112(sp)
1000a110:	d8c01b15 	stw	r3,108(sp)
1000a114:	50fff20e 	bge	r10,r3,1000a0e0 <__alt_data_end+0xf800a0e0>
1000a118:	1001b21e 	bne	r2,zero,1000a7e4 <___vfiprintf_internal_r+0xb84>
1000a11c:	843ffc04 	addi	r16,r16,-16
1000a120:	000d883a 	mov	r6,zero
1000a124:	01000044 	movi	r4,1
1000a128:	d811883a 	mov	r8,sp
1000a12c:	e43ff116 	blt	fp,r16,1000a0f4 <__alt_data_end+0xf800a0f4>
1000a130:	a807883a 	mov	r3,r21
1000a134:	d9c02917 	ldw	r7,164(sp)
1000a138:	802b883a 	mov	r21,r16
1000a13c:	dc002717 	ldw	r16,156(sp)
1000a140:	d9402317 	ldw	r5,140(sp)
1000a144:	a885883a 	add	r2,r21,r2
1000a148:	45400115 	stw	r21,4(r8)
1000a14c:	41400015 	stw	r5,0(r8)
1000a150:	d8801c15 	stw	r2,112(sp)
1000a154:	d9001b15 	stw	r4,108(sp)
1000a158:	014001c4 	movi	r5,7
1000a15c:	29026216 	blt	r5,r4,1000aae8 <___vfiprintf_internal_r+0xe88>
1000a160:	d9801d87 	ldb	r6,118(sp)
1000a164:	42000204 	addi	r8,r8,8
1000a168:	21400044 	addi	r5,r4,1
1000a16c:	3001ae1e 	bne	r6,zero,1000a828 <___vfiprintf_internal_r+0xbc8>
1000a170:	3801bb26 	beq	r7,zero,1000a860 <___vfiprintf_internal_r+0xc00>
1000a174:	d9001d04 	addi	r4,sp,116
1000a178:	10800084 	addi	r2,r2,2
1000a17c:	41000015 	stw	r4,0(r8)
1000a180:	01000084 	movi	r4,2
1000a184:	41000115 	stw	r4,4(r8)
1000a188:	d8801c15 	stw	r2,112(sp)
1000a18c:	d9401b15 	stw	r5,108(sp)
1000a190:	010001c4 	movi	r4,7
1000a194:	2142680e 	bge	r4,r5,1000ab38 <___vfiprintf_internal_r+0xed8>
1000a198:	1002b11e 	bne	r2,zero,1000ac60 <___vfiprintf_internal_r+0x1000>
1000a19c:	01802004 	movi	r6,128
1000a1a0:	01400044 	movi	r5,1
1000a1a4:	0009883a 	mov	r4,zero
1000a1a8:	d811883a 	mov	r8,sp
1000a1ac:	1981ae1e 	bne	r3,r6,1000a868 <___vfiprintf_internal_r+0xc08>
1000a1b0:	d8c02517 	ldw	r3,148(sp)
1000a1b4:	1cf9c83a 	sub	fp,r3,r19
1000a1b8:	0701ab0e 	bge	zero,fp,1000a868 <___vfiprintf_internal_r+0xc08>
1000a1bc:	05400404 	movi	r21,16
1000a1c0:	af03a90e 	bge	r21,fp,1000b068 <___vfiprintf_internal_r+0x1408>
1000a1c4:	01440074 	movhi	r5,4097
1000a1c8:	2948c704 	addi	r5,r5,8988
1000a1cc:	d9402315 	stw	r5,140(sp)
1000a1d0:	01c001c4 	movi	r7,7
1000a1d4:	00000506 	br	1000a1ec <___vfiprintf_internal_r+0x58c>
1000a1d8:	21800084 	addi	r6,r4,2
1000a1dc:	42000204 	addi	r8,r8,8
1000a1e0:	1809883a 	mov	r4,r3
1000a1e4:	e73ffc04 	addi	fp,fp,-16
1000a1e8:	af000d0e 	bge	r21,fp,1000a220 <___vfiprintf_internal_r+0x5c0>
1000a1ec:	10800404 	addi	r2,r2,16
1000a1f0:	20c00044 	addi	r3,r4,1
1000a1f4:	44800015 	stw	r18,0(r8)
1000a1f8:	45400115 	stw	r21,4(r8)
1000a1fc:	d8801c15 	stw	r2,112(sp)
1000a200:	d8c01b15 	stw	r3,108(sp)
1000a204:	38fff40e 	bge	r7,r3,1000a1d8 <__alt_data_end+0xf800a1d8>
1000a208:	10022b1e 	bne	r2,zero,1000aab8 <___vfiprintf_internal_r+0xe58>
1000a20c:	e73ffc04 	addi	fp,fp,-16
1000a210:	01800044 	movi	r6,1
1000a214:	0009883a 	mov	r4,zero
1000a218:	d811883a 	mov	r8,sp
1000a21c:	af3ff316 	blt	r21,fp,1000a1ec <__alt_data_end+0xf800a1ec>
1000a220:	d8c02317 	ldw	r3,140(sp)
1000a224:	1705883a 	add	r2,r2,fp
1000a228:	47000115 	stw	fp,4(r8)
1000a22c:	40c00015 	stw	r3,0(r8)
1000a230:	d8801c15 	stw	r2,112(sp)
1000a234:	d9801b15 	stw	r6,108(sp)
1000a238:	00c001c4 	movi	r3,7
1000a23c:	19829416 	blt	r3,r6,1000ac90 <___vfiprintf_internal_r+0x1030>
1000a240:	8521c83a 	sub	r16,r16,r20
1000a244:	42000204 	addi	r8,r8,8
1000a248:	31400044 	addi	r5,r6,1
1000a24c:	3009883a 	mov	r4,r6
1000a250:	04018716 	blt	zero,r16,1000a870 <___vfiprintf_internal_r+0xc10>
1000a254:	a085883a 	add	r2,r20,r2
1000a258:	45c00015 	stw	r23,0(r8)
1000a25c:	45000115 	stw	r20,4(r8)
1000a260:	d8801c15 	stw	r2,112(sp)
1000a264:	d9401b15 	stw	r5,108(sp)
1000a268:	00c001c4 	movi	r3,7
1000a26c:	1941c20e 	bge	r3,r5,1000a978 <___vfiprintf_internal_r+0xd18>
1000a270:	1002531e 	bne	r2,zero,1000abc0 <___vfiprintf_internal_r+0xf60>
1000a274:	d8001b15 	stw	zero,108(sp)
1000a278:	8c40010c 	andi	r17,r17,4
1000a27c:	88023226 	beq	r17,zero,1000ab48 <___vfiprintf_internal_r+0xee8>
1000a280:	d9002517 	ldw	r4,148(sp)
1000a284:	24e3c83a 	sub	r17,r4,r19
1000a288:	04432916 	blt	zero,r17,1000af30 <___vfiprintf_internal_r+0x12d0>
1000a28c:	d8802517 	ldw	r2,148(sp)
1000a290:	14c0010e 	bge	r2,r19,1000a298 <___vfiprintf_internal_r+0x638>
1000a294:	9805883a 	mov	r2,r19
1000a298:	d8c02417 	ldw	r3,144(sp)
1000a29c:	1887883a 	add	r3,r3,r2
1000a2a0:	d8c02415 	stw	r3,144(sp)
1000a2a4:	d8001b15 	stw	zero,108(sp)
1000a2a8:	d811883a 	mov	r8,sp
1000a2ac:	003ea006 	br	10009d30 <__alt_data_end+0xf8009d30>
1000a2b0:	8c400814 	ori	r17,r17,32
1000a2b4:	b0c00007 	ldb	r3,0(r22)
1000a2b8:	003ec606 	br	10009dd4 <__alt_data_end+0xf8009dd4>
1000a2bc:	b0c00007 	ldb	r3,0(r22)
1000a2c0:	00801b04 	movi	r2,108
1000a2c4:	18832026 	beq	r3,r2,1000af48 <___vfiprintf_internal_r+0x12e8>
1000a2c8:	8c400414 	ori	r17,r17,16
1000a2cc:	003ec106 	br	10009dd4 <__alt_data_end+0xf8009dd4>
1000a2d0:	9cc03fcc 	andi	r19,r19,255
1000a2d4:	b811883a 	mov	r8,r23
1000a2d8:	9803981e 	bne	r19,zero,1000b13c <___vfiprintf_internal_r+0x14dc>
1000a2dc:	8880080c 	andi	r2,r17,32
1000a2e0:	1002be26 	beq	r2,zero,1000addc <___vfiprintf_internal_r+0x117c>
1000a2e4:	d9002217 	ldw	r4,136(sp)
1000a2e8:	d9402417 	ldw	r5,144(sp)
1000a2ec:	20800017 	ldw	r2,0(r4)
1000a2f0:	2807d7fa 	srai	r3,r5,31
1000a2f4:	21000104 	addi	r4,r4,4
1000a2f8:	d9002215 	stw	r4,136(sp)
1000a2fc:	11400015 	stw	r5,0(r2)
1000a300:	10c00115 	stw	r3,4(r2)
1000a304:	003e8a06 	br	10009d30 <__alt_data_end+0xf8009d30>
1000a308:	9cc03fcc 	andi	r19,r19,255
1000a30c:	b811883a 	mov	r8,r23
1000a310:	9803871e 	bne	r19,zero,1000b130 <___vfiprintf_internal_r+0x14d0>
1000a314:	8880080c 	andi	r2,r17,32
1000a318:	10009a26 	beq	r2,zero,1000a584 <___vfiprintf_internal_r+0x924>
1000a31c:	d9002217 	ldw	r4,136(sp)
1000a320:	d8001d85 	stb	zero,118(sp)
1000a324:	20800204 	addi	r2,r4,8
1000a328:	24c00017 	ldw	r19,0(r4)
1000a32c:	25000117 	ldw	r20,4(r4)
1000a330:	8002a416 	blt	r16,zero,1000adc4 <___vfiprintf_internal_r+0x1164>
1000a334:	013fdfc4 	movi	r4,-129
1000a338:	9d06b03a 	or	r3,r19,r20
1000a33c:	d8802215 	stw	r2,136(sp)
1000a340:	8922703a 	and	r17,r17,r4
1000a344:	18009b26 	beq	r3,zero,1000a5b4 <___vfiprintf_internal_r+0x954>
1000a348:	002b883a 	mov	r21,zero
1000a34c:	ddc01a04 	addi	r23,sp,104
1000a350:	9806d0fa 	srli	r3,r19,3
1000a354:	a008977a 	slli	r4,r20,29
1000a358:	a028d0fa 	srli	r20,r20,3
1000a35c:	9cc001cc 	andi	r19,r19,7
1000a360:	98800c04 	addi	r2,r19,48
1000a364:	bdffffc4 	addi	r23,r23,-1
1000a368:	20e6b03a 	or	r19,r4,r3
1000a36c:	b8800005 	stb	r2,0(r23)
1000a370:	9d06b03a 	or	r3,r19,r20
1000a374:	183ff61e 	bne	r3,zero,1000a350 <__alt_data_end+0xf800a350>
1000a378:	88c0004c 	andi	r3,r17,1
1000a37c:	18021f1e 	bne	r3,zero,1000abfc <___vfiprintf_internal_r+0xf9c>
1000a380:	d9401e17 	ldw	r5,120(sp)
1000a384:	2de9c83a 	sub	r20,r5,r23
1000a388:	003f3806 	br	1000a06c <__alt_data_end+0xf800a06c>
1000a38c:	9cc03fcc 	andi	r19,r19,255
1000a390:	b811883a 	mov	r8,r23
1000a394:	98034f1e 	bne	r19,zero,1000b0d4 <___vfiprintf_internal_r+0x1474>
1000a398:	00840074 	movhi	r2,4097
1000a39c:	10886604 	addi	r2,r2,8600
1000a3a0:	d8802615 	stw	r2,152(sp)
1000a3a4:	8880080c 	andi	r2,r17,32
1000a3a8:	1000ac26 	beq	r2,zero,1000a65c <___vfiprintf_internal_r+0x9fc>
1000a3ac:	d9002217 	ldw	r4,136(sp)
1000a3b0:	24c00017 	ldw	r19,0(r4)
1000a3b4:	25000117 	ldw	r20,4(r4)
1000a3b8:	21000204 	addi	r4,r4,8
1000a3bc:	d9002215 	stw	r4,136(sp)
1000a3c0:	8880004c 	andi	r2,r17,1
1000a3c4:	1001e726 	beq	r2,zero,1000ab64 <___vfiprintf_internal_r+0xf04>
1000a3c8:	9d04b03a 	or	r2,r19,r20
1000a3cc:	10025c1e 	bne	r2,zero,1000ad40 <___vfiprintf_internal_r+0x10e0>
1000a3d0:	d8001d85 	stb	zero,118(sp)
1000a3d4:	80024416 	blt	r16,zero,1000ace8 <___vfiprintf_internal_r+0x1088>
1000a3d8:	00bfdfc4 	movi	r2,-129
1000a3dc:	88a2703a 	and	r17,r17,r2
1000a3e0:	003f1d06 	br	1000a058 <__alt_data_end+0xf800a058>
1000a3e4:	d8c02217 	ldw	r3,136(sp)
1000a3e8:	04c00044 	movi	r19,1
1000a3ec:	b811883a 	mov	r8,r23
1000a3f0:	18800017 	ldw	r2,0(r3)
1000a3f4:	18c00104 	addi	r3,r3,4
1000a3f8:	d8001d85 	stb	zero,118(sp)
1000a3fc:	d8801005 	stb	r2,64(sp)
1000a400:	d8c02215 	stw	r3,136(sp)
1000a404:	9829883a 	mov	r20,r19
1000a408:	ddc01004 	addi	r23,sp,64
1000a40c:	0021883a 	mov	r16,zero
1000a410:	003f1e06 	br	1000a08c <__alt_data_end+0xf800a08c>
1000a414:	9cc03fcc 	andi	r19,r19,255
1000a418:	b811883a 	mov	r8,r23
1000a41c:	9803331e 	bne	r19,zero,1000b0ec <___vfiprintf_internal_r+0x148c>
1000a420:	8880080c 	andi	r2,r17,32
1000a424:	10004826 	beq	r2,zero,1000a548 <___vfiprintf_internal_r+0x8e8>
1000a428:	d9002217 	ldw	r4,136(sp)
1000a42c:	20800117 	ldw	r2,4(r4)
1000a430:	24c00017 	ldw	r19,0(r4)
1000a434:	21000204 	addi	r4,r4,8
1000a438:	d9002215 	stw	r4,136(sp)
1000a43c:	1029883a 	mov	r20,r2
1000a440:	10024c16 	blt	r2,zero,1000ad74 <___vfiprintf_internal_r+0x1114>
1000a444:	dd401d83 	ldbu	r21,118(sp)
1000a448:	80007116 	blt	r16,zero,1000a610 <___vfiprintf_internal_r+0x9b0>
1000a44c:	00ffdfc4 	movi	r3,-129
1000a450:	9d04b03a 	or	r2,r19,r20
1000a454:	88e2703a 	and	r17,r17,r3
1000a458:	1000d126 	beq	r2,zero,1000a7a0 <___vfiprintf_internal_r+0xb40>
1000a45c:	a0023526 	beq	r20,zero,1000ad34 <___vfiprintf_internal_r+0x10d4>
1000a460:	ddc01a04 	addi	r23,sp,104
1000a464:	4039883a 	mov	fp,r8
1000a468:	9809883a 	mov	r4,r19
1000a46c:	a00b883a 	mov	r5,r20
1000a470:	01800284 	movi	r6,10
1000a474:	000f883a 	mov	r7,zero
1000a478:	000c18c0 	call	1000c18c <__umoddi3>
1000a47c:	10800c04 	addi	r2,r2,48
1000a480:	bdffffc4 	addi	r23,r23,-1
1000a484:	9809883a 	mov	r4,r19
1000a488:	a00b883a 	mov	r5,r20
1000a48c:	b8800005 	stb	r2,0(r23)
1000a490:	01800284 	movi	r6,10
1000a494:	000f883a 	mov	r7,zero
1000a498:	000bb900 	call	1000bb90 <__udivdi3>
1000a49c:	1027883a 	mov	r19,r2
1000a4a0:	10c4b03a 	or	r2,r2,r3
1000a4a4:	1829883a 	mov	r20,r3
1000a4a8:	103fef1e 	bne	r2,zero,1000a468 <__alt_data_end+0xf800a468>
1000a4ac:	d9001e17 	ldw	r4,120(sp)
1000a4b0:	e011883a 	mov	r8,fp
1000a4b4:	25e9c83a 	sub	r20,r4,r23
1000a4b8:	003eec06 	br	1000a06c <__alt_data_end+0xf800a06c>
1000a4bc:	d8802307 	ldb	r2,140(sp)
1000a4c0:	1002361e 	bne	r2,zero,1000ad9c <___vfiprintf_internal_r+0x113c>
1000a4c4:	00c00804 	movi	r3,32
1000a4c8:	d8c02305 	stb	r3,140(sp)
1000a4cc:	04c00044 	movi	r19,1
1000a4d0:	b0c00007 	ldb	r3,0(r22)
1000a4d4:	003e3f06 	br	10009dd4 <__alt_data_end+0xf8009dd4>
1000a4d8:	8c400054 	ori	r17,r17,1
1000a4dc:	b0c00007 	ldb	r3,0(r22)
1000a4e0:	003e3c06 	br	10009dd4 <__alt_data_end+0xf8009dd4>
1000a4e4:	8c402014 	ori	r17,r17,128
1000a4e8:	b0c00007 	ldb	r3,0(r22)
1000a4ec:	003e3906 	br	10009dd4 <__alt_data_end+0xf8009dd4>
1000a4f0:	dc002715 	stw	r16,156(sp)
1000a4f4:	d8002515 	stw	zero,148(sp)
1000a4f8:	1f3ff404 	addi	fp,r3,-48
1000a4fc:	0009883a 	mov	r4,zero
1000a500:	b021883a 	mov	r16,r22
1000a504:	01400284 	movi	r5,10
1000a508:	000c9040 	call	1000c904 <__mulsi3>
1000a50c:	80c00007 	ldb	r3,0(r16)
1000a510:	e089883a 	add	r4,fp,r2
1000a514:	b5800044 	addi	r22,r22,1
1000a518:	1f3ff404 	addi	fp,r3,-48
1000a51c:	b021883a 	mov	r16,r22
1000a520:	af3ff82e 	bgeu	r21,fp,1000a504 <__alt_data_end+0xf800a504>
1000a524:	d9002515 	stw	r4,148(sp)
1000a528:	dc002717 	ldw	r16,156(sp)
1000a52c:	003e2a06 	br	10009dd8 <__alt_data_end+0xf8009dd8>
1000a530:	9cc03fcc 	andi	r19,r19,255
1000a534:	b811883a 	mov	r8,r23
1000a538:	9802e91e 	bne	r19,zero,1000b0e0 <___vfiprintf_internal_r+0x1480>
1000a53c:	8c400414 	ori	r17,r17,16
1000a540:	8880080c 	andi	r2,r17,32
1000a544:	103fb81e 	bne	r2,zero,1000a428 <__alt_data_end+0xf800a428>
1000a548:	8880040c 	andi	r2,r17,16
1000a54c:	10022e26 	beq	r2,zero,1000ae08 <___vfiprintf_internal_r+0x11a8>
1000a550:	d9402217 	ldw	r5,136(sp)
1000a554:	2cc00017 	ldw	r19,0(r5)
1000a558:	29400104 	addi	r5,r5,4
1000a55c:	d9402215 	stw	r5,136(sp)
1000a560:	9829d7fa 	srai	r20,r19,31
1000a564:	a005883a 	mov	r2,r20
1000a568:	003fb506 	br	1000a440 <__alt_data_end+0xf800a440>
1000a56c:	9cc03fcc 	andi	r19,r19,255
1000a570:	b811883a 	mov	r8,r23
1000a574:	9802fa1e 	bne	r19,zero,1000b160 <___vfiprintf_internal_r+0x1500>
1000a578:	8c400414 	ori	r17,r17,16
1000a57c:	8880080c 	andi	r2,r17,32
1000a580:	103f661e 	bne	r2,zero,1000a31c <__alt_data_end+0xf800a31c>
1000a584:	8880040c 	andi	r2,r17,16
1000a588:	10020626 	beq	r2,zero,1000ada4 <___vfiprintf_internal_r+0x1144>
1000a58c:	d9402217 	ldw	r5,136(sp)
1000a590:	d8001d85 	stb	zero,118(sp)
1000a594:	0029883a 	mov	r20,zero
1000a598:	28800104 	addi	r2,r5,4
1000a59c:	2cc00017 	ldw	r19,0(r5)
1000a5a0:	80020816 	blt	r16,zero,1000adc4 <___vfiprintf_internal_r+0x1164>
1000a5a4:	00ffdfc4 	movi	r3,-129
1000a5a8:	d8802215 	stw	r2,136(sp)
1000a5ac:	88e2703a 	and	r17,r17,r3
1000a5b0:	983f651e 	bne	r19,zero,1000a348 <__alt_data_end+0xf800a348>
1000a5b4:	002b883a 	mov	r21,zero
1000a5b8:	8002cf26 	beq	r16,zero,1000b0f8 <___vfiprintf_internal_r+0x1498>
1000a5bc:	0027883a 	mov	r19,zero
1000a5c0:	0029883a 	mov	r20,zero
1000a5c4:	003f6106 	br	1000a34c <__alt_data_end+0xf800a34c>
1000a5c8:	9cc03fcc 	andi	r19,r19,255
1000a5cc:	b811883a 	mov	r8,r23
1000a5d0:	9802e01e 	bne	r19,zero,1000b154 <___vfiprintf_internal_r+0x14f4>
1000a5d4:	8c400414 	ori	r17,r17,16
1000a5d8:	8880080c 	andi	r2,r17,32
1000a5dc:	1000641e 	bne	r2,zero,1000a770 <___vfiprintf_internal_r+0xb10>
1000a5e0:	8880040c 	andi	r2,r17,16
1000a5e4:	1001c81e 	bne	r2,zero,1000ad08 <___vfiprintf_internal_r+0x10a8>
1000a5e8:	8880100c 	andi	r2,r17,64
1000a5ec:	d8001d85 	stb	zero,118(sp)
1000a5f0:	1002281e 	bne	r2,zero,1000ae94 <___vfiprintf_internal_r+0x1234>
1000a5f4:	d9002217 	ldw	r4,136(sp)
1000a5f8:	0029883a 	mov	r20,zero
1000a5fc:	20800104 	addi	r2,r4,4
1000a600:	24c00017 	ldw	r19,0(r4)
1000a604:	8001c60e 	bge	r16,zero,1000ad20 <___vfiprintf_internal_r+0x10c0>
1000a608:	d8802215 	stw	r2,136(sp)
1000a60c:	002b883a 	mov	r21,zero
1000a610:	9d04b03a 	or	r2,r19,r20
1000a614:	103f911e 	bne	r2,zero,1000a45c <__alt_data_end+0xf800a45c>
1000a618:	00800044 	movi	r2,1
1000a61c:	10803fcc 	andi	r2,r2,255
1000a620:	00c00044 	movi	r3,1
1000a624:	10c05f26 	beq	r2,r3,1000a7a4 <___vfiprintf_internal_r+0xb44>
1000a628:	00c00084 	movi	r3,2
1000a62c:	10ffe31e 	bne	r2,r3,1000a5bc <__alt_data_end+0xf800a5bc>
1000a630:	0027883a 	mov	r19,zero
1000a634:	0029883a 	mov	r20,zero
1000a638:	00015106 	br	1000ab80 <___vfiprintf_internal_r+0xf20>
1000a63c:	9cc03fcc 	andi	r19,r19,255
1000a640:	b811883a 	mov	r8,r23
1000a644:	9802c01e 	bne	r19,zero,1000b148 <___vfiprintf_internal_r+0x14e8>
1000a648:	01440074 	movhi	r5,4097
1000a64c:	29486104 	addi	r5,r5,8580
1000a650:	d9402615 	stw	r5,152(sp)
1000a654:	8880080c 	andi	r2,r17,32
1000a658:	103f541e 	bne	r2,zero,1000a3ac <__alt_data_end+0xf800a3ac>
1000a65c:	8880040c 	andi	r2,r17,16
1000a660:	1001f226 	beq	r2,zero,1000ae2c <___vfiprintf_internal_r+0x11cc>
1000a664:	d9402217 	ldw	r5,136(sp)
1000a668:	0029883a 	mov	r20,zero
1000a66c:	2cc00017 	ldw	r19,0(r5)
1000a670:	29400104 	addi	r5,r5,4
1000a674:	d9402215 	stw	r5,136(sp)
1000a678:	003f5106 	br	1000a3c0 <__alt_data_end+0xf800a3c0>
1000a67c:	d8c02217 	ldw	r3,136(sp)
1000a680:	b811883a 	mov	r8,r23
1000a684:	d8001d85 	stb	zero,118(sp)
1000a688:	1dc00017 	ldw	r23,0(r3)
1000a68c:	1f000104 	addi	fp,r3,4
1000a690:	b8025926 	beq	r23,zero,1000aff8 <___vfiprintf_internal_r+0x1398>
1000a694:	80023316 	blt	r16,zero,1000af64 <___vfiprintf_internal_r+0x1304>
1000a698:	800d883a 	mov	r6,r16
1000a69c:	000b883a 	mov	r5,zero
1000a6a0:	b809883a 	mov	r4,r23
1000a6a4:	da002a15 	stw	r8,168(sp)
1000a6a8:	0007da00 	call	10007da0 <memchr>
1000a6ac:	da002a17 	ldw	r8,168(sp)
1000a6b0:	10026826 	beq	r2,zero,1000b054 <___vfiprintf_internal_r+0x13f4>
1000a6b4:	15e9c83a 	sub	r20,r2,r23
1000a6b8:	dd401d83 	ldbu	r21,118(sp)
1000a6bc:	df002215 	stw	fp,136(sp)
1000a6c0:	0021883a 	mov	r16,zero
1000a6c4:	003e6906 	br	1000a06c <__alt_data_end+0xf800a06c>
1000a6c8:	9cc03fcc 	andi	r19,r19,255
1000a6cc:	b811883a 	mov	r8,r23
1000a6d0:	983fc126 	beq	r19,zero,1000a5d8 <__alt_data_end+0xf800a5d8>
1000a6d4:	d8c02303 	ldbu	r3,140(sp)
1000a6d8:	d8c01d85 	stb	r3,118(sp)
1000a6dc:	003fbe06 	br	1000a5d8 <__alt_data_end+0xf800a5d8>
1000a6e0:	d9002217 	ldw	r4,136(sp)
1000a6e4:	d9402217 	ldw	r5,136(sp)
1000a6e8:	21000017 	ldw	r4,0(r4)
1000a6ec:	28800104 	addi	r2,r5,4
1000a6f0:	d9002515 	stw	r4,148(sp)
1000a6f4:	203e3d16 	blt	r4,zero,10009fec <__alt_data_end+0xf8009fec>
1000a6f8:	d8802215 	stw	r2,136(sp)
1000a6fc:	b0c00007 	ldb	r3,0(r22)
1000a700:	003db406 	br	10009dd4 <__alt_data_end+0xf8009dd4>
1000a704:	00c00ac4 	movi	r3,43
1000a708:	d8c02305 	stb	r3,140(sp)
1000a70c:	04c00044 	movi	r19,1
1000a710:	b0c00007 	ldb	r3,0(r22)
1000a714:	003daf06 	br	10009dd4 <__alt_data_end+0xf8009dd4>
1000a718:	b0c00007 	ldb	r3,0(r22)
1000a71c:	01000a84 	movi	r4,42
1000a720:	b4000044 	addi	r16,r22,1
1000a724:	19025e26 	beq	r3,r4,1000b0a0 <___vfiprintf_internal_r+0x1440>
1000a728:	1f3ff404 	addi	fp,r3,-48
1000a72c:	0009883a 	mov	r4,zero
1000a730:	af025236 	bltu	r21,fp,1000b07c <___vfiprintf_internal_r+0x141c>
1000a734:	01400284 	movi	r5,10
1000a738:	000c9040 	call	1000c904 <__mulsi3>
1000a73c:	80c00007 	ldb	r3,0(r16)
1000a740:	1709883a 	add	r4,r2,fp
1000a744:	85800044 	addi	r22,r16,1
1000a748:	1f3ff404 	addi	fp,r3,-48
1000a74c:	b021883a 	mov	r16,r22
1000a750:	af3ff82e 	bgeu	r21,fp,1000a734 <__alt_data_end+0xf800a734>
1000a754:	2021883a 	mov	r16,r4
1000a758:	203d9f0e 	bge	r4,zero,10009dd8 <__alt_data_end+0xf8009dd8>
1000a75c:	043fffc4 	movi	r16,-1
1000a760:	003d9d06 	br	10009dd8 <__alt_data_end+0xf8009dd8>
1000a764:	8c401014 	ori	r17,r17,64
1000a768:	b0c00007 	ldb	r3,0(r22)
1000a76c:	003d9906 	br	10009dd4 <__alt_data_end+0xf8009dd4>
1000a770:	d9002217 	ldw	r4,136(sp)
1000a774:	d8001d85 	stb	zero,118(sp)
1000a778:	20c00204 	addi	r3,r4,8
1000a77c:	24c00017 	ldw	r19,0(r4)
1000a780:	25000117 	ldw	r20,4(r4)
1000a784:	8001e716 	blt	r16,zero,1000af24 <___vfiprintf_internal_r+0x12c4>
1000a788:	013fdfc4 	movi	r4,-129
1000a78c:	9d04b03a 	or	r2,r19,r20
1000a790:	d8c02215 	stw	r3,136(sp)
1000a794:	8922703a 	and	r17,r17,r4
1000a798:	002b883a 	mov	r21,zero
1000a79c:	103f2f1e 	bne	r2,zero,1000a45c <__alt_data_end+0xf800a45c>
1000a7a0:	803e2f26 	beq	r16,zero,1000a060 <__alt_data_end+0xf800a060>
1000a7a4:	0027883a 	mov	r19,zero
1000a7a8:	9cc00c04 	addi	r19,r19,48
1000a7ac:	dcc019c5 	stb	r19,103(sp)
1000a7b0:	dd002817 	ldw	r20,160(sp)
1000a7b4:	ddc019c4 	addi	r23,sp,103
1000a7b8:	003e2c06 	br	1000a06c <__alt_data_end+0xf800a06c>
1000a7bc:	9cc03fcc 	andi	r19,r19,255
1000a7c0:	b811883a 	mov	r8,r23
1000a7c4:	9802571e 	bne	r19,zero,1000b124 <___vfiprintf_internal_r+0x14c4>
1000a7c8:	18005726 	beq	r3,zero,1000a928 <___vfiprintf_internal_r+0xcc8>
1000a7cc:	04c00044 	movi	r19,1
1000a7d0:	d8c01005 	stb	r3,64(sp)
1000a7d4:	d8001d85 	stb	zero,118(sp)
1000a7d8:	9829883a 	mov	r20,r19
1000a7dc:	ddc01004 	addi	r23,sp,64
1000a7e0:	003f0a06 	br	1000a40c <__alt_data_end+0xf800a40c>
1000a7e4:	d9402017 	ldw	r5,128(sp)
1000a7e8:	d9002117 	ldw	r4,132(sp)
1000a7ec:	d9801a04 	addi	r6,sp,104
1000a7f0:	da802a15 	stw	r10,168(sp)
1000a7f4:	0009b4c0 	call	10009b4c <__sprint_r.part.0>
1000a7f8:	da802a17 	ldw	r10,168(sp)
1000a7fc:	1000501e 	bne	r2,zero,1000a940 <___vfiprintf_internal_r+0xce0>
1000a800:	d9801b17 	ldw	r6,108(sp)
1000a804:	d8801c17 	ldw	r2,112(sp)
1000a808:	d811883a 	mov	r8,sp
1000a80c:	31000044 	addi	r4,r6,1
1000a810:	003e3606 	br	1000a0ec <__alt_data_end+0xf800a0ec>
1000a814:	d9001b17 	ldw	r4,108(sp)
1000a818:	d8801c17 	ldw	r2,112(sp)
1000a81c:	21400044 	addi	r5,r4,1
1000a820:	d9801d87 	ldb	r6,118(sp)
1000a824:	303e5226 	beq	r6,zero,1000a170 <__alt_data_end+0xf800a170>
1000a828:	01800044 	movi	r6,1
1000a82c:	d9001d84 	addi	r4,sp,118
1000a830:	1185883a 	add	r2,r2,r6
1000a834:	41000015 	stw	r4,0(r8)
1000a838:	41800115 	stw	r6,4(r8)
1000a83c:	d8801c15 	stw	r2,112(sp)
1000a840:	d9401b15 	stw	r5,108(sp)
1000a844:	010001c4 	movi	r4,7
1000a848:	2140b00e 	bge	r4,r5,1000ab0c <___vfiprintf_internal_r+0xeac>
1000a84c:	1000f61e 	bne	r2,zero,1000ac28 <___vfiprintf_internal_r+0xfc8>
1000a850:	3800b31e 	bne	r7,zero,1000ab20 <___vfiprintf_internal_r+0xec0>
1000a854:	0009883a 	mov	r4,zero
1000a858:	300b883a 	mov	r5,r6
1000a85c:	d811883a 	mov	r8,sp
1000a860:	01802004 	movi	r6,128
1000a864:	19be5226 	beq	r3,r6,1000a1b0 <__alt_data_end+0xf800a1b0>
1000a868:	8521c83a 	sub	r16,r16,r20
1000a86c:	043e790e 	bge	zero,r16,1000a254 <__alt_data_end+0xf800a254>
1000a870:	05400404 	movi	r21,16
1000a874:	ac01b00e 	bge	r21,r16,1000af38 <___vfiprintf_internal_r+0x12d8>
1000a878:	01440074 	movhi	r5,4097
1000a87c:	2948c704 	addi	r5,r5,8988
1000a880:	d9402315 	stw	r5,140(sp)
1000a884:	070001c4 	movi	fp,7
1000a888:	00000506 	br	1000a8a0 <___vfiprintf_internal_r+0xc40>
1000a88c:	21400084 	addi	r5,r4,2
1000a890:	42000204 	addi	r8,r8,8
1000a894:	1809883a 	mov	r4,r3
1000a898:	843ffc04 	addi	r16,r16,-16
1000a89c:	ac000d0e 	bge	r21,r16,1000a8d4 <___vfiprintf_internal_r+0xc74>
1000a8a0:	10800404 	addi	r2,r2,16
1000a8a4:	20c00044 	addi	r3,r4,1
1000a8a8:	44800015 	stw	r18,0(r8)
1000a8ac:	45400115 	stw	r21,4(r8)
1000a8b0:	d8801c15 	stw	r2,112(sp)
1000a8b4:	d8c01b15 	stw	r3,108(sp)
1000a8b8:	e0fff40e 	bge	fp,r3,1000a88c <__alt_data_end+0xf800a88c>
1000a8bc:	1000101e 	bne	r2,zero,1000a900 <___vfiprintf_internal_r+0xca0>
1000a8c0:	843ffc04 	addi	r16,r16,-16
1000a8c4:	01400044 	movi	r5,1
1000a8c8:	0009883a 	mov	r4,zero
1000a8cc:	d811883a 	mov	r8,sp
1000a8d0:	ac3ff316 	blt	r21,r16,1000a8a0 <__alt_data_end+0xf800a8a0>
1000a8d4:	d8c02317 	ldw	r3,140(sp)
1000a8d8:	1405883a 	add	r2,r2,r16
1000a8dc:	44000115 	stw	r16,4(r8)
1000a8e0:	40c00015 	stw	r3,0(r8)
1000a8e4:	d8801c15 	stw	r2,112(sp)
1000a8e8:	d9401b15 	stw	r5,108(sp)
1000a8ec:	00c001c4 	movi	r3,7
1000a8f0:	19401916 	blt	r3,r5,1000a958 <___vfiprintf_internal_r+0xcf8>
1000a8f4:	42000204 	addi	r8,r8,8
1000a8f8:	29400044 	addi	r5,r5,1
1000a8fc:	003e5506 	br	1000a254 <__alt_data_end+0xf800a254>
1000a900:	d9402017 	ldw	r5,128(sp)
1000a904:	d9002117 	ldw	r4,132(sp)
1000a908:	d9801a04 	addi	r6,sp,104
1000a90c:	0009b4c0 	call	10009b4c <__sprint_r.part.0>
1000a910:	10000b1e 	bne	r2,zero,1000a940 <___vfiprintf_internal_r+0xce0>
1000a914:	d9001b17 	ldw	r4,108(sp)
1000a918:	d8801c17 	ldw	r2,112(sp)
1000a91c:	d811883a 	mov	r8,sp
1000a920:	21400044 	addi	r5,r4,1
1000a924:	003fdc06 	br	1000a898 <__alt_data_end+0xf800a898>
1000a928:	d8801c17 	ldw	r2,112(sp)
1000a92c:	10000426 	beq	r2,zero,1000a940 <___vfiprintf_internal_r+0xce0>
1000a930:	d9402017 	ldw	r5,128(sp)
1000a934:	d9002117 	ldw	r4,132(sp)
1000a938:	d9801a04 	addi	r6,sp,104
1000a93c:	0009b4c0 	call	10009b4c <__sprint_r.part.0>
1000a940:	d9402017 	ldw	r5,128(sp)
1000a944:	2880030b 	ldhu	r2,12(r5)
1000a948:	1080100c 	andi	r2,r2,64
1000a94c:	10014d1e 	bne	r2,zero,1000ae84 <___vfiprintf_internal_r+0x1224>
1000a950:	d8802417 	ldw	r2,144(sp)
1000a954:	003d9706 	br	10009fb4 <__alt_data_end+0xf8009fb4>
1000a958:	1000d21e 	bne	r2,zero,1000aca4 <___vfiprintf_internal_r+0x1044>
1000a95c:	00c00044 	movi	r3,1
1000a960:	a005883a 	mov	r2,r20
1000a964:	ddc00015 	stw	r23,0(sp)
1000a968:	dd000115 	stw	r20,4(sp)
1000a96c:	dd001c15 	stw	r20,112(sp)
1000a970:	d8c01b15 	stw	r3,108(sp)
1000a974:	d811883a 	mov	r8,sp
1000a978:	42000204 	addi	r8,r8,8
1000a97c:	8c40010c 	andi	r17,r17,4
1000a980:	88004026 	beq	r17,zero,1000aa84 <___vfiprintf_internal_r+0xe24>
1000a984:	d9002517 	ldw	r4,148(sp)
1000a988:	24e3c83a 	sub	r17,r4,r19
1000a98c:	04403d0e 	bge	zero,r17,1000aa84 <___vfiprintf_internal_r+0xe24>
1000a990:	04000404 	movi	r16,16
1000a994:	8441a90e 	bge	r16,r17,1000b03c <___vfiprintf_internal_r+0x13dc>
1000a998:	00c40074 	movhi	r3,4097
1000a99c:	18c8cb04 	addi	r3,r3,9004
1000a9a0:	d9001b17 	ldw	r4,108(sp)
1000a9a4:	d8c02315 	stw	r3,140(sp)
1000a9a8:	050001c4 	movi	r20,7
1000a9ac:	dd402117 	ldw	r21,132(sp)
1000a9b0:	ddc02017 	ldw	r23,128(sp)
1000a9b4:	00000506 	br	1000a9cc <___vfiprintf_internal_r+0xd6c>
1000a9b8:	21400084 	addi	r5,r4,2
1000a9bc:	42000204 	addi	r8,r8,8
1000a9c0:	1809883a 	mov	r4,r3
1000a9c4:	8c7ffc04 	addi	r17,r17,-16
1000a9c8:	84400f0e 	bge	r16,r17,1000aa08 <___vfiprintf_internal_r+0xda8>
1000a9cc:	01440074 	movhi	r5,4097
1000a9d0:	10800404 	addi	r2,r2,16
1000a9d4:	20c00044 	addi	r3,r4,1
1000a9d8:	2948cb04 	addi	r5,r5,9004
1000a9dc:	41400015 	stw	r5,0(r8)
1000a9e0:	44000115 	stw	r16,4(r8)
1000a9e4:	d8801c15 	stw	r2,112(sp)
1000a9e8:	d8c01b15 	stw	r3,108(sp)
1000a9ec:	a0fff20e 	bge	r20,r3,1000a9b8 <__alt_data_end+0xf800a9b8>
1000a9f0:	1000141e 	bne	r2,zero,1000aa44 <___vfiprintf_internal_r+0xde4>
1000a9f4:	8c7ffc04 	addi	r17,r17,-16
1000a9f8:	01400044 	movi	r5,1
1000a9fc:	0009883a 	mov	r4,zero
1000aa00:	d811883a 	mov	r8,sp
1000aa04:	847ff116 	blt	r16,r17,1000a9cc <__alt_data_end+0xf800a9cc>
1000aa08:	d8c02317 	ldw	r3,140(sp)
1000aa0c:	1445883a 	add	r2,r2,r17
1000aa10:	44400115 	stw	r17,4(r8)
1000aa14:	40c00015 	stw	r3,0(r8)
1000aa18:	d8801c15 	stw	r2,112(sp)
1000aa1c:	d9401b15 	stw	r5,108(sp)
1000aa20:	00c001c4 	movi	r3,7
1000aa24:	1940170e 	bge	r3,r5,1000aa84 <___vfiprintf_internal_r+0xe24>
1000aa28:	1000101e 	bne	r2,zero,1000aa6c <___vfiprintf_internal_r+0xe0c>
1000aa2c:	d8802517 	ldw	r2,148(sp)
1000aa30:	14c11616 	blt	r2,r19,1000ae8c <___vfiprintf_internal_r+0x122c>
1000aa34:	d9002417 	ldw	r4,144(sp)
1000aa38:	2089883a 	add	r4,r4,r2
1000aa3c:	d9002415 	stw	r4,144(sp)
1000aa40:	003e1806 	br	1000a2a4 <__alt_data_end+0xf800a2a4>
1000aa44:	d9801a04 	addi	r6,sp,104
1000aa48:	b80b883a 	mov	r5,r23
1000aa4c:	a809883a 	mov	r4,r21
1000aa50:	0009b4c0 	call	10009b4c <__sprint_r.part.0>
1000aa54:	103fba1e 	bne	r2,zero,1000a940 <__alt_data_end+0xf800a940>
1000aa58:	d9001b17 	ldw	r4,108(sp)
1000aa5c:	d8801c17 	ldw	r2,112(sp)
1000aa60:	d811883a 	mov	r8,sp
1000aa64:	21400044 	addi	r5,r4,1
1000aa68:	003fd606 	br	1000a9c4 <__alt_data_end+0xf800a9c4>
1000aa6c:	d9402017 	ldw	r5,128(sp)
1000aa70:	d9002117 	ldw	r4,132(sp)
1000aa74:	d9801a04 	addi	r6,sp,104
1000aa78:	0009b4c0 	call	10009b4c <__sprint_r.part.0>
1000aa7c:	103fb01e 	bne	r2,zero,1000a940 <__alt_data_end+0xf800a940>
1000aa80:	d8801c17 	ldw	r2,112(sp)
1000aa84:	d8c02517 	ldw	r3,148(sp)
1000aa88:	1cc0010e 	bge	r3,r19,1000aa90 <___vfiprintf_internal_r+0xe30>
1000aa8c:	9807883a 	mov	r3,r19
1000aa90:	d9002417 	ldw	r4,144(sp)
1000aa94:	20c9883a 	add	r4,r4,r3
1000aa98:	d9002415 	stw	r4,144(sp)
1000aa9c:	103e0126 	beq	r2,zero,1000a2a4 <__alt_data_end+0xf800a2a4>
1000aaa0:	d9402017 	ldw	r5,128(sp)
1000aaa4:	d9002117 	ldw	r4,132(sp)
1000aaa8:	d9801a04 	addi	r6,sp,104
1000aaac:	0009b4c0 	call	10009b4c <__sprint_r.part.0>
1000aab0:	103dfc26 	beq	r2,zero,1000a2a4 <__alt_data_end+0xf800a2a4>
1000aab4:	003fa206 	br	1000a940 <__alt_data_end+0xf800a940>
1000aab8:	d9402017 	ldw	r5,128(sp)
1000aabc:	d9002117 	ldw	r4,132(sp)
1000aac0:	d9801a04 	addi	r6,sp,104
1000aac4:	d9c02b15 	stw	r7,172(sp)
1000aac8:	0009b4c0 	call	10009b4c <__sprint_r.part.0>
1000aacc:	d9c02b17 	ldw	r7,172(sp)
1000aad0:	103f9b1e 	bne	r2,zero,1000a940 <__alt_data_end+0xf800a940>
1000aad4:	d9001b17 	ldw	r4,108(sp)
1000aad8:	d8801c17 	ldw	r2,112(sp)
1000aadc:	d811883a 	mov	r8,sp
1000aae0:	21800044 	addi	r6,r4,1
1000aae4:	003dbf06 	br	1000a1e4 <__alt_data_end+0xf800a1e4>
1000aae8:	1000d81e 	bne	r2,zero,1000ae4c <___vfiprintf_internal_r+0x11ec>
1000aaec:	d9001d87 	ldb	r4,118(sp)
1000aaf0:	20000a26 	beq	r4,zero,1000ab1c <___vfiprintf_internal_r+0xebc>
1000aaf4:	00800044 	movi	r2,1
1000aaf8:	d9001d84 	addi	r4,sp,118
1000aafc:	100b883a 	mov	r5,r2
1000ab00:	d9000015 	stw	r4,0(sp)
1000ab04:	d8800115 	stw	r2,4(sp)
1000ab08:	d811883a 	mov	r8,sp
1000ab0c:	2809883a 	mov	r4,r5
1000ab10:	42000204 	addi	r8,r8,8
1000ab14:	29400044 	addi	r5,r5,1
1000ab18:	003d9506 	br	1000a170 <__alt_data_end+0xf800a170>
1000ab1c:	3800fd26 	beq	r7,zero,1000af14 <___vfiprintf_internal_r+0x12b4>
1000ab20:	00800084 	movi	r2,2
1000ab24:	d9001d04 	addi	r4,sp,116
1000ab28:	d9000015 	stw	r4,0(sp)
1000ab2c:	d8800115 	stw	r2,4(sp)
1000ab30:	01400044 	movi	r5,1
1000ab34:	d811883a 	mov	r8,sp
1000ab38:	2809883a 	mov	r4,r5
1000ab3c:	42000204 	addi	r8,r8,8
1000ab40:	29400044 	addi	r5,r5,1
1000ab44:	003f4606 	br	1000a860 <__alt_data_end+0xf800a860>
1000ab48:	d8802517 	ldw	r2,148(sp)
1000ab4c:	14c0010e 	bge	r2,r19,1000ab54 <___vfiprintf_internal_r+0xef4>
1000ab50:	9805883a 	mov	r2,r19
1000ab54:	d9402417 	ldw	r5,144(sp)
1000ab58:	288b883a 	add	r5,r5,r2
1000ab5c:	d9402415 	stw	r5,144(sp)
1000ab60:	003dd006 	br	1000a2a4 <__alt_data_end+0xf800a2a4>
1000ab64:	d8001d85 	stb	zero,118(sp)
1000ab68:	80005d16 	blt	r16,zero,1000ace0 <___vfiprintf_internal_r+0x1080>
1000ab6c:	00ffdfc4 	movi	r3,-129
1000ab70:	9d04b03a 	or	r2,r19,r20
1000ab74:	88e2703a 	and	r17,r17,r3
1000ab78:	103d3726 	beq	r2,zero,1000a058 <__alt_data_end+0xf800a058>
1000ab7c:	002b883a 	mov	r21,zero
1000ab80:	d9002617 	ldw	r4,152(sp)
1000ab84:	ddc01a04 	addi	r23,sp,104
1000ab88:	988003cc 	andi	r2,r19,15
1000ab8c:	a006973a 	slli	r3,r20,28
1000ab90:	2085883a 	add	r2,r4,r2
1000ab94:	9826d13a 	srli	r19,r19,4
1000ab98:	10800003 	ldbu	r2,0(r2)
1000ab9c:	a028d13a 	srli	r20,r20,4
1000aba0:	bdffffc4 	addi	r23,r23,-1
1000aba4:	1ce6b03a 	or	r19,r3,r19
1000aba8:	b8800005 	stb	r2,0(r23)
1000abac:	9d04b03a 	or	r2,r19,r20
1000abb0:	103ff51e 	bne	r2,zero,1000ab88 <__alt_data_end+0xf800ab88>
1000abb4:	d8801e17 	ldw	r2,120(sp)
1000abb8:	15e9c83a 	sub	r20,r2,r23
1000abbc:	003d2b06 	br	1000a06c <__alt_data_end+0xf800a06c>
1000abc0:	d9402017 	ldw	r5,128(sp)
1000abc4:	d9002117 	ldw	r4,132(sp)
1000abc8:	d9801a04 	addi	r6,sp,104
1000abcc:	0009b4c0 	call	10009b4c <__sprint_r.part.0>
1000abd0:	103f5b1e 	bne	r2,zero,1000a940 <__alt_data_end+0xf800a940>
1000abd4:	d8801c17 	ldw	r2,112(sp)
1000abd8:	d811883a 	mov	r8,sp
1000abdc:	003f6706 	br	1000a97c <__alt_data_end+0xf800a97c>
1000abe0:	d9402017 	ldw	r5,128(sp)
1000abe4:	d9002117 	ldw	r4,132(sp)
1000abe8:	d9801a04 	addi	r6,sp,104
1000abec:	0009b4c0 	call	10009b4c <__sprint_r.part.0>
1000abf0:	103f531e 	bne	r2,zero,1000a940 <__alt_data_end+0xf800a940>
1000abf4:	d811883a 	mov	r8,sp
1000abf8:	003cd906 	br	10009f60 <__alt_data_end+0xf8009f60>
1000abfc:	10803fcc 	andi	r2,r2,255
1000ac00:	1080201c 	xori	r2,r2,128
1000ac04:	10bfe004 	addi	r2,r2,-128
1000ac08:	00c00c04 	movi	r3,48
1000ac0c:	10ffe926 	beq	r2,r3,1000abb4 <__alt_data_end+0xf800abb4>
1000ac10:	b8ffffc5 	stb	r3,-1(r23)
1000ac14:	d8c01e17 	ldw	r3,120(sp)
1000ac18:	b8bfffc4 	addi	r2,r23,-1
1000ac1c:	102f883a 	mov	r23,r2
1000ac20:	18a9c83a 	sub	r20,r3,r2
1000ac24:	003d1106 	br	1000a06c <__alt_data_end+0xf800a06c>
1000ac28:	d9402017 	ldw	r5,128(sp)
1000ac2c:	d9002117 	ldw	r4,132(sp)
1000ac30:	d9801a04 	addi	r6,sp,104
1000ac34:	d8c02a15 	stw	r3,168(sp)
1000ac38:	d9c02b15 	stw	r7,172(sp)
1000ac3c:	0009b4c0 	call	10009b4c <__sprint_r.part.0>
1000ac40:	d8c02a17 	ldw	r3,168(sp)
1000ac44:	d9c02b17 	ldw	r7,172(sp)
1000ac48:	103f3d1e 	bne	r2,zero,1000a940 <__alt_data_end+0xf800a940>
1000ac4c:	d9001b17 	ldw	r4,108(sp)
1000ac50:	d8801c17 	ldw	r2,112(sp)
1000ac54:	d811883a 	mov	r8,sp
1000ac58:	21400044 	addi	r5,r4,1
1000ac5c:	003d4406 	br	1000a170 <__alt_data_end+0xf800a170>
1000ac60:	d9402017 	ldw	r5,128(sp)
1000ac64:	d9002117 	ldw	r4,132(sp)
1000ac68:	d9801a04 	addi	r6,sp,104
1000ac6c:	d8c02a15 	stw	r3,168(sp)
1000ac70:	0009b4c0 	call	10009b4c <__sprint_r.part.0>
1000ac74:	d8c02a17 	ldw	r3,168(sp)
1000ac78:	103f311e 	bne	r2,zero,1000a940 <__alt_data_end+0xf800a940>
1000ac7c:	d9001b17 	ldw	r4,108(sp)
1000ac80:	d8801c17 	ldw	r2,112(sp)
1000ac84:	d811883a 	mov	r8,sp
1000ac88:	21400044 	addi	r5,r4,1
1000ac8c:	003ef406 	br	1000a860 <__alt_data_end+0xf800a860>
1000ac90:	1000bd1e 	bne	r2,zero,1000af88 <___vfiprintf_internal_r+0x1328>
1000ac94:	01400044 	movi	r5,1
1000ac98:	0009883a 	mov	r4,zero
1000ac9c:	d811883a 	mov	r8,sp
1000aca0:	003ef106 	br	1000a868 <__alt_data_end+0xf800a868>
1000aca4:	d9402017 	ldw	r5,128(sp)
1000aca8:	d9002117 	ldw	r4,132(sp)
1000acac:	d9801a04 	addi	r6,sp,104
1000acb0:	0009b4c0 	call	10009b4c <__sprint_r.part.0>
1000acb4:	103f221e 	bne	r2,zero,1000a940 <__alt_data_end+0xf800a940>
1000acb8:	d9401b17 	ldw	r5,108(sp)
1000acbc:	d8801c17 	ldw	r2,112(sp)
1000acc0:	d811883a 	mov	r8,sp
1000acc4:	29400044 	addi	r5,r5,1
1000acc8:	003d6206 	br	1000a254 <__alt_data_end+0xf800a254>
1000accc:	01440074 	movhi	r5,4097
1000acd0:	29486604 	addi	r5,r5,8600
1000acd4:	d9402615 	stw	r5,152(sp)
1000acd8:	d8c02215 	stw	r3,136(sp)
1000acdc:	1023883a 	mov	r17,r2
1000ace0:	9d04b03a 	or	r2,r19,r20
1000ace4:	103fa51e 	bne	r2,zero,1000ab7c <__alt_data_end+0xf800ab7c>
1000ace8:	002b883a 	mov	r21,zero
1000acec:	00800084 	movi	r2,2
1000acf0:	003e4a06 	br	1000a61c <__alt_data_end+0xf800a61c>
1000acf4:	01440074 	movhi	r5,4097
1000acf8:	29486604 	addi	r5,r5,8600
1000acfc:	002b883a 	mov	r21,zero
1000ad00:	d9402615 	stw	r5,152(sp)
1000ad04:	003f9e06 	br	1000ab80 <__alt_data_end+0xf800ab80>
1000ad08:	d9402217 	ldw	r5,136(sp)
1000ad0c:	d8001d85 	stb	zero,118(sp)
1000ad10:	0029883a 	mov	r20,zero
1000ad14:	28800104 	addi	r2,r5,4
1000ad18:	2cc00017 	ldw	r19,0(r5)
1000ad1c:	803e3a16 	blt	r16,zero,1000a608 <__alt_data_end+0xf800a608>
1000ad20:	00ffdfc4 	movi	r3,-129
1000ad24:	d8802215 	stw	r2,136(sp)
1000ad28:	88e2703a 	and	r17,r17,r3
1000ad2c:	002b883a 	mov	r21,zero
1000ad30:	983e9b26 	beq	r19,zero,1000a7a0 <__alt_data_end+0xf800a7a0>
1000ad34:	00800244 	movi	r2,9
1000ad38:	14fdc936 	bltu	r2,r19,1000a460 <__alt_data_end+0xf800a460>
1000ad3c:	003e9a06 	br	1000a7a8 <__alt_data_end+0xf800a7a8>
1000ad40:	00800c04 	movi	r2,48
1000ad44:	d8c01d45 	stb	r3,117(sp)
1000ad48:	d8801d05 	stb	r2,116(sp)
1000ad4c:	d8001d85 	stb	zero,118(sp)
1000ad50:	88c00094 	ori	r3,r17,2
1000ad54:	80009c16 	blt	r16,zero,1000afc8 <___vfiprintf_internal_r+0x1368>
1000ad58:	00bfdfc4 	movi	r2,-129
1000ad5c:	88a2703a 	and	r17,r17,r2
1000ad60:	8c400094 	ori	r17,r17,2
1000ad64:	002b883a 	mov	r21,zero
1000ad68:	003f8506 	br	1000ab80 <__alt_data_end+0xf800ab80>
1000ad6c:	b029883a 	mov	r20,r22
1000ad70:	003c0b06 	br	10009da0 <__alt_data_end+0xf8009da0>
1000ad74:	04e7c83a 	sub	r19,zero,r19
1000ad78:	05400b44 	movi	r21,45
1000ad7c:	9804c03a 	cmpne	r2,r19,zero
1000ad80:	0529c83a 	sub	r20,zero,r20
1000ad84:	dd401d85 	stb	r21,118(sp)
1000ad88:	a0a9c83a 	sub	r20,r20,r2
1000ad8c:	80009716 	blt	r16,zero,1000afec <___vfiprintf_internal_r+0x138c>
1000ad90:	00bfdfc4 	movi	r2,-129
1000ad94:	88a2703a 	and	r17,r17,r2
1000ad98:	003db006 	br	1000a45c <__alt_data_end+0xf800a45c>
1000ad9c:	b0c00007 	ldb	r3,0(r22)
1000ada0:	003c0c06 	br	10009dd4 <__alt_data_end+0xf8009dd4>
1000ada4:	8880100c 	andi	r2,r17,64
1000ada8:	d8001d85 	stb	zero,118(sp)
1000adac:	1000461e 	bne	r2,zero,1000aec8 <___vfiprintf_internal_r+0x1268>
1000adb0:	d9002217 	ldw	r4,136(sp)
1000adb4:	0029883a 	mov	r20,zero
1000adb8:	20800104 	addi	r2,r4,4
1000adbc:	24c00017 	ldw	r19,0(r4)
1000adc0:	803df80e 	bge	r16,zero,1000a5a4 <__alt_data_end+0xf800a5a4>
1000adc4:	9d06b03a 	or	r3,r19,r20
1000adc8:	d8802215 	stw	r2,136(sp)
1000adcc:	183d5e1e 	bne	r3,zero,1000a348 <__alt_data_end+0xf800a348>
1000add0:	002b883a 	mov	r21,zero
1000add4:	0005883a 	mov	r2,zero
1000add8:	003e1006 	br	1000a61c <__alt_data_end+0xf800a61c>
1000addc:	8880040c 	andi	r2,r17,16
1000ade0:	1000321e 	bne	r2,zero,1000aeac <___vfiprintf_internal_r+0x124c>
1000ade4:	8c40100c 	andi	r17,r17,64
1000ade8:	88008d26 	beq	r17,zero,1000b020 <___vfiprintf_internal_r+0x13c0>
1000adec:	d9402217 	ldw	r5,136(sp)
1000adf0:	d8c02417 	ldw	r3,144(sp)
1000adf4:	28800017 	ldw	r2,0(r5)
1000adf8:	29400104 	addi	r5,r5,4
1000adfc:	d9402215 	stw	r5,136(sp)
1000ae00:	10c0000d 	sth	r3,0(r2)
1000ae04:	003bca06 	br	10009d30 <__alt_data_end+0xf8009d30>
1000ae08:	8880100c 	andi	r2,r17,64
1000ae0c:	10003a26 	beq	r2,zero,1000aef8 <___vfiprintf_internal_r+0x1298>
1000ae10:	d8802217 	ldw	r2,136(sp)
1000ae14:	14c0000f 	ldh	r19,0(r2)
1000ae18:	10800104 	addi	r2,r2,4
1000ae1c:	d8802215 	stw	r2,136(sp)
1000ae20:	9829d7fa 	srai	r20,r19,31
1000ae24:	a005883a 	mov	r2,r20
1000ae28:	003d8506 	br	1000a440 <__alt_data_end+0xf800a440>
1000ae2c:	8880100c 	andi	r2,r17,64
1000ae30:	10002b26 	beq	r2,zero,1000aee0 <___vfiprintf_internal_r+0x1280>
1000ae34:	d8802217 	ldw	r2,136(sp)
1000ae38:	0029883a 	mov	r20,zero
1000ae3c:	14c0000b 	ldhu	r19,0(r2)
1000ae40:	10800104 	addi	r2,r2,4
1000ae44:	d8802215 	stw	r2,136(sp)
1000ae48:	003d5d06 	br	1000a3c0 <__alt_data_end+0xf800a3c0>
1000ae4c:	d9402017 	ldw	r5,128(sp)
1000ae50:	d9002117 	ldw	r4,132(sp)
1000ae54:	d9801a04 	addi	r6,sp,104
1000ae58:	d8c02a15 	stw	r3,168(sp)
1000ae5c:	d9c02b15 	stw	r7,172(sp)
1000ae60:	0009b4c0 	call	10009b4c <__sprint_r.part.0>
1000ae64:	d8c02a17 	ldw	r3,168(sp)
1000ae68:	d9c02b17 	ldw	r7,172(sp)
1000ae6c:	103eb41e 	bne	r2,zero,1000a940 <__alt_data_end+0xf800a940>
1000ae70:	d9001b17 	ldw	r4,108(sp)
1000ae74:	d8801c17 	ldw	r2,112(sp)
1000ae78:	d811883a 	mov	r8,sp
1000ae7c:	21400044 	addi	r5,r4,1
1000ae80:	003e6706 	br	1000a820 <__alt_data_end+0xf800a820>
1000ae84:	00bfffc4 	movi	r2,-1
1000ae88:	003c4a06 	br	10009fb4 <__alt_data_end+0xf8009fb4>
1000ae8c:	9805883a 	mov	r2,r19
1000ae90:	003ee806 	br	1000aa34 <__alt_data_end+0xf800aa34>
1000ae94:	d8c02217 	ldw	r3,136(sp)
1000ae98:	0029883a 	mov	r20,zero
1000ae9c:	18800104 	addi	r2,r3,4
1000aea0:	1cc0000b 	ldhu	r19,0(r3)
1000aea4:	803f9e0e 	bge	r16,zero,1000ad20 <__alt_data_end+0xf800ad20>
1000aea8:	003dd706 	br	1000a608 <__alt_data_end+0xf800a608>
1000aeac:	d8c02217 	ldw	r3,136(sp)
1000aeb0:	d9002417 	ldw	r4,144(sp)
1000aeb4:	18800017 	ldw	r2,0(r3)
1000aeb8:	18c00104 	addi	r3,r3,4
1000aebc:	d8c02215 	stw	r3,136(sp)
1000aec0:	11000015 	stw	r4,0(r2)
1000aec4:	003b9a06 	br	10009d30 <__alt_data_end+0xf8009d30>
1000aec8:	d8c02217 	ldw	r3,136(sp)
1000aecc:	0029883a 	mov	r20,zero
1000aed0:	18800104 	addi	r2,r3,4
1000aed4:	1cc0000b 	ldhu	r19,0(r3)
1000aed8:	803db20e 	bge	r16,zero,1000a5a4 <__alt_data_end+0xf800a5a4>
1000aedc:	003fb906 	br	1000adc4 <__alt_data_end+0xf800adc4>
1000aee0:	d9002217 	ldw	r4,136(sp)
1000aee4:	0029883a 	mov	r20,zero
1000aee8:	24c00017 	ldw	r19,0(r4)
1000aeec:	21000104 	addi	r4,r4,4
1000aef0:	d9002215 	stw	r4,136(sp)
1000aef4:	003d3206 	br	1000a3c0 <__alt_data_end+0xf800a3c0>
1000aef8:	d8c02217 	ldw	r3,136(sp)
1000aefc:	1cc00017 	ldw	r19,0(r3)
1000af00:	18c00104 	addi	r3,r3,4
1000af04:	d8c02215 	stw	r3,136(sp)
1000af08:	9829d7fa 	srai	r20,r19,31
1000af0c:	a005883a 	mov	r2,r20
1000af10:	003d4b06 	br	1000a440 <__alt_data_end+0xf800a440>
1000af14:	0009883a 	mov	r4,zero
1000af18:	01400044 	movi	r5,1
1000af1c:	d811883a 	mov	r8,sp
1000af20:	003e4f06 	br	1000a860 <__alt_data_end+0xf800a860>
1000af24:	d8c02215 	stw	r3,136(sp)
1000af28:	002b883a 	mov	r21,zero
1000af2c:	003db806 	br	1000a610 <__alt_data_end+0xf800a610>
1000af30:	d811883a 	mov	r8,sp
1000af34:	003e9606 	br	1000a990 <__alt_data_end+0xf800a990>
1000af38:	01040074 	movhi	r4,4097
1000af3c:	2108c704 	addi	r4,r4,8988
1000af40:	d9002315 	stw	r4,140(sp)
1000af44:	003e6306 	br	1000a8d4 <__alt_data_end+0xf800a8d4>
1000af48:	b0c00043 	ldbu	r3,1(r22)
1000af4c:	8c400814 	ori	r17,r17,32
1000af50:	b5800044 	addi	r22,r22,1
1000af54:	18c03fcc 	andi	r3,r3,255
1000af58:	18c0201c 	xori	r3,r3,128
1000af5c:	18ffe004 	addi	r3,r3,-128
1000af60:	003b9c06 	br	10009dd4 <__alt_data_end+0xf8009dd4>
1000af64:	b809883a 	mov	r4,r23
1000af68:	da002a15 	stw	r8,168(sp)
1000af6c:	00023d00 	call	100023d0 <strlen>
1000af70:	1029883a 	mov	r20,r2
1000af74:	dd401d83 	ldbu	r21,118(sp)
1000af78:	df002215 	stw	fp,136(sp)
1000af7c:	0021883a 	mov	r16,zero
1000af80:	da002a17 	ldw	r8,168(sp)
1000af84:	003c3906 	br	1000a06c <__alt_data_end+0xf800a06c>
1000af88:	d9402017 	ldw	r5,128(sp)
1000af8c:	d9002117 	ldw	r4,132(sp)
1000af90:	d9801a04 	addi	r6,sp,104
1000af94:	0009b4c0 	call	10009b4c <__sprint_r.part.0>
1000af98:	103e691e 	bne	r2,zero,1000a940 <__alt_data_end+0xf800a940>
1000af9c:	d9001b17 	ldw	r4,108(sp)
1000afa0:	d8801c17 	ldw	r2,112(sp)
1000afa4:	d811883a 	mov	r8,sp
1000afa8:	21400044 	addi	r5,r4,1
1000afac:	003e2e06 	br	1000a868 <__alt_data_end+0xf800a868>
1000afb0:	01040074 	movhi	r4,4097
1000afb4:	2108cb04 	addi	r4,r4,9004
1000afb8:	d9002315 	stw	r4,140(sp)
1000afbc:	d9001b17 	ldw	r4,108(sp)
1000afc0:	21000044 	addi	r4,r4,1
1000afc4:	003c5e06 	br	1000a140 <__alt_data_end+0xf800a140>
1000afc8:	002b883a 	mov	r21,zero
1000afcc:	00800084 	movi	r2,2
1000afd0:	10803fcc 	andi	r2,r2,255
1000afd4:	01000044 	movi	r4,1
1000afd8:	11002b26 	beq	r2,r4,1000b088 <___vfiprintf_internal_r+0x1428>
1000afdc:	01000084 	movi	r4,2
1000afe0:	11002b1e 	bne	r2,r4,1000b090 <___vfiprintf_internal_r+0x1430>
1000afe4:	1823883a 	mov	r17,r3
1000afe8:	003ee506 	br	1000ab80 <__alt_data_end+0xf800ab80>
1000afec:	8807883a 	mov	r3,r17
1000aff0:	00800044 	movi	r2,1
1000aff4:	003ff606 	br	1000afd0 <__alt_data_end+0xf800afd0>
1000aff8:	00800184 	movi	r2,6
1000affc:	1400012e 	bgeu	r2,r16,1000b004 <___vfiprintf_internal_r+0x13a4>
1000b000:	1021883a 	mov	r16,r2
1000b004:	8029883a 	mov	r20,r16
1000b008:	8027883a 	mov	r19,r16
1000b00c:	80002216 	blt	r16,zero,1000b098 <___vfiprintf_internal_r+0x1438>
1000b010:	05c40074 	movhi	r23,4097
1000b014:	df002215 	stw	fp,136(sp)
1000b018:	bdc86b04 	addi	r23,r23,8620
1000b01c:	003cfb06 	br	1000a40c <__alt_data_end+0xf800a40c>
1000b020:	d9002217 	ldw	r4,136(sp)
1000b024:	d9402417 	ldw	r5,144(sp)
1000b028:	20800017 	ldw	r2,0(r4)
1000b02c:	21000104 	addi	r4,r4,4
1000b030:	d9002215 	stw	r4,136(sp)
1000b034:	11400015 	stw	r5,0(r2)
1000b038:	003b3d06 	br	10009d30 <__alt_data_end+0xf8009d30>
1000b03c:	01440074 	movhi	r5,4097
1000b040:	2948cb04 	addi	r5,r5,9004
1000b044:	d9402315 	stw	r5,140(sp)
1000b048:	d9401b17 	ldw	r5,108(sp)
1000b04c:	29400044 	addi	r5,r5,1
1000b050:	003e6d06 	br	1000aa08 <__alt_data_end+0xf800aa08>
1000b054:	8029883a 	mov	r20,r16
1000b058:	dd401d83 	ldbu	r21,118(sp)
1000b05c:	df002215 	stw	fp,136(sp)
1000b060:	0021883a 	mov	r16,zero
1000b064:	003c0106 	br	1000a06c <__alt_data_end+0xf800a06c>
1000b068:	00c40074 	movhi	r3,4097
1000b06c:	18c8c704 	addi	r3,r3,8988
1000b070:	d8c02315 	stw	r3,140(sp)
1000b074:	280d883a 	mov	r6,r5
1000b078:	003c6906 	br	1000a220 <__alt_data_end+0xf800a220>
1000b07c:	802d883a 	mov	r22,r16
1000b080:	0021883a 	mov	r16,zero
1000b084:	003b5406 	br	10009dd8 <__alt_data_end+0xf8009dd8>
1000b088:	1823883a 	mov	r17,r3
1000b08c:	003cf306 	br	1000a45c <__alt_data_end+0xf800a45c>
1000b090:	1823883a 	mov	r17,r3
1000b094:	003cad06 	br	1000a34c <__alt_data_end+0xf800a34c>
1000b098:	0027883a 	mov	r19,zero
1000b09c:	003fdc06 	br	1000b010 <__alt_data_end+0xf800b010>
1000b0a0:	d9402217 	ldw	r5,136(sp)
1000b0a4:	8005883a 	mov	r2,r16
1000b0a8:	b0c00043 	ldbu	r3,1(r22)
1000b0ac:	2c000017 	ldw	r16,0(r5)
1000b0b0:	29000104 	addi	r4,r5,4
1000b0b4:	d9002215 	stw	r4,136(sp)
1000b0b8:	102d883a 	mov	r22,r2
1000b0bc:	803fa50e 	bge	r16,zero,1000af54 <__alt_data_end+0xf800af54>
1000b0c0:	18c03fcc 	andi	r3,r3,255
1000b0c4:	18c0201c 	xori	r3,r3,128
1000b0c8:	043fffc4 	movi	r16,-1
1000b0cc:	18ffe004 	addi	r3,r3,-128
1000b0d0:	003b4006 	br	10009dd4 <__alt_data_end+0xf8009dd4>
1000b0d4:	d9402303 	ldbu	r5,140(sp)
1000b0d8:	d9401d85 	stb	r5,118(sp)
1000b0dc:	003cae06 	br	1000a398 <__alt_data_end+0xf800a398>
1000b0e0:	d8c02303 	ldbu	r3,140(sp)
1000b0e4:	d8c01d85 	stb	r3,118(sp)
1000b0e8:	003d1406 	br	1000a53c <__alt_data_end+0xf800a53c>
1000b0ec:	d8c02303 	ldbu	r3,140(sp)
1000b0f0:	d8c01d85 	stb	r3,118(sp)
1000b0f4:	003cca06 	br	1000a420 <__alt_data_end+0xf800a420>
1000b0f8:	8880004c 	andi	r2,r17,1
1000b0fc:	002b883a 	mov	r21,zero
1000b100:	10000526 	beq	r2,zero,1000b118 <___vfiprintf_internal_r+0x14b8>
1000b104:	00800c04 	movi	r2,48
1000b108:	d88019c5 	stb	r2,103(sp)
1000b10c:	dd002817 	ldw	r20,160(sp)
1000b110:	ddc019c4 	addi	r23,sp,103
1000b114:	003bd506 	br	1000a06c <__alt_data_end+0xf800a06c>
1000b118:	0029883a 	mov	r20,zero
1000b11c:	ddc01a04 	addi	r23,sp,104
1000b120:	003bd206 	br	1000a06c <__alt_data_end+0xf800a06c>
1000b124:	d9002303 	ldbu	r4,140(sp)
1000b128:	d9001d85 	stb	r4,118(sp)
1000b12c:	003da606 	br	1000a7c8 <__alt_data_end+0xf800a7c8>
1000b130:	d8c02303 	ldbu	r3,140(sp)
1000b134:	d8c01d85 	stb	r3,118(sp)
1000b138:	003c7606 	br	1000a314 <__alt_data_end+0xf800a314>
1000b13c:	d8c02303 	ldbu	r3,140(sp)
1000b140:	d8c01d85 	stb	r3,118(sp)
1000b144:	003c6506 	br	1000a2dc <__alt_data_end+0xf800a2dc>
1000b148:	d9002303 	ldbu	r4,140(sp)
1000b14c:	d9001d85 	stb	r4,118(sp)
1000b150:	003d3d06 	br	1000a648 <__alt_data_end+0xf800a648>
1000b154:	d8c02303 	ldbu	r3,140(sp)
1000b158:	d8c01d85 	stb	r3,118(sp)
1000b15c:	003d1d06 	br	1000a5d4 <__alt_data_end+0xf800a5d4>
1000b160:	d8c02303 	ldbu	r3,140(sp)
1000b164:	d8c01d85 	stb	r3,118(sp)
1000b168:	003d0306 	br	1000a578 <__alt_data_end+0xf800a578>

1000b16c <__vfiprintf_internal>:
1000b16c:	00840074 	movhi	r2,4097
1000b170:	108fc804 	addi	r2,r2,16160
1000b174:	300f883a 	mov	r7,r6
1000b178:	280d883a 	mov	r6,r5
1000b17c:	200b883a 	mov	r5,r4
1000b180:	11000017 	ldw	r4,0(r2)
1000b184:	0009c601 	jmpi	10009c60 <___vfiprintf_internal_r>

1000b188 <__sbprintf>:
1000b188:	2880030b 	ldhu	r2,12(r5)
1000b18c:	2ac01917 	ldw	r11,100(r5)
1000b190:	2a80038b 	ldhu	r10,14(r5)
1000b194:	2a400717 	ldw	r9,28(r5)
1000b198:	2a000917 	ldw	r8,36(r5)
1000b19c:	defee204 	addi	sp,sp,-1144
1000b1a0:	00c10004 	movi	r3,1024
1000b1a4:	dc011a15 	stw	r16,1128(sp)
1000b1a8:	10bfff4c 	andi	r2,r2,65533
1000b1ac:	2821883a 	mov	r16,r5
1000b1b0:	d8cb883a 	add	r5,sp,r3
1000b1b4:	dc811c15 	stw	r18,1136(sp)
1000b1b8:	dc411b15 	stw	r17,1132(sp)
1000b1bc:	dfc11d15 	stw	ra,1140(sp)
1000b1c0:	2025883a 	mov	r18,r4
1000b1c4:	d881030d 	sth	r2,1036(sp)
1000b1c8:	dac11915 	stw	r11,1124(sp)
1000b1cc:	da81038d 	sth	r10,1038(sp)
1000b1d0:	da410715 	stw	r9,1052(sp)
1000b1d4:	da010915 	stw	r8,1060(sp)
1000b1d8:	dec10015 	stw	sp,1024(sp)
1000b1dc:	dec10415 	stw	sp,1040(sp)
1000b1e0:	d8c10215 	stw	r3,1032(sp)
1000b1e4:	d8c10515 	stw	r3,1044(sp)
1000b1e8:	d8010615 	stw	zero,1048(sp)
1000b1ec:	0009c600 	call	10009c60 <___vfiprintf_internal_r>
1000b1f0:	1023883a 	mov	r17,r2
1000b1f4:	10000416 	blt	r2,zero,1000b208 <__sbprintf+0x80>
1000b1f8:	d9410004 	addi	r5,sp,1024
1000b1fc:	9009883a 	mov	r4,r18
1000b200:	000643c0 	call	1000643c <_fflush_r>
1000b204:	10000d1e 	bne	r2,zero,1000b23c <__sbprintf+0xb4>
1000b208:	d881030b 	ldhu	r2,1036(sp)
1000b20c:	1080100c 	andi	r2,r2,64
1000b210:	10000326 	beq	r2,zero,1000b220 <__sbprintf+0x98>
1000b214:	8080030b 	ldhu	r2,12(r16)
1000b218:	10801014 	ori	r2,r2,64
1000b21c:	8080030d 	sth	r2,12(r16)
1000b220:	8805883a 	mov	r2,r17
1000b224:	dfc11d17 	ldw	ra,1140(sp)
1000b228:	dc811c17 	ldw	r18,1136(sp)
1000b22c:	dc411b17 	ldw	r17,1132(sp)
1000b230:	dc011a17 	ldw	r16,1128(sp)
1000b234:	dec11e04 	addi	sp,sp,1144
1000b238:	f800283a 	ret
1000b23c:	047fffc4 	movi	r17,-1
1000b240:	003ff106 	br	1000b208 <__alt_data_end+0xf800b208>

1000b244 <_write_r>:
1000b244:	defffd04 	addi	sp,sp,-12
1000b248:	2805883a 	mov	r2,r5
1000b24c:	dc000015 	stw	r16,0(sp)
1000b250:	04040074 	movhi	r16,4097
1000b254:	dc400115 	stw	r17,4(sp)
1000b258:	300b883a 	mov	r5,r6
1000b25c:	84169904 	addi	r16,r16,23140
1000b260:	2023883a 	mov	r17,r4
1000b264:	380d883a 	mov	r6,r7
1000b268:	1009883a 	mov	r4,r2
1000b26c:	dfc00215 	stw	ra,8(sp)
1000b270:	80000015 	stw	zero,0(r16)
1000b274:	000fa940 	call	1000fa94 <write>
1000b278:	00ffffc4 	movi	r3,-1
1000b27c:	10c00526 	beq	r2,r3,1000b294 <_write_r+0x50>
1000b280:	dfc00217 	ldw	ra,8(sp)
1000b284:	dc400117 	ldw	r17,4(sp)
1000b288:	dc000017 	ldw	r16,0(sp)
1000b28c:	dec00304 	addi	sp,sp,12
1000b290:	f800283a 	ret
1000b294:	80c00017 	ldw	r3,0(r16)
1000b298:	183ff926 	beq	r3,zero,1000b280 <__alt_data_end+0xf800b280>
1000b29c:	88c00015 	stw	r3,0(r17)
1000b2a0:	003ff706 	br	1000b280 <__alt_data_end+0xf800b280>

1000b2a4 <_close_r>:
1000b2a4:	defffd04 	addi	sp,sp,-12
1000b2a8:	dc000015 	stw	r16,0(sp)
1000b2ac:	04040074 	movhi	r16,4097
1000b2b0:	dc400115 	stw	r17,4(sp)
1000b2b4:	84169904 	addi	r16,r16,23140
1000b2b8:	2023883a 	mov	r17,r4
1000b2bc:	2809883a 	mov	r4,r5
1000b2c0:	dfc00215 	stw	ra,8(sp)
1000b2c4:	80000015 	stw	zero,0(r16)
1000b2c8:	000f20c0 	call	1000f20c <close>
1000b2cc:	00ffffc4 	movi	r3,-1
1000b2d0:	10c00526 	beq	r2,r3,1000b2e8 <_close_r+0x44>
1000b2d4:	dfc00217 	ldw	ra,8(sp)
1000b2d8:	dc400117 	ldw	r17,4(sp)
1000b2dc:	dc000017 	ldw	r16,0(sp)
1000b2e0:	dec00304 	addi	sp,sp,12
1000b2e4:	f800283a 	ret
1000b2e8:	80c00017 	ldw	r3,0(r16)
1000b2ec:	183ff926 	beq	r3,zero,1000b2d4 <__alt_data_end+0xf800b2d4>
1000b2f0:	88c00015 	stw	r3,0(r17)
1000b2f4:	003ff706 	br	1000b2d4 <__alt_data_end+0xf800b2d4>

1000b2f8 <_calloc_r>:
1000b2f8:	defffe04 	addi	sp,sp,-8
1000b2fc:	2805883a 	mov	r2,r5
1000b300:	dc000015 	stw	r16,0(sp)
1000b304:	300b883a 	mov	r5,r6
1000b308:	2021883a 	mov	r16,r4
1000b30c:	1009883a 	mov	r4,r2
1000b310:	dfc00115 	stw	ra,4(sp)
1000b314:	000c9040 	call	1000c904 <__mulsi3>
1000b318:	100b883a 	mov	r5,r2
1000b31c:	8009883a 	mov	r4,r16
1000b320:	00075940 	call	10007594 <_malloc_r>
1000b324:	10002926 	beq	r2,zero,1000b3cc <_calloc_r+0xd4>
1000b328:	11bfff17 	ldw	r6,-4(r2)
1000b32c:	1021883a 	mov	r16,r2
1000b330:	00bfff04 	movi	r2,-4
1000b334:	308c703a 	and	r6,r6,r2
1000b338:	00c00904 	movi	r3,36
1000b33c:	308d883a 	add	r6,r6,r2
1000b340:	19801636 	bltu	r3,r6,1000b39c <_calloc_r+0xa4>
1000b344:	008004c4 	movi	r2,19
1000b348:	11800b2e 	bgeu	r2,r6,1000b378 <_calloc_r+0x80>
1000b34c:	80000015 	stw	zero,0(r16)
1000b350:	80000115 	stw	zero,4(r16)
1000b354:	008006c4 	movi	r2,27
1000b358:	11801a2e 	bgeu	r2,r6,1000b3c4 <_calloc_r+0xcc>
1000b35c:	80000215 	stw	zero,8(r16)
1000b360:	80000315 	stw	zero,12(r16)
1000b364:	30c0151e 	bne	r6,r3,1000b3bc <_calloc_r+0xc4>
1000b368:	80000415 	stw	zero,16(r16)
1000b36c:	80800604 	addi	r2,r16,24
1000b370:	80000515 	stw	zero,20(r16)
1000b374:	00000106 	br	1000b37c <_calloc_r+0x84>
1000b378:	8005883a 	mov	r2,r16
1000b37c:	10000015 	stw	zero,0(r2)
1000b380:	10000115 	stw	zero,4(r2)
1000b384:	10000215 	stw	zero,8(r2)
1000b388:	8005883a 	mov	r2,r16
1000b38c:	dfc00117 	ldw	ra,4(sp)
1000b390:	dc000017 	ldw	r16,0(sp)
1000b394:	dec00204 	addi	sp,sp,8
1000b398:	f800283a 	ret
1000b39c:	000b883a 	mov	r5,zero
1000b3a0:	8009883a 	mov	r4,r16
1000b3a4:	00081280 	call	10008128 <memset>
1000b3a8:	8005883a 	mov	r2,r16
1000b3ac:	dfc00117 	ldw	ra,4(sp)
1000b3b0:	dc000017 	ldw	r16,0(sp)
1000b3b4:	dec00204 	addi	sp,sp,8
1000b3b8:	f800283a 	ret
1000b3bc:	80800404 	addi	r2,r16,16
1000b3c0:	003fee06 	br	1000b37c <__alt_data_end+0xf800b37c>
1000b3c4:	80800204 	addi	r2,r16,8
1000b3c8:	003fec06 	br	1000b37c <__alt_data_end+0xf800b37c>
1000b3cc:	0005883a 	mov	r2,zero
1000b3d0:	003fee06 	br	1000b38c <__alt_data_end+0xf800b38c>

1000b3d4 <_fclose_r>:
1000b3d4:	28003926 	beq	r5,zero,1000b4bc <_fclose_r+0xe8>
1000b3d8:	defffc04 	addi	sp,sp,-16
1000b3dc:	dc400115 	stw	r17,4(sp)
1000b3e0:	dc000015 	stw	r16,0(sp)
1000b3e4:	dfc00315 	stw	ra,12(sp)
1000b3e8:	dc800215 	stw	r18,8(sp)
1000b3ec:	2023883a 	mov	r17,r4
1000b3f0:	2821883a 	mov	r16,r5
1000b3f4:	20000226 	beq	r4,zero,1000b400 <_fclose_r+0x2c>
1000b3f8:	20800e17 	ldw	r2,56(r4)
1000b3fc:	10002726 	beq	r2,zero,1000b49c <_fclose_r+0xc8>
1000b400:	8080030f 	ldh	r2,12(r16)
1000b404:	1000071e 	bne	r2,zero,1000b424 <_fclose_r+0x50>
1000b408:	0005883a 	mov	r2,zero
1000b40c:	dfc00317 	ldw	ra,12(sp)
1000b410:	dc800217 	ldw	r18,8(sp)
1000b414:	dc400117 	ldw	r17,4(sp)
1000b418:	dc000017 	ldw	r16,0(sp)
1000b41c:	dec00404 	addi	sp,sp,16
1000b420:	f800283a 	ret
1000b424:	800b883a 	mov	r5,r16
1000b428:	8809883a 	mov	r4,r17
1000b42c:	00062200 	call	10006220 <__sflush_r>
1000b430:	1025883a 	mov	r18,r2
1000b434:	80800b17 	ldw	r2,44(r16)
1000b438:	10000426 	beq	r2,zero,1000b44c <_fclose_r+0x78>
1000b43c:	81400717 	ldw	r5,28(r16)
1000b440:	8809883a 	mov	r4,r17
1000b444:	103ee83a 	callr	r2
1000b448:	10001616 	blt	r2,zero,1000b4a4 <_fclose_r+0xd0>
1000b44c:	8080030b 	ldhu	r2,12(r16)
1000b450:	1080200c 	andi	r2,r2,128
1000b454:	1000151e 	bne	r2,zero,1000b4ac <_fclose_r+0xd8>
1000b458:	81400c17 	ldw	r5,48(r16)
1000b45c:	28000526 	beq	r5,zero,1000b474 <_fclose_r+0xa0>
1000b460:	80801004 	addi	r2,r16,64
1000b464:	28800226 	beq	r5,r2,1000b470 <_fclose_r+0x9c>
1000b468:	8809883a 	mov	r4,r17
1000b46c:	000699c0 	call	1000699c <_free_r>
1000b470:	80000c15 	stw	zero,48(r16)
1000b474:	81401117 	ldw	r5,68(r16)
1000b478:	28000326 	beq	r5,zero,1000b488 <_fclose_r+0xb4>
1000b47c:	8809883a 	mov	r4,r17
1000b480:	000699c0 	call	1000699c <_free_r>
1000b484:	80001115 	stw	zero,68(r16)
1000b488:	00068380 	call	10006838 <__sfp_lock_acquire>
1000b48c:	8000030d 	sth	zero,12(r16)
1000b490:	000683c0 	call	1000683c <__sfp_lock_release>
1000b494:	9005883a 	mov	r2,r18
1000b498:	003fdc06 	br	1000b40c <__alt_data_end+0xf800b40c>
1000b49c:	00068280 	call	10006828 <__sinit>
1000b4a0:	003fd706 	br	1000b400 <__alt_data_end+0xf800b400>
1000b4a4:	04bfffc4 	movi	r18,-1
1000b4a8:	003fe806 	br	1000b44c <__alt_data_end+0xf800b44c>
1000b4ac:	81400417 	ldw	r5,16(r16)
1000b4b0:	8809883a 	mov	r4,r17
1000b4b4:	000699c0 	call	1000699c <_free_r>
1000b4b8:	003fe706 	br	1000b458 <__alt_data_end+0xf800b458>
1000b4bc:	0005883a 	mov	r2,zero
1000b4c0:	f800283a 	ret

1000b4c4 <fclose>:
1000b4c4:	00840074 	movhi	r2,4097
1000b4c8:	108fc804 	addi	r2,r2,16160
1000b4cc:	200b883a 	mov	r5,r4
1000b4d0:	11000017 	ldw	r4,0(r2)
1000b4d4:	000b3d41 	jmpi	1000b3d4 <_fclose_r>

1000b4d8 <__fputwc>:
1000b4d8:	defff804 	addi	sp,sp,-32
1000b4dc:	dcc00415 	stw	r19,16(sp)
1000b4e0:	dc800315 	stw	r18,12(sp)
1000b4e4:	dc000115 	stw	r16,4(sp)
1000b4e8:	dfc00715 	stw	ra,28(sp)
1000b4ec:	dd400615 	stw	r21,24(sp)
1000b4f0:	dd000515 	stw	r20,20(sp)
1000b4f4:	dc400215 	stw	r17,8(sp)
1000b4f8:	2027883a 	mov	r19,r4
1000b4fc:	2825883a 	mov	r18,r5
1000b500:	3021883a 	mov	r16,r6
1000b504:	00073840 	call	10007384 <__locale_mb_cur_max>
1000b508:	00c00044 	movi	r3,1
1000b50c:	10c03e26 	beq	r2,r3,1000b608 <__fputwc+0x130>
1000b510:	81c01704 	addi	r7,r16,92
1000b514:	900d883a 	mov	r6,r18
1000b518:	d80b883a 	mov	r5,sp
1000b51c:	9809883a 	mov	r4,r19
1000b520:	000b9a80 	call	1000b9a8 <_wcrtomb_r>
1000b524:	1029883a 	mov	r20,r2
1000b528:	00bfffc4 	movi	r2,-1
1000b52c:	a0802026 	beq	r20,r2,1000b5b0 <__fputwc+0xd8>
1000b530:	d9400003 	ldbu	r5,0(sp)
1000b534:	a0001c26 	beq	r20,zero,1000b5a8 <__fputwc+0xd0>
1000b538:	0023883a 	mov	r17,zero
1000b53c:	05400284 	movi	r21,10
1000b540:	00000906 	br	1000b568 <__fputwc+0x90>
1000b544:	80800017 	ldw	r2,0(r16)
1000b548:	11400005 	stb	r5,0(r2)
1000b54c:	80c00017 	ldw	r3,0(r16)
1000b550:	18c00044 	addi	r3,r3,1
1000b554:	80c00015 	stw	r3,0(r16)
1000b558:	8c400044 	addi	r17,r17,1
1000b55c:	dc45883a 	add	r2,sp,r17
1000b560:	8d00112e 	bgeu	r17,r20,1000b5a8 <__fputwc+0xd0>
1000b564:	11400003 	ldbu	r5,0(r2)
1000b568:	80c00217 	ldw	r3,8(r16)
1000b56c:	18ffffc4 	addi	r3,r3,-1
1000b570:	80c00215 	stw	r3,8(r16)
1000b574:	183ff30e 	bge	r3,zero,1000b544 <__alt_data_end+0xf800b544>
1000b578:	80800617 	ldw	r2,24(r16)
1000b57c:	18801916 	blt	r3,r2,1000b5e4 <__fputwc+0x10c>
1000b580:	80800017 	ldw	r2,0(r16)
1000b584:	11400005 	stb	r5,0(r2)
1000b588:	80800017 	ldw	r2,0(r16)
1000b58c:	10c00003 	ldbu	r3,0(r2)
1000b590:	10800044 	addi	r2,r2,1
1000b594:	1d402326 	beq	r3,r21,1000b624 <__fputwc+0x14c>
1000b598:	80800015 	stw	r2,0(r16)
1000b59c:	8c400044 	addi	r17,r17,1
1000b5a0:	dc45883a 	add	r2,sp,r17
1000b5a4:	8d3fef36 	bltu	r17,r20,1000b564 <__alt_data_end+0xf800b564>
1000b5a8:	9005883a 	mov	r2,r18
1000b5ac:	00000406 	br	1000b5c0 <__fputwc+0xe8>
1000b5b0:	80c0030b 	ldhu	r3,12(r16)
1000b5b4:	a005883a 	mov	r2,r20
1000b5b8:	18c01014 	ori	r3,r3,64
1000b5bc:	80c0030d 	sth	r3,12(r16)
1000b5c0:	dfc00717 	ldw	ra,28(sp)
1000b5c4:	dd400617 	ldw	r21,24(sp)
1000b5c8:	dd000517 	ldw	r20,20(sp)
1000b5cc:	dcc00417 	ldw	r19,16(sp)
1000b5d0:	dc800317 	ldw	r18,12(sp)
1000b5d4:	dc400217 	ldw	r17,8(sp)
1000b5d8:	dc000117 	ldw	r16,4(sp)
1000b5dc:	dec00804 	addi	sp,sp,32
1000b5e0:	f800283a 	ret
1000b5e4:	800d883a 	mov	r6,r16
1000b5e8:	29403fcc 	andi	r5,r5,255
1000b5ec:	9809883a 	mov	r4,r19
1000b5f0:	000b8500 	call	1000b850 <__swbuf_r>
1000b5f4:	10bfffe0 	cmpeqi	r2,r2,-1
1000b5f8:	10803fcc 	andi	r2,r2,255
1000b5fc:	103fd626 	beq	r2,zero,1000b558 <__alt_data_end+0xf800b558>
1000b600:	00bfffc4 	movi	r2,-1
1000b604:	003fee06 	br	1000b5c0 <__alt_data_end+0xf800b5c0>
1000b608:	90ffffc4 	addi	r3,r18,-1
1000b60c:	01003f84 	movi	r4,254
1000b610:	20ffbf36 	bltu	r4,r3,1000b510 <__alt_data_end+0xf800b510>
1000b614:	900b883a 	mov	r5,r18
1000b618:	dc800005 	stb	r18,0(sp)
1000b61c:	1029883a 	mov	r20,r2
1000b620:	003fc506 	br	1000b538 <__alt_data_end+0xf800b538>
1000b624:	800d883a 	mov	r6,r16
1000b628:	a80b883a 	mov	r5,r21
1000b62c:	9809883a 	mov	r4,r19
1000b630:	000b8500 	call	1000b850 <__swbuf_r>
1000b634:	10bfffe0 	cmpeqi	r2,r2,-1
1000b638:	003fef06 	br	1000b5f8 <__alt_data_end+0xf800b5f8>

1000b63c <_fputwc_r>:
1000b63c:	3080030b 	ldhu	r2,12(r6)
1000b640:	10c8000c 	andi	r3,r2,8192
1000b644:	1800051e 	bne	r3,zero,1000b65c <_fputwc_r+0x20>
1000b648:	30c01917 	ldw	r3,100(r6)
1000b64c:	10880014 	ori	r2,r2,8192
1000b650:	3080030d 	sth	r2,12(r6)
1000b654:	18880014 	ori	r2,r3,8192
1000b658:	30801915 	stw	r2,100(r6)
1000b65c:	000b4d81 	jmpi	1000b4d8 <__fputwc>

1000b660 <fputwc>:
1000b660:	00840074 	movhi	r2,4097
1000b664:	defffc04 	addi	sp,sp,-16
1000b668:	108fc804 	addi	r2,r2,16160
1000b66c:	dc000115 	stw	r16,4(sp)
1000b670:	14000017 	ldw	r16,0(r2)
1000b674:	dc400215 	stw	r17,8(sp)
1000b678:	dfc00315 	stw	ra,12(sp)
1000b67c:	2023883a 	mov	r17,r4
1000b680:	80000226 	beq	r16,zero,1000b68c <fputwc+0x2c>
1000b684:	80800e17 	ldw	r2,56(r16)
1000b688:	10001026 	beq	r2,zero,1000b6cc <fputwc+0x6c>
1000b68c:	2880030b 	ldhu	r2,12(r5)
1000b690:	10c8000c 	andi	r3,r2,8192
1000b694:	1800051e 	bne	r3,zero,1000b6ac <fputwc+0x4c>
1000b698:	28c01917 	ldw	r3,100(r5)
1000b69c:	10880014 	ori	r2,r2,8192
1000b6a0:	2880030d 	sth	r2,12(r5)
1000b6a4:	18880014 	ori	r2,r3,8192
1000b6a8:	28801915 	stw	r2,100(r5)
1000b6ac:	280d883a 	mov	r6,r5
1000b6b0:	8009883a 	mov	r4,r16
1000b6b4:	880b883a 	mov	r5,r17
1000b6b8:	dfc00317 	ldw	ra,12(sp)
1000b6bc:	dc400217 	ldw	r17,8(sp)
1000b6c0:	dc000117 	ldw	r16,4(sp)
1000b6c4:	dec00404 	addi	sp,sp,16
1000b6c8:	000b4d81 	jmpi	1000b4d8 <__fputwc>
1000b6cc:	8009883a 	mov	r4,r16
1000b6d0:	d9400015 	stw	r5,0(sp)
1000b6d4:	00068280 	call	10006828 <__sinit>
1000b6d8:	d9400017 	ldw	r5,0(sp)
1000b6dc:	003feb06 	br	1000b68c <__alt_data_end+0xf800b68c>

1000b6e0 <_fstat_r>:
1000b6e0:	defffd04 	addi	sp,sp,-12
1000b6e4:	2805883a 	mov	r2,r5
1000b6e8:	dc000015 	stw	r16,0(sp)
1000b6ec:	04040074 	movhi	r16,4097
1000b6f0:	dc400115 	stw	r17,4(sp)
1000b6f4:	84169904 	addi	r16,r16,23140
1000b6f8:	2023883a 	mov	r17,r4
1000b6fc:	300b883a 	mov	r5,r6
1000b700:	1009883a 	mov	r4,r2
1000b704:	dfc00215 	stw	ra,8(sp)
1000b708:	80000015 	stw	zero,0(r16)
1000b70c:	000f34c0 	call	1000f34c <fstat>
1000b710:	00ffffc4 	movi	r3,-1
1000b714:	10c00526 	beq	r2,r3,1000b72c <_fstat_r+0x4c>
1000b718:	dfc00217 	ldw	ra,8(sp)
1000b71c:	dc400117 	ldw	r17,4(sp)
1000b720:	dc000017 	ldw	r16,0(sp)
1000b724:	dec00304 	addi	sp,sp,12
1000b728:	f800283a 	ret
1000b72c:	80c00017 	ldw	r3,0(r16)
1000b730:	183ff926 	beq	r3,zero,1000b718 <__alt_data_end+0xf800b718>
1000b734:	88c00015 	stw	r3,0(r17)
1000b738:	003ff706 	br	1000b718 <__alt_data_end+0xf800b718>

1000b73c <_isatty_r>:
1000b73c:	defffd04 	addi	sp,sp,-12
1000b740:	dc000015 	stw	r16,0(sp)
1000b744:	04040074 	movhi	r16,4097
1000b748:	dc400115 	stw	r17,4(sp)
1000b74c:	84169904 	addi	r16,r16,23140
1000b750:	2023883a 	mov	r17,r4
1000b754:	2809883a 	mov	r4,r5
1000b758:	dfc00215 	stw	ra,8(sp)
1000b75c:	80000015 	stw	zero,0(r16)
1000b760:	000f4400 	call	1000f440 <isatty>
1000b764:	00ffffc4 	movi	r3,-1
1000b768:	10c00526 	beq	r2,r3,1000b780 <_isatty_r+0x44>
1000b76c:	dfc00217 	ldw	ra,8(sp)
1000b770:	dc400117 	ldw	r17,4(sp)
1000b774:	dc000017 	ldw	r16,0(sp)
1000b778:	dec00304 	addi	sp,sp,12
1000b77c:	f800283a 	ret
1000b780:	80c00017 	ldw	r3,0(r16)
1000b784:	183ff926 	beq	r3,zero,1000b76c <__alt_data_end+0xf800b76c>
1000b788:	88c00015 	stw	r3,0(r17)
1000b78c:	003ff706 	br	1000b76c <__alt_data_end+0xf800b76c>

1000b790 <_lseek_r>:
1000b790:	defffd04 	addi	sp,sp,-12
1000b794:	2805883a 	mov	r2,r5
1000b798:	dc000015 	stw	r16,0(sp)
1000b79c:	04040074 	movhi	r16,4097
1000b7a0:	dc400115 	stw	r17,4(sp)
1000b7a4:	300b883a 	mov	r5,r6
1000b7a8:	84169904 	addi	r16,r16,23140
1000b7ac:	2023883a 	mov	r17,r4
1000b7b0:	380d883a 	mov	r6,r7
1000b7b4:	1009883a 	mov	r4,r2
1000b7b8:	dfc00215 	stw	ra,8(sp)
1000b7bc:	80000015 	stw	zero,0(r16)
1000b7c0:	000f6140 	call	1000f614 <lseek>
1000b7c4:	00ffffc4 	movi	r3,-1
1000b7c8:	10c00526 	beq	r2,r3,1000b7e0 <_lseek_r+0x50>
1000b7cc:	dfc00217 	ldw	ra,8(sp)
1000b7d0:	dc400117 	ldw	r17,4(sp)
1000b7d4:	dc000017 	ldw	r16,0(sp)
1000b7d8:	dec00304 	addi	sp,sp,12
1000b7dc:	f800283a 	ret
1000b7e0:	80c00017 	ldw	r3,0(r16)
1000b7e4:	183ff926 	beq	r3,zero,1000b7cc <__alt_data_end+0xf800b7cc>
1000b7e8:	88c00015 	stw	r3,0(r17)
1000b7ec:	003ff706 	br	1000b7cc <__alt_data_end+0xf800b7cc>

1000b7f0 <_read_r>:
1000b7f0:	defffd04 	addi	sp,sp,-12
1000b7f4:	2805883a 	mov	r2,r5
1000b7f8:	dc000015 	stw	r16,0(sp)
1000b7fc:	04040074 	movhi	r16,4097
1000b800:	dc400115 	stw	r17,4(sp)
1000b804:	300b883a 	mov	r5,r6
1000b808:	84169904 	addi	r16,r16,23140
1000b80c:	2023883a 	mov	r17,r4
1000b810:	380d883a 	mov	r6,r7
1000b814:	1009883a 	mov	r4,r2
1000b818:	dfc00215 	stw	ra,8(sp)
1000b81c:	80000015 	stw	zero,0(r16)
1000b820:	000f7f00 	call	1000f7f0 <read>
1000b824:	00ffffc4 	movi	r3,-1
1000b828:	10c00526 	beq	r2,r3,1000b840 <_read_r+0x50>
1000b82c:	dfc00217 	ldw	ra,8(sp)
1000b830:	dc400117 	ldw	r17,4(sp)
1000b834:	dc000017 	ldw	r16,0(sp)
1000b838:	dec00304 	addi	sp,sp,12
1000b83c:	f800283a 	ret
1000b840:	80c00017 	ldw	r3,0(r16)
1000b844:	183ff926 	beq	r3,zero,1000b82c <__alt_data_end+0xf800b82c>
1000b848:	88c00015 	stw	r3,0(r17)
1000b84c:	003ff706 	br	1000b82c <__alt_data_end+0xf800b82c>

1000b850 <__swbuf_r>:
1000b850:	defffb04 	addi	sp,sp,-20
1000b854:	dcc00315 	stw	r19,12(sp)
1000b858:	dc800215 	stw	r18,8(sp)
1000b85c:	dc000015 	stw	r16,0(sp)
1000b860:	dfc00415 	stw	ra,16(sp)
1000b864:	dc400115 	stw	r17,4(sp)
1000b868:	2025883a 	mov	r18,r4
1000b86c:	2827883a 	mov	r19,r5
1000b870:	3021883a 	mov	r16,r6
1000b874:	20000226 	beq	r4,zero,1000b880 <__swbuf_r+0x30>
1000b878:	20800e17 	ldw	r2,56(r4)
1000b87c:	10004226 	beq	r2,zero,1000b988 <__swbuf_r+0x138>
1000b880:	80800617 	ldw	r2,24(r16)
1000b884:	8100030b 	ldhu	r4,12(r16)
1000b888:	80800215 	stw	r2,8(r16)
1000b88c:	2080020c 	andi	r2,r4,8
1000b890:	10003626 	beq	r2,zero,1000b96c <__swbuf_r+0x11c>
1000b894:	80c00417 	ldw	r3,16(r16)
1000b898:	18003426 	beq	r3,zero,1000b96c <__swbuf_r+0x11c>
1000b89c:	2088000c 	andi	r2,r4,8192
1000b8a0:	9c403fcc 	andi	r17,r19,255
1000b8a4:	10001a26 	beq	r2,zero,1000b910 <__swbuf_r+0xc0>
1000b8a8:	80800017 	ldw	r2,0(r16)
1000b8ac:	81000517 	ldw	r4,20(r16)
1000b8b0:	10c7c83a 	sub	r3,r2,r3
1000b8b4:	1900200e 	bge	r3,r4,1000b938 <__swbuf_r+0xe8>
1000b8b8:	18c00044 	addi	r3,r3,1
1000b8bc:	81000217 	ldw	r4,8(r16)
1000b8c0:	11400044 	addi	r5,r2,1
1000b8c4:	81400015 	stw	r5,0(r16)
1000b8c8:	213fffc4 	addi	r4,r4,-1
1000b8cc:	81000215 	stw	r4,8(r16)
1000b8d0:	14c00005 	stb	r19,0(r2)
1000b8d4:	80800517 	ldw	r2,20(r16)
1000b8d8:	10c01e26 	beq	r2,r3,1000b954 <__swbuf_r+0x104>
1000b8dc:	8080030b 	ldhu	r2,12(r16)
1000b8e0:	1080004c 	andi	r2,r2,1
1000b8e4:	10000226 	beq	r2,zero,1000b8f0 <__swbuf_r+0xa0>
1000b8e8:	00800284 	movi	r2,10
1000b8ec:	88801926 	beq	r17,r2,1000b954 <__swbuf_r+0x104>
1000b8f0:	8805883a 	mov	r2,r17
1000b8f4:	dfc00417 	ldw	ra,16(sp)
1000b8f8:	dcc00317 	ldw	r19,12(sp)
1000b8fc:	dc800217 	ldw	r18,8(sp)
1000b900:	dc400117 	ldw	r17,4(sp)
1000b904:	dc000017 	ldw	r16,0(sp)
1000b908:	dec00504 	addi	sp,sp,20
1000b90c:	f800283a 	ret
1000b910:	81401917 	ldw	r5,100(r16)
1000b914:	00b7ffc4 	movi	r2,-8193
1000b918:	21080014 	ori	r4,r4,8192
1000b91c:	2884703a 	and	r2,r5,r2
1000b920:	80801915 	stw	r2,100(r16)
1000b924:	80800017 	ldw	r2,0(r16)
1000b928:	8100030d 	sth	r4,12(r16)
1000b92c:	81000517 	ldw	r4,20(r16)
1000b930:	10c7c83a 	sub	r3,r2,r3
1000b934:	193fe016 	blt	r3,r4,1000b8b8 <__alt_data_end+0xf800b8b8>
1000b938:	800b883a 	mov	r5,r16
1000b93c:	9009883a 	mov	r4,r18
1000b940:	000643c0 	call	1000643c <_fflush_r>
1000b944:	1000071e 	bne	r2,zero,1000b964 <__swbuf_r+0x114>
1000b948:	80800017 	ldw	r2,0(r16)
1000b94c:	00c00044 	movi	r3,1
1000b950:	003fda06 	br	1000b8bc <__alt_data_end+0xf800b8bc>
1000b954:	800b883a 	mov	r5,r16
1000b958:	9009883a 	mov	r4,r18
1000b95c:	000643c0 	call	1000643c <_fflush_r>
1000b960:	103fe326 	beq	r2,zero,1000b8f0 <__alt_data_end+0xf800b8f0>
1000b964:	00bfffc4 	movi	r2,-1
1000b968:	003fe206 	br	1000b8f4 <__alt_data_end+0xf800b8f4>
1000b96c:	800b883a 	mov	r5,r16
1000b970:	9009883a 	mov	r4,r18
1000b974:	000481c0 	call	1000481c <__swsetup_r>
1000b978:	103ffa1e 	bne	r2,zero,1000b964 <__alt_data_end+0xf800b964>
1000b97c:	8100030b 	ldhu	r4,12(r16)
1000b980:	80c00417 	ldw	r3,16(r16)
1000b984:	003fc506 	br	1000b89c <__alt_data_end+0xf800b89c>
1000b988:	00068280 	call	10006828 <__sinit>
1000b98c:	003fbc06 	br	1000b880 <__alt_data_end+0xf800b880>

1000b990 <__swbuf>:
1000b990:	00840074 	movhi	r2,4097
1000b994:	108fc804 	addi	r2,r2,16160
1000b998:	280d883a 	mov	r6,r5
1000b99c:	200b883a 	mov	r5,r4
1000b9a0:	11000017 	ldw	r4,0(r2)
1000b9a4:	000b8501 	jmpi	1000b850 <__swbuf_r>

1000b9a8 <_wcrtomb_r>:
1000b9a8:	defff604 	addi	sp,sp,-40
1000b9ac:	00840074 	movhi	r2,4097
1000b9b0:	dc800815 	stw	r18,32(sp)
1000b9b4:	dc400715 	stw	r17,28(sp)
1000b9b8:	dc000615 	stw	r16,24(sp)
1000b9bc:	108fcc04 	addi	r2,r2,16176
1000b9c0:	dfc00915 	stw	ra,36(sp)
1000b9c4:	2021883a 	mov	r16,r4
1000b9c8:	3823883a 	mov	r17,r7
1000b9cc:	14800017 	ldw	r18,0(r2)
1000b9d0:	28001426 	beq	r5,zero,1000ba24 <_wcrtomb_r+0x7c>
1000b9d4:	d9400415 	stw	r5,16(sp)
1000b9d8:	d9800515 	stw	r6,20(sp)
1000b9dc:	00073780 	call	10007378 <__locale_charset>
1000b9e0:	d9800517 	ldw	r6,20(sp)
1000b9e4:	d9400417 	ldw	r5,16(sp)
1000b9e8:	100f883a 	mov	r7,r2
1000b9ec:	dc400015 	stw	r17,0(sp)
1000b9f0:	8009883a 	mov	r4,r16
1000b9f4:	903ee83a 	callr	r18
1000b9f8:	00ffffc4 	movi	r3,-1
1000b9fc:	10c0031e 	bne	r2,r3,1000ba0c <_wcrtomb_r+0x64>
1000ba00:	88000015 	stw	zero,0(r17)
1000ba04:	00c02284 	movi	r3,138
1000ba08:	80c00015 	stw	r3,0(r16)
1000ba0c:	dfc00917 	ldw	ra,36(sp)
1000ba10:	dc800817 	ldw	r18,32(sp)
1000ba14:	dc400717 	ldw	r17,28(sp)
1000ba18:	dc000617 	ldw	r16,24(sp)
1000ba1c:	dec00a04 	addi	sp,sp,40
1000ba20:	f800283a 	ret
1000ba24:	00073780 	call	10007378 <__locale_charset>
1000ba28:	100f883a 	mov	r7,r2
1000ba2c:	dc400015 	stw	r17,0(sp)
1000ba30:	000d883a 	mov	r6,zero
1000ba34:	d9400104 	addi	r5,sp,4
1000ba38:	8009883a 	mov	r4,r16
1000ba3c:	903ee83a 	callr	r18
1000ba40:	003fed06 	br	1000b9f8 <__alt_data_end+0xf800b9f8>

1000ba44 <wcrtomb>:
1000ba44:	defff604 	addi	sp,sp,-40
1000ba48:	00840074 	movhi	r2,4097
1000ba4c:	dc800615 	stw	r18,24(sp)
1000ba50:	dc400515 	stw	r17,20(sp)
1000ba54:	108fc804 	addi	r2,r2,16160
1000ba58:	dfc00915 	stw	ra,36(sp)
1000ba5c:	dd000815 	stw	r20,32(sp)
1000ba60:	dcc00715 	stw	r19,28(sp)
1000ba64:	dc000415 	stw	r16,16(sp)
1000ba68:	3025883a 	mov	r18,r6
1000ba6c:	14400017 	ldw	r17,0(r2)
1000ba70:	20001926 	beq	r4,zero,1000bad8 <wcrtomb+0x94>
1000ba74:	00840074 	movhi	r2,4097
1000ba78:	108fcc04 	addi	r2,r2,16176
1000ba7c:	15000017 	ldw	r20,0(r2)
1000ba80:	2021883a 	mov	r16,r4
1000ba84:	2827883a 	mov	r19,r5
1000ba88:	00073780 	call	10007378 <__locale_charset>
1000ba8c:	100f883a 	mov	r7,r2
1000ba90:	dc800015 	stw	r18,0(sp)
1000ba94:	980d883a 	mov	r6,r19
1000ba98:	800b883a 	mov	r5,r16
1000ba9c:	8809883a 	mov	r4,r17
1000baa0:	a03ee83a 	callr	r20
1000baa4:	00ffffc4 	movi	r3,-1
1000baa8:	10c0031e 	bne	r2,r3,1000bab8 <wcrtomb+0x74>
1000baac:	90000015 	stw	zero,0(r18)
1000bab0:	00c02284 	movi	r3,138
1000bab4:	88c00015 	stw	r3,0(r17)
1000bab8:	dfc00917 	ldw	ra,36(sp)
1000babc:	dd000817 	ldw	r20,32(sp)
1000bac0:	dcc00717 	ldw	r19,28(sp)
1000bac4:	dc800617 	ldw	r18,24(sp)
1000bac8:	dc400517 	ldw	r17,20(sp)
1000bacc:	dc000417 	ldw	r16,16(sp)
1000bad0:	dec00a04 	addi	sp,sp,40
1000bad4:	f800283a 	ret
1000bad8:	00840074 	movhi	r2,4097
1000badc:	108fcc04 	addi	r2,r2,16176
1000bae0:	14000017 	ldw	r16,0(r2)
1000bae4:	00073780 	call	10007378 <__locale_charset>
1000bae8:	100f883a 	mov	r7,r2
1000baec:	dc800015 	stw	r18,0(sp)
1000baf0:	000d883a 	mov	r6,zero
1000baf4:	d9400104 	addi	r5,sp,4
1000baf8:	8809883a 	mov	r4,r17
1000bafc:	803ee83a 	callr	r16
1000bb00:	003fe806 	br	1000baa4 <__alt_data_end+0xf800baa4>

1000bb04 <__ascii_wctomb>:
1000bb04:	28000526 	beq	r5,zero,1000bb1c <__ascii_wctomb+0x18>
1000bb08:	00803fc4 	movi	r2,255
1000bb0c:	11800536 	bltu	r2,r6,1000bb24 <__ascii_wctomb+0x20>
1000bb10:	29800005 	stb	r6,0(r5)
1000bb14:	00800044 	movi	r2,1
1000bb18:	f800283a 	ret
1000bb1c:	0005883a 	mov	r2,zero
1000bb20:	f800283a 	ret
1000bb24:	00802284 	movi	r2,138
1000bb28:	20800015 	stw	r2,0(r4)
1000bb2c:	00bfffc4 	movi	r2,-1
1000bb30:	f800283a 	ret

1000bb34 <_wctomb_r>:
1000bb34:	00840074 	movhi	r2,4097
1000bb38:	defff904 	addi	sp,sp,-28
1000bb3c:	108fcc04 	addi	r2,r2,16176
1000bb40:	dfc00615 	stw	ra,24(sp)
1000bb44:	dc400515 	stw	r17,20(sp)
1000bb48:	dc000415 	stw	r16,16(sp)
1000bb4c:	3823883a 	mov	r17,r7
1000bb50:	14000017 	ldw	r16,0(r2)
1000bb54:	d9000115 	stw	r4,4(sp)
1000bb58:	d9400215 	stw	r5,8(sp)
1000bb5c:	d9800315 	stw	r6,12(sp)
1000bb60:	00073780 	call	10007378 <__locale_charset>
1000bb64:	d9800317 	ldw	r6,12(sp)
1000bb68:	d9400217 	ldw	r5,8(sp)
1000bb6c:	d9000117 	ldw	r4,4(sp)
1000bb70:	100f883a 	mov	r7,r2
1000bb74:	dc400015 	stw	r17,0(sp)
1000bb78:	803ee83a 	callr	r16
1000bb7c:	dfc00617 	ldw	ra,24(sp)
1000bb80:	dc400517 	ldw	r17,20(sp)
1000bb84:	dc000417 	ldw	r16,16(sp)
1000bb88:	dec00704 	addi	sp,sp,28
1000bb8c:	f800283a 	ret

1000bb90 <__udivdi3>:
1000bb90:	defff404 	addi	sp,sp,-48
1000bb94:	dcc00515 	stw	r19,20(sp)
1000bb98:	dc000215 	stw	r16,8(sp)
1000bb9c:	dfc00b15 	stw	ra,44(sp)
1000bba0:	df000a15 	stw	fp,40(sp)
1000bba4:	ddc00915 	stw	r23,36(sp)
1000bba8:	dd800815 	stw	r22,32(sp)
1000bbac:	dd400715 	stw	r21,28(sp)
1000bbb0:	dd000615 	stw	r20,24(sp)
1000bbb4:	dc800415 	stw	r18,16(sp)
1000bbb8:	dc400315 	stw	r17,12(sp)
1000bbbc:	2027883a 	mov	r19,r4
1000bbc0:	2821883a 	mov	r16,r5
1000bbc4:	3800461e 	bne	r7,zero,1000bce0 <__udivdi3+0x150>
1000bbc8:	3023883a 	mov	r17,r6
1000bbcc:	2025883a 	mov	r18,r4
1000bbd0:	2980572e 	bgeu	r5,r6,1000bd30 <__udivdi3+0x1a0>
1000bbd4:	00bfffd4 	movui	r2,65535
1000bbd8:	282d883a 	mov	r22,r5
1000bbdc:	1180b236 	bltu	r2,r6,1000bea8 <__udivdi3+0x318>
1000bbe0:	00803fc4 	movi	r2,255
1000bbe4:	1185803a 	cmpltu	r2,r2,r6
1000bbe8:	100490fa 	slli	r2,r2,3
1000bbec:	3086d83a 	srl	r3,r6,r2
1000bbf0:	01040074 	movhi	r4,4097
1000bbf4:	2108cf04 	addi	r4,r4,9020
1000bbf8:	20c7883a 	add	r3,r4,r3
1000bbfc:	18c00003 	ldbu	r3,0(r3)
1000bc00:	1885883a 	add	r2,r3,r2
1000bc04:	00c00804 	movi	r3,32
1000bc08:	1887c83a 	sub	r3,r3,r2
1000bc0c:	18000526 	beq	r3,zero,1000bc24 <__udivdi3+0x94>
1000bc10:	80e0983a 	sll	r16,r16,r3
1000bc14:	9884d83a 	srl	r2,r19,r2
1000bc18:	30e2983a 	sll	r17,r6,r3
1000bc1c:	98e4983a 	sll	r18,r19,r3
1000bc20:	142cb03a 	or	r22,r2,r16
1000bc24:	882ad43a 	srli	r21,r17,16
1000bc28:	b009883a 	mov	r4,r22
1000bc2c:	8d3fffcc 	andi	r20,r17,65535
1000bc30:	a80b883a 	mov	r5,r21
1000bc34:	000c8ac0 	call	1000c8ac <__umodsi3>
1000bc38:	b009883a 	mov	r4,r22
1000bc3c:	a80b883a 	mov	r5,r21
1000bc40:	1027883a 	mov	r19,r2
1000bc44:	000c8480 	call	1000c848 <__udivsi3>
1000bc48:	100b883a 	mov	r5,r2
1000bc4c:	a009883a 	mov	r4,r20
1000bc50:	102d883a 	mov	r22,r2
1000bc54:	000c9040 	call	1000c904 <__mulsi3>
1000bc58:	9826943a 	slli	r19,r19,16
1000bc5c:	9006d43a 	srli	r3,r18,16
1000bc60:	1cc6b03a 	or	r3,r3,r19
1000bc64:	1880052e 	bgeu	r3,r2,1000bc7c <__udivdi3+0xec>
1000bc68:	1c47883a 	add	r3,r3,r17
1000bc6c:	b13fffc4 	addi	r4,r22,-1
1000bc70:	1c400136 	bltu	r3,r17,1000bc78 <__udivdi3+0xe8>
1000bc74:	18814236 	bltu	r3,r2,1000c180 <__udivdi3+0x5f0>
1000bc78:	202d883a 	mov	r22,r4
1000bc7c:	18a1c83a 	sub	r16,r3,r2
1000bc80:	8009883a 	mov	r4,r16
1000bc84:	a80b883a 	mov	r5,r21
1000bc88:	000c8ac0 	call	1000c8ac <__umodsi3>
1000bc8c:	1027883a 	mov	r19,r2
1000bc90:	8009883a 	mov	r4,r16
1000bc94:	a80b883a 	mov	r5,r21
1000bc98:	9826943a 	slli	r19,r19,16
1000bc9c:	000c8480 	call	1000c848 <__udivsi3>
1000bca0:	100b883a 	mov	r5,r2
1000bca4:	a009883a 	mov	r4,r20
1000bca8:	94bfffcc 	andi	r18,r18,65535
1000bcac:	1021883a 	mov	r16,r2
1000bcb0:	94e4b03a 	or	r18,r18,r19
1000bcb4:	000c9040 	call	1000c904 <__mulsi3>
1000bcb8:	9080052e 	bgeu	r18,r2,1000bcd0 <__udivdi3+0x140>
1000bcbc:	8ca5883a 	add	r18,r17,r18
1000bcc0:	80ffffc4 	addi	r3,r16,-1
1000bcc4:	94410c36 	bltu	r18,r17,1000c0f8 <__udivdi3+0x568>
1000bcc8:	90810b2e 	bgeu	r18,r2,1000c0f8 <__udivdi3+0x568>
1000bccc:	843fff84 	addi	r16,r16,-2
1000bcd0:	b004943a 	slli	r2,r22,16
1000bcd4:	0007883a 	mov	r3,zero
1000bcd8:	1404b03a 	or	r2,r2,r16
1000bcdc:	00005e06 	br	1000be58 <__udivdi3+0x2c8>
1000bce0:	29c05b36 	bltu	r5,r7,1000be50 <__udivdi3+0x2c0>
1000bce4:	00bfffd4 	movui	r2,65535
1000bce8:	11c0672e 	bgeu	r2,r7,1000be88 <__udivdi3+0x2f8>
1000bcec:	00804034 	movhi	r2,256
1000bcf0:	10bfffc4 	addi	r2,r2,-1
1000bcf4:	11c10a36 	bltu	r2,r7,1000c120 <__udivdi3+0x590>
1000bcf8:	00800404 	movi	r2,16
1000bcfc:	3886d83a 	srl	r3,r7,r2
1000bd00:	01040074 	movhi	r4,4097
1000bd04:	2108cf04 	addi	r4,r4,9020
1000bd08:	20c7883a 	add	r3,r4,r3
1000bd0c:	18c00003 	ldbu	r3,0(r3)
1000bd10:	05c00804 	movi	r23,32
1000bd14:	1885883a 	add	r2,r3,r2
1000bd18:	b8afc83a 	sub	r23,r23,r2
1000bd1c:	b800671e 	bne	r23,zero,1000bebc <__udivdi3+0x32c>
1000bd20:	3c010536 	bltu	r7,r16,1000c138 <__udivdi3+0x5a8>
1000bd24:	9985403a 	cmpgeu	r2,r19,r6
1000bd28:	0007883a 	mov	r3,zero
1000bd2c:	00004a06 	br	1000be58 <__udivdi3+0x2c8>
1000bd30:	3000041e 	bne	r6,zero,1000bd44 <__udivdi3+0x1b4>
1000bd34:	000b883a 	mov	r5,zero
1000bd38:	01000044 	movi	r4,1
1000bd3c:	000c8480 	call	1000c848 <__udivsi3>
1000bd40:	1023883a 	mov	r17,r2
1000bd44:	00bfffd4 	movui	r2,65535
1000bd48:	1440532e 	bgeu	r2,r17,1000be98 <__udivdi3+0x308>
1000bd4c:	00804034 	movhi	r2,256
1000bd50:	10bfffc4 	addi	r2,r2,-1
1000bd54:	1440f436 	bltu	r2,r17,1000c128 <__udivdi3+0x598>
1000bd58:	00800404 	movi	r2,16
1000bd5c:	8886d83a 	srl	r3,r17,r2
1000bd60:	01040074 	movhi	r4,4097
1000bd64:	2108cf04 	addi	r4,r4,9020
1000bd68:	20c7883a 	add	r3,r4,r3
1000bd6c:	18c00003 	ldbu	r3,0(r3)
1000bd70:	1885883a 	add	r2,r3,r2
1000bd74:	00c00804 	movi	r3,32
1000bd78:	1887c83a 	sub	r3,r3,r2
1000bd7c:	1800a51e 	bne	r3,zero,1000c014 <__udivdi3+0x484>
1000bd80:	882ad43a 	srli	r21,r17,16
1000bd84:	8461c83a 	sub	r16,r16,r17
1000bd88:	8d3fffcc 	andi	r20,r17,65535
1000bd8c:	00c00044 	movi	r3,1
1000bd90:	a80b883a 	mov	r5,r21
1000bd94:	8009883a 	mov	r4,r16
1000bd98:	d8c00115 	stw	r3,4(sp)
1000bd9c:	000c8ac0 	call	1000c8ac <__umodsi3>
1000bda0:	a80b883a 	mov	r5,r21
1000bda4:	8009883a 	mov	r4,r16
1000bda8:	1027883a 	mov	r19,r2
1000bdac:	000c8480 	call	1000c848 <__udivsi3>
1000bdb0:	a00b883a 	mov	r5,r20
1000bdb4:	1009883a 	mov	r4,r2
1000bdb8:	102d883a 	mov	r22,r2
1000bdbc:	000c9040 	call	1000c904 <__mulsi3>
1000bdc0:	9826943a 	slli	r19,r19,16
1000bdc4:	900ed43a 	srli	r7,r18,16
1000bdc8:	d8c00117 	ldw	r3,4(sp)
1000bdcc:	3cceb03a 	or	r7,r7,r19
1000bdd0:	3880052e 	bgeu	r7,r2,1000bde8 <__udivdi3+0x258>
1000bdd4:	3c4f883a 	add	r7,r7,r17
1000bdd8:	b13fffc4 	addi	r4,r22,-1
1000bddc:	3c400136 	bltu	r7,r17,1000bde4 <__udivdi3+0x254>
1000bde0:	3880e436 	bltu	r7,r2,1000c174 <__udivdi3+0x5e4>
1000bde4:	202d883a 	mov	r22,r4
1000bde8:	38a1c83a 	sub	r16,r7,r2
1000bdec:	8009883a 	mov	r4,r16
1000bdf0:	a80b883a 	mov	r5,r21
1000bdf4:	d8c00115 	stw	r3,4(sp)
1000bdf8:	000c8ac0 	call	1000c8ac <__umodsi3>
1000bdfc:	1027883a 	mov	r19,r2
1000be00:	8009883a 	mov	r4,r16
1000be04:	a80b883a 	mov	r5,r21
1000be08:	9826943a 	slli	r19,r19,16
1000be0c:	000c8480 	call	1000c848 <__udivsi3>
1000be10:	a00b883a 	mov	r5,r20
1000be14:	1009883a 	mov	r4,r2
1000be18:	94bfffcc 	andi	r18,r18,65535
1000be1c:	1021883a 	mov	r16,r2
1000be20:	94e4b03a 	or	r18,r18,r19
1000be24:	000c9040 	call	1000c904 <__mulsi3>
1000be28:	d8c00117 	ldw	r3,4(sp)
1000be2c:	9080052e 	bgeu	r18,r2,1000be44 <__udivdi3+0x2b4>
1000be30:	8ca5883a 	add	r18,r17,r18
1000be34:	813fffc4 	addi	r4,r16,-1
1000be38:	9440ad36 	bltu	r18,r17,1000c0f0 <__udivdi3+0x560>
1000be3c:	9080ac2e 	bgeu	r18,r2,1000c0f0 <__udivdi3+0x560>
1000be40:	843fff84 	addi	r16,r16,-2
1000be44:	b004943a 	slli	r2,r22,16
1000be48:	1404b03a 	or	r2,r2,r16
1000be4c:	00000206 	br	1000be58 <__udivdi3+0x2c8>
1000be50:	0007883a 	mov	r3,zero
1000be54:	0005883a 	mov	r2,zero
1000be58:	dfc00b17 	ldw	ra,44(sp)
1000be5c:	df000a17 	ldw	fp,40(sp)
1000be60:	ddc00917 	ldw	r23,36(sp)
1000be64:	dd800817 	ldw	r22,32(sp)
1000be68:	dd400717 	ldw	r21,28(sp)
1000be6c:	dd000617 	ldw	r20,24(sp)
1000be70:	dcc00517 	ldw	r19,20(sp)
1000be74:	dc800417 	ldw	r18,16(sp)
1000be78:	dc400317 	ldw	r17,12(sp)
1000be7c:	dc000217 	ldw	r16,8(sp)
1000be80:	dec00c04 	addi	sp,sp,48
1000be84:	f800283a 	ret
1000be88:	00803fc4 	movi	r2,255
1000be8c:	11c5803a 	cmpltu	r2,r2,r7
1000be90:	100490fa 	slli	r2,r2,3
1000be94:	003f9906 	br	1000bcfc <__alt_data_end+0xf800bcfc>
1000be98:	00803fc4 	movi	r2,255
1000be9c:	1445803a 	cmpltu	r2,r2,r17
1000bea0:	100490fa 	slli	r2,r2,3
1000bea4:	003fad06 	br	1000bd5c <__alt_data_end+0xf800bd5c>
1000bea8:	00804034 	movhi	r2,256
1000beac:	10bfffc4 	addi	r2,r2,-1
1000beb0:	11809f36 	bltu	r2,r6,1000c130 <__udivdi3+0x5a0>
1000beb4:	00800404 	movi	r2,16
1000beb8:	003f4c06 	br	1000bbec <__alt_data_end+0xf800bbec>
1000bebc:	3dce983a 	sll	r7,r7,r23
1000bec0:	30b8d83a 	srl	fp,r6,r2
1000bec4:	80a2d83a 	srl	r17,r16,r2
1000bec8:	35cc983a 	sll	r6,r6,r23
1000becc:	3f38b03a 	or	fp,r7,fp
1000bed0:	e024d43a 	srli	r18,fp,16
1000bed4:	9884d83a 	srl	r2,r19,r2
1000bed8:	85e0983a 	sll	r16,r16,r23
1000bedc:	8809883a 	mov	r4,r17
1000bee0:	900b883a 	mov	r5,r18
1000bee4:	d9800015 	stw	r6,0(sp)
1000bee8:	1420b03a 	or	r16,r2,r16
1000beec:	000c8ac0 	call	1000c8ac <__umodsi3>
1000bef0:	900b883a 	mov	r5,r18
1000bef4:	8809883a 	mov	r4,r17
1000bef8:	1029883a 	mov	r20,r2
1000befc:	e5bfffcc 	andi	r22,fp,65535
1000bf00:	000c8480 	call	1000c848 <__udivsi3>
1000bf04:	100b883a 	mov	r5,r2
1000bf08:	b009883a 	mov	r4,r22
1000bf0c:	102b883a 	mov	r21,r2
1000bf10:	000c9040 	call	1000c904 <__mulsi3>
1000bf14:	a028943a 	slli	r20,r20,16
1000bf18:	8006d43a 	srli	r3,r16,16
1000bf1c:	1d06b03a 	or	r3,r3,r20
1000bf20:	1880042e 	bgeu	r3,r2,1000bf34 <__udivdi3+0x3a4>
1000bf24:	1f07883a 	add	r3,r3,fp
1000bf28:	a93fffc4 	addi	r4,r21,-1
1000bf2c:	1f00892e 	bgeu	r3,fp,1000c154 <__udivdi3+0x5c4>
1000bf30:	202b883a 	mov	r21,r4
1000bf34:	18a3c83a 	sub	r17,r3,r2
1000bf38:	8809883a 	mov	r4,r17
1000bf3c:	900b883a 	mov	r5,r18
1000bf40:	000c8ac0 	call	1000c8ac <__umodsi3>
1000bf44:	1029883a 	mov	r20,r2
1000bf48:	8809883a 	mov	r4,r17
1000bf4c:	900b883a 	mov	r5,r18
1000bf50:	a028943a 	slli	r20,r20,16
1000bf54:	000c8480 	call	1000c848 <__udivsi3>
1000bf58:	100b883a 	mov	r5,r2
1000bf5c:	b009883a 	mov	r4,r22
1000bf60:	843fffcc 	andi	r16,r16,65535
1000bf64:	1023883a 	mov	r17,r2
1000bf68:	8520b03a 	or	r16,r16,r20
1000bf6c:	000c9040 	call	1000c904 <__mulsi3>
1000bf70:	8080042e 	bgeu	r16,r2,1000bf84 <__udivdi3+0x3f4>
1000bf74:	8721883a 	add	r16,r16,fp
1000bf78:	88ffffc4 	addi	r3,r17,-1
1000bf7c:	8700712e 	bgeu	r16,fp,1000c144 <__udivdi3+0x5b4>
1000bf80:	1823883a 	mov	r17,r3
1000bf84:	a80e943a 	slli	r7,r21,16
1000bf88:	d8c00017 	ldw	r3,0(sp)
1000bf8c:	80a1c83a 	sub	r16,r16,r2
1000bf90:	3c64b03a 	or	r18,r7,r17
1000bf94:	1d3fffcc 	andi	r20,r3,65535
1000bf98:	9022d43a 	srli	r17,r18,16
1000bf9c:	95bfffcc 	andi	r22,r18,65535
1000bfa0:	a00b883a 	mov	r5,r20
1000bfa4:	b009883a 	mov	r4,r22
1000bfa8:	182ad43a 	srli	r21,r3,16
1000bfac:	000c9040 	call	1000c904 <__mulsi3>
1000bfb0:	a00b883a 	mov	r5,r20
1000bfb4:	8809883a 	mov	r4,r17
1000bfb8:	1039883a 	mov	fp,r2
1000bfbc:	000c9040 	call	1000c904 <__mulsi3>
1000bfc0:	8809883a 	mov	r4,r17
1000bfc4:	a80b883a 	mov	r5,r21
1000bfc8:	1029883a 	mov	r20,r2
1000bfcc:	000c9040 	call	1000c904 <__mulsi3>
1000bfd0:	a80b883a 	mov	r5,r21
1000bfd4:	b009883a 	mov	r4,r22
1000bfd8:	1023883a 	mov	r17,r2
1000bfdc:	000c9040 	call	1000c904 <__mulsi3>
1000bfe0:	e006d43a 	srli	r3,fp,16
1000bfe4:	1505883a 	add	r2,r2,r20
1000bfe8:	1887883a 	add	r3,r3,r2
1000bfec:	1d00022e 	bgeu	r3,r20,1000bff8 <__udivdi3+0x468>
1000bff0:	00800074 	movhi	r2,1
1000bff4:	88a3883a 	add	r17,r17,r2
1000bff8:	1804d43a 	srli	r2,r3,16
1000bffc:	1463883a 	add	r17,r2,r17
1000c000:	84404436 	bltu	r16,r17,1000c114 <__udivdi3+0x584>
1000c004:	84403e26 	beq	r16,r17,1000c100 <__udivdi3+0x570>
1000c008:	9005883a 	mov	r2,r18
1000c00c:	0007883a 	mov	r3,zero
1000c010:	003f9106 	br	1000be58 <__alt_data_end+0xf800be58>
1000c014:	88e2983a 	sll	r17,r17,r3
1000c018:	80aed83a 	srl	r23,r16,r2
1000c01c:	80e0983a 	sll	r16,r16,r3
1000c020:	882ad43a 	srli	r21,r17,16
1000c024:	9884d83a 	srl	r2,r19,r2
1000c028:	b809883a 	mov	r4,r23
1000c02c:	a80b883a 	mov	r5,r21
1000c030:	98e4983a 	sll	r18,r19,r3
1000c034:	142cb03a 	or	r22,r2,r16
1000c038:	000c8ac0 	call	1000c8ac <__umodsi3>
1000c03c:	b809883a 	mov	r4,r23
1000c040:	a80b883a 	mov	r5,r21
1000c044:	1027883a 	mov	r19,r2
1000c048:	8d3fffcc 	andi	r20,r17,65535
1000c04c:	000c8480 	call	1000c848 <__udivsi3>
1000c050:	a009883a 	mov	r4,r20
1000c054:	100b883a 	mov	r5,r2
1000c058:	102f883a 	mov	r23,r2
1000c05c:	000c9040 	call	1000c904 <__mulsi3>
1000c060:	9826943a 	slli	r19,r19,16
1000c064:	b008d43a 	srli	r4,r22,16
1000c068:	24c8b03a 	or	r4,r4,r19
1000c06c:	2080062e 	bgeu	r4,r2,1000c088 <__udivdi3+0x4f8>
1000c070:	2449883a 	add	r4,r4,r17
1000c074:	b8ffffc4 	addi	r3,r23,-1
1000c078:	24403c36 	bltu	r4,r17,1000c16c <__udivdi3+0x5dc>
1000c07c:	20803b2e 	bgeu	r4,r2,1000c16c <__udivdi3+0x5dc>
1000c080:	bdffff84 	addi	r23,r23,-2
1000c084:	2449883a 	add	r4,r4,r17
1000c088:	20a1c83a 	sub	r16,r4,r2
1000c08c:	a80b883a 	mov	r5,r21
1000c090:	8009883a 	mov	r4,r16
1000c094:	000c8ac0 	call	1000c8ac <__umodsi3>
1000c098:	a80b883a 	mov	r5,r21
1000c09c:	8009883a 	mov	r4,r16
1000c0a0:	1027883a 	mov	r19,r2
1000c0a4:	000c8480 	call	1000c848 <__udivsi3>
1000c0a8:	a009883a 	mov	r4,r20
1000c0ac:	100b883a 	mov	r5,r2
1000c0b0:	9826943a 	slli	r19,r19,16
1000c0b4:	1039883a 	mov	fp,r2
1000c0b8:	000c9040 	call	1000c904 <__mulsi3>
1000c0bc:	b13fffcc 	andi	r4,r22,65535
1000c0c0:	24c8b03a 	or	r4,r4,r19
1000c0c4:	2080062e 	bgeu	r4,r2,1000c0e0 <__udivdi3+0x550>
1000c0c8:	2449883a 	add	r4,r4,r17
1000c0cc:	e0ffffc4 	addi	r3,fp,-1
1000c0d0:	24402436 	bltu	r4,r17,1000c164 <__udivdi3+0x5d4>
1000c0d4:	2080232e 	bgeu	r4,r2,1000c164 <__udivdi3+0x5d4>
1000c0d8:	e73fff84 	addi	fp,fp,-2
1000c0dc:	2449883a 	add	r4,r4,r17
1000c0e0:	b82e943a 	slli	r23,r23,16
1000c0e4:	20a1c83a 	sub	r16,r4,r2
1000c0e8:	bf06b03a 	or	r3,r23,fp
1000c0ec:	003f2806 	br	1000bd90 <__alt_data_end+0xf800bd90>
1000c0f0:	2021883a 	mov	r16,r4
1000c0f4:	003f5306 	br	1000be44 <__alt_data_end+0xf800be44>
1000c0f8:	1821883a 	mov	r16,r3
1000c0fc:	003ef406 	br	1000bcd0 <__alt_data_end+0xf800bcd0>
1000c100:	1806943a 	slli	r3,r3,16
1000c104:	9de6983a 	sll	r19,r19,r23
1000c108:	e73fffcc 	andi	fp,fp,65535
1000c10c:	1f07883a 	add	r3,r3,fp
1000c110:	98ffbd2e 	bgeu	r19,r3,1000c008 <__alt_data_end+0xf800c008>
1000c114:	90bfffc4 	addi	r2,r18,-1
1000c118:	0007883a 	mov	r3,zero
1000c11c:	003f4e06 	br	1000be58 <__alt_data_end+0xf800be58>
1000c120:	00800604 	movi	r2,24
1000c124:	003ef506 	br	1000bcfc <__alt_data_end+0xf800bcfc>
1000c128:	00800604 	movi	r2,24
1000c12c:	003f0b06 	br	1000bd5c <__alt_data_end+0xf800bd5c>
1000c130:	00800604 	movi	r2,24
1000c134:	003ead06 	br	1000bbec <__alt_data_end+0xf800bbec>
1000c138:	0007883a 	mov	r3,zero
1000c13c:	00800044 	movi	r2,1
1000c140:	003f4506 	br	1000be58 <__alt_data_end+0xf800be58>
1000c144:	80bf8e2e 	bgeu	r16,r2,1000bf80 <__alt_data_end+0xf800bf80>
1000c148:	8c7fff84 	addi	r17,r17,-2
1000c14c:	8721883a 	add	r16,r16,fp
1000c150:	003f8c06 	br	1000bf84 <__alt_data_end+0xf800bf84>
1000c154:	18bf762e 	bgeu	r3,r2,1000bf30 <__alt_data_end+0xf800bf30>
1000c158:	ad7fff84 	addi	r21,r21,-2
1000c15c:	1f07883a 	add	r3,r3,fp
1000c160:	003f7406 	br	1000bf34 <__alt_data_end+0xf800bf34>
1000c164:	1839883a 	mov	fp,r3
1000c168:	003fdd06 	br	1000c0e0 <__alt_data_end+0xf800c0e0>
1000c16c:	182f883a 	mov	r23,r3
1000c170:	003fc506 	br	1000c088 <__alt_data_end+0xf800c088>
1000c174:	b5bfff84 	addi	r22,r22,-2
1000c178:	3c4f883a 	add	r7,r7,r17
1000c17c:	003f1a06 	br	1000bde8 <__alt_data_end+0xf800bde8>
1000c180:	b5bfff84 	addi	r22,r22,-2
1000c184:	1c47883a 	add	r3,r3,r17
1000c188:	003ebc06 	br	1000bc7c <__alt_data_end+0xf800bc7c>

1000c18c <__umoddi3>:
1000c18c:	defff304 	addi	sp,sp,-52
1000c190:	df000b15 	stw	fp,44(sp)
1000c194:	dc400415 	stw	r17,16(sp)
1000c198:	dc000315 	stw	r16,12(sp)
1000c19c:	dfc00c15 	stw	ra,48(sp)
1000c1a0:	ddc00a15 	stw	r23,40(sp)
1000c1a4:	dd800915 	stw	r22,36(sp)
1000c1a8:	dd400815 	stw	r21,32(sp)
1000c1ac:	dd000715 	stw	r20,28(sp)
1000c1b0:	dcc00615 	stw	r19,24(sp)
1000c1b4:	dc800515 	stw	r18,20(sp)
1000c1b8:	2021883a 	mov	r16,r4
1000c1bc:	2823883a 	mov	r17,r5
1000c1c0:	2839883a 	mov	fp,r5
1000c1c4:	3800401e 	bne	r7,zero,1000c2c8 <__umoddi3+0x13c>
1000c1c8:	3027883a 	mov	r19,r6
1000c1cc:	2029883a 	mov	r20,r4
1000c1d0:	2980552e 	bgeu	r5,r6,1000c328 <__umoddi3+0x19c>
1000c1d4:	00bfffd4 	movui	r2,65535
1000c1d8:	1180a236 	bltu	r2,r6,1000c464 <__umoddi3+0x2d8>
1000c1dc:	01003fc4 	movi	r4,255
1000c1e0:	2189803a 	cmpltu	r4,r4,r6
1000c1e4:	200890fa 	slli	r4,r4,3
1000c1e8:	3104d83a 	srl	r2,r6,r4
1000c1ec:	00c40074 	movhi	r3,4097
1000c1f0:	18c8cf04 	addi	r3,r3,9020
1000c1f4:	1885883a 	add	r2,r3,r2
1000c1f8:	10c00003 	ldbu	r3,0(r2)
1000c1fc:	00800804 	movi	r2,32
1000c200:	1909883a 	add	r4,r3,r4
1000c204:	1125c83a 	sub	r18,r2,r4
1000c208:	90000526 	beq	r18,zero,1000c220 <__umoddi3+0x94>
1000c20c:	8ca2983a 	sll	r17,r17,r18
1000c210:	8108d83a 	srl	r4,r16,r4
1000c214:	34a6983a 	sll	r19,r6,r18
1000c218:	84a8983a 	sll	r20,r16,r18
1000c21c:	2478b03a 	or	fp,r4,r17
1000c220:	982cd43a 	srli	r22,r19,16
1000c224:	e009883a 	mov	r4,fp
1000c228:	9dffffcc 	andi	r23,r19,65535
1000c22c:	b00b883a 	mov	r5,r22
1000c230:	000c8ac0 	call	1000c8ac <__umodsi3>
1000c234:	b00b883a 	mov	r5,r22
1000c238:	e009883a 	mov	r4,fp
1000c23c:	102b883a 	mov	r21,r2
1000c240:	000c8480 	call	1000c848 <__udivsi3>
1000c244:	100b883a 	mov	r5,r2
1000c248:	b809883a 	mov	r4,r23
1000c24c:	000c9040 	call	1000c904 <__mulsi3>
1000c250:	a82a943a 	slli	r21,r21,16
1000c254:	a006d43a 	srli	r3,r20,16
1000c258:	1d46b03a 	or	r3,r3,r21
1000c25c:	1880032e 	bgeu	r3,r2,1000c26c <__umoddi3+0xe0>
1000c260:	1cc7883a 	add	r3,r3,r19
1000c264:	1cc00136 	bltu	r3,r19,1000c26c <__umoddi3+0xe0>
1000c268:	18813136 	bltu	r3,r2,1000c730 <__umoddi3+0x5a4>
1000c26c:	18a1c83a 	sub	r16,r3,r2
1000c270:	b00b883a 	mov	r5,r22
1000c274:	8009883a 	mov	r4,r16
1000c278:	000c8ac0 	call	1000c8ac <__umodsi3>
1000c27c:	b00b883a 	mov	r5,r22
1000c280:	8009883a 	mov	r4,r16
1000c284:	1023883a 	mov	r17,r2
1000c288:	000c8480 	call	1000c848 <__udivsi3>
1000c28c:	100b883a 	mov	r5,r2
1000c290:	b809883a 	mov	r4,r23
1000c294:	8822943a 	slli	r17,r17,16
1000c298:	000c9040 	call	1000c904 <__mulsi3>
1000c29c:	a0ffffcc 	andi	r3,r20,65535
1000c2a0:	1c46b03a 	or	r3,r3,r17
1000c2a4:	1880042e 	bgeu	r3,r2,1000c2b8 <__umoddi3+0x12c>
1000c2a8:	1cc7883a 	add	r3,r3,r19
1000c2ac:	1cc00236 	bltu	r3,r19,1000c2b8 <__umoddi3+0x12c>
1000c2b0:	1880012e 	bgeu	r3,r2,1000c2b8 <__umoddi3+0x12c>
1000c2b4:	1cc7883a 	add	r3,r3,r19
1000c2b8:	1885c83a 	sub	r2,r3,r2
1000c2bc:	1484d83a 	srl	r2,r2,r18
1000c2c0:	0007883a 	mov	r3,zero
1000c2c4:	00005306 	br	1000c414 <__umoddi3+0x288>
1000c2c8:	29c05036 	bltu	r5,r7,1000c40c <__umoddi3+0x280>
1000c2cc:	00bfffd4 	movui	r2,65535
1000c2d0:	11c05c2e 	bgeu	r2,r7,1000c444 <__umoddi3+0x2b8>
1000c2d4:	00804034 	movhi	r2,256
1000c2d8:	10bfffc4 	addi	r2,r2,-1
1000c2dc:	11c10636 	bltu	r2,r7,1000c6f8 <__umoddi3+0x56c>
1000c2e0:	01000404 	movi	r4,16
1000c2e4:	3904d83a 	srl	r2,r7,r4
1000c2e8:	00c40074 	movhi	r3,4097
1000c2ec:	18c8cf04 	addi	r3,r3,9020
1000c2f0:	1885883a 	add	r2,r3,r2
1000c2f4:	14c00003 	ldbu	r19,0(r2)
1000c2f8:	00c00804 	movi	r3,32
1000c2fc:	9927883a 	add	r19,r19,r4
1000c300:	1ce9c83a 	sub	r20,r3,r19
1000c304:	a0005c1e 	bne	r20,zero,1000c478 <__umoddi3+0x2ec>
1000c308:	3c400136 	bltu	r7,r17,1000c310 <__umoddi3+0x184>
1000c30c:	81810a36 	bltu	r16,r6,1000c738 <__umoddi3+0x5ac>
1000c310:	8185c83a 	sub	r2,r16,r6
1000c314:	89e3c83a 	sub	r17,r17,r7
1000c318:	8089803a 	cmpltu	r4,r16,r2
1000c31c:	8939c83a 	sub	fp,r17,r4
1000c320:	e007883a 	mov	r3,fp
1000c324:	00003b06 	br	1000c414 <__umoddi3+0x288>
1000c328:	3000041e 	bne	r6,zero,1000c33c <__umoddi3+0x1b0>
1000c32c:	000b883a 	mov	r5,zero
1000c330:	01000044 	movi	r4,1
1000c334:	000c8480 	call	1000c848 <__udivsi3>
1000c338:	1027883a 	mov	r19,r2
1000c33c:	00bfffd4 	movui	r2,65535
1000c340:	14c0442e 	bgeu	r2,r19,1000c454 <__umoddi3+0x2c8>
1000c344:	00804034 	movhi	r2,256
1000c348:	10bfffc4 	addi	r2,r2,-1
1000c34c:	14c0ec36 	bltu	r2,r19,1000c700 <__umoddi3+0x574>
1000c350:	00800404 	movi	r2,16
1000c354:	9886d83a 	srl	r3,r19,r2
1000c358:	01040074 	movhi	r4,4097
1000c35c:	2108cf04 	addi	r4,r4,9020
1000c360:	20c7883a 	add	r3,r4,r3
1000c364:	18c00003 	ldbu	r3,0(r3)
1000c368:	1887883a 	add	r3,r3,r2
1000c36c:	00800804 	movi	r2,32
1000c370:	10e5c83a 	sub	r18,r2,r3
1000c374:	9000ab1e 	bne	r18,zero,1000c624 <__umoddi3+0x498>
1000c378:	982cd43a 	srli	r22,r19,16
1000c37c:	8ce3c83a 	sub	r17,r17,r19
1000c380:	9dffffcc 	andi	r23,r19,65535
1000c384:	b00b883a 	mov	r5,r22
1000c388:	8809883a 	mov	r4,r17
1000c38c:	000c8ac0 	call	1000c8ac <__umodsi3>
1000c390:	b00b883a 	mov	r5,r22
1000c394:	8809883a 	mov	r4,r17
1000c398:	102b883a 	mov	r21,r2
1000c39c:	000c8480 	call	1000c848 <__udivsi3>
1000c3a0:	b80b883a 	mov	r5,r23
1000c3a4:	1009883a 	mov	r4,r2
1000c3a8:	000c9040 	call	1000c904 <__mulsi3>
1000c3ac:	a82a943a 	slli	r21,r21,16
1000c3b0:	a006d43a 	srli	r3,r20,16
1000c3b4:	1d46b03a 	or	r3,r3,r21
1000c3b8:	1880042e 	bgeu	r3,r2,1000c3cc <__umoddi3+0x240>
1000c3bc:	1cc7883a 	add	r3,r3,r19
1000c3c0:	1cc00236 	bltu	r3,r19,1000c3cc <__umoddi3+0x240>
1000c3c4:	1880012e 	bgeu	r3,r2,1000c3cc <__umoddi3+0x240>
1000c3c8:	1cc7883a 	add	r3,r3,r19
1000c3cc:	18a1c83a 	sub	r16,r3,r2
1000c3d0:	b00b883a 	mov	r5,r22
1000c3d4:	8009883a 	mov	r4,r16
1000c3d8:	000c8ac0 	call	1000c8ac <__umodsi3>
1000c3dc:	1023883a 	mov	r17,r2
1000c3e0:	b00b883a 	mov	r5,r22
1000c3e4:	8009883a 	mov	r4,r16
1000c3e8:	000c8480 	call	1000c848 <__udivsi3>
1000c3ec:	8822943a 	slli	r17,r17,16
1000c3f0:	b80b883a 	mov	r5,r23
1000c3f4:	1009883a 	mov	r4,r2
1000c3f8:	000c9040 	call	1000c904 <__mulsi3>
1000c3fc:	a53fffcc 	andi	r20,r20,65535
1000c400:	a446b03a 	or	r3,r20,r17
1000c404:	18bfac2e 	bgeu	r3,r2,1000c2b8 <__alt_data_end+0xf800c2b8>
1000c408:	003fa706 	br	1000c2a8 <__alt_data_end+0xf800c2a8>
1000c40c:	2005883a 	mov	r2,r4
1000c410:	2807883a 	mov	r3,r5
1000c414:	dfc00c17 	ldw	ra,48(sp)
1000c418:	df000b17 	ldw	fp,44(sp)
1000c41c:	ddc00a17 	ldw	r23,40(sp)
1000c420:	dd800917 	ldw	r22,36(sp)
1000c424:	dd400817 	ldw	r21,32(sp)
1000c428:	dd000717 	ldw	r20,28(sp)
1000c42c:	dcc00617 	ldw	r19,24(sp)
1000c430:	dc800517 	ldw	r18,20(sp)
1000c434:	dc400417 	ldw	r17,16(sp)
1000c438:	dc000317 	ldw	r16,12(sp)
1000c43c:	dec00d04 	addi	sp,sp,52
1000c440:	f800283a 	ret
1000c444:	04c03fc4 	movi	r19,255
1000c448:	99c9803a 	cmpltu	r4,r19,r7
1000c44c:	200890fa 	slli	r4,r4,3
1000c450:	003fa406 	br	1000c2e4 <__alt_data_end+0xf800c2e4>
1000c454:	00803fc4 	movi	r2,255
1000c458:	14c5803a 	cmpltu	r2,r2,r19
1000c45c:	100490fa 	slli	r2,r2,3
1000c460:	003fbc06 	br	1000c354 <__alt_data_end+0xf800c354>
1000c464:	00804034 	movhi	r2,256
1000c468:	10bfffc4 	addi	r2,r2,-1
1000c46c:	1180a636 	bltu	r2,r6,1000c708 <__umoddi3+0x57c>
1000c470:	01000404 	movi	r4,16
1000c474:	003f5c06 	br	1000c1e8 <__alt_data_end+0xf800c1e8>
1000c478:	3d0e983a 	sll	r7,r7,r20
1000c47c:	34ead83a 	srl	r21,r6,r19
1000c480:	8cc6d83a 	srl	r3,r17,r19
1000c484:	8d10983a 	sll	r8,r17,r20
1000c488:	3d6ab03a 	or	r21,r7,r21
1000c48c:	a82cd43a 	srli	r22,r21,16
1000c490:	84e2d83a 	srl	r17,r16,r19
1000c494:	1809883a 	mov	r4,r3
1000c498:	b00b883a 	mov	r5,r22
1000c49c:	8a22b03a 	or	r17,r17,r8
1000c4a0:	3524983a 	sll	r18,r6,r20
1000c4a4:	dc400015 	stw	r17,0(sp)
1000c4a8:	d8c00115 	stw	r3,4(sp)
1000c4ac:	000c8ac0 	call	1000c8ac <__umodsi3>
1000c4b0:	d8c00117 	ldw	r3,4(sp)
1000c4b4:	b00b883a 	mov	r5,r22
1000c4b8:	1039883a 	mov	fp,r2
1000c4bc:	1809883a 	mov	r4,r3
1000c4c0:	000c8480 	call	1000c848 <__udivsi3>
1000c4c4:	adffffcc 	andi	r23,r21,65535
1000c4c8:	100b883a 	mov	r5,r2
1000c4cc:	b809883a 	mov	r4,r23
1000c4d0:	1023883a 	mov	r17,r2
1000c4d4:	000c9040 	call	1000c904 <__mulsi3>
1000c4d8:	d9400017 	ldw	r5,0(sp)
1000c4dc:	e008943a 	slli	r4,fp,16
1000c4e0:	8520983a 	sll	r16,r16,r20
1000c4e4:	2806d43a 	srli	r3,r5,16
1000c4e8:	1906b03a 	or	r3,r3,r4
1000c4ec:	1880042e 	bgeu	r3,r2,1000c500 <__umoddi3+0x374>
1000c4f0:	1d47883a 	add	r3,r3,r21
1000c4f4:	893fffc4 	addi	r4,r17,-1
1000c4f8:	1d40892e 	bgeu	r3,r21,1000c720 <__umoddi3+0x594>
1000c4fc:	2023883a 	mov	r17,r4
1000c500:	18b9c83a 	sub	fp,r3,r2
1000c504:	b00b883a 	mov	r5,r22
1000c508:	e009883a 	mov	r4,fp
1000c50c:	000c8ac0 	call	1000c8ac <__umodsi3>
1000c510:	b00b883a 	mov	r5,r22
1000c514:	e009883a 	mov	r4,fp
1000c518:	d8800215 	stw	r2,8(sp)
1000c51c:	000c8480 	call	1000c848 <__udivsi3>
1000c520:	100b883a 	mov	r5,r2
1000c524:	b809883a 	mov	r4,r23
1000c528:	102d883a 	mov	r22,r2
1000c52c:	000c9040 	call	1000c904 <__mulsi3>
1000c530:	d9800217 	ldw	r6,8(sp)
1000c534:	d8c00017 	ldw	r3,0(sp)
1000c538:	300c943a 	slli	r6,r6,16
1000c53c:	1a3fffcc 	andi	r8,r3,65535
1000c540:	4190b03a 	or	r8,r8,r6
1000c544:	4080042e 	bgeu	r8,r2,1000c558 <__umoddi3+0x3cc>
1000c548:	4551883a 	add	r8,r8,r21
1000c54c:	b0ffffc4 	addi	r3,r22,-1
1000c550:	45406f2e 	bgeu	r8,r21,1000c710 <__umoddi3+0x584>
1000c554:	182d883a 	mov	r22,r3
1000c558:	880e943a 	slli	r7,r17,16
1000c55c:	9006d43a 	srli	r3,r18,16
1000c560:	91bfffcc 	andi	r6,r18,65535
1000c564:	3dacb03a 	or	r22,r7,r22
1000c568:	b02ed43a 	srli	r23,r22,16
1000c56c:	b5bfffcc 	andi	r22,r22,65535
1000c570:	300b883a 	mov	r5,r6
1000c574:	b009883a 	mov	r4,r22
1000c578:	40a3c83a 	sub	r17,r8,r2
1000c57c:	d8c00115 	stw	r3,4(sp)
1000c580:	d9800215 	stw	r6,8(sp)
1000c584:	000c9040 	call	1000c904 <__mulsi3>
1000c588:	d9800217 	ldw	r6,8(sp)
1000c58c:	b809883a 	mov	r4,r23
1000c590:	1039883a 	mov	fp,r2
1000c594:	300b883a 	mov	r5,r6
1000c598:	000c9040 	call	1000c904 <__mulsi3>
1000c59c:	d8c00117 	ldw	r3,4(sp)
1000c5a0:	b809883a 	mov	r4,r23
1000c5a4:	d8800215 	stw	r2,8(sp)
1000c5a8:	180b883a 	mov	r5,r3
1000c5ac:	000c9040 	call	1000c904 <__mulsi3>
1000c5b0:	d8c00117 	ldw	r3,4(sp)
1000c5b4:	b009883a 	mov	r4,r22
1000c5b8:	102f883a 	mov	r23,r2
1000c5bc:	180b883a 	mov	r5,r3
1000c5c0:	000c9040 	call	1000c904 <__mulsi3>
1000c5c4:	d9800217 	ldw	r6,8(sp)
1000c5c8:	e006d43a 	srli	r3,fp,16
1000c5cc:	1185883a 	add	r2,r2,r6
1000c5d0:	1885883a 	add	r2,r3,r2
1000c5d4:	1180022e 	bgeu	r2,r6,1000c5e0 <__umoddi3+0x454>
1000c5d8:	00c00074 	movhi	r3,1
1000c5dc:	b8ef883a 	add	r23,r23,r3
1000c5e0:	1006d43a 	srli	r3,r2,16
1000c5e4:	1004943a 	slli	r2,r2,16
1000c5e8:	e73fffcc 	andi	fp,fp,65535
1000c5ec:	1dc7883a 	add	r3,r3,r23
1000c5f0:	1739883a 	add	fp,r2,fp
1000c5f4:	88c03a36 	bltu	r17,r3,1000c6e0 <__umoddi3+0x554>
1000c5f8:	88c05126 	beq	r17,r3,1000c740 <__umoddi3+0x5b4>
1000c5fc:	88c9c83a 	sub	r4,r17,r3
1000c600:	e00f883a 	mov	r7,fp
1000c604:	81cfc83a 	sub	r7,r16,r7
1000c608:	81c7803a 	cmpltu	r3,r16,r7
1000c60c:	20c7c83a 	sub	r3,r4,r3
1000c610:	1cc4983a 	sll	r2,r3,r19
1000c614:	3d0ed83a 	srl	r7,r7,r20
1000c618:	1d06d83a 	srl	r3,r3,r20
1000c61c:	11c4b03a 	or	r2,r2,r7
1000c620:	003f7c06 	br	1000c414 <__alt_data_end+0xf800c414>
1000c624:	9ca6983a 	sll	r19,r19,r18
1000c628:	88f8d83a 	srl	fp,r17,r3
1000c62c:	80c4d83a 	srl	r2,r16,r3
1000c630:	982cd43a 	srli	r22,r19,16
1000c634:	8ca2983a 	sll	r17,r17,r18
1000c638:	e009883a 	mov	r4,fp
1000c63c:	b00b883a 	mov	r5,r22
1000c640:	146ab03a 	or	r21,r2,r17
1000c644:	000c8ac0 	call	1000c8ac <__umodsi3>
1000c648:	b00b883a 	mov	r5,r22
1000c64c:	e009883a 	mov	r4,fp
1000c650:	1029883a 	mov	r20,r2
1000c654:	9dffffcc 	andi	r23,r19,65535
1000c658:	000c8480 	call	1000c848 <__udivsi3>
1000c65c:	b809883a 	mov	r4,r23
1000c660:	100b883a 	mov	r5,r2
1000c664:	000c9040 	call	1000c904 <__mulsi3>
1000c668:	a008943a 	slli	r4,r20,16
1000c66c:	a806d43a 	srli	r3,r21,16
1000c670:	84a8983a 	sll	r20,r16,r18
1000c674:	1906b03a 	or	r3,r3,r4
1000c678:	1880042e 	bgeu	r3,r2,1000c68c <__umoddi3+0x500>
1000c67c:	1cc7883a 	add	r3,r3,r19
1000c680:	1cc00236 	bltu	r3,r19,1000c68c <__umoddi3+0x500>
1000c684:	1880012e 	bgeu	r3,r2,1000c68c <__umoddi3+0x500>
1000c688:	1cc7883a 	add	r3,r3,r19
1000c68c:	18a3c83a 	sub	r17,r3,r2
1000c690:	b00b883a 	mov	r5,r22
1000c694:	8809883a 	mov	r4,r17
1000c698:	000c8ac0 	call	1000c8ac <__umodsi3>
1000c69c:	b00b883a 	mov	r5,r22
1000c6a0:	8809883a 	mov	r4,r17
1000c6a4:	1021883a 	mov	r16,r2
1000c6a8:	000c8480 	call	1000c848 <__udivsi3>
1000c6ac:	100b883a 	mov	r5,r2
1000c6b0:	b809883a 	mov	r4,r23
1000c6b4:	8020943a 	slli	r16,r16,16
1000c6b8:	000c9040 	call	1000c904 <__mulsi3>
1000c6bc:	a8ffffcc 	andi	r3,r21,65535
1000c6c0:	1c06b03a 	or	r3,r3,r16
1000c6c4:	1880042e 	bgeu	r3,r2,1000c6d8 <__umoddi3+0x54c>
1000c6c8:	1cc7883a 	add	r3,r3,r19
1000c6cc:	1cc00236 	bltu	r3,r19,1000c6d8 <__umoddi3+0x54c>
1000c6d0:	1880012e 	bgeu	r3,r2,1000c6d8 <__umoddi3+0x54c>
1000c6d4:	1cc7883a 	add	r3,r3,r19
1000c6d8:	18a3c83a 	sub	r17,r3,r2
1000c6dc:	003f2906 	br	1000c384 <__alt_data_end+0xf800c384>
1000c6e0:	e48fc83a 	sub	r7,fp,r18
1000c6e4:	1d49c83a 	sub	r4,r3,r21
1000c6e8:	e1f9803a 	cmpltu	fp,fp,r7
1000c6ec:	2739c83a 	sub	fp,r4,fp
1000c6f0:	8f09c83a 	sub	r4,r17,fp
1000c6f4:	003fc306 	br	1000c604 <__alt_data_end+0xf800c604>
1000c6f8:	01000604 	movi	r4,24
1000c6fc:	003ef906 	br	1000c2e4 <__alt_data_end+0xf800c2e4>
1000c700:	00800604 	movi	r2,24
1000c704:	003f1306 	br	1000c354 <__alt_data_end+0xf800c354>
1000c708:	01000604 	movi	r4,24
1000c70c:	003eb606 	br	1000c1e8 <__alt_data_end+0xf800c1e8>
1000c710:	40bf902e 	bgeu	r8,r2,1000c554 <__alt_data_end+0xf800c554>
1000c714:	b5bfff84 	addi	r22,r22,-2
1000c718:	4551883a 	add	r8,r8,r21
1000c71c:	003f8e06 	br	1000c558 <__alt_data_end+0xf800c558>
1000c720:	18bf762e 	bgeu	r3,r2,1000c4fc <__alt_data_end+0xf800c4fc>
1000c724:	8c7fff84 	addi	r17,r17,-2
1000c728:	1d47883a 	add	r3,r3,r21
1000c72c:	003f7406 	br	1000c500 <__alt_data_end+0xf800c500>
1000c730:	1cc7883a 	add	r3,r3,r19
1000c734:	003ecd06 	br	1000c26c <__alt_data_end+0xf800c26c>
1000c738:	8005883a 	mov	r2,r16
1000c73c:	003ef806 	br	1000c320 <__alt_data_end+0xf800c320>
1000c740:	873fe736 	bltu	r16,fp,1000c6e0 <__alt_data_end+0xf800c6e0>
1000c744:	e00f883a 	mov	r7,fp
1000c748:	0009883a 	mov	r4,zero
1000c74c:	003fad06 	br	1000c604 <__alt_data_end+0xf800c604>

1000c750 <__divsi3>:
1000c750:	20001b16 	blt	r4,zero,1000c7c0 <__divsi3+0x70>
1000c754:	000f883a 	mov	r7,zero
1000c758:	28001616 	blt	r5,zero,1000c7b4 <__divsi3+0x64>
1000c75c:	200d883a 	mov	r6,r4
1000c760:	29001a2e 	bgeu	r5,r4,1000c7cc <__divsi3+0x7c>
1000c764:	00800804 	movi	r2,32
1000c768:	00c00044 	movi	r3,1
1000c76c:	00000106 	br	1000c774 <__divsi3+0x24>
1000c770:	10000d26 	beq	r2,zero,1000c7a8 <__divsi3+0x58>
1000c774:	294b883a 	add	r5,r5,r5
1000c778:	10bfffc4 	addi	r2,r2,-1
1000c77c:	18c7883a 	add	r3,r3,r3
1000c780:	293ffb36 	bltu	r5,r4,1000c770 <__alt_data_end+0xf800c770>
1000c784:	0005883a 	mov	r2,zero
1000c788:	18000726 	beq	r3,zero,1000c7a8 <__divsi3+0x58>
1000c78c:	0005883a 	mov	r2,zero
1000c790:	31400236 	bltu	r6,r5,1000c79c <__divsi3+0x4c>
1000c794:	314dc83a 	sub	r6,r6,r5
1000c798:	10c4b03a 	or	r2,r2,r3
1000c79c:	1806d07a 	srli	r3,r3,1
1000c7a0:	280ad07a 	srli	r5,r5,1
1000c7a4:	183ffa1e 	bne	r3,zero,1000c790 <__alt_data_end+0xf800c790>
1000c7a8:	38000126 	beq	r7,zero,1000c7b0 <__divsi3+0x60>
1000c7ac:	0085c83a 	sub	r2,zero,r2
1000c7b0:	f800283a 	ret
1000c7b4:	014bc83a 	sub	r5,zero,r5
1000c7b8:	39c0005c 	xori	r7,r7,1
1000c7bc:	003fe706 	br	1000c75c <__alt_data_end+0xf800c75c>
1000c7c0:	0109c83a 	sub	r4,zero,r4
1000c7c4:	01c00044 	movi	r7,1
1000c7c8:	003fe306 	br	1000c758 <__alt_data_end+0xf800c758>
1000c7cc:	00c00044 	movi	r3,1
1000c7d0:	003fee06 	br	1000c78c <__alt_data_end+0xf800c78c>

1000c7d4 <__modsi3>:
1000c7d4:	20001716 	blt	r4,zero,1000c834 <__modsi3+0x60>
1000c7d8:	000f883a 	mov	r7,zero
1000c7dc:	2005883a 	mov	r2,r4
1000c7e0:	28001216 	blt	r5,zero,1000c82c <__modsi3+0x58>
1000c7e4:	2900162e 	bgeu	r5,r4,1000c840 <__modsi3+0x6c>
1000c7e8:	01800804 	movi	r6,32
1000c7ec:	00c00044 	movi	r3,1
1000c7f0:	00000106 	br	1000c7f8 <__modsi3+0x24>
1000c7f4:	30000a26 	beq	r6,zero,1000c820 <__modsi3+0x4c>
1000c7f8:	294b883a 	add	r5,r5,r5
1000c7fc:	31bfffc4 	addi	r6,r6,-1
1000c800:	18c7883a 	add	r3,r3,r3
1000c804:	293ffb36 	bltu	r5,r4,1000c7f4 <__alt_data_end+0xf800c7f4>
1000c808:	18000526 	beq	r3,zero,1000c820 <__modsi3+0x4c>
1000c80c:	1806d07a 	srli	r3,r3,1
1000c810:	11400136 	bltu	r2,r5,1000c818 <__modsi3+0x44>
1000c814:	1145c83a 	sub	r2,r2,r5
1000c818:	280ad07a 	srli	r5,r5,1
1000c81c:	183ffb1e 	bne	r3,zero,1000c80c <__alt_data_end+0xf800c80c>
1000c820:	38000126 	beq	r7,zero,1000c828 <__modsi3+0x54>
1000c824:	0085c83a 	sub	r2,zero,r2
1000c828:	f800283a 	ret
1000c82c:	014bc83a 	sub	r5,zero,r5
1000c830:	003fec06 	br	1000c7e4 <__alt_data_end+0xf800c7e4>
1000c834:	0109c83a 	sub	r4,zero,r4
1000c838:	01c00044 	movi	r7,1
1000c83c:	003fe706 	br	1000c7dc <__alt_data_end+0xf800c7dc>
1000c840:	00c00044 	movi	r3,1
1000c844:	003ff106 	br	1000c80c <__alt_data_end+0xf800c80c>

1000c848 <__udivsi3>:
1000c848:	200d883a 	mov	r6,r4
1000c84c:	2900152e 	bgeu	r5,r4,1000c8a4 <__udivsi3+0x5c>
1000c850:	28001416 	blt	r5,zero,1000c8a4 <__udivsi3+0x5c>
1000c854:	00800804 	movi	r2,32
1000c858:	00c00044 	movi	r3,1
1000c85c:	00000206 	br	1000c868 <__udivsi3+0x20>
1000c860:	10000e26 	beq	r2,zero,1000c89c <__udivsi3+0x54>
1000c864:	28000516 	blt	r5,zero,1000c87c <__udivsi3+0x34>
1000c868:	294b883a 	add	r5,r5,r5
1000c86c:	10bfffc4 	addi	r2,r2,-1
1000c870:	18c7883a 	add	r3,r3,r3
1000c874:	293ffa36 	bltu	r5,r4,1000c860 <__alt_data_end+0xf800c860>
1000c878:	18000826 	beq	r3,zero,1000c89c <__udivsi3+0x54>
1000c87c:	0005883a 	mov	r2,zero
1000c880:	31400236 	bltu	r6,r5,1000c88c <__udivsi3+0x44>
1000c884:	314dc83a 	sub	r6,r6,r5
1000c888:	10c4b03a 	or	r2,r2,r3
1000c88c:	1806d07a 	srli	r3,r3,1
1000c890:	280ad07a 	srli	r5,r5,1
1000c894:	183ffa1e 	bne	r3,zero,1000c880 <__alt_data_end+0xf800c880>
1000c898:	f800283a 	ret
1000c89c:	0005883a 	mov	r2,zero
1000c8a0:	f800283a 	ret
1000c8a4:	00c00044 	movi	r3,1
1000c8a8:	003ff406 	br	1000c87c <__alt_data_end+0xf800c87c>

1000c8ac <__umodsi3>:
1000c8ac:	2005883a 	mov	r2,r4
1000c8b0:	2900122e 	bgeu	r5,r4,1000c8fc <__umodsi3+0x50>
1000c8b4:	28001116 	blt	r5,zero,1000c8fc <__umodsi3+0x50>
1000c8b8:	01800804 	movi	r6,32
1000c8bc:	00c00044 	movi	r3,1
1000c8c0:	00000206 	br	1000c8cc <__umodsi3+0x20>
1000c8c4:	30000c26 	beq	r6,zero,1000c8f8 <__umodsi3+0x4c>
1000c8c8:	28000516 	blt	r5,zero,1000c8e0 <__umodsi3+0x34>
1000c8cc:	294b883a 	add	r5,r5,r5
1000c8d0:	31bfffc4 	addi	r6,r6,-1
1000c8d4:	18c7883a 	add	r3,r3,r3
1000c8d8:	293ffa36 	bltu	r5,r4,1000c8c4 <__alt_data_end+0xf800c8c4>
1000c8dc:	18000626 	beq	r3,zero,1000c8f8 <__umodsi3+0x4c>
1000c8e0:	1806d07a 	srli	r3,r3,1
1000c8e4:	11400136 	bltu	r2,r5,1000c8ec <__umodsi3+0x40>
1000c8e8:	1145c83a 	sub	r2,r2,r5
1000c8ec:	280ad07a 	srli	r5,r5,1
1000c8f0:	183ffb1e 	bne	r3,zero,1000c8e0 <__alt_data_end+0xf800c8e0>
1000c8f4:	f800283a 	ret
1000c8f8:	f800283a 	ret
1000c8fc:	00c00044 	movi	r3,1
1000c900:	003ff706 	br	1000c8e0 <__alt_data_end+0xf800c8e0>

1000c904 <__mulsi3>:
1000c904:	0005883a 	mov	r2,zero
1000c908:	20000726 	beq	r4,zero,1000c928 <__mulsi3+0x24>
1000c90c:	20c0004c 	andi	r3,r4,1
1000c910:	2008d07a 	srli	r4,r4,1
1000c914:	18000126 	beq	r3,zero,1000c91c <__mulsi3+0x18>
1000c918:	1145883a 	add	r2,r2,r5
1000c91c:	294b883a 	add	r5,r5,r5
1000c920:	203ffa1e 	bne	r4,zero,1000c90c <__alt_data_end+0xf800c90c>
1000c924:	f800283a 	ret
1000c928:	f800283a 	ret

1000c92c <__adddf3>:
1000c92c:	02c00434 	movhi	r11,16
1000c930:	5affffc4 	addi	r11,r11,-1
1000c934:	2806d7fa 	srli	r3,r5,31
1000c938:	2ad4703a 	and	r10,r5,r11
1000c93c:	3ad2703a 	and	r9,r7,r11
1000c940:	3804d53a 	srli	r2,r7,20
1000c944:	3018d77a 	srli	r12,r6,29
1000c948:	280ad53a 	srli	r5,r5,20
1000c94c:	501490fa 	slli	r10,r10,3
1000c950:	2010d77a 	srli	r8,r4,29
1000c954:	481290fa 	slli	r9,r9,3
1000c958:	380ed7fa 	srli	r7,r7,31
1000c95c:	defffb04 	addi	sp,sp,-20
1000c960:	dc800215 	stw	r18,8(sp)
1000c964:	dc400115 	stw	r17,4(sp)
1000c968:	dc000015 	stw	r16,0(sp)
1000c96c:	dfc00415 	stw	ra,16(sp)
1000c970:	dcc00315 	stw	r19,12(sp)
1000c974:	1c803fcc 	andi	r18,r3,255
1000c978:	2c01ffcc 	andi	r16,r5,2047
1000c97c:	5210b03a 	or	r8,r10,r8
1000c980:	202290fa 	slli	r17,r4,3
1000c984:	1081ffcc 	andi	r2,r2,2047
1000c988:	4b12b03a 	or	r9,r9,r12
1000c98c:	300c90fa 	slli	r6,r6,3
1000c990:	91c07526 	beq	r18,r7,1000cb68 <__adddf3+0x23c>
1000c994:	8087c83a 	sub	r3,r16,r2
1000c998:	00c0ab0e 	bge	zero,r3,1000cc48 <__adddf3+0x31c>
1000c99c:	10002a1e 	bne	r2,zero,1000ca48 <__adddf3+0x11c>
1000c9a0:	4984b03a 	or	r2,r9,r6
1000c9a4:	1000961e 	bne	r2,zero,1000cc00 <__adddf3+0x2d4>
1000c9a8:	888001cc 	andi	r2,r17,7
1000c9ac:	10000726 	beq	r2,zero,1000c9cc <__adddf3+0xa0>
1000c9b0:	888003cc 	andi	r2,r17,15
1000c9b4:	00c00104 	movi	r3,4
1000c9b8:	10c00426 	beq	r2,r3,1000c9cc <__adddf3+0xa0>
1000c9bc:	88c7883a 	add	r3,r17,r3
1000c9c0:	1c63803a 	cmpltu	r17,r3,r17
1000c9c4:	4451883a 	add	r8,r8,r17
1000c9c8:	1823883a 	mov	r17,r3
1000c9cc:	4080202c 	andhi	r2,r8,128
1000c9d0:	10005926 	beq	r2,zero,1000cb38 <__adddf3+0x20c>
1000c9d4:	84000044 	addi	r16,r16,1
1000c9d8:	0081ffc4 	movi	r2,2047
1000c9dc:	8080ba26 	beq	r16,r2,1000ccc8 <__adddf3+0x39c>
1000c9e0:	00bfe034 	movhi	r2,65408
1000c9e4:	10bfffc4 	addi	r2,r2,-1
1000c9e8:	4090703a 	and	r8,r8,r2
1000c9ec:	4004977a 	slli	r2,r8,29
1000c9f0:	4010927a 	slli	r8,r8,9
1000c9f4:	8822d0fa 	srli	r17,r17,3
1000c9f8:	8401ffcc 	andi	r16,r16,2047
1000c9fc:	4010d33a 	srli	r8,r8,12
1000ca00:	9007883a 	mov	r3,r18
1000ca04:	1444b03a 	or	r2,r2,r17
1000ca08:	8401ffcc 	andi	r16,r16,2047
1000ca0c:	8020953a 	slli	r16,r16,20
1000ca10:	18c03fcc 	andi	r3,r3,255
1000ca14:	01000434 	movhi	r4,16
1000ca18:	213fffc4 	addi	r4,r4,-1
1000ca1c:	180697fa 	slli	r3,r3,31
1000ca20:	4110703a 	and	r8,r8,r4
1000ca24:	4410b03a 	or	r8,r8,r16
1000ca28:	40c6b03a 	or	r3,r8,r3
1000ca2c:	dfc00417 	ldw	ra,16(sp)
1000ca30:	dcc00317 	ldw	r19,12(sp)
1000ca34:	dc800217 	ldw	r18,8(sp)
1000ca38:	dc400117 	ldw	r17,4(sp)
1000ca3c:	dc000017 	ldw	r16,0(sp)
1000ca40:	dec00504 	addi	sp,sp,20
1000ca44:	f800283a 	ret
1000ca48:	0081ffc4 	movi	r2,2047
1000ca4c:	80bfd626 	beq	r16,r2,1000c9a8 <__alt_data_end+0xf800c9a8>
1000ca50:	4a402034 	orhi	r9,r9,128
1000ca54:	00800e04 	movi	r2,56
1000ca58:	10c09f16 	blt	r2,r3,1000ccd8 <__adddf3+0x3ac>
1000ca5c:	008007c4 	movi	r2,31
1000ca60:	10c0c216 	blt	r2,r3,1000cd6c <__adddf3+0x440>
1000ca64:	00800804 	movi	r2,32
1000ca68:	10c5c83a 	sub	r2,r2,r3
1000ca6c:	488a983a 	sll	r5,r9,r2
1000ca70:	30c8d83a 	srl	r4,r6,r3
1000ca74:	3084983a 	sll	r2,r6,r2
1000ca78:	48c6d83a 	srl	r3,r9,r3
1000ca7c:	290cb03a 	or	r6,r5,r4
1000ca80:	1004c03a 	cmpne	r2,r2,zero
1000ca84:	308cb03a 	or	r6,r6,r2
1000ca88:	898dc83a 	sub	r6,r17,r6
1000ca8c:	89a3803a 	cmpltu	r17,r17,r6
1000ca90:	40d1c83a 	sub	r8,r8,r3
1000ca94:	4451c83a 	sub	r8,r8,r17
1000ca98:	3023883a 	mov	r17,r6
1000ca9c:	4080202c 	andhi	r2,r8,128
1000caa0:	10002326 	beq	r2,zero,1000cb30 <__adddf3+0x204>
1000caa4:	04c02034 	movhi	r19,128
1000caa8:	9cffffc4 	addi	r19,r19,-1
1000caac:	44e6703a 	and	r19,r8,r19
1000cab0:	98007626 	beq	r19,zero,1000cc8c <__adddf3+0x360>
1000cab4:	9809883a 	mov	r4,r19
1000cab8:	000f16c0 	call	1000f16c <__clzsi2>
1000cabc:	10fffe04 	addi	r3,r2,-8
1000cac0:	010007c4 	movi	r4,31
1000cac4:	20c07716 	blt	r4,r3,1000cca4 <__adddf3+0x378>
1000cac8:	00800804 	movi	r2,32
1000cacc:	10c5c83a 	sub	r2,r2,r3
1000cad0:	8884d83a 	srl	r2,r17,r2
1000cad4:	98d0983a 	sll	r8,r19,r3
1000cad8:	88e2983a 	sll	r17,r17,r3
1000cadc:	1204b03a 	or	r2,r2,r8
1000cae0:	1c007416 	blt	r3,r16,1000ccb4 <__adddf3+0x388>
1000cae4:	1c21c83a 	sub	r16,r3,r16
1000cae8:	82000044 	addi	r8,r16,1
1000caec:	00c007c4 	movi	r3,31
1000caf0:	1a009116 	blt	r3,r8,1000cd38 <__adddf3+0x40c>
1000caf4:	00c00804 	movi	r3,32
1000caf8:	1a07c83a 	sub	r3,r3,r8
1000cafc:	8a08d83a 	srl	r4,r17,r8
1000cb00:	88e2983a 	sll	r17,r17,r3
1000cb04:	10c6983a 	sll	r3,r2,r3
1000cb08:	1210d83a 	srl	r8,r2,r8
1000cb0c:	8804c03a 	cmpne	r2,r17,zero
1000cb10:	1906b03a 	or	r3,r3,r4
1000cb14:	18a2b03a 	or	r17,r3,r2
1000cb18:	0021883a 	mov	r16,zero
1000cb1c:	003fa206 	br	1000c9a8 <__alt_data_end+0xf800c9a8>
1000cb20:	1890b03a 	or	r8,r3,r2
1000cb24:	40017d26 	beq	r8,zero,1000d11c <__adddf3+0x7f0>
1000cb28:	1011883a 	mov	r8,r2
1000cb2c:	1823883a 	mov	r17,r3
1000cb30:	888001cc 	andi	r2,r17,7
1000cb34:	103f9e1e 	bne	r2,zero,1000c9b0 <__alt_data_end+0xf800c9b0>
1000cb38:	4004977a 	slli	r2,r8,29
1000cb3c:	8822d0fa 	srli	r17,r17,3
1000cb40:	4010d0fa 	srli	r8,r8,3
1000cb44:	9007883a 	mov	r3,r18
1000cb48:	1444b03a 	or	r2,r2,r17
1000cb4c:	0101ffc4 	movi	r4,2047
1000cb50:	81002426 	beq	r16,r4,1000cbe4 <__adddf3+0x2b8>
1000cb54:	8120703a 	and	r16,r16,r4
1000cb58:	01000434 	movhi	r4,16
1000cb5c:	213fffc4 	addi	r4,r4,-1
1000cb60:	4110703a 	and	r8,r8,r4
1000cb64:	003fa806 	br	1000ca08 <__alt_data_end+0xf800ca08>
1000cb68:	8089c83a 	sub	r4,r16,r2
1000cb6c:	01005e0e 	bge	zero,r4,1000cce8 <__adddf3+0x3bc>
1000cb70:	10002b26 	beq	r2,zero,1000cc20 <__adddf3+0x2f4>
1000cb74:	0081ffc4 	movi	r2,2047
1000cb78:	80bf8b26 	beq	r16,r2,1000c9a8 <__alt_data_end+0xf800c9a8>
1000cb7c:	4a402034 	orhi	r9,r9,128
1000cb80:	00800e04 	movi	r2,56
1000cb84:	1100a40e 	bge	r2,r4,1000ce18 <__adddf3+0x4ec>
1000cb88:	498cb03a 	or	r6,r9,r6
1000cb8c:	300ac03a 	cmpne	r5,r6,zero
1000cb90:	0013883a 	mov	r9,zero
1000cb94:	2c4b883a 	add	r5,r5,r17
1000cb98:	2c63803a 	cmpltu	r17,r5,r17
1000cb9c:	4a11883a 	add	r8,r9,r8
1000cba0:	8a11883a 	add	r8,r17,r8
1000cba4:	2823883a 	mov	r17,r5
1000cba8:	4080202c 	andhi	r2,r8,128
1000cbac:	103fe026 	beq	r2,zero,1000cb30 <__alt_data_end+0xf800cb30>
1000cbb0:	84000044 	addi	r16,r16,1
1000cbb4:	0081ffc4 	movi	r2,2047
1000cbb8:	8080d226 	beq	r16,r2,1000cf04 <__adddf3+0x5d8>
1000cbbc:	00bfe034 	movhi	r2,65408
1000cbc0:	10bfffc4 	addi	r2,r2,-1
1000cbc4:	4090703a 	and	r8,r8,r2
1000cbc8:	880ad07a 	srli	r5,r17,1
1000cbcc:	400897fa 	slli	r4,r8,31
1000cbd0:	88c0004c 	andi	r3,r17,1
1000cbd4:	28e2b03a 	or	r17,r5,r3
1000cbd8:	4010d07a 	srli	r8,r8,1
1000cbdc:	2462b03a 	or	r17,r4,r17
1000cbe0:	003f7106 	br	1000c9a8 <__alt_data_end+0xf800c9a8>
1000cbe4:	4088b03a 	or	r4,r8,r2
1000cbe8:	20014526 	beq	r4,zero,1000d100 <__adddf3+0x7d4>
1000cbec:	01000434 	movhi	r4,16
1000cbf0:	42000234 	orhi	r8,r8,8
1000cbf4:	213fffc4 	addi	r4,r4,-1
1000cbf8:	4110703a 	and	r8,r8,r4
1000cbfc:	003f8206 	br	1000ca08 <__alt_data_end+0xf800ca08>
1000cc00:	18ffffc4 	addi	r3,r3,-1
1000cc04:	1800491e 	bne	r3,zero,1000cd2c <__adddf3+0x400>
1000cc08:	898bc83a 	sub	r5,r17,r6
1000cc0c:	8963803a 	cmpltu	r17,r17,r5
1000cc10:	4251c83a 	sub	r8,r8,r9
1000cc14:	4451c83a 	sub	r8,r8,r17
1000cc18:	2823883a 	mov	r17,r5
1000cc1c:	003f9f06 	br	1000ca9c <__alt_data_end+0xf800ca9c>
1000cc20:	4984b03a 	or	r2,r9,r6
1000cc24:	103f6026 	beq	r2,zero,1000c9a8 <__alt_data_end+0xf800c9a8>
1000cc28:	213fffc4 	addi	r4,r4,-1
1000cc2c:	2000931e 	bne	r4,zero,1000ce7c <__adddf3+0x550>
1000cc30:	898d883a 	add	r6,r17,r6
1000cc34:	3463803a 	cmpltu	r17,r6,r17
1000cc38:	4251883a 	add	r8,r8,r9
1000cc3c:	8a11883a 	add	r8,r17,r8
1000cc40:	3023883a 	mov	r17,r6
1000cc44:	003fd806 	br	1000cba8 <__alt_data_end+0xf800cba8>
1000cc48:	1800541e 	bne	r3,zero,1000cd9c <__adddf3+0x470>
1000cc4c:	80800044 	addi	r2,r16,1
1000cc50:	1081ffcc 	andi	r2,r2,2047
1000cc54:	00c00044 	movi	r3,1
1000cc58:	1880a00e 	bge	r3,r2,1000cedc <__adddf3+0x5b0>
1000cc5c:	8989c83a 	sub	r4,r17,r6
1000cc60:	8905803a 	cmpltu	r2,r17,r4
1000cc64:	4267c83a 	sub	r19,r8,r9
1000cc68:	98a7c83a 	sub	r19,r19,r2
1000cc6c:	9880202c 	andhi	r2,r19,128
1000cc70:	10006326 	beq	r2,zero,1000ce00 <__adddf3+0x4d4>
1000cc74:	3463c83a 	sub	r17,r6,r17
1000cc78:	4a07c83a 	sub	r3,r9,r8
1000cc7c:	344d803a 	cmpltu	r6,r6,r17
1000cc80:	19a7c83a 	sub	r19,r3,r6
1000cc84:	3825883a 	mov	r18,r7
1000cc88:	983f8a1e 	bne	r19,zero,1000cab4 <__alt_data_end+0xf800cab4>
1000cc8c:	8809883a 	mov	r4,r17
1000cc90:	000f16c0 	call	1000f16c <__clzsi2>
1000cc94:	10800804 	addi	r2,r2,32
1000cc98:	10fffe04 	addi	r3,r2,-8
1000cc9c:	010007c4 	movi	r4,31
1000cca0:	20ff890e 	bge	r4,r3,1000cac8 <__alt_data_end+0xf800cac8>
1000cca4:	10bff604 	addi	r2,r2,-40
1000cca8:	8884983a 	sll	r2,r17,r2
1000ccac:	0023883a 	mov	r17,zero
1000ccb0:	1c3f8c0e 	bge	r3,r16,1000cae4 <__alt_data_end+0xf800cae4>
1000ccb4:	023fe034 	movhi	r8,65408
1000ccb8:	423fffc4 	addi	r8,r8,-1
1000ccbc:	80e1c83a 	sub	r16,r16,r3
1000ccc0:	1210703a 	and	r8,r2,r8
1000ccc4:	003f3806 	br	1000c9a8 <__alt_data_end+0xf800c9a8>
1000ccc8:	9007883a 	mov	r3,r18
1000cccc:	0011883a 	mov	r8,zero
1000ccd0:	0005883a 	mov	r2,zero
1000ccd4:	003f4c06 	br	1000ca08 <__alt_data_end+0xf800ca08>
1000ccd8:	498cb03a 	or	r6,r9,r6
1000ccdc:	300cc03a 	cmpne	r6,r6,zero
1000cce0:	0007883a 	mov	r3,zero
1000cce4:	003f6806 	br	1000ca88 <__alt_data_end+0xf800ca88>
1000cce8:	20009c1e 	bne	r4,zero,1000cf5c <__adddf3+0x630>
1000ccec:	80800044 	addi	r2,r16,1
1000ccf0:	1141ffcc 	andi	r5,r2,2047
1000ccf4:	01000044 	movi	r4,1
1000ccf8:	2140670e 	bge	r4,r5,1000ce98 <__adddf3+0x56c>
1000ccfc:	0101ffc4 	movi	r4,2047
1000cd00:	11007f26 	beq	r2,r4,1000cf00 <__adddf3+0x5d4>
1000cd04:	898d883a 	add	r6,r17,r6
1000cd08:	4247883a 	add	r3,r8,r9
1000cd0c:	3451803a 	cmpltu	r8,r6,r17
1000cd10:	40d1883a 	add	r8,r8,r3
1000cd14:	402297fa 	slli	r17,r8,31
1000cd18:	300cd07a 	srli	r6,r6,1
1000cd1c:	4010d07a 	srli	r8,r8,1
1000cd20:	1021883a 	mov	r16,r2
1000cd24:	89a2b03a 	or	r17,r17,r6
1000cd28:	003f1f06 	br	1000c9a8 <__alt_data_end+0xf800c9a8>
1000cd2c:	0081ffc4 	movi	r2,2047
1000cd30:	80bf481e 	bne	r16,r2,1000ca54 <__alt_data_end+0xf800ca54>
1000cd34:	003f1c06 	br	1000c9a8 <__alt_data_end+0xf800c9a8>
1000cd38:	843ff844 	addi	r16,r16,-31
1000cd3c:	01000804 	movi	r4,32
1000cd40:	1406d83a 	srl	r3,r2,r16
1000cd44:	41005026 	beq	r8,r4,1000ce88 <__adddf3+0x55c>
1000cd48:	01001004 	movi	r4,64
1000cd4c:	2211c83a 	sub	r8,r4,r8
1000cd50:	1204983a 	sll	r2,r2,r8
1000cd54:	88a2b03a 	or	r17,r17,r2
1000cd58:	8822c03a 	cmpne	r17,r17,zero
1000cd5c:	1c62b03a 	or	r17,r3,r17
1000cd60:	0011883a 	mov	r8,zero
1000cd64:	0021883a 	mov	r16,zero
1000cd68:	003f7106 	br	1000cb30 <__alt_data_end+0xf800cb30>
1000cd6c:	193ff804 	addi	r4,r3,-32
1000cd70:	00800804 	movi	r2,32
1000cd74:	4908d83a 	srl	r4,r9,r4
1000cd78:	18804526 	beq	r3,r2,1000ce90 <__adddf3+0x564>
1000cd7c:	00801004 	movi	r2,64
1000cd80:	10c5c83a 	sub	r2,r2,r3
1000cd84:	4886983a 	sll	r3,r9,r2
1000cd88:	198cb03a 	or	r6,r3,r6
1000cd8c:	300cc03a 	cmpne	r6,r6,zero
1000cd90:	218cb03a 	or	r6,r4,r6
1000cd94:	0007883a 	mov	r3,zero
1000cd98:	003f3b06 	br	1000ca88 <__alt_data_end+0xf800ca88>
1000cd9c:	80002a26 	beq	r16,zero,1000ce48 <__adddf3+0x51c>
1000cda0:	0101ffc4 	movi	r4,2047
1000cda4:	11006826 	beq	r2,r4,1000cf48 <__adddf3+0x61c>
1000cda8:	00c7c83a 	sub	r3,zero,r3
1000cdac:	42002034 	orhi	r8,r8,128
1000cdb0:	01000e04 	movi	r4,56
1000cdb4:	20c07c16 	blt	r4,r3,1000cfa8 <__adddf3+0x67c>
1000cdb8:	010007c4 	movi	r4,31
1000cdbc:	20c0da16 	blt	r4,r3,1000d128 <__adddf3+0x7fc>
1000cdc0:	01000804 	movi	r4,32
1000cdc4:	20c9c83a 	sub	r4,r4,r3
1000cdc8:	4114983a 	sll	r10,r8,r4
1000cdcc:	88cad83a 	srl	r5,r17,r3
1000cdd0:	8908983a 	sll	r4,r17,r4
1000cdd4:	40c6d83a 	srl	r3,r8,r3
1000cdd8:	5162b03a 	or	r17,r10,r5
1000cddc:	2008c03a 	cmpne	r4,r4,zero
1000cde0:	8922b03a 	or	r17,r17,r4
1000cde4:	3463c83a 	sub	r17,r6,r17
1000cde8:	48c7c83a 	sub	r3,r9,r3
1000cdec:	344d803a 	cmpltu	r6,r6,r17
1000cdf0:	1991c83a 	sub	r8,r3,r6
1000cdf4:	1021883a 	mov	r16,r2
1000cdf8:	3825883a 	mov	r18,r7
1000cdfc:	003f2706 	br	1000ca9c <__alt_data_end+0xf800ca9c>
1000ce00:	24d0b03a 	or	r8,r4,r19
1000ce04:	40001b1e 	bne	r8,zero,1000ce74 <__adddf3+0x548>
1000ce08:	0005883a 	mov	r2,zero
1000ce0c:	0007883a 	mov	r3,zero
1000ce10:	0021883a 	mov	r16,zero
1000ce14:	003f4d06 	br	1000cb4c <__alt_data_end+0xf800cb4c>
1000ce18:	008007c4 	movi	r2,31
1000ce1c:	11003c16 	blt	r2,r4,1000cf10 <__adddf3+0x5e4>
1000ce20:	00800804 	movi	r2,32
1000ce24:	1105c83a 	sub	r2,r2,r4
1000ce28:	488e983a 	sll	r7,r9,r2
1000ce2c:	310ad83a 	srl	r5,r6,r4
1000ce30:	3084983a 	sll	r2,r6,r2
1000ce34:	4912d83a 	srl	r9,r9,r4
1000ce38:	394ab03a 	or	r5,r7,r5
1000ce3c:	1004c03a 	cmpne	r2,r2,zero
1000ce40:	288ab03a 	or	r5,r5,r2
1000ce44:	003f5306 	br	1000cb94 <__alt_data_end+0xf800cb94>
1000ce48:	4448b03a 	or	r4,r8,r17
1000ce4c:	20003e26 	beq	r4,zero,1000cf48 <__adddf3+0x61c>
1000ce50:	00c6303a 	nor	r3,zero,r3
1000ce54:	18003a1e 	bne	r3,zero,1000cf40 <__adddf3+0x614>
1000ce58:	3463c83a 	sub	r17,r6,r17
1000ce5c:	4a07c83a 	sub	r3,r9,r8
1000ce60:	344d803a 	cmpltu	r6,r6,r17
1000ce64:	1991c83a 	sub	r8,r3,r6
1000ce68:	1021883a 	mov	r16,r2
1000ce6c:	3825883a 	mov	r18,r7
1000ce70:	003f0a06 	br	1000ca9c <__alt_data_end+0xf800ca9c>
1000ce74:	2023883a 	mov	r17,r4
1000ce78:	003f0d06 	br	1000cab0 <__alt_data_end+0xf800cab0>
1000ce7c:	0081ffc4 	movi	r2,2047
1000ce80:	80bf3f1e 	bne	r16,r2,1000cb80 <__alt_data_end+0xf800cb80>
1000ce84:	003ec806 	br	1000c9a8 <__alt_data_end+0xf800c9a8>
1000ce88:	0005883a 	mov	r2,zero
1000ce8c:	003fb106 	br	1000cd54 <__alt_data_end+0xf800cd54>
1000ce90:	0007883a 	mov	r3,zero
1000ce94:	003fbc06 	br	1000cd88 <__alt_data_end+0xf800cd88>
1000ce98:	4444b03a 	or	r2,r8,r17
1000ce9c:	8000871e 	bne	r16,zero,1000d0bc <__adddf3+0x790>
1000cea0:	1000ba26 	beq	r2,zero,1000d18c <__adddf3+0x860>
1000cea4:	4984b03a 	or	r2,r9,r6
1000cea8:	103ebf26 	beq	r2,zero,1000c9a8 <__alt_data_end+0xf800c9a8>
1000ceac:	8985883a 	add	r2,r17,r6
1000ceb0:	4247883a 	add	r3,r8,r9
1000ceb4:	1451803a 	cmpltu	r8,r2,r17
1000ceb8:	40d1883a 	add	r8,r8,r3
1000cebc:	40c0202c 	andhi	r3,r8,128
1000cec0:	1023883a 	mov	r17,r2
1000cec4:	183f1a26 	beq	r3,zero,1000cb30 <__alt_data_end+0xf800cb30>
1000cec8:	00bfe034 	movhi	r2,65408
1000cecc:	10bfffc4 	addi	r2,r2,-1
1000ced0:	2021883a 	mov	r16,r4
1000ced4:	4090703a 	and	r8,r8,r2
1000ced8:	003eb306 	br	1000c9a8 <__alt_data_end+0xf800c9a8>
1000cedc:	4444b03a 	or	r2,r8,r17
1000cee0:	8000291e 	bne	r16,zero,1000cf88 <__adddf3+0x65c>
1000cee4:	10004b1e 	bne	r2,zero,1000d014 <__adddf3+0x6e8>
1000cee8:	4990b03a 	or	r8,r9,r6
1000ceec:	40008b26 	beq	r8,zero,1000d11c <__adddf3+0x7f0>
1000cef0:	4811883a 	mov	r8,r9
1000cef4:	3023883a 	mov	r17,r6
1000cef8:	3825883a 	mov	r18,r7
1000cefc:	003eaa06 	br	1000c9a8 <__alt_data_end+0xf800c9a8>
1000cf00:	1021883a 	mov	r16,r2
1000cf04:	0011883a 	mov	r8,zero
1000cf08:	0005883a 	mov	r2,zero
1000cf0c:	003f0f06 	br	1000cb4c <__alt_data_end+0xf800cb4c>
1000cf10:	217ff804 	addi	r5,r4,-32
1000cf14:	00800804 	movi	r2,32
1000cf18:	494ad83a 	srl	r5,r9,r5
1000cf1c:	20807d26 	beq	r4,r2,1000d114 <__adddf3+0x7e8>
1000cf20:	00801004 	movi	r2,64
1000cf24:	1109c83a 	sub	r4,r2,r4
1000cf28:	4912983a 	sll	r9,r9,r4
1000cf2c:	498cb03a 	or	r6,r9,r6
1000cf30:	300cc03a 	cmpne	r6,r6,zero
1000cf34:	298ab03a 	or	r5,r5,r6
1000cf38:	0013883a 	mov	r9,zero
1000cf3c:	003f1506 	br	1000cb94 <__alt_data_end+0xf800cb94>
1000cf40:	0101ffc4 	movi	r4,2047
1000cf44:	113f9a1e 	bne	r2,r4,1000cdb0 <__alt_data_end+0xf800cdb0>
1000cf48:	4811883a 	mov	r8,r9
1000cf4c:	3023883a 	mov	r17,r6
1000cf50:	1021883a 	mov	r16,r2
1000cf54:	3825883a 	mov	r18,r7
1000cf58:	003e9306 	br	1000c9a8 <__alt_data_end+0xf800c9a8>
1000cf5c:	8000161e 	bne	r16,zero,1000cfb8 <__adddf3+0x68c>
1000cf60:	444ab03a 	or	r5,r8,r17
1000cf64:	28005126 	beq	r5,zero,1000d0ac <__adddf3+0x780>
1000cf68:	0108303a 	nor	r4,zero,r4
1000cf6c:	20004d1e 	bne	r4,zero,1000d0a4 <__adddf3+0x778>
1000cf70:	89a3883a 	add	r17,r17,r6
1000cf74:	4253883a 	add	r9,r8,r9
1000cf78:	898d803a 	cmpltu	r6,r17,r6
1000cf7c:	3251883a 	add	r8,r6,r9
1000cf80:	1021883a 	mov	r16,r2
1000cf84:	003f0806 	br	1000cba8 <__alt_data_end+0xf800cba8>
1000cf88:	1000301e 	bne	r2,zero,1000d04c <__adddf3+0x720>
1000cf8c:	4984b03a 	or	r2,r9,r6
1000cf90:	10007126 	beq	r2,zero,1000d158 <__adddf3+0x82c>
1000cf94:	4811883a 	mov	r8,r9
1000cf98:	3023883a 	mov	r17,r6
1000cf9c:	3825883a 	mov	r18,r7
1000cfa0:	0401ffc4 	movi	r16,2047
1000cfa4:	003e8006 	br	1000c9a8 <__alt_data_end+0xf800c9a8>
1000cfa8:	4462b03a 	or	r17,r8,r17
1000cfac:	8822c03a 	cmpne	r17,r17,zero
1000cfb0:	0007883a 	mov	r3,zero
1000cfb4:	003f8b06 	br	1000cde4 <__alt_data_end+0xf800cde4>
1000cfb8:	0141ffc4 	movi	r5,2047
1000cfbc:	11403b26 	beq	r2,r5,1000d0ac <__adddf3+0x780>
1000cfc0:	0109c83a 	sub	r4,zero,r4
1000cfc4:	42002034 	orhi	r8,r8,128
1000cfc8:	01400e04 	movi	r5,56
1000cfcc:	29006716 	blt	r5,r4,1000d16c <__adddf3+0x840>
1000cfd0:	014007c4 	movi	r5,31
1000cfd4:	29007016 	blt	r5,r4,1000d198 <__adddf3+0x86c>
1000cfd8:	01400804 	movi	r5,32
1000cfdc:	290bc83a 	sub	r5,r5,r4
1000cfe0:	4154983a 	sll	r10,r8,r5
1000cfe4:	890ed83a 	srl	r7,r17,r4
1000cfe8:	894a983a 	sll	r5,r17,r5
1000cfec:	4108d83a 	srl	r4,r8,r4
1000cff0:	51e2b03a 	or	r17,r10,r7
1000cff4:	280ac03a 	cmpne	r5,r5,zero
1000cff8:	8962b03a 	or	r17,r17,r5
1000cffc:	89a3883a 	add	r17,r17,r6
1000d000:	2253883a 	add	r9,r4,r9
1000d004:	898d803a 	cmpltu	r6,r17,r6
1000d008:	3251883a 	add	r8,r6,r9
1000d00c:	1021883a 	mov	r16,r2
1000d010:	003ee506 	br	1000cba8 <__alt_data_end+0xf800cba8>
1000d014:	4984b03a 	or	r2,r9,r6
1000d018:	103e6326 	beq	r2,zero,1000c9a8 <__alt_data_end+0xf800c9a8>
1000d01c:	8987c83a 	sub	r3,r17,r6
1000d020:	88c9803a 	cmpltu	r4,r17,r3
1000d024:	4245c83a 	sub	r2,r8,r9
1000d028:	1105c83a 	sub	r2,r2,r4
1000d02c:	1100202c 	andhi	r4,r2,128
1000d030:	203ebb26 	beq	r4,zero,1000cb20 <__alt_data_end+0xf800cb20>
1000d034:	3463c83a 	sub	r17,r6,r17
1000d038:	4a07c83a 	sub	r3,r9,r8
1000d03c:	344d803a 	cmpltu	r6,r6,r17
1000d040:	1991c83a 	sub	r8,r3,r6
1000d044:	3825883a 	mov	r18,r7
1000d048:	003e5706 	br	1000c9a8 <__alt_data_end+0xf800c9a8>
1000d04c:	4984b03a 	or	r2,r9,r6
1000d050:	10002e26 	beq	r2,zero,1000d10c <__adddf3+0x7e0>
1000d054:	4004d0fa 	srli	r2,r8,3
1000d058:	8822d0fa 	srli	r17,r17,3
1000d05c:	4010977a 	slli	r8,r8,29
1000d060:	10c0022c 	andhi	r3,r2,8
1000d064:	4462b03a 	or	r17,r8,r17
1000d068:	18000826 	beq	r3,zero,1000d08c <__adddf3+0x760>
1000d06c:	4808d0fa 	srli	r4,r9,3
1000d070:	20c0022c 	andhi	r3,r4,8
1000d074:	1800051e 	bne	r3,zero,1000d08c <__adddf3+0x760>
1000d078:	300cd0fa 	srli	r6,r6,3
1000d07c:	4806977a 	slli	r3,r9,29
1000d080:	2005883a 	mov	r2,r4
1000d084:	3825883a 	mov	r18,r7
1000d088:	19a2b03a 	or	r17,r3,r6
1000d08c:	8810d77a 	srli	r8,r17,29
1000d090:	100490fa 	slli	r2,r2,3
1000d094:	882290fa 	slli	r17,r17,3
1000d098:	0401ffc4 	movi	r16,2047
1000d09c:	4090b03a 	or	r8,r8,r2
1000d0a0:	003e4106 	br	1000c9a8 <__alt_data_end+0xf800c9a8>
1000d0a4:	0141ffc4 	movi	r5,2047
1000d0a8:	117fc71e 	bne	r2,r5,1000cfc8 <__alt_data_end+0xf800cfc8>
1000d0ac:	4811883a 	mov	r8,r9
1000d0b0:	3023883a 	mov	r17,r6
1000d0b4:	1021883a 	mov	r16,r2
1000d0b8:	003e3b06 	br	1000c9a8 <__alt_data_end+0xf800c9a8>
1000d0bc:	10002f26 	beq	r2,zero,1000d17c <__adddf3+0x850>
1000d0c0:	4984b03a 	or	r2,r9,r6
1000d0c4:	10001126 	beq	r2,zero,1000d10c <__adddf3+0x7e0>
1000d0c8:	4004d0fa 	srli	r2,r8,3
1000d0cc:	8822d0fa 	srli	r17,r17,3
1000d0d0:	4010977a 	slli	r8,r8,29
1000d0d4:	10c0022c 	andhi	r3,r2,8
1000d0d8:	4462b03a 	or	r17,r8,r17
1000d0dc:	183feb26 	beq	r3,zero,1000d08c <__alt_data_end+0xf800d08c>
1000d0e0:	4808d0fa 	srli	r4,r9,3
1000d0e4:	20c0022c 	andhi	r3,r4,8
1000d0e8:	183fe81e 	bne	r3,zero,1000d08c <__alt_data_end+0xf800d08c>
1000d0ec:	300cd0fa 	srli	r6,r6,3
1000d0f0:	4806977a 	slli	r3,r9,29
1000d0f4:	2005883a 	mov	r2,r4
1000d0f8:	19a2b03a 	or	r17,r3,r6
1000d0fc:	003fe306 	br	1000d08c <__alt_data_end+0xf800d08c>
1000d100:	0011883a 	mov	r8,zero
1000d104:	0005883a 	mov	r2,zero
1000d108:	003e3f06 	br	1000ca08 <__alt_data_end+0xf800ca08>
1000d10c:	0401ffc4 	movi	r16,2047
1000d110:	003e2506 	br	1000c9a8 <__alt_data_end+0xf800c9a8>
1000d114:	0013883a 	mov	r9,zero
1000d118:	003f8406 	br	1000cf2c <__alt_data_end+0xf800cf2c>
1000d11c:	0005883a 	mov	r2,zero
1000d120:	0007883a 	mov	r3,zero
1000d124:	003e8906 	br	1000cb4c <__alt_data_end+0xf800cb4c>
1000d128:	197ff804 	addi	r5,r3,-32
1000d12c:	01000804 	movi	r4,32
1000d130:	414ad83a 	srl	r5,r8,r5
1000d134:	19002426 	beq	r3,r4,1000d1c8 <__adddf3+0x89c>
1000d138:	01001004 	movi	r4,64
1000d13c:	20c7c83a 	sub	r3,r4,r3
1000d140:	40c6983a 	sll	r3,r8,r3
1000d144:	1c46b03a 	or	r3,r3,r17
1000d148:	1806c03a 	cmpne	r3,r3,zero
1000d14c:	28e2b03a 	or	r17,r5,r3
1000d150:	0007883a 	mov	r3,zero
1000d154:	003f2306 	br	1000cde4 <__alt_data_end+0xf800cde4>
1000d158:	0007883a 	mov	r3,zero
1000d15c:	5811883a 	mov	r8,r11
1000d160:	00bfffc4 	movi	r2,-1
1000d164:	0401ffc4 	movi	r16,2047
1000d168:	003e7806 	br	1000cb4c <__alt_data_end+0xf800cb4c>
1000d16c:	4462b03a 	or	r17,r8,r17
1000d170:	8822c03a 	cmpne	r17,r17,zero
1000d174:	0009883a 	mov	r4,zero
1000d178:	003fa006 	br	1000cffc <__alt_data_end+0xf800cffc>
1000d17c:	4811883a 	mov	r8,r9
1000d180:	3023883a 	mov	r17,r6
1000d184:	0401ffc4 	movi	r16,2047
1000d188:	003e0706 	br	1000c9a8 <__alt_data_end+0xf800c9a8>
1000d18c:	4811883a 	mov	r8,r9
1000d190:	3023883a 	mov	r17,r6
1000d194:	003e0406 	br	1000c9a8 <__alt_data_end+0xf800c9a8>
1000d198:	21fff804 	addi	r7,r4,-32
1000d19c:	01400804 	movi	r5,32
1000d1a0:	41ced83a 	srl	r7,r8,r7
1000d1a4:	21400a26 	beq	r4,r5,1000d1d0 <__adddf3+0x8a4>
1000d1a8:	01401004 	movi	r5,64
1000d1ac:	2909c83a 	sub	r4,r5,r4
1000d1b0:	4108983a 	sll	r4,r8,r4
1000d1b4:	2448b03a 	or	r4,r4,r17
1000d1b8:	2008c03a 	cmpne	r4,r4,zero
1000d1bc:	3922b03a 	or	r17,r7,r4
1000d1c0:	0009883a 	mov	r4,zero
1000d1c4:	003f8d06 	br	1000cffc <__alt_data_end+0xf800cffc>
1000d1c8:	0007883a 	mov	r3,zero
1000d1cc:	003fdd06 	br	1000d144 <__alt_data_end+0xf800d144>
1000d1d0:	0009883a 	mov	r4,zero
1000d1d4:	003ff706 	br	1000d1b4 <__alt_data_end+0xf800d1b4>

1000d1d8 <__divdf3>:
1000d1d8:	defff004 	addi	sp,sp,-64
1000d1dc:	dc800815 	stw	r18,32(sp)
1000d1e0:	2824d53a 	srli	r18,r5,20
1000d1e4:	dd800c15 	stw	r22,48(sp)
1000d1e8:	282cd7fa 	srli	r22,r5,31
1000d1ec:	dc000615 	stw	r16,24(sp)
1000d1f0:	04000434 	movhi	r16,16
1000d1f4:	843fffc4 	addi	r16,r16,-1
1000d1f8:	dfc00f15 	stw	ra,60(sp)
1000d1fc:	df000e15 	stw	fp,56(sp)
1000d200:	ddc00d15 	stw	r23,52(sp)
1000d204:	dd400b15 	stw	r21,44(sp)
1000d208:	dd000a15 	stw	r20,40(sp)
1000d20c:	dcc00915 	stw	r19,36(sp)
1000d210:	dc400715 	stw	r17,28(sp)
1000d214:	9481ffcc 	andi	r18,r18,2047
1000d218:	2c20703a 	and	r16,r5,r16
1000d21c:	b2003fcc 	andi	r8,r22,255
1000d220:	90006126 	beq	r18,zero,1000d3a8 <__divdf3+0x1d0>
1000d224:	0081ffc4 	movi	r2,2047
1000d228:	202b883a 	mov	r21,r4
1000d22c:	90803726 	beq	r18,r2,1000d30c <__divdf3+0x134>
1000d230:	80800434 	orhi	r2,r16,16
1000d234:	100490fa 	slli	r2,r2,3
1000d238:	2020d77a 	srli	r16,r4,29
1000d23c:	202a90fa 	slli	r21,r4,3
1000d240:	94bf0044 	addi	r18,r18,-1023
1000d244:	80a0b03a 	or	r16,r16,r2
1000d248:	0013883a 	mov	r9,zero
1000d24c:	000b883a 	mov	r5,zero
1000d250:	3806d53a 	srli	r3,r7,20
1000d254:	382ed7fa 	srli	r23,r7,31
1000d258:	04400434 	movhi	r17,16
1000d25c:	8c7fffc4 	addi	r17,r17,-1
1000d260:	18c1ffcc 	andi	r3,r3,2047
1000d264:	3029883a 	mov	r20,r6
1000d268:	3c62703a 	and	r17,r7,r17
1000d26c:	bf003fcc 	andi	fp,r23,255
1000d270:	18006e26 	beq	r3,zero,1000d42c <__divdf3+0x254>
1000d274:	0081ffc4 	movi	r2,2047
1000d278:	18806626 	beq	r3,r2,1000d414 <__divdf3+0x23c>
1000d27c:	88800434 	orhi	r2,r17,16
1000d280:	100490fa 	slli	r2,r2,3
1000d284:	3022d77a 	srli	r17,r6,29
1000d288:	302890fa 	slli	r20,r6,3
1000d28c:	18ff0044 	addi	r3,r3,-1023
1000d290:	88a2b03a 	or	r17,r17,r2
1000d294:	000f883a 	mov	r7,zero
1000d298:	b5e6f03a 	xor	r19,r22,r23
1000d29c:	3a4cb03a 	or	r6,r7,r9
1000d2a0:	008003c4 	movi	r2,15
1000d2a4:	9809883a 	mov	r4,r19
1000d2a8:	90c7c83a 	sub	r3,r18,r3
1000d2ac:	9cc03fcc 	andi	r19,r19,255
1000d2b0:	11809636 	bltu	r2,r6,1000d50c <__divdf3+0x334>
1000d2b4:	300c90ba 	slli	r6,r6,2
1000d2b8:	00840074 	movhi	r2,4097
1000d2bc:	10b4b304 	addi	r2,r2,-11572
1000d2c0:	308d883a 	add	r6,r6,r2
1000d2c4:	30800017 	ldw	r2,0(r6)
1000d2c8:	1000683a 	jmp	r2
1000d2cc:	1000d50c 	andi	zero,r2,852
1000d2d0:	1000d344 	addi	zero,r2,845
1000d2d4:	1000d4fc 	xorhi	zero,r2,851
1000d2d8:	1000d338 	rdprs	zero,r2,844
1000d2dc:	1000d4fc 	xorhi	zero,r2,851
1000d2e0:	1000d4d0 	cmplti	zero,r2,851
1000d2e4:	1000d4fc 	xorhi	zero,r2,851
1000d2e8:	1000d338 	rdprs	zero,r2,844
1000d2ec:	1000d344 	addi	zero,r2,845
1000d2f0:	1000d344 	addi	zero,r2,845
1000d2f4:	1000d4d0 	cmplti	zero,r2,851
1000d2f8:	1000d338 	rdprs	zero,r2,844
1000d2fc:	1000d328 	cmpgeui	zero,r2,844
1000d300:	1000d328 	cmpgeui	zero,r2,844
1000d304:	1000d328 	cmpgeui	zero,r2,844
1000d308:	1000d894 	ori	zero,r2,866
1000d30c:	2404b03a 	or	r2,r4,r16
1000d310:	10006c1e 	bne	r2,zero,1000d4c4 <__divdf3+0x2ec>
1000d314:	02400204 	movi	r9,8
1000d318:	0021883a 	mov	r16,zero
1000d31c:	002b883a 	mov	r21,zero
1000d320:	01400084 	movi	r5,2
1000d324:	003fca06 	br	1000d250 <__alt_data_end+0xf800d250>
1000d328:	8023883a 	mov	r17,r16
1000d32c:	a829883a 	mov	r20,r21
1000d330:	4039883a 	mov	fp,r8
1000d334:	280f883a 	mov	r7,r5
1000d338:	00800084 	movi	r2,2
1000d33c:	3881601e 	bne	r7,r2,1000d8c0 <__divdf3+0x6e8>
1000d340:	e027883a 	mov	r19,fp
1000d344:	9900004c 	andi	r4,r19,1
1000d348:	0081ffc4 	movi	r2,2047
1000d34c:	0021883a 	mov	r16,zero
1000d350:	002b883a 	mov	r21,zero
1000d354:	1004953a 	slli	r2,r2,20
1000d358:	20c03fcc 	andi	r3,r4,255
1000d35c:	01400434 	movhi	r5,16
1000d360:	297fffc4 	addi	r5,r5,-1
1000d364:	180697fa 	slli	r3,r3,31
1000d368:	8160703a 	and	r16,r16,r5
1000d36c:	80a0b03a 	or	r16,r16,r2
1000d370:	80c6b03a 	or	r3,r16,r3
1000d374:	a805883a 	mov	r2,r21
1000d378:	dfc00f17 	ldw	ra,60(sp)
1000d37c:	df000e17 	ldw	fp,56(sp)
1000d380:	ddc00d17 	ldw	r23,52(sp)
1000d384:	dd800c17 	ldw	r22,48(sp)
1000d388:	dd400b17 	ldw	r21,44(sp)
1000d38c:	dd000a17 	ldw	r20,40(sp)
1000d390:	dcc00917 	ldw	r19,36(sp)
1000d394:	dc800817 	ldw	r18,32(sp)
1000d398:	dc400717 	ldw	r17,28(sp)
1000d39c:	dc000617 	ldw	r16,24(sp)
1000d3a0:	dec01004 	addi	sp,sp,64
1000d3a4:	f800283a 	ret
1000d3a8:	2404b03a 	or	r2,r4,r16
1000d3ac:	2023883a 	mov	r17,r4
1000d3b0:	10003f26 	beq	r2,zero,1000d4b0 <__divdf3+0x2d8>
1000d3b4:	80015e26 	beq	r16,zero,1000d930 <__divdf3+0x758>
1000d3b8:	8009883a 	mov	r4,r16
1000d3bc:	d9800215 	stw	r6,8(sp)
1000d3c0:	d9c00515 	stw	r7,20(sp)
1000d3c4:	da000415 	stw	r8,16(sp)
1000d3c8:	000f16c0 	call	1000f16c <__clzsi2>
1000d3cc:	d9800217 	ldw	r6,8(sp)
1000d3d0:	d9c00517 	ldw	r7,20(sp)
1000d3d4:	da000417 	ldw	r8,16(sp)
1000d3d8:	113ffd44 	addi	r4,r2,-11
1000d3dc:	00c00704 	movi	r3,28
1000d3e0:	19014f16 	blt	r3,r4,1000d920 <__divdf3+0x748>
1000d3e4:	00c00744 	movi	r3,29
1000d3e8:	157ffe04 	addi	r21,r2,-8
1000d3ec:	1907c83a 	sub	r3,r3,r4
1000d3f0:	8560983a 	sll	r16,r16,r21
1000d3f4:	88c6d83a 	srl	r3,r17,r3
1000d3f8:	8d6a983a 	sll	r21,r17,r21
1000d3fc:	1c20b03a 	or	r16,r3,r16
1000d400:	1080fcc4 	addi	r2,r2,1011
1000d404:	00a5c83a 	sub	r18,zero,r2
1000d408:	0013883a 	mov	r9,zero
1000d40c:	000b883a 	mov	r5,zero
1000d410:	003f8f06 	br	1000d250 <__alt_data_end+0xf800d250>
1000d414:	3444b03a 	or	r2,r6,r17
1000d418:	1000231e 	bne	r2,zero,1000d4a8 <__divdf3+0x2d0>
1000d41c:	0023883a 	mov	r17,zero
1000d420:	0029883a 	mov	r20,zero
1000d424:	01c00084 	movi	r7,2
1000d428:	003f9b06 	br	1000d298 <__alt_data_end+0xf800d298>
1000d42c:	3444b03a 	or	r2,r6,r17
1000d430:	10001926 	beq	r2,zero,1000d498 <__divdf3+0x2c0>
1000d434:	88014b26 	beq	r17,zero,1000d964 <__divdf3+0x78c>
1000d438:	8809883a 	mov	r4,r17
1000d43c:	d9400115 	stw	r5,4(sp)
1000d440:	d9800215 	stw	r6,8(sp)
1000d444:	da000415 	stw	r8,16(sp)
1000d448:	da400315 	stw	r9,12(sp)
1000d44c:	000f16c0 	call	1000f16c <__clzsi2>
1000d450:	d9400117 	ldw	r5,4(sp)
1000d454:	d9800217 	ldw	r6,8(sp)
1000d458:	da000417 	ldw	r8,16(sp)
1000d45c:	da400317 	ldw	r9,12(sp)
1000d460:	113ffd44 	addi	r4,r2,-11
1000d464:	00c00704 	movi	r3,28
1000d468:	19013a16 	blt	r3,r4,1000d954 <__divdf3+0x77c>
1000d46c:	00c00744 	movi	r3,29
1000d470:	153ffe04 	addi	r20,r2,-8
1000d474:	1907c83a 	sub	r3,r3,r4
1000d478:	8d22983a 	sll	r17,r17,r20
1000d47c:	30c6d83a 	srl	r3,r6,r3
1000d480:	3528983a 	sll	r20,r6,r20
1000d484:	1c62b03a 	or	r17,r3,r17
1000d488:	1080fcc4 	addi	r2,r2,1011
1000d48c:	0087c83a 	sub	r3,zero,r2
1000d490:	000f883a 	mov	r7,zero
1000d494:	003f8006 	br	1000d298 <__alt_data_end+0xf800d298>
1000d498:	0023883a 	mov	r17,zero
1000d49c:	0029883a 	mov	r20,zero
1000d4a0:	01c00044 	movi	r7,1
1000d4a4:	003f7c06 	br	1000d298 <__alt_data_end+0xf800d298>
1000d4a8:	01c000c4 	movi	r7,3
1000d4ac:	003f7a06 	br	1000d298 <__alt_data_end+0xf800d298>
1000d4b0:	02400104 	movi	r9,4
1000d4b4:	0021883a 	mov	r16,zero
1000d4b8:	002b883a 	mov	r21,zero
1000d4bc:	01400044 	movi	r5,1
1000d4c0:	003f6306 	br	1000d250 <__alt_data_end+0xf800d250>
1000d4c4:	02400304 	movi	r9,12
1000d4c8:	014000c4 	movi	r5,3
1000d4cc:	003f6006 	br	1000d250 <__alt_data_end+0xf800d250>
1000d4d0:	04000434 	movhi	r16,16
1000d4d4:	0009883a 	mov	r4,zero
1000d4d8:	843fffc4 	addi	r16,r16,-1
1000d4dc:	057fffc4 	movi	r21,-1
1000d4e0:	0081ffc4 	movi	r2,2047
1000d4e4:	003f9b06 	br	1000d354 <__alt_data_end+0xf800d354>
1000d4e8:	00c00044 	movi	r3,1
1000d4ec:	1887c83a 	sub	r3,r3,r2
1000d4f0:	01000e04 	movi	r4,56
1000d4f4:	20c1530e 	bge	r4,r3,1000da44 <__divdf3+0x86c>
1000d4f8:	9900004c 	andi	r4,r19,1
1000d4fc:	0005883a 	mov	r2,zero
1000d500:	0021883a 	mov	r16,zero
1000d504:	002b883a 	mov	r21,zero
1000d508:	003f9206 	br	1000d354 <__alt_data_end+0xf800d354>
1000d50c:	8c012e36 	bltu	r17,r16,1000d9c8 <__divdf3+0x7f0>
1000d510:	84412c26 	beq	r16,r17,1000d9c4 <__divdf3+0x7ec>
1000d514:	a82f883a 	mov	r23,r21
1000d518:	18ffffc4 	addi	r3,r3,-1
1000d51c:	002b883a 	mov	r21,zero
1000d520:	a004d63a 	srli	r2,r20,24
1000d524:	8822923a 	slli	r17,r17,8
1000d528:	a028923a 	slli	r20,r20,8
1000d52c:	8009883a 	mov	r4,r16
1000d530:	88acb03a 	or	r22,r17,r2
1000d534:	dd000015 	stw	r20,0(sp)
1000d538:	b028d43a 	srli	r20,r22,16
1000d53c:	d8c00215 	stw	r3,8(sp)
1000d540:	b4bfffcc 	andi	r18,r22,65535
1000d544:	a00b883a 	mov	r5,r20
1000d548:	000c8480 	call	1000c848 <__udivsi3>
1000d54c:	100b883a 	mov	r5,r2
1000d550:	9009883a 	mov	r4,r18
1000d554:	1023883a 	mov	r17,r2
1000d558:	000c9040 	call	1000c904 <__mulsi3>
1000d55c:	8009883a 	mov	r4,r16
1000d560:	a00b883a 	mov	r5,r20
1000d564:	1039883a 	mov	fp,r2
1000d568:	000c8ac0 	call	1000c8ac <__umodsi3>
1000d56c:	1004943a 	slli	r2,r2,16
1000d570:	b808d43a 	srli	r4,r23,16
1000d574:	d8c00217 	ldw	r3,8(sp)
1000d578:	2084b03a 	or	r2,r4,r2
1000d57c:	1700062e 	bgeu	r2,fp,1000d598 <__divdf3+0x3c0>
1000d580:	1585883a 	add	r2,r2,r22
1000d584:	893fffc4 	addi	r4,r17,-1
1000d588:	15811d36 	bltu	r2,r22,1000da00 <__divdf3+0x828>
1000d58c:	17011c2e 	bgeu	r2,fp,1000da00 <__divdf3+0x828>
1000d590:	8c7fff84 	addi	r17,r17,-2
1000d594:	1585883a 	add	r2,r2,r22
1000d598:	1739c83a 	sub	fp,r2,fp
1000d59c:	a00b883a 	mov	r5,r20
1000d5a0:	e009883a 	mov	r4,fp
1000d5a4:	d8c00215 	stw	r3,8(sp)
1000d5a8:	000c8480 	call	1000c848 <__udivsi3>
1000d5ac:	100b883a 	mov	r5,r2
1000d5b0:	9009883a 	mov	r4,r18
1000d5b4:	1021883a 	mov	r16,r2
1000d5b8:	000c9040 	call	1000c904 <__mulsi3>
1000d5bc:	a00b883a 	mov	r5,r20
1000d5c0:	e009883a 	mov	r4,fp
1000d5c4:	d8800415 	stw	r2,16(sp)
1000d5c8:	000c8ac0 	call	1000c8ac <__umodsi3>
1000d5cc:	1004943a 	slli	r2,r2,16
1000d5d0:	da000417 	ldw	r8,16(sp)
1000d5d4:	bdffffcc 	andi	r23,r23,65535
1000d5d8:	b884b03a 	or	r2,r23,r2
1000d5dc:	d8c00217 	ldw	r3,8(sp)
1000d5e0:	1200062e 	bgeu	r2,r8,1000d5fc <__divdf3+0x424>
1000d5e4:	1585883a 	add	r2,r2,r22
1000d5e8:	813fffc4 	addi	r4,r16,-1
1000d5ec:	15810236 	bltu	r2,r22,1000d9f8 <__divdf3+0x820>
1000d5f0:	1201012e 	bgeu	r2,r8,1000d9f8 <__divdf3+0x820>
1000d5f4:	843fff84 	addi	r16,r16,-2
1000d5f8:	1585883a 	add	r2,r2,r22
1000d5fc:	8822943a 	slli	r17,r17,16
1000d600:	d9800017 	ldw	r6,0(sp)
1000d604:	1211c83a 	sub	r8,r2,r8
1000d608:	8c22b03a 	or	r17,r17,r16
1000d60c:	373fffcc 	andi	fp,r6,65535
1000d610:	8abfffcc 	andi	r10,r17,65535
1000d614:	8820d43a 	srli	r16,r17,16
1000d618:	5009883a 	mov	r4,r10
1000d61c:	e00b883a 	mov	r5,fp
1000d620:	302ed43a 	srli	r23,r6,16
1000d624:	d8c00215 	stw	r3,8(sp)
1000d628:	da000415 	stw	r8,16(sp)
1000d62c:	da800115 	stw	r10,4(sp)
1000d630:	000c9040 	call	1000c904 <__mulsi3>
1000d634:	800b883a 	mov	r5,r16
1000d638:	e009883a 	mov	r4,fp
1000d63c:	d8800515 	stw	r2,20(sp)
1000d640:	000c9040 	call	1000c904 <__mulsi3>
1000d644:	8009883a 	mov	r4,r16
1000d648:	b80b883a 	mov	r5,r23
1000d64c:	d8800315 	stw	r2,12(sp)
1000d650:	000c9040 	call	1000c904 <__mulsi3>
1000d654:	da800117 	ldw	r10,4(sp)
1000d658:	b80b883a 	mov	r5,r23
1000d65c:	1021883a 	mov	r16,r2
1000d660:	5009883a 	mov	r4,r10
1000d664:	000c9040 	call	1000c904 <__mulsi3>
1000d668:	d9c00517 	ldw	r7,20(sp)
1000d66c:	da400317 	ldw	r9,12(sp)
1000d670:	d8c00217 	ldw	r3,8(sp)
1000d674:	3808d43a 	srli	r4,r7,16
1000d678:	1245883a 	add	r2,r2,r9
1000d67c:	da000417 	ldw	r8,16(sp)
1000d680:	2085883a 	add	r2,r4,r2
1000d684:	1240022e 	bgeu	r2,r9,1000d690 <__divdf3+0x4b8>
1000d688:	01000074 	movhi	r4,1
1000d68c:	8121883a 	add	r16,r16,r4
1000d690:	1008d43a 	srli	r4,r2,16
1000d694:	1004943a 	slli	r2,r2,16
1000d698:	39ffffcc 	andi	r7,r7,65535
1000d69c:	2409883a 	add	r4,r4,r16
1000d6a0:	11c5883a 	add	r2,r2,r7
1000d6a4:	4100bb36 	bltu	r8,r4,1000d994 <__divdf3+0x7bc>
1000d6a8:	4100d726 	beq	r8,r4,1000da08 <__divdf3+0x830>
1000d6ac:	4109c83a 	sub	r4,r8,r4
1000d6b0:	a8a1c83a 	sub	r16,r21,r2
1000d6b4:	ac2b803a 	cmpltu	r21,r21,r16
1000d6b8:	256bc83a 	sub	r21,r4,r21
1000d6bc:	b540d926 	beq	r22,r21,1000da24 <__divdf3+0x84c>
1000d6c0:	a00b883a 	mov	r5,r20
1000d6c4:	a809883a 	mov	r4,r21
1000d6c8:	d8c00215 	stw	r3,8(sp)
1000d6cc:	000c8480 	call	1000c848 <__udivsi3>
1000d6d0:	100b883a 	mov	r5,r2
1000d6d4:	9009883a 	mov	r4,r18
1000d6d8:	d8800515 	stw	r2,20(sp)
1000d6dc:	000c9040 	call	1000c904 <__mulsi3>
1000d6e0:	a809883a 	mov	r4,r21
1000d6e4:	a00b883a 	mov	r5,r20
1000d6e8:	d8800415 	stw	r2,16(sp)
1000d6ec:	000c8ac0 	call	1000c8ac <__umodsi3>
1000d6f0:	1004943a 	slli	r2,r2,16
1000d6f4:	8008d43a 	srli	r4,r16,16
1000d6f8:	da000417 	ldw	r8,16(sp)
1000d6fc:	d8c00217 	ldw	r3,8(sp)
1000d700:	2084b03a 	or	r2,r4,r2
1000d704:	d9c00517 	ldw	r7,20(sp)
1000d708:	1200062e 	bgeu	r2,r8,1000d724 <__divdf3+0x54c>
1000d70c:	1585883a 	add	r2,r2,r22
1000d710:	393fffc4 	addi	r4,r7,-1
1000d714:	1580c536 	bltu	r2,r22,1000da2c <__divdf3+0x854>
1000d718:	1200c42e 	bgeu	r2,r8,1000da2c <__divdf3+0x854>
1000d71c:	39ffff84 	addi	r7,r7,-2
1000d720:	1585883a 	add	r2,r2,r22
1000d724:	122bc83a 	sub	r21,r2,r8
1000d728:	a00b883a 	mov	r5,r20
1000d72c:	a809883a 	mov	r4,r21
1000d730:	d8c00215 	stw	r3,8(sp)
1000d734:	d9c00515 	stw	r7,20(sp)
1000d738:	000c8480 	call	1000c848 <__udivsi3>
1000d73c:	9009883a 	mov	r4,r18
1000d740:	100b883a 	mov	r5,r2
1000d744:	d8800415 	stw	r2,16(sp)
1000d748:	000c9040 	call	1000c904 <__mulsi3>
1000d74c:	a809883a 	mov	r4,r21
1000d750:	a00b883a 	mov	r5,r20
1000d754:	1025883a 	mov	r18,r2
1000d758:	000c8ac0 	call	1000c8ac <__umodsi3>
1000d75c:	1004943a 	slli	r2,r2,16
1000d760:	813fffcc 	andi	r4,r16,65535
1000d764:	d8c00217 	ldw	r3,8(sp)
1000d768:	20a0b03a 	or	r16,r4,r2
1000d76c:	d9c00517 	ldw	r7,20(sp)
1000d770:	da000417 	ldw	r8,16(sp)
1000d774:	8480062e 	bgeu	r16,r18,1000d790 <__divdf3+0x5b8>
1000d778:	85a1883a 	add	r16,r16,r22
1000d77c:	40bfffc4 	addi	r2,r8,-1
1000d780:	8580ac36 	bltu	r16,r22,1000da34 <__divdf3+0x85c>
1000d784:	8480ab2e 	bgeu	r16,r18,1000da34 <__divdf3+0x85c>
1000d788:	423fff84 	addi	r8,r8,-2
1000d78c:	85a1883a 	add	r16,r16,r22
1000d790:	3804943a 	slli	r2,r7,16
1000d794:	84a1c83a 	sub	r16,r16,r18
1000d798:	e009883a 	mov	r4,fp
1000d79c:	1228b03a 	or	r20,r2,r8
1000d7a0:	a1ffffcc 	andi	r7,r20,65535
1000d7a4:	a024d43a 	srli	r18,r20,16
1000d7a8:	380b883a 	mov	r5,r7
1000d7ac:	d8c00215 	stw	r3,8(sp)
1000d7b0:	d9c00515 	stw	r7,20(sp)
1000d7b4:	000c9040 	call	1000c904 <__mulsi3>
1000d7b8:	900b883a 	mov	r5,r18
1000d7bc:	e009883a 	mov	r4,fp
1000d7c0:	102b883a 	mov	r21,r2
1000d7c4:	000c9040 	call	1000c904 <__mulsi3>
1000d7c8:	900b883a 	mov	r5,r18
1000d7cc:	b809883a 	mov	r4,r23
1000d7d0:	1039883a 	mov	fp,r2
1000d7d4:	000c9040 	call	1000c904 <__mulsi3>
1000d7d8:	d9c00517 	ldw	r7,20(sp)
1000d7dc:	b80b883a 	mov	r5,r23
1000d7e0:	1025883a 	mov	r18,r2
1000d7e4:	3809883a 	mov	r4,r7
1000d7e8:	000c9040 	call	1000c904 <__mulsi3>
1000d7ec:	a808d43a 	srli	r4,r21,16
1000d7f0:	1705883a 	add	r2,r2,fp
1000d7f4:	d8c00217 	ldw	r3,8(sp)
1000d7f8:	2085883a 	add	r2,r4,r2
1000d7fc:	1700022e 	bgeu	r2,fp,1000d808 <__divdf3+0x630>
1000d800:	01000074 	movhi	r4,1
1000d804:	9125883a 	add	r18,r18,r4
1000d808:	1008d43a 	srli	r4,r2,16
1000d80c:	1004943a 	slli	r2,r2,16
1000d810:	ad7fffcc 	andi	r21,r21,65535
1000d814:	2489883a 	add	r4,r4,r18
1000d818:	1545883a 	add	r2,r2,r21
1000d81c:	81003836 	bltu	r16,r4,1000d900 <__divdf3+0x728>
1000d820:	81003626 	beq	r16,r4,1000d8fc <__divdf3+0x724>
1000d824:	a5000054 	ori	r20,r20,1
1000d828:	1880ffc4 	addi	r2,r3,1023
1000d82c:	00bf2e0e 	bge	zero,r2,1000d4e8 <__alt_data_end+0xf800d4e8>
1000d830:	a10001cc 	andi	r4,r20,7
1000d834:	20000726 	beq	r4,zero,1000d854 <__divdf3+0x67c>
1000d838:	a10003cc 	andi	r4,r20,15
1000d83c:	01400104 	movi	r5,4
1000d840:	21400426 	beq	r4,r5,1000d854 <__divdf3+0x67c>
1000d844:	a149883a 	add	r4,r20,r5
1000d848:	2529803a 	cmpltu	r20,r4,r20
1000d84c:	8d23883a 	add	r17,r17,r20
1000d850:	2029883a 	mov	r20,r4
1000d854:	8900402c 	andhi	r4,r17,256
1000d858:	20000426 	beq	r4,zero,1000d86c <__divdf3+0x694>
1000d85c:	18810004 	addi	r2,r3,1024
1000d860:	00ffc034 	movhi	r3,65280
1000d864:	18ffffc4 	addi	r3,r3,-1
1000d868:	88e2703a 	and	r17,r17,r3
1000d86c:	00c1ff84 	movi	r3,2046
1000d870:	18beb416 	blt	r3,r2,1000d344 <__alt_data_end+0xf800d344>
1000d874:	a028d0fa 	srli	r20,r20,3
1000d878:	882a977a 	slli	r21,r17,29
1000d87c:	8820927a 	slli	r16,r17,9
1000d880:	1081ffcc 	andi	r2,r2,2047
1000d884:	ad2ab03a 	or	r21,r21,r20
1000d888:	8020d33a 	srli	r16,r16,12
1000d88c:	9900004c 	andi	r4,r19,1
1000d890:	003eb006 	br	1000d354 <__alt_data_end+0xf800d354>
1000d894:	8080022c 	andhi	r2,r16,8
1000d898:	10001226 	beq	r2,zero,1000d8e4 <__divdf3+0x70c>
1000d89c:	8880022c 	andhi	r2,r17,8
1000d8a0:	1000101e 	bne	r2,zero,1000d8e4 <__divdf3+0x70c>
1000d8a4:	00800434 	movhi	r2,16
1000d8a8:	8c000234 	orhi	r16,r17,8
1000d8ac:	10bfffc4 	addi	r2,r2,-1
1000d8b0:	b809883a 	mov	r4,r23
1000d8b4:	80a0703a 	and	r16,r16,r2
1000d8b8:	a02b883a 	mov	r21,r20
1000d8bc:	003f0806 	br	1000d4e0 <__alt_data_end+0xf800d4e0>
1000d8c0:	008000c4 	movi	r2,3
1000d8c4:	3880b126 	beq	r7,r2,1000db8c <__divdf3+0x9b4>
1000d8c8:	00800044 	movi	r2,1
1000d8cc:	38805b1e 	bne	r7,r2,1000da3c <__divdf3+0x864>
1000d8d0:	e009883a 	mov	r4,fp
1000d8d4:	0005883a 	mov	r2,zero
1000d8d8:	0021883a 	mov	r16,zero
1000d8dc:	002b883a 	mov	r21,zero
1000d8e0:	003e9c06 	br	1000d354 <__alt_data_end+0xf800d354>
1000d8e4:	00800434 	movhi	r2,16
1000d8e8:	84000234 	orhi	r16,r16,8
1000d8ec:	10bfffc4 	addi	r2,r2,-1
1000d8f0:	b009883a 	mov	r4,r22
1000d8f4:	80a0703a 	and	r16,r16,r2
1000d8f8:	003ef906 	br	1000d4e0 <__alt_data_end+0xf800d4e0>
1000d8fc:	103fca26 	beq	r2,zero,1000d828 <__alt_data_end+0xf800d828>
1000d900:	b421883a 	add	r16,r22,r16
1000d904:	a17fffc4 	addi	r5,r20,-1
1000d908:	8580422e 	bgeu	r16,r22,1000da14 <__divdf3+0x83c>
1000d90c:	2829883a 	mov	r20,r5
1000d910:	813fc41e 	bne	r16,r4,1000d824 <__alt_data_end+0xf800d824>
1000d914:	d9800017 	ldw	r6,0(sp)
1000d918:	30bfc21e 	bne	r6,r2,1000d824 <__alt_data_end+0xf800d824>
1000d91c:	003fc206 	br	1000d828 <__alt_data_end+0xf800d828>
1000d920:	143ff604 	addi	r16,r2,-40
1000d924:	8c20983a 	sll	r16,r17,r16
1000d928:	002b883a 	mov	r21,zero
1000d92c:	003eb406 	br	1000d400 <__alt_data_end+0xf800d400>
1000d930:	d9800215 	stw	r6,8(sp)
1000d934:	d9c00515 	stw	r7,20(sp)
1000d938:	da000415 	stw	r8,16(sp)
1000d93c:	000f16c0 	call	1000f16c <__clzsi2>
1000d940:	10800804 	addi	r2,r2,32
1000d944:	da000417 	ldw	r8,16(sp)
1000d948:	d9c00517 	ldw	r7,20(sp)
1000d94c:	d9800217 	ldw	r6,8(sp)
1000d950:	003ea106 	br	1000d3d8 <__alt_data_end+0xf800d3d8>
1000d954:	147ff604 	addi	r17,r2,-40
1000d958:	3462983a 	sll	r17,r6,r17
1000d95c:	0029883a 	mov	r20,zero
1000d960:	003ec906 	br	1000d488 <__alt_data_end+0xf800d488>
1000d964:	3009883a 	mov	r4,r6
1000d968:	d9400115 	stw	r5,4(sp)
1000d96c:	d9800215 	stw	r6,8(sp)
1000d970:	da000415 	stw	r8,16(sp)
1000d974:	da400315 	stw	r9,12(sp)
1000d978:	000f16c0 	call	1000f16c <__clzsi2>
1000d97c:	10800804 	addi	r2,r2,32
1000d980:	da400317 	ldw	r9,12(sp)
1000d984:	da000417 	ldw	r8,16(sp)
1000d988:	d9800217 	ldw	r6,8(sp)
1000d98c:	d9400117 	ldw	r5,4(sp)
1000d990:	003eb306 	br	1000d460 <__alt_data_end+0xf800d460>
1000d994:	d9800017 	ldw	r6,0(sp)
1000d998:	a9ab883a 	add	r21,r21,r6
1000d99c:	a98b803a 	cmpltu	r5,r21,r6
1000d9a0:	2d8b883a 	add	r5,r5,r22
1000d9a4:	2a11883a 	add	r8,r5,r8
1000d9a8:	897fffc4 	addi	r5,r17,-1
1000d9ac:	b2000c2e 	bgeu	r22,r8,1000d9e0 <__divdf3+0x808>
1000d9b0:	41003f36 	bltu	r8,r4,1000dab0 <__divdf3+0x8d8>
1000d9b4:	22006c26 	beq	r4,r8,1000db68 <__divdf3+0x990>
1000d9b8:	4109c83a 	sub	r4,r8,r4
1000d9bc:	2823883a 	mov	r17,r5
1000d9c0:	003f3b06 	br	1000d6b0 <__alt_data_end+0xf800d6b0>
1000d9c4:	ad3ed336 	bltu	r21,r20,1000d514 <__alt_data_end+0xf800d514>
1000d9c8:	a804d07a 	srli	r2,r21,1
1000d9cc:	802e97fa 	slli	r23,r16,31
1000d9d0:	a82a97fa 	slli	r21,r21,31
1000d9d4:	8020d07a 	srli	r16,r16,1
1000d9d8:	b8aeb03a 	or	r23,r23,r2
1000d9dc:	003ed006 	br	1000d520 <__alt_data_end+0xf800d520>
1000d9e0:	b23ff51e 	bne	r22,r8,1000d9b8 <__alt_data_end+0xf800d9b8>
1000d9e4:	d9800017 	ldw	r6,0(sp)
1000d9e8:	a9bff12e 	bgeu	r21,r6,1000d9b0 <__alt_data_end+0xf800d9b0>
1000d9ec:	b109c83a 	sub	r4,r22,r4
1000d9f0:	2823883a 	mov	r17,r5
1000d9f4:	003f2e06 	br	1000d6b0 <__alt_data_end+0xf800d6b0>
1000d9f8:	2021883a 	mov	r16,r4
1000d9fc:	003eff06 	br	1000d5fc <__alt_data_end+0xf800d5fc>
1000da00:	2023883a 	mov	r17,r4
1000da04:	003ee406 	br	1000d598 <__alt_data_end+0xf800d598>
1000da08:	a8bfe236 	bltu	r21,r2,1000d994 <__alt_data_end+0xf800d994>
1000da0c:	0009883a 	mov	r4,zero
1000da10:	003f2706 	br	1000d6b0 <__alt_data_end+0xf800d6b0>
1000da14:	81002d36 	bltu	r16,r4,1000dacc <__divdf3+0x8f4>
1000da18:	24005626 	beq	r4,r16,1000db74 <__divdf3+0x99c>
1000da1c:	2829883a 	mov	r20,r5
1000da20:	003f8006 	br	1000d824 <__alt_data_end+0xf800d824>
1000da24:	053fffc4 	movi	r20,-1
1000da28:	003f7f06 	br	1000d828 <__alt_data_end+0xf800d828>
1000da2c:	200f883a 	mov	r7,r4
1000da30:	003f3c06 	br	1000d724 <__alt_data_end+0xf800d724>
1000da34:	1011883a 	mov	r8,r2
1000da38:	003f5506 	br	1000d790 <__alt_data_end+0xf800d790>
1000da3c:	e027883a 	mov	r19,fp
1000da40:	003f7906 	br	1000d828 <__alt_data_end+0xf800d828>
1000da44:	010007c4 	movi	r4,31
1000da48:	20c02816 	blt	r4,r3,1000daec <__divdf3+0x914>
1000da4c:	00800804 	movi	r2,32
1000da50:	10c5c83a 	sub	r2,r2,r3
1000da54:	888a983a 	sll	r5,r17,r2
1000da58:	a0c8d83a 	srl	r4,r20,r3
1000da5c:	a084983a 	sll	r2,r20,r2
1000da60:	88e2d83a 	srl	r17,r17,r3
1000da64:	2906b03a 	or	r3,r5,r4
1000da68:	1004c03a 	cmpne	r2,r2,zero
1000da6c:	1886b03a 	or	r3,r3,r2
1000da70:	188001cc 	andi	r2,r3,7
1000da74:	10000726 	beq	r2,zero,1000da94 <__divdf3+0x8bc>
1000da78:	188003cc 	andi	r2,r3,15
1000da7c:	01000104 	movi	r4,4
1000da80:	11000426 	beq	r2,r4,1000da94 <__divdf3+0x8bc>
1000da84:	1805883a 	mov	r2,r3
1000da88:	10c00104 	addi	r3,r2,4
1000da8c:	1885803a 	cmpltu	r2,r3,r2
1000da90:	88a3883a 	add	r17,r17,r2
1000da94:	8880202c 	andhi	r2,r17,128
1000da98:	10002926 	beq	r2,zero,1000db40 <__divdf3+0x968>
1000da9c:	9900004c 	andi	r4,r19,1
1000daa0:	00800044 	movi	r2,1
1000daa4:	0021883a 	mov	r16,zero
1000daa8:	002b883a 	mov	r21,zero
1000daac:	003e2906 	br	1000d354 <__alt_data_end+0xf800d354>
1000dab0:	d9800017 	ldw	r6,0(sp)
1000dab4:	8c7fff84 	addi	r17,r17,-2
1000dab8:	a9ab883a 	add	r21,r21,r6
1000dabc:	a98b803a 	cmpltu	r5,r21,r6
1000dac0:	2d8b883a 	add	r5,r5,r22
1000dac4:	2a11883a 	add	r8,r5,r8
1000dac8:	003ef806 	br	1000d6ac <__alt_data_end+0xf800d6ac>
1000dacc:	d9800017 	ldw	r6,0(sp)
1000dad0:	318f883a 	add	r7,r6,r6
1000dad4:	398b803a 	cmpltu	r5,r7,r6
1000dad8:	2d8d883a 	add	r6,r5,r22
1000dadc:	81a1883a 	add	r16,r16,r6
1000dae0:	a17fff84 	addi	r5,r20,-2
1000dae4:	d9c00015 	stw	r7,0(sp)
1000dae8:	003f8806 	br	1000d90c <__alt_data_end+0xf800d90c>
1000daec:	013ff844 	movi	r4,-31
1000daf0:	2085c83a 	sub	r2,r4,r2
1000daf4:	8888d83a 	srl	r4,r17,r2
1000daf8:	00800804 	movi	r2,32
1000dafc:	18802126 	beq	r3,r2,1000db84 <__divdf3+0x9ac>
1000db00:	04001004 	movi	r16,64
1000db04:	80c7c83a 	sub	r3,r16,r3
1000db08:	88e0983a 	sll	r16,r17,r3
1000db0c:	8504b03a 	or	r2,r16,r20
1000db10:	1004c03a 	cmpne	r2,r2,zero
1000db14:	2084b03a 	or	r2,r4,r2
1000db18:	144001cc 	andi	r17,r2,7
1000db1c:	88000d1e 	bne	r17,zero,1000db54 <__divdf3+0x97c>
1000db20:	0021883a 	mov	r16,zero
1000db24:	102ad0fa 	srli	r21,r2,3
1000db28:	9900004c 	andi	r4,r19,1
1000db2c:	0005883a 	mov	r2,zero
1000db30:	ac6ab03a 	or	r21,r21,r17
1000db34:	003e0706 	br	1000d354 <__alt_data_end+0xf800d354>
1000db38:	1007883a 	mov	r3,r2
1000db3c:	0023883a 	mov	r17,zero
1000db40:	8820927a 	slli	r16,r17,9
1000db44:	1805883a 	mov	r2,r3
1000db48:	8822977a 	slli	r17,r17,29
1000db4c:	8020d33a 	srli	r16,r16,12
1000db50:	003ff406 	br	1000db24 <__alt_data_end+0xf800db24>
1000db54:	10c003cc 	andi	r3,r2,15
1000db58:	01000104 	movi	r4,4
1000db5c:	193ff626 	beq	r3,r4,1000db38 <__alt_data_end+0xf800db38>
1000db60:	0023883a 	mov	r17,zero
1000db64:	003fc806 	br	1000da88 <__alt_data_end+0xf800da88>
1000db68:	a8bfd136 	bltu	r21,r2,1000dab0 <__alt_data_end+0xf800dab0>
1000db6c:	2823883a 	mov	r17,r5
1000db70:	003fa606 	br	1000da0c <__alt_data_end+0xf800da0c>
1000db74:	d9800017 	ldw	r6,0(sp)
1000db78:	30bfd436 	bltu	r6,r2,1000dacc <__alt_data_end+0xf800dacc>
1000db7c:	2829883a 	mov	r20,r5
1000db80:	003f6406 	br	1000d914 <__alt_data_end+0xf800d914>
1000db84:	0021883a 	mov	r16,zero
1000db88:	003fe006 	br	1000db0c <__alt_data_end+0xf800db0c>
1000db8c:	00800434 	movhi	r2,16
1000db90:	8c000234 	orhi	r16,r17,8
1000db94:	10bfffc4 	addi	r2,r2,-1
1000db98:	e009883a 	mov	r4,fp
1000db9c:	80a0703a 	and	r16,r16,r2
1000dba0:	a02b883a 	mov	r21,r20
1000dba4:	003e4e06 	br	1000d4e0 <__alt_data_end+0xf800d4e0>

1000dba8 <__eqdf2>:
1000dba8:	2804d53a 	srli	r2,r5,20
1000dbac:	3806d53a 	srli	r3,r7,20
1000dbb0:	02000434 	movhi	r8,16
1000dbb4:	423fffc4 	addi	r8,r8,-1
1000dbb8:	1081ffcc 	andi	r2,r2,2047
1000dbbc:	0281ffc4 	movi	r10,2047
1000dbc0:	2a12703a 	and	r9,r5,r8
1000dbc4:	18c1ffcc 	andi	r3,r3,2047
1000dbc8:	3a10703a 	and	r8,r7,r8
1000dbcc:	280ad7fa 	srli	r5,r5,31
1000dbd0:	380ed7fa 	srli	r7,r7,31
1000dbd4:	12801026 	beq	r2,r10,1000dc18 <__eqdf2+0x70>
1000dbd8:	0281ffc4 	movi	r10,2047
1000dbdc:	1a800a26 	beq	r3,r10,1000dc08 <__eqdf2+0x60>
1000dbe0:	10c00226 	beq	r2,r3,1000dbec <__eqdf2+0x44>
1000dbe4:	00800044 	movi	r2,1
1000dbe8:	f800283a 	ret
1000dbec:	4a3ffd1e 	bne	r9,r8,1000dbe4 <__alt_data_end+0xf800dbe4>
1000dbf0:	21bffc1e 	bne	r4,r6,1000dbe4 <__alt_data_end+0xf800dbe4>
1000dbf4:	29c00c26 	beq	r5,r7,1000dc28 <__eqdf2+0x80>
1000dbf8:	103ffa1e 	bne	r2,zero,1000dbe4 <__alt_data_end+0xf800dbe4>
1000dbfc:	2244b03a 	or	r2,r4,r9
1000dc00:	1004c03a 	cmpne	r2,r2,zero
1000dc04:	f800283a 	ret
1000dc08:	3214b03a 	or	r10,r6,r8
1000dc0c:	503ff426 	beq	r10,zero,1000dbe0 <__alt_data_end+0xf800dbe0>
1000dc10:	00800044 	movi	r2,1
1000dc14:	f800283a 	ret
1000dc18:	2254b03a 	or	r10,r4,r9
1000dc1c:	503fee26 	beq	r10,zero,1000dbd8 <__alt_data_end+0xf800dbd8>
1000dc20:	00800044 	movi	r2,1
1000dc24:	f800283a 	ret
1000dc28:	0005883a 	mov	r2,zero
1000dc2c:	f800283a 	ret

1000dc30 <__gedf2>:
1000dc30:	2804d53a 	srli	r2,r5,20
1000dc34:	3806d53a 	srli	r3,r7,20
1000dc38:	02000434 	movhi	r8,16
1000dc3c:	423fffc4 	addi	r8,r8,-1
1000dc40:	1081ffcc 	andi	r2,r2,2047
1000dc44:	0241ffc4 	movi	r9,2047
1000dc48:	2a14703a 	and	r10,r5,r8
1000dc4c:	18c1ffcc 	andi	r3,r3,2047
1000dc50:	3a10703a 	and	r8,r7,r8
1000dc54:	280ad7fa 	srli	r5,r5,31
1000dc58:	380ed7fa 	srli	r7,r7,31
1000dc5c:	12401d26 	beq	r2,r9,1000dcd4 <__gedf2+0xa4>
1000dc60:	0241ffc4 	movi	r9,2047
1000dc64:	1a401226 	beq	r3,r9,1000dcb0 <__gedf2+0x80>
1000dc68:	1000081e 	bne	r2,zero,1000dc8c <__gedf2+0x5c>
1000dc6c:	2296b03a 	or	r11,r4,r10
1000dc70:	5813003a 	cmpeq	r9,r11,zero
1000dc74:	1800091e 	bne	r3,zero,1000dc9c <__gedf2+0x6c>
1000dc78:	3218b03a 	or	r12,r6,r8
1000dc7c:	6000071e 	bne	r12,zero,1000dc9c <__gedf2+0x6c>
1000dc80:	0005883a 	mov	r2,zero
1000dc84:	5800101e 	bne	r11,zero,1000dcc8 <__gedf2+0x98>
1000dc88:	f800283a 	ret
1000dc8c:	18000c1e 	bne	r3,zero,1000dcc0 <__gedf2+0x90>
1000dc90:	3212b03a 	or	r9,r6,r8
1000dc94:	48000c26 	beq	r9,zero,1000dcc8 <__gedf2+0x98>
1000dc98:	0013883a 	mov	r9,zero
1000dc9c:	39c03fcc 	andi	r7,r7,255
1000dca0:	48000826 	beq	r9,zero,1000dcc4 <__gedf2+0x94>
1000dca4:	38000926 	beq	r7,zero,1000dccc <__gedf2+0x9c>
1000dca8:	00800044 	movi	r2,1
1000dcac:	f800283a 	ret
1000dcb0:	3212b03a 	or	r9,r6,r8
1000dcb4:	483fec26 	beq	r9,zero,1000dc68 <__alt_data_end+0xf800dc68>
1000dcb8:	00bfff84 	movi	r2,-2
1000dcbc:	f800283a 	ret
1000dcc0:	39c03fcc 	andi	r7,r7,255
1000dcc4:	29c00626 	beq	r5,r7,1000dce0 <__gedf2+0xb0>
1000dcc8:	283ff726 	beq	r5,zero,1000dca8 <__alt_data_end+0xf800dca8>
1000dccc:	00bfffc4 	movi	r2,-1
1000dcd0:	f800283a 	ret
1000dcd4:	2292b03a 	or	r9,r4,r10
1000dcd8:	483fe126 	beq	r9,zero,1000dc60 <__alt_data_end+0xf800dc60>
1000dcdc:	003ff606 	br	1000dcb8 <__alt_data_end+0xf800dcb8>
1000dce0:	18bff916 	blt	r3,r2,1000dcc8 <__alt_data_end+0xf800dcc8>
1000dce4:	10c00316 	blt	r2,r3,1000dcf4 <__gedf2+0xc4>
1000dce8:	42bff736 	bltu	r8,r10,1000dcc8 <__alt_data_end+0xf800dcc8>
1000dcec:	52000326 	beq	r10,r8,1000dcfc <__gedf2+0xcc>
1000dcf0:	5200042e 	bgeu	r10,r8,1000dd04 <__gedf2+0xd4>
1000dcf4:	283fec1e 	bne	r5,zero,1000dca8 <__alt_data_end+0xf800dca8>
1000dcf8:	003ff406 	br	1000dccc <__alt_data_end+0xf800dccc>
1000dcfc:	313ff236 	bltu	r6,r4,1000dcc8 <__alt_data_end+0xf800dcc8>
1000dd00:	21bffc36 	bltu	r4,r6,1000dcf4 <__alt_data_end+0xf800dcf4>
1000dd04:	0005883a 	mov	r2,zero
1000dd08:	f800283a 	ret

1000dd0c <__ledf2>:
1000dd0c:	2804d53a 	srli	r2,r5,20
1000dd10:	3810d53a 	srli	r8,r7,20
1000dd14:	00c00434 	movhi	r3,16
1000dd18:	18ffffc4 	addi	r3,r3,-1
1000dd1c:	1081ffcc 	andi	r2,r2,2047
1000dd20:	0241ffc4 	movi	r9,2047
1000dd24:	28d4703a 	and	r10,r5,r3
1000dd28:	4201ffcc 	andi	r8,r8,2047
1000dd2c:	38c6703a 	and	r3,r7,r3
1000dd30:	280ad7fa 	srli	r5,r5,31
1000dd34:	380ed7fa 	srli	r7,r7,31
1000dd38:	12401f26 	beq	r2,r9,1000ddb8 <__ledf2+0xac>
1000dd3c:	0241ffc4 	movi	r9,2047
1000dd40:	42401426 	beq	r8,r9,1000dd94 <__ledf2+0x88>
1000dd44:	1000091e 	bne	r2,zero,1000dd6c <__ledf2+0x60>
1000dd48:	2296b03a 	or	r11,r4,r10
1000dd4c:	5813003a 	cmpeq	r9,r11,zero
1000dd50:	29403fcc 	andi	r5,r5,255
1000dd54:	40000a1e 	bne	r8,zero,1000dd80 <__ledf2+0x74>
1000dd58:	30d8b03a 	or	r12,r6,r3
1000dd5c:	6000081e 	bne	r12,zero,1000dd80 <__ledf2+0x74>
1000dd60:	0005883a 	mov	r2,zero
1000dd64:	5800111e 	bne	r11,zero,1000ddac <__ledf2+0xa0>
1000dd68:	f800283a 	ret
1000dd6c:	29403fcc 	andi	r5,r5,255
1000dd70:	40000c1e 	bne	r8,zero,1000dda4 <__ledf2+0x98>
1000dd74:	30d2b03a 	or	r9,r6,r3
1000dd78:	48000c26 	beq	r9,zero,1000ddac <__ledf2+0xa0>
1000dd7c:	0013883a 	mov	r9,zero
1000dd80:	39c03fcc 	andi	r7,r7,255
1000dd84:	48000826 	beq	r9,zero,1000dda8 <__ledf2+0x9c>
1000dd88:	38001126 	beq	r7,zero,1000ddd0 <__ledf2+0xc4>
1000dd8c:	00800044 	movi	r2,1
1000dd90:	f800283a 	ret
1000dd94:	30d2b03a 	or	r9,r6,r3
1000dd98:	483fea26 	beq	r9,zero,1000dd44 <__alt_data_end+0xf800dd44>
1000dd9c:	00800084 	movi	r2,2
1000dda0:	f800283a 	ret
1000dda4:	39c03fcc 	andi	r7,r7,255
1000dda8:	39400726 	beq	r7,r5,1000ddc8 <__ledf2+0xbc>
1000ddac:	2800081e 	bne	r5,zero,1000ddd0 <__ledf2+0xc4>
1000ddb0:	00800044 	movi	r2,1
1000ddb4:	f800283a 	ret
1000ddb8:	2292b03a 	or	r9,r4,r10
1000ddbc:	483fdf26 	beq	r9,zero,1000dd3c <__alt_data_end+0xf800dd3c>
1000ddc0:	00800084 	movi	r2,2
1000ddc4:	f800283a 	ret
1000ddc8:	4080030e 	bge	r8,r2,1000ddd8 <__ledf2+0xcc>
1000ddcc:	383fef26 	beq	r7,zero,1000dd8c <__alt_data_end+0xf800dd8c>
1000ddd0:	00bfffc4 	movi	r2,-1
1000ddd4:	f800283a 	ret
1000ddd8:	123feb16 	blt	r2,r8,1000dd88 <__alt_data_end+0xf800dd88>
1000dddc:	1abff336 	bltu	r3,r10,1000ddac <__alt_data_end+0xf800ddac>
1000dde0:	50c00326 	beq	r10,r3,1000ddf0 <__ledf2+0xe4>
1000dde4:	50c0042e 	bgeu	r10,r3,1000ddf8 <__ledf2+0xec>
1000dde8:	283fe81e 	bne	r5,zero,1000dd8c <__alt_data_end+0xf800dd8c>
1000ddec:	003ff806 	br	1000ddd0 <__alt_data_end+0xf800ddd0>
1000ddf0:	313fee36 	bltu	r6,r4,1000ddac <__alt_data_end+0xf800ddac>
1000ddf4:	21bffc36 	bltu	r4,r6,1000dde8 <__alt_data_end+0xf800dde8>
1000ddf8:	0005883a 	mov	r2,zero
1000ddfc:	f800283a 	ret

1000de00 <__muldf3>:
1000de00:	deffee04 	addi	sp,sp,-72
1000de04:	dd000c15 	stw	r20,48(sp)
1000de08:	2828d53a 	srli	r20,r5,20
1000de0c:	ddc00f15 	stw	r23,60(sp)
1000de10:	282ed7fa 	srli	r23,r5,31
1000de14:	dc000815 	stw	r16,32(sp)
1000de18:	04000434 	movhi	r16,16
1000de1c:	dcc00b15 	stw	r19,44(sp)
1000de20:	843fffc4 	addi	r16,r16,-1
1000de24:	dfc01115 	stw	ra,68(sp)
1000de28:	df001015 	stw	fp,64(sp)
1000de2c:	dd800e15 	stw	r22,56(sp)
1000de30:	dd400d15 	stw	r21,52(sp)
1000de34:	dc800a15 	stw	r18,40(sp)
1000de38:	dc400915 	stw	r17,36(sp)
1000de3c:	a501ffcc 	andi	r20,r20,2047
1000de40:	2c20703a 	and	r16,r5,r16
1000de44:	b827883a 	mov	r19,r23
1000de48:	ba403fcc 	andi	r9,r23,255
1000de4c:	a0006026 	beq	r20,zero,1000dfd0 <__muldf3+0x1d0>
1000de50:	0081ffc4 	movi	r2,2047
1000de54:	202d883a 	mov	r22,r4
1000de58:	a0803626 	beq	r20,r2,1000df34 <__muldf3+0x134>
1000de5c:	84000434 	orhi	r16,r16,16
1000de60:	200ad77a 	srli	r5,r4,29
1000de64:	800490fa 	slli	r2,r16,3
1000de68:	202c90fa 	slli	r22,r4,3
1000de6c:	a53f0044 	addi	r20,r20,-1023
1000de70:	28a0b03a 	or	r16,r5,r2
1000de74:	002b883a 	mov	r21,zero
1000de78:	000b883a 	mov	r5,zero
1000de7c:	3804d53a 	srli	r2,r7,20
1000de80:	3838d7fa 	srli	fp,r7,31
1000de84:	04400434 	movhi	r17,16
1000de88:	8c7fffc4 	addi	r17,r17,-1
1000de8c:	1081ffcc 	andi	r2,r2,2047
1000de90:	3025883a 	mov	r18,r6
1000de94:	3c62703a 	and	r17,r7,r17
1000de98:	e2803fcc 	andi	r10,fp,255
1000de9c:	10006d26 	beq	r2,zero,1000e054 <__muldf3+0x254>
1000dea0:	00c1ffc4 	movi	r3,2047
1000dea4:	10c06526 	beq	r2,r3,1000e03c <__muldf3+0x23c>
1000dea8:	8c400434 	orhi	r17,r17,16
1000deac:	300ed77a 	srli	r7,r6,29
1000deb0:	880690fa 	slli	r3,r17,3
1000deb4:	302490fa 	slli	r18,r6,3
1000deb8:	10bf0044 	addi	r2,r2,-1023
1000debc:	38e2b03a 	or	r17,r7,r3
1000dec0:	000f883a 	mov	r7,zero
1000dec4:	a087883a 	add	r3,r20,r2
1000dec8:	010003c4 	movi	r4,15
1000decc:	3d44b03a 	or	r2,r7,r21
1000ded0:	e5ccf03a 	xor	r6,fp,r23
1000ded4:	1a000044 	addi	r8,r3,1
1000ded8:	20809b36 	bltu	r4,r2,1000e148 <__muldf3+0x348>
1000dedc:	100490ba 	slli	r2,r2,2
1000dee0:	01040074 	movhi	r4,4097
1000dee4:	2137bd04 	addi	r4,r4,-8460
1000dee8:	1105883a 	add	r2,r2,r4
1000deec:	10800017 	ldw	r2,0(r2)
1000def0:	1000683a 	jmp	r2
1000def4:	1000e148 	cmpgei	zero,r2,901
1000def8:	1000df54 	ori	zero,r2,893
1000defc:	1000df54 	ori	zero,r2,893
1000df00:	1000df50 	cmplti	zero,r2,893
1000df04:	1000e124 	muli	zero,r2,900
1000df08:	1000e124 	muli	zero,r2,900
1000df0c:	1000e10c 	andi	zero,r2,900
1000df10:	1000df50 	cmplti	zero,r2,893
1000df14:	1000e124 	muli	zero,r2,900
1000df18:	1000e10c 	andi	zero,r2,900
1000df1c:	1000e124 	muli	zero,r2,900
1000df20:	1000df50 	cmplti	zero,r2,893
1000df24:	1000e134 	orhi	zero,r2,900
1000df28:	1000e134 	orhi	zero,r2,900
1000df2c:	1000e134 	orhi	zero,r2,900
1000df30:	1000e494 	ori	zero,r2,914
1000df34:	2404b03a 	or	r2,r4,r16
1000df38:	1000711e 	bne	r2,zero,1000e100 <__muldf3+0x300>
1000df3c:	05400204 	movi	r21,8
1000df40:	0021883a 	mov	r16,zero
1000df44:	002d883a 	mov	r22,zero
1000df48:	01400084 	movi	r5,2
1000df4c:	003fcb06 	br	1000de7c <__alt_data_end+0xf800de7c>
1000df50:	500d883a 	mov	r6,r10
1000df54:	00800084 	movi	r2,2
1000df58:	38805926 	beq	r7,r2,1000e0c0 <__muldf3+0x2c0>
1000df5c:	008000c4 	movi	r2,3
1000df60:	3881bb26 	beq	r7,r2,1000e650 <__muldf3+0x850>
1000df64:	00800044 	movi	r2,1
1000df68:	3881961e 	bne	r7,r2,1000e5c4 <__muldf3+0x7c4>
1000df6c:	3027883a 	mov	r19,r6
1000df70:	0005883a 	mov	r2,zero
1000df74:	0021883a 	mov	r16,zero
1000df78:	002d883a 	mov	r22,zero
1000df7c:	1004953a 	slli	r2,r2,20
1000df80:	98c03fcc 	andi	r3,r19,255
1000df84:	04400434 	movhi	r17,16
1000df88:	8c7fffc4 	addi	r17,r17,-1
1000df8c:	180697fa 	slli	r3,r3,31
1000df90:	8460703a 	and	r16,r16,r17
1000df94:	80a0b03a 	or	r16,r16,r2
1000df98:	80c6b03a 	or	r3,r16,r3
1000df9c:	b005883a 	mov	r2,r22
1000dfa0:	dfc01117 	ldw	ra,68(sp)
1000dfa4:	df001017 	ldw	fp,64(sp)
1000dfa8:	ddc00f17 	ldw	r23,60(sp)
1000dfac:	dd800e17 	ldw	r22,56(sp)
1000dfb0:	dd400d17 	ldw	r21,52(sp)
1000dfb4:	dd000c17 	ldw	r20,48(sp)
1000dfb8:	dcc00b17 	ldw	r19,44(sp)
1000dfbc:	dc800a17 	ldw	r18,40(sp)
1000dfc0:	dc400917 	ldw	r17,36(sp)
1000dfc4:	dc000817 	ldw	r16,32(sp)
1000dfc8:	dec01204 	addi	sp,sp,72
1000dfcc:	f800283a 	ret
1000dfd0:	2404b03a 	or	r2,r4,r16
1000dfd4:	202b883a 	mov	r21,r4
1000dfd8:	10004426 	beq	r2,zero,1000e0ec <__muldf3+0x2ec>
1000dfdc:	80015126 	beq	r16,zero,1000e524 <__muldf3+0x724>
1000dfe0:	8009883a 	mov	r4,r16
1000dfe4:	d9800715 	stw	r6,28(sp)
1000dfe8:	d9c00215 	stw	r7,8(sp)
1000dfec:	da400415 	stw	r9,16(sp)
1000dff0:	000f16c0 	call	1000f16c <__clzsi2>
1000dff4:	d9800717 	ldw	r6,28(sp)
1000dff8:	d9c00217 	ldw	r7,8(sp)
1000dffc:	da400417 	ldw	r9,16(sp)
1000e000:	113ffd44 	addi	r4,r2,-11
1000e004:	00c00704 	movi	r3,28
1000e008:	19014216 	blt	r3,r4,1000e514 <__muldf3+0x714>
1000e00c:	00c00744 	movi	r3,29
1000e010:	15bffe04 	addi	r22,r2,-8
1000e014:	1907c83a 	sub	r3,r3,r4
1000e018:	85a0983a 	sll	r16,r16,r22
1000e01c:	a8c6d83a 	srl	r3,r21,r3
1000e020:	adac983a 	sll	r22,r21,r22
1000e024:	1c20b03a 	or	r16,r3,r16
1000e028:	1080fcc4 	addi	r2,r2,1011
1000e02c:	00a9c83a 	sub	r20,zero,r2
1000e030:	002b883a 	mov	r21,zero
1000e034:	000b883a 	mov	r5,zero
1000e038:	003f9006 	br	1000de7c <__alt_data_end+0xf800de7c>
1000e03c:	3446b03a 	or	r3,r6,r17
1000e040:	1800281e 	bne	r3,zero,1000e0e4 <__muldf3+0x2e4>
1000e044:	0023883a 	mov	r17,zero
1000e048:	0025883a 	mov	r18,zero
1000e04c:	01c00084 	movi	r7,2
1000e050:	003f9c06 	br	1000dec4 <__alt_data_end+0xf800dec4>
1000e054:	3446b03a 	or	r3,r6,r17
1000e058:	18001e26 	beq	r3,zero,1000e0d4 <__muldf3+0x2d4>
1000e05c:	88012126 	beq	r17,zero,1000e4e4 <__muldf3+0x6e4>
1000e060:	8809883a 	mov	r4,r17
1000e064:	d9400215 	stw	r5,8(sp)
1000e068:	d9800715 	stw	r6,28(sp)
1000e06c:	da400415 	stw	r9,16(sp)
1000e070:	da800315 	stw	r10,12(sp)
1000e074:	000f16c0 	call	1000f16c <__clzsi2>
1000e078:	d9400217 	ldw	r5,8(sp)
1000e07c:	d9800717 	ldw	r6,28(sp)
1000e080:	da400417 	ldw	r9,16(sp)
1000e084:	da800317 	ldw	r10,12(sp)
1000e088:	113ffd44 	addi	r4,r2,-11
1000e08c:	00c00704 	movi	r3,28
1000e090:	19011016 	blt	r3,r4,1000e4d4 <__muldf3+0x6d4>
1000e094:	00c00744 	movi	r3,29
1000e098:	14bffe04 	addi	r18,r2,-8
1000e09c:	1907c83a 	sub	r3,r3,r4
1000e0a0:	8ca2983a 	sll	r17,r17,r18
1000e0a4:	30c6d83a 	srl	r3,r6,r3
1000e0a8:	34a4983a 	sll	r18,r6,r18
1000e0ac:	1c62b03a 	or	r17,r3,r17
1000e0b0:	1080fcc4 	addi	r2,r2,1011
1000e0b4:	0085c83a 	sub	r2,zero,r2
1000e0b8:	000f883a 	mov	r7,zero
1000e0bc:	003f8106 	br	1000dec4 <__alt_data_end+0xf800dec4>
1000e0c0:	3027883a 	mov	r19,r6
1000e0c4:	0081ffc4 	movi	r2,2047
1000e0c8:	0021883a 	mov	r16,zero
1000e0cc:	002d883a 	mov	r22,zero
1000e0d0:	003faa06 	br	1000df7c <__alt_data_end+0xf800df7c>
1000e0d4:	0023883a 	mov	r17,zero
1000e0d8:	0025883a 	mov	r18,zero
1000e0dc:	01c00044 	movi	r7,1
1000e0e0:	003f7806 	br	1000dec4 <__alt_data_end+0xf800dec4>
1000e0e4:	01c000c4 	movi	r7,3
1000e0e8:	003f7606 	br	1000dec4 <__alt_data_end+0xf800dec4>
1000e0ec:	05400104 	movi	r21,4
1000e0f0:	0021883a 	mov	r16,zero
1000e0f4:	002d883a 	mov	r22,zero
1000e0f8:	01400044 	movi	r5,1
1000e0fc:	003f5f06 	br	1000de7c <__alt_data_end+0xf800de7c>
1000e100:	05400304 	movi	r21,12
1000e104:	014000c4 	movi	r5,3
1000e108:	003f5c06 	br	1000de7c <__alt_data_end+0xf800de7c>
1000e10c:	04000434 	movhi	r16,16
1000e110:	0027883a 	mov	r19,zero
1000e114:	843fffc4 	addi	r16,r16,-1
1000e118:	05bfffc4 	movi	r22,-1
1000e11c:	0081ffc4 	movi	r2,2047
1000e120:	003f9606 	br	1000df7c <__alt_data_end+0xf800df7c>
1000e124:	8023883a 	mov	r17,r16
1000e128:	b025883a 	mov	r18,r22
1000e12c:	280f883a 	mov	r7,r5
1000e130:	003f8806 	br	1000df54 <__alt_data_end+0xf800df54>
1000e134:	8023883a 	mov	r17,r16
1000e138:	b025883a 	mov	r18,r22
1000e13c:	480d883a 	mov	r6,r9
1000e140:	280f883a 	mov	r7,r5
1000e144:	003f8306 	br	1000df54 <__alt_data_end+0xf800df54>
1000e148:	b026d43a 	srli	r19,r22,16
1000e14c:	902ed43a 	srli	r23,r18,16
1000e150:	b5bfffcc 	andi	r22,r22,65535
1000e154:	94bfffcc 	andi	r18,r18,65535
1000e158:	b00b883a 	mov	r5,r22
1000e15c:	9009883a 	mov	r4,r18
1000e160:	d8c00515 	stw	r3,20(sp)
1000e164:	d9800715 	stw	r6,28(sp)
1000e168:	da000615 	stw	r8,24(sp)
1000e16c:	000c9040 	call	1000c904 <__mulsi3>
1000e170:	980b883a 	mov	r5,r19
1000e174:	9009883a 	mov	r4,r18
1000e178:	1029883a 	mov	r20,r2
1000e17c:	000c9040 	call	1000c904 <__mulsi3>
1000e180:	b80b883a 	mov	r5,r23
1000e184:	9809883a 	mov	r4,r19
1000e188:	102b883a 	mov	r21,r2
1000e18c:	000c9040 	call	1000c904 <__mulsi3>
1000e190:	b809883a 	mov	r4,r23
1000e194:	b00b883a 	mov	r5,r22
1000e198:	1039883a 	mov	fp,r2
1000e19c:	000c9040 	call	1000c904 <__mulsi3>
1000e1a0:	a008d43a 	srli	r4,r20,16
1000e1a4:	1545883a 	add	r2,r2,r21
1000e1a8:	d8c00517 	ldw	r3,20(sp)
1000e1ac:	2085883a 	add	r2,r4,r2
1000e1b0:	d9800717 	ldw	r6,28(sp)
1000e1b4:	da000617 	ldw	r8,24(sp)
1000e1b8:	1540022e 	bgeu	r2,r21,1000e1c4 <__muldf3+0x3c4>
1000e1bc:	01000074 	movhi	r4,1
1000e1c0:	e139883a 	add	fp,fp,r4
1000e1c4:	100e943a 	slli	r7,r2,16
1000e1c8:	1004d43a 	srli	r2,r2,16
1000e1cc:	882ad43a 	srli	r21,r17,16
1000e1d0:	a53fffcc 	andi	r20,r20,65535
1000e1d4:	8c7fffcc 	andi	r17,r17,65535
1000e1d8:	3d29883a 	add	r20,r7,r20
1000e1dc:	b00b883a 	mov	r5,r22
1000e1e0:	8809883a 	mov	r4,r17
1000e1e4:	d8c00515 	stw	r3,20(sp)
1000e1e8:	d9800715 	stw	r6,28(sp)
1000e1ec:	da000615 	stw	r8,24(sp)
1000e1f0:	dd000115 	stw	r20,4(sp)
1000e1f4:	d8800015 	stw	r2,0(sp)
1000e1f8:	000c9040 	call	1000c904 <__mulsi3>
1000e1fc:	980b883a 	mov	r5,r19
1000e200:	8809883a 	mov	r4,r17
1000e204:	d8800215 	stw	r2,8(sp)
1000e208:	000c9040 	call	1000c904 <__mulsi3>
1000e20c:	9809883a 	mov	r4,r19
1000e210:	a80b883a 	mov	r5,r21
1000e214:	1029883a 	mov	r20,r2
1000e218:	000c9040 	call	1000c904 <__mulsi3>
1000e21c:	b00b883a 	mov	r5,r22
1000e220:	a809883a 	mov	r4,r21
1000e224:	d8800415 	stw	r2,16(sp)
1000e228:	000c9040 	call	1000c904 <__mulsi3>
1000e22c:	d9c00217 	ldw	r7,8(sp)
1000e230:	1505883a 	add	r2,r2,r20
1000e234:	d8c00517 	ldw	r3,20(sp)
1000e238:	3826d43a 	srli	r19,r7,16
1000e23c:	d9800717 	ldw	r6,28(sp)
1000e240:	da000617 	ldw	r8,24(sp)
1000e244:	9885883a 	add	r2,r19,r2
1000e248:	da400417 	ldw	r9,16(sp)
1000e24c:	1500022e 	bgeu	r2,r20,1000e258 <__muldf3+0x458>
1000e250:	01000074 	movhi	r4,1
1000e254:	4913883a 	add	r9,r9,r4
1000e258:	1028d43a 	srli	r20,r2,16
1000e25c:	1004943a 	slli	r2,r2,16
1000e260:	802cd43a 	srli	r22,r16,16
1000e264:	843fffcc 	andi	r16,r16,65535
1000e268:	3cffffcc 	andi	r19,r7,65535
1000e26c:	9009883a 	mov	r4,r18
1000e270:	800b883a 	mov	r5,r16
1000e274:	a269883a 	add	r20,r20,r9
1000e278:	d8c00515 	stw	r3,20(sp)
1000e27c:	d9800715 	stw	r6,28(sp)
1000e280:	da000615 	stw	r8,24(sp)
1000e284:	14e7883a 	add	r19,r2,r19
1000e288:	000c9040 	call	1000c904 <__mulsi3>
1000e28c:	9009883a 	mov	r4,r18
1000e290:	b00b883a 	mov	r5,r22
1000e294:	d8800315 	stw	r2,12(sp)
1000e298:	000c9040 	call	1000c904 <__mulsi3>
1000e29c:	b809883a 	mov	r4,r23
1000e2a0:	b00b883a 	mov	r5,r22
1000e2a4:	d8800215 	stw	r2,8(sp)
1000e2a8:	000c9040 	call	1000c904 <__mulsi3>
1000e2ac:	b80b883a 	mov	r5,r23
1000e2b0:	8009883a 	mov	r4,r16
1000e2b4:	d8800415 	stw	r2,16(sp)
1000e2b8:	000c9040 	call	1000c904 <__mulsi3>
1000e2bc:	da800317 	ldw	r10,12(sp)
1000e2c0:	d9c00217 	ldw	r7,8(sp)
1000e2c4:	d9000017 	ldw	r4,0(sp)
1000e2c8:	502ed43a 	srli	r23,r10,16
1000e2cc:	11c5883a 	add	r2,r2,r7
1000e2d0:	24e5883a 	add	r18,r4,r19
1000e2d4:	b885883a 	add	r2,r23,r2
1000e2d8:	d8c00517 	ldw	r3,20(sp)
1000e2dc:	d9800717 	ldw	r6,28(sp)
1000e2e0:	da000617 	ldw	r8,24(sp)
1000e2e4:	da400417 	ldw	r9,16(sp)
1000e2e8:	11c0022e 	bgeu	r2,r7,1000e2f4 <__muldf3+0x4f4>
1000e2ec:	01000074 	movhi	r4,1
1000e2f0:	4913883a 	add	r9,r9,r4
1000e2f4:	100ed43a 	srli	r7,r2,16
1000e2f8:	1004943a 	slli	r2,r2,16
1000e2fc:	55ffffcc 	andi	r23,r10,65535
1000e300:	3a53883a 	add	r9,r7,r9
1000e304:	8809883a 	mov	r4,r17
1000e308:	800b883a 	mov	r5,r16
1000e30c:	d8c00515 	stw	r3,20(sp)
1000e310:	d9800715 	stw	r6,28(sp)
1000e314:	da000615 	stw	r8,24(sp)
1000e318:	da400415 	stw	r9,16(sp)
1000e31c:	15ef883a 	add	r23,r2,r23
1000e320:	000c9040 	call	1000c904 <__mulsi3>
1000e324:	8809883a 	mov	r4,r17
1000e328:	b00b883a 	mov	r5,r22
1000e32c:	d8800215 	stw	r2,8(sp)
1000e330:	000c9040 	call	1000c904 <__mulsi3>
1000e334:	b00b883a 	mov	r5,r22
1000e338:	a809883a 	mov	r4,r21
1000e33c:	d8800315 	stw	r2,12(sp)
1000e340:	000c9040 	call	1000c904 <__mulsi3>
1000e344:	8009883a 	mov	r4,r16
1000e348:	a80b883a 	mov	r5,r21
1000e34c:	1023883a 	mov	r17,r2
1000e350:	000c9040 	call	1000c904 <__mulsi3>
1000e354:	d9c00217 	ldw	r7,8(sp)
1000e358:	da800317 	ldw	r10,12(sp)
1000e35c:	d8c00517 	ldw	r3,20(sp)
1000e360:	3808d43a 	srli	r4,r7,16
1000e364:	1285883a 	add	r2,r2,r10
1000e368:	d9800717 	ldw	r6,28(sp)
1000e36c:	2085883a 	add	r2,r4,r2
1000e370:	da000617 	ldw	r8,24(sp)
1000e374:	da400417 	ldw	r9,16(sp)
1000e378:	1280022e 	bgeu	r2,r10,1000e384 <__muldf3+0x584>
1000e37c:	01000074 	movhi	r4,1
1000e380:	8923883a 	add	r17,r17,r4
1000e384:	1008943a 	slli	r4,r2,16
1000e388:	39ffffcc 	andi	r7,r7,65535
1000e38c:	e4b9883a 	add	fp,fp,r18
1000e390:	21cf883a 	add	r7,r4,r7
1000e394:	e4e7803a 	cmpltu	r19,fp,r19
1000e398:	3d0f883a 	add	r7,r7,r20
1000e39c:	bf39883a 	add	fp,r23,fp
1000e3a0:	99c9883a 	add	r4,r19,r7
1000e3a4:	e5ef803a 	cmpltu	r23,fp,r23
1000e3a8:	490b883a 	add	r5,r9,r4
1000e3ac:	1004d43a 	srli	r2,r2,16
1000e3b0:	b965883a 	add	r18,r23,r5
1000e3b4:	24c9803a 	cmpltu	r4,r4,r19
1000e3b8:	3d29803a 	cmpltu	r20,r7,r20
1000e3bc:	a128b03a 	or	r20,r20,r4
1000e3c0:	95ef803a 	cmpltu	r23,r18,r23
1000e3c4:	2a53803a 	cmpltu	r9,r5,r9
1000e3c8:	a0a9883a 	add	r20,r20,r2
1000e3cc:	4deeb03a 	or	r23,r9,r23
1000e3d0:	a5ef883a 	add	r23,r20,r23
1000e3d4:	bc63883a 	add	r17,r23,r17
1000e3d8:	e004927a 	slli	r2,fp,9
1000e3dc:	d9000117 	ldw	r4,4(sp)
1000e3e0:	882e927a 	slli	r23,r17,9
1000e3e4:	9022d5fa 	srli	r17,r18,23
1000e3e8:	e038d5fa 	srli	fp,fp,23
1000e3ec:	1104b03a 	or	r2,r2,r4
1000e3f0:	9024927a 	slli	r18,r18,9
1000e3f4:	1004c03a 	cmpne	r2,r2,zero
1000e3f8:	bc62b03a 	or	r17,r23,r17
1000e3fc:	1738b03a 	or	fp,r2,fp
1000e400:	8880402c 	andhi	r2,r17,256
1000e404:	e4a4b03a 	or	r18,fp,r18
1000e408:	10000726 	beq	r2,zero,1000e428 <__muldf3+0x628>
1000e40c:	9006d07a 	srli	r3,r18,1
1000e410:	880497fa 	slli	r2,r17,31
1000e414:	9480004c 	andi	r18,r18,1
1000e418:	8822d07a 	srli	r17,r17,1
1000e41c:	1ca4b03a 	or	r18,r3,r18
1000e420:	14a4b03a 	or	r18,r2,r18
1000e424:	4007883a 	mov	r3,r8
1000e428:	1880ffc4 	addi	r2,r3,1023
1000e42c:	0080460e 	bge	zero,r2,1000e548 <__muldf3+0x748>
1000e430:	910001cc 	andi	r4,r18,7
1000e434:	20000726 	beq	r4,zero,1000e454 <__muldf3+0x654>
1000e438:	910003cc 	andi	r4,r18,15
1000e43c:	01400104 	movi	r5,4
1000e440:	21400426 	beq	r4,r5,1000e454 <__muldf3+0x654>
1000e444:	9149883a 	add	r4,r18,r5
1000e448:	24a5803a 	cmpltu	r18,r4,r18
1000e44c:	8ca3883a 	add	r17,r17,r18
1000e450:	2025883a 	mov	r18,r4
1000e454:	8900402c 	andhi	r4,r17,256
1000e458:	20000426 	beq	r4,zero,1000e46c <__muldf3+0x66c>
1000e45c:	18810004 	addi	r2,r3,1024
1000e460:	00ffc034 	movhi	r3,65280
1000e464:	18ffffc4 	addi	r3,r3,-1
1000e468:	88e2703a 	and	r17,r17,r3
1000e46c:	00c1ff84 	movi	r3,2046
1000e470:	18bf1316 	blt	r3,r2,1000e0c0 <__alt_data_end+0xf800e0c0>
1000e474:	882c977a 	slli	r22,r17,29
1000e478:	9024d0fa 	srli	r18,r18,3
1000e47c:	8822927a 	slli	r17,r17,9
1000e480:	1081ffcc 	andi	r2,r2,2047
1000e484:	b4acb03a 	or	r22,r22,r18
1000e488:	8820d33a 	srli	r16,r17,12
1000e48c:	3027883a 	mov	r19,r6
1000e490:	003eba06 	br	1000df7c <__alt_data_end+0xf800df7c>
1000e494:	8080022c 	andhi	r2,r16,8
1000e498:	10000926 	beq	r2,zero,1000e4c0 <__muldf3+0x6c0>
1000e49c:	8880022c 	andhi	r2,r17,8
1000e4a0:	1000071e 	bne	r2,zero,1000e4c0 <__muldf3+0x6c0>
1000e4a4:	00800434 	movhi	r2,16
1000e4a8:	8c000234 	orhi	r16,r17,8
1000e4ac:	10bfffc4 	addi	r2,r2,-1
1000e4b0:	e027883a 	mov	r19,fp
1000e4b4:	80a0703a 	and	r16,r16,r2
1000e4b8:	902d883a 	mov	r22,r18
1000e4bc:	003f1706 	br	1000e11c <__alt_data_end+0xf800e11c>
1000e4c0:	00800434 	movhi	r2,16
1000e4c4:	84000234 	orhi	r16,r16,8
1000e4c8:	10bfffc4 	addi	r2,r2,-1
1000e4cc:	80a0703a 	and	r16,r16,r2
1000e4d0:	003f1206 	br	1000e11c <__alt_data_end+0xf800e11c>
1000e4d4:	147ff604 	addi	r17,r2,-40
1000e4d8:	3462983a 	sll	r17,r6,r17
1000e4dc:	0025883a 	mov	r18,zero
1000e4e0:	003ef306 	br	1000e0b0 <__alt_data_end+0xf800e0b0>
1000e4e4:	3009883a 	mov	r4,r6
1000e4e8:	d9400215 	stw	r5,8(sp)
1000e4ec:	d9800715 	stw	r6,28(sp)
1000e4f0:	da400415 	stw	r9,16(sp)
1000e4f4:	da800315 	stw	r10,12(sp)
1000e4f8:	000f16c0 	call	1000f16c <__clzsi2>
1000e4fc:	10800804 	addi	r2,r2,32
1000e500:	da800317 	ldw	r10,12(sp)
1000e504:	da400417 	ldw	r9,16(sp)
1000e508:	d9800717 	ldw	r6,28(sp)
1000e50c:	d9400217 	ldw	r5,8(sp)
1000e510:	003edd06 	br	1000e088 <__alt_data_end+0xf800e088>
1000e514:	143ff604 	addi	r16,r2,-40
1000e518:	ac20983a 	sll	r16,r21,r16
1000e51c:	002d883a 	mov	r22,zero
1000e520:	003ec106 	br	1000e028 <__alt_data_end+0xf800e028>
1000e524:	d9800715 	stw	r6,28(sp)
1000e528:	d9c00215 	stw	r7,8(sp)
1000e52c:	da400415 	stw	r9,16(sp)
1000e530:	000f16c0 	call	1000f16c <__clzsi2>
1000e534:	10800804 	addi	r2,r2,32
1000e538:	da400417 	ldw	r9,16(sp)
1000e53c:	d9c00217 	ldw	r7,8(sp)
1000e540:	d9800717 	ldw	r6,28(sp)
1000e544:	003eae06 	br	1000e000 <__alt_data_end+0xf800e000>
1000e548:	00c00044 	movi	r3,1
1000e54c:	1887c83a 	sub	r3,r3,r2
1000e550:	01000e04 	movi	r4,56
1000e554:	20fe8516 	blt	r4,r3,1000df6c <__alt_data_end+0xf800df6c>
1000e558:	010007c4 	movi	r4,31
1000e55c:	20c01b16 	blt	r4,r3,1000e5cc <__muldf3+0x7cc>
1000e560:	00800804 	movi	r2,32
1000e564:	10c5c83a 	sub	r2,r2,r3
1000e568:	888a983a 	sll	r5,r17,r2
1000e56c:	90c8d83a 	srl	r4,r18,r3
1000e570:	9084983a 	sll	r2,r18,r2
1000e574:	88e2d83a 	srl	r17,r17,r3
1000e578:	2906b03a 	or	r3,r5,r4
1000e57c:	1004c03a 	cmpne	r2,r2,zero
1000e580:	1886b03a 	or	r3,r3,r2
1000e584:	188001cc 	andi	r2,r3,7
1000e588:	10000726 	beq	r2,zero,1000e5a8 <__muldf3+0x7a8>
1000e58c:	188003cc 	andi	r2,r3,15
1000e590:	01000104 	movi	r4,4
1000e594:	11000426 	beq	r2,r4,1000e5a8 <__muldf3+0x7a8>
1000e598:	1805883a 	mov	r2,r3
1000e59c:	10c00104 	addi	r3,r2,4
1000e5a0:	1885803a 	cmpltu	r2,r3,r2
1000e5a4:	88a3883a 	add	r17,r17,r2
1000e5a8:	8880202c 	andhi	r2,r17,128
1000e5ac:	10001c26 	beq	r2,zero,1000e620 <__muldf3+0x820>
1000e5b0:	3027883a 	mov	r19,r6
1000e5b4:	00800044 	movi	r2,1
1000e5b8:	0021883a 	mov	r16,zero
1000e5bc:	002d883a 	mov	r22,zero
1000e5c0:	003e6e06 	br	1000df7c <__alt_data_end+0xf800df7c>
1000e5c4:	4007883a 	mov	r3,r8
1000e5c8:	003f9706 	br	1000e428 <__alt_data_end+0xf800e428>
1000e5cc:	017ff844 	movi	r5,-31
1000e5d0:	2885c83a 	sub	r2,r5,r2
1000e5d4:	888ad83a 	srl	r5,r17,r2
1000e5d8:	00800804 	movi	r2,32
1000e5dc:	18801a26 	beq	r3,r2,1000e648 <__muldf3+0x848>
1000e5e0:	01001004 	movi	r4,64
1000e5e4:	20c7c83a 	sub	r3,r4,r3
1000e5e8:	88e2983a 	sll	r17,r17,r3
1000e5ec:	8ca4b03a 	or	r18,r17,r18
1000e5f0:	9004c03a 	cmpne	r2,r18,zero
1000e5f4:	2884b03a 	or	r2,r5,r2
1000e5f8:	144001cc 	andi	r17,r2,7
1000e5fc:	88000d1e 	bne	r17,zero,1000e634 <__muldf3+0x834>
1000e600:	0021883a 	mov	r16,zero
1000e604:	102cd0fa 	srli	r22,r2,3
1000e608:	3027883a 	mov	r19,r6
1000e60c:	0005883a 	mov	r2,zero
1000e610:	b46cb03a 	or	r22,r22,r17
1000e614:	003e5906 	br	1000df7c <__alt_data_end+0xf800df7c>
1000e618:	1007883a 	mov	r3,r2
1000e61c:	0023883a 	mov	r17,zero
1000e620:	8820927a 	slli	r16,r17,9
1000e624:	1805883a 	mov	r2,r3
1000e628:	8822977a 	slli	r17,r17,29
1000e62c:	8020d33a 	srli	r16,r16,12
1000e630:	003ff406 	br	1000e604 <__alt_data_end+0xf800e604>
1000e634:	10c003cc 	andi	r3,r2,15
1000e638:	01000104 	movi	r4,4
1000e63c:	193ff626 	beq	r3,r4,1000e618 <__alt_data_end+0xf800e618>
1000e640:	0023883a 	mov	r17,zero
1000e644:	003fd506 	br	1000e59c <__alt_data_end+0xf800e59c>
1000e648:	0023883a 	mov	r17,zero
1000e64c:	003fe706 	br	1000e5ec <__alt_data_end+0xf800e5ec>
1000e650:	00800434 	movhi	r2,16
1000e654:	8c000234 	orhi	r16,r17,8
1000e658:	10bfffc4 	addi	r2,r2,-1
1000e65c:	3027883a 	mov	r19,r6
1000e660:	80a0703a 	and	r16,r16,r2
1000e664:	902d883a 	mov	r22,r18
1000e668:	003eac06 	br	1000e11c <__alt_data_end+0xf800e11c>

1000e66c <__subdf3>:
1000e66c:	02000434 	movhi	r8,16
1000e670:	423fffc4 	addi	r8,r8,-1
1000e674:	defffb04 	addi	sp,sp,-20
1000e678:	2a14703a 	and	r10,r5,r8
1000e67c:	3812d53a 	srli	r9,r7,20
1000e680:	3a10703a 	and	r8,r7,r8
1000e684:	2006d77a 	srli	r3,r4,29
1000e688:	3004d77a 	srli	r2,r6,29
1000e68c:	dc000015 	stw	r16,0(sp)
1000e690:	501490fa 	slli	r10,r10,3
1000e694:	2820d53a 	srli	r16,r5,20
1000e698:	401090fa 	slli	r8,r8,3
1000e69c:	dc800215 	stw	r18,8(sp)
1000e6a0:	dc400115 	stw	r17,4(sp)
1000e6a4:	dfc00415 	stw	ra,16(sp)
1000e6a8:	202290fa 	slli	r17,r4,3
1000e6ac:	dcc00315 	stw	r19,12(sp)
1000e6b0:	4a41ffcc 	andi	r9,r9,2047
1000e6b4:	0101ffc4 	movi	r4,2047
1000e6b8:	2824d7fa 	srli	r18,r5,31
1000e6bc:	8401ffcc 	andi	r16,r16,2047
1000e6c0:	50c6b03a 	or	r3,r10,r3
1000e6c4:	380ed7fa 	srli	r7,r7,31
1000e6c8:	408ab03a 	or	r5,r8,r2
1000e6cc:	300c90fa 	slli	r6,r6,3
1000e6d0:	49009626 	beq	r9,r4,1000e92c <__subdf3+0x2c0>
1000e6d4:	39c0005c 	xori	r7,r7,1
1000e6d8:	8245c83a 	sub	r2,r16,r9
1000e6dc:	3c807426 	beq	r7,r18,1000e8b0 <__subdf3+0x244>
1000e6e0:	0080af0e 	bge	zero,r2,1000e9a0 <__subdf3+0x334>
1000e6e4:	48002a1e 	bne	r9,zero,1000e790 <__subdf3+0x124>
1000e6e8:	2988b03a 	or	r4,r5,r6
1000e6ec:	20009a1e 	bne	r4,zero,1000e958 <__subdf3+0x2ec>
1000e6f0:	888001cc 	andi	r2,r17,7
1000e6f4:	10000726 	beq	r2,zero,1000e714 <__subdf3+0xa8>
1000e6f8:	888003cc 	andi	r2,r17,15
1000e6fc:	01000104 	movi	r4,4
1000e700:	11000426 	beq	r2,r4,1000e714 <__subdf3+0xa8>
1000e704:	890b883a 	add	r5,r17,r4
1000e708:	2c63803a 	cmpltu	r17,r5,r17
1000e70c:	1c47883a 	add	r3,r3,r17
1000e710:	2823883a 	mov	r17,r5
1000e714:	1880202c 	andhi	r2,r3,128
1000e718:	10005926 	beq	r2,zero,1000e880 <__subdf3+0x214>
1000e71c:	84000044 	addi	r16,r16,1
1000e720:	0081ffc4 	movi	r2,2047
1000e724:	8080be26 	beq	r16,r2,1000ea20 <__subdf3+0x3b4>
1000e728:	017fe034 	movhi	r5,65408
1000e72c:	297fffc4 	addi	r5,r5,-1
1000e730:	1946703a 	and	r3,r3,r5
1000e734:	1804977a 	slli	r2,r3,29
1000e738:	1806927a 	slli	r3,r3,9
1000e73c:	8822d0fa 	srli	r17,r17,3
1000e740:	8401ffcc 	andi	r16,r16,2047
1000e744:	180ad33a 	srli	r5,r3,12
1000e748:	9100004c 	andi	r4,r18,1
1000e74c:	1444b03a 	or	r2,r2,r17
1000e750:	80c1ffcc 	andi	r3,r16,2047
1000e754:	1820953a 	slli	r16,r3,20
1000e758:	20c03fcc 	andi	r3,r4,255
1000e75c:	180897fa 	slli	r4,r3,31
1000e760:	00c00434 	movhi	r3,16
1000e764:	18ffffc4 	addi	r3,r3,-1
1000e768:	28c6703a 	and	r3,r5,r3
1000e76c:	1c06b03a 	or	r3,r3,r16
1000e770:	1906b03a 	or	r3,r3,r4
1000e774:	dfc00417 	ldw	ra,16(sp)
1000e778:	dcc00317 	ldw	r19,12(sp)
1000e77c:	dc800217 	ldw	r18,8(sp)
1000e780:	dc400117 	ldw	r17,4(sp)
1000e784:	dc000017 	ldw	r16,0(sp)
1000e788:	dec00504 	addi	sp,sp,20
1000e78c:	f800283a 	ret
1000e790:	0101ffc4 	movi	r4,2047
1000e794:	813fd626 	beq	r16,r4,1000e6f0 <__alt_data_end+0xf800e6f0>
1000e798:	29402034 	orhi	r5,r5,128
1000e79c:	01000e04 	movi	r4,56
1000e7a0:	2080a316 	blt	r4,r2,1000ea30 <__subdf3+0x3c4>
1000e7a4:	010007c4 	movi	r4,31
1000e7a8:	2080c616 	blt	r4,r2,1000eac4 <__subdf3+0x458>
1000e7ac:	01000804 	movi	r4,32
1000e7b0:	2089c83a 	sub	r4,r4,r2
1000e7b4:	2910983a 	sll	r8,r5,r4
1000e7b8:	308ed83a 	srl	r7,r6,r2
1000e7bc:	3108983a 	sll	r4,r6,r4
1000e7c0:	2884d83a 	srl	r2,r5,r2
1000e7c4:	41ccb03a 	or	r6,r8,r7
1000e7c8:	2008c03a 	cmpne	r4,r4,zero
1000e7cc:	310cb03a 	or	r6,r6,r4
1000e7d0:	898dc83a 	sub	r6,r17,r6
1000e7d4:	89a3803a 	cmpltu	r17,r17,r6
1000e7d8:	1887c83a 	sub	r3,r3,r2
1000e7dc:	1c47c83a 	sub	r3,r3,r17
1000e7e0:	3023883a 	mov	r17,r6
1000e7e4:	1880202c 	andhi	r2,r3,128
1000e7e8:	10002326 	beq	r2,zero,1000e878 <__subdf3+0x20c>
1000e7ec:	04c02034 	movhi	r19,128
1000e7f0:	9cffffc4 	addi	r19,r19,-1
1000e7f4:	1ce6703a 	and	r19,r3,r19
1000e7f8:	98007a26 	beq	r19,zero,1000e9e4 <__subdf3+0x378>
1000e7fc:	9809883a 	mov	r4,r19
1000e800:	000f16c0 	call	1000f16c <__clzsi2>
1000e804:	113ffe04 	addi	r4,r2,-8
1000e808:	00c007c4 	movi	r3,31
1000e80c:	19007b16 	blt	r3,r4,1000e9fc <__subdf3+0x390>
1000e810:	00800804 	movi	r2,32
1000e814:	1105c83a 	sub	r2,r2,r4
1000e818:	8884d83a 	srl	r2,r17,r2
1000e81c:	9906983a 	sll	r3,r19,r4
1000e820:	8922983a 	sll	r17,r17,r4
1000e824:	10c4b03a 	or	r2,r2,r3
1000e828:	24007816 	blt	r4,r16,1000ea0c <__subdf3+0x3a0>
1000e82c:	2421c83a 	sub	r16,r4,r16
1000e830:	80c00044 	addi	r3,r16,1
1000e834:	010007c4 	movi	r4,31
1000e838:	20c09516 	blt	r4,r3,1000ea90 <__subdf3+0x424>
1000e83c:	01400804 	movi	r5,32
1000e840:	28cbc83a 	sub	r5,r5,r3
1000e844:	88c8d83a 	srl	r4,r17,r3
1000e848:	8962983a 	sll	r17,r17,r5
1000e84c:	114a983a 	sll	r5,r2,r5
1000e850:	10c6d83a 	srl	r3,r2,r3
1000e854:	8804c03a 	cmpne	r2,r17,zero
1000e858:	290ab03a 	or	r5,r5,r4
1000e85c:	28a2b03a 	or	r17,r5,r2
1000e860:	0021883a 	mov	r16,zero
1000e864:	003fa206 	br	1000e6f0 <__alt_data_end+0xf800e6f0>
1000e868:	2090b03a 	or	r8,r4,r2
1000e86c:	40018e26 	beq	r8,zero,1000eea8 <__subdf3+0x83c>
1000e870:	1007883a 	mov	r3,r2
1000e874:	2023883a 	mov	r17,r4
1000e878:	888001cc 	andi	r2,r17,7
1000e87c:	103f9e1e 	bne	r2,zero,1000e6f8 <__alt_data_end+0xf800e6f8>
1000e880:	1804977a 	slli	r2,r3,29
1000e884:	8822d0fa 	srli	r17,r17,3
1000e888:	1810d0fa 	srli	r8,r3,3
1000e88c:	9100004c 	andi	r4,r18,1
1000e890:	1444b03a 	or	r2,r2,r17
1000e894:	00c1ffc4 	movi	r3,2047
1000e898:	80c02826 	beq	r16,r3,1000e93c <__subdf3+0x2d0>
1000e89c:	01400434 	movhi	r5,16
1000e8a0:	297fffc4 	addi	r5,r5,-1
1000e8a4:	80e0703a 	and	r16,r16,r3
1000e8a8:	414a703a 	and	r5,r8,r5
1000e8ac:	003fa806 	br	1000e750 <__alt_data_end+0xf800e750>
1000e8b0:	0080630e 	bge	zero,r2,1000ea40 <__subdf3+0x3d4>
1000e8b4:	48003026 	beq	r9,zero,1000e978 <__subdf3+0x30c>
1000e8b8:	0101ffc4 	movi	r4,2047
1000e8bc:	813f8c26 	beq	r16,r4,1000e6f0 <__alt_data_end+0xf800e6f0>
1000e8c0:	29402034 	orhi	r5,r5,128
1000e8c4:	01000e04 	movi	r4,56
1000e8c8:	2080a90e 	bge	r4,r2,1000eb70 <__subdf3+0x504>
1000e8cc:	298cb03a 	or	r6,r5,r6
1000e8d0:	3012c03a 	cmpne	r9,r6,zero
1000e8d4:	0005883a 	mov	r2,zero
1000e8d8:	4c53883a 	add	r9,r9,r17
1000e8dc:	4c63803a 	cmpltu	r17,r9,r17
1000e8e0:	10c7883a 	add	r3,r2,r3
1000e8e4:	88c7883a 	add	r3,r17,r3
1000e8e8:	4823883a 	mov	r17,r9
1000e8ec:	1880202c 	andhi	r2,r3,128
1000e8f0:	1000d026 	beq	r2,zero,1000ec34 <__subdf3+0x5c8>
1000e8f4:	84000044 	addi	r16,r16,1
1000e8f8:	0081ffc4 	movi	r2,2047
1000e8fc:	8080fe26 	beq	r16,r2,1000ecf8 <__subdf3+0x68c>
1000e900:	00bfe034 	movhi	r2,65408
1000e904:	10bfffc4 	addi	r2,r2,-1
1000e908:	1886703a 	and	r3,r3,r2
1000e90c:	880ad07a 	srli	r5,r17,1
1000e910:	180497fa 	slli	r2,r3,31
1000e914:	8900004c 	andi	r4,r17,1
1000e918:	2922b03a 	or	r17,r5,r4
1000e91c:	1806d07a 	srli	r3,r3,1
1000e920:	1462b03a 	or	r17,r2,r17
1000e924:	3825883a 	mov	r18,r7
1000e928:	003f7106 	br	1000e6f0 <__alt_data_end+0xf800e6f0>
1000e92c:	2984b03a 	or	r2,r5,r6
1000e930:	103f6826 	beq	r2,zero,1000e6d4 <__alt_data_end+0xf800e6d4>
1000e934:	39c03fcc 	andi	r7,r7,255
1000e938:	003f6706 	br	1000e6d8 <__alt_data_end+0xf800e6d8>
1000e93c:	4086b03a 	or	r3,r8,r2
1000e940:	18015226 	beq	r3,zero,1000ee8c <__subdf3+0x820>
1000e944:	00c00434 	movhi	r3,16
1000e948:	41400234 	orhi	r5,r8,8
1000e94c:	18ffffc4 	addi	r3,r3,-1
1000e950:	28ca703a 	and	r5,r5,r3
1000e954:	003f7e06 	br	1000e750 <__alt_data_end+0xf800e750>
1000e958:	10bfffc4 	addi	r2,r2,-1
1000e95c:	1000491e 	bne	r2,zero,1000ea84 <__subdf3+0x418>
1000e960:	898fc83a 	sub	r7,r17,r6
1000e964:	89e3803a 	cmpltu	r17,r17,r7
1000e968:	1947c83a 	sub	r3,r3,r5
1000e96c:	1c47c83a 	sub	r3,r3,r17
1000e970:	3823883a 	mov	r17,r7
1000e974:	003f9b06 	br	1000e7e4 <__alt_data_end+0xf800e7e4>
1000e978:	2988b03a 	or	r4,r5,r6
1000e97c:	203f5c26 	beq	r4,zero,1000e6f0 <__alt_data_end+0xf800e6f0>
1000e980:	10bfffc4 	addi	r2,r2,-1
1000e984:	1000931e 	bne	r2,zero,1000ebd4 <__subdf3+0x568>
1000e988:	898d883a 	add	r6,r17,r6
1000e98c:	3463803a 	cmpltu	r17,r6,r17
1000e990:	1947883a 	add	r3,r3,r5
1000e994:	88c7883a 	add	r3,r17,r3
1000e998:	3023883a 	mov	r17,r6
1000e99c:	003fd306 	br	1000e8ec <__alt_data_end+0xf800e8ec>
1000e9a0:	1000541e 	bne	r2,zero,1000eaf4 <__subdf3+0x488>
1000e9a4:	80800044 	addi	r2,r16,1
1000e9a8:	1081ffcc 	andi	r2,r2,2047
1000e9ac:	01000044 	movi	r4,1
1000e9b0:	2080a20e 	bge	r4,r2,1000ec3c <__subdf3+0x5d0>
1000e9b4:	8989c83a 	sub	r4,r17,r6
1000e9b8:	8905803a 	cmpltu	r2,r17,r4
1000e9bc:	1967c83a 	sub	r19,r3,r5
1000e9c0:	98a7c83a 	sub	r19,r19,r2
1000e9c4:	9880202c 	andhi	r2,r19,128
1000e9c8:	10006326 	beq	r2,zero,1000eb58 <__subdf3+0x4ec>
1000e9cc:	3463c83a 	sub	r17,r6,r17
1000e9d0:	28c7c83a 	sub	r3,r5,r3
1000e9d4:	344d803a 	cmpltu	r6,r6,r17
1000e9d8:	19a7c83a 	sub	r19,r3,r6
1000e9dc:	3825883a 	mov	r18,r7
1000e9e0:	983f861e 	bne	r19,zero,1000e7fc <__alt_data_end+0xf800e7fc>
1000e9e4:	8809883a 	mov	r4,r17
1000e9e8:	000f16c0 	call	1000f16c <__clzsi2>
1000e9ec:	10800804 	addi	r2,r2,32
1000e9f0:	113ffe04 	addi	r4,r2,-8
1000e9f4:	00c007c4 	movi	r3,31
1000e9f8:	193f850e 	bge	r3,r4,1000e810 <__alt_data_end+0xf800e810>
1000e9fc:	10bff604 	addi	r2,r2,-40
1000ea00:	8884983a 	sll	r2,r17,r2
1000ea04:	0023883a 	mov	r17,zero
1000ea08:	243f880e 	bge	r4,r16,1000e82c <__alt_data_end+0xf800e82c>
1000ea0c:	00ffe034 	movhi	r3,65408
1000ea10:	18ffffc4 	addi	r3,r3,-1
1000ea14:	8121c83a 	sub	r16,r16,r4
1000ea18:	10c6703a 	and	r3,r2,r3
1000ea1c:	003f3406 	br	1000e6f0 <__alt_data_end+0xf800e6f0>
1000ea20:	9100004c 	andi	r4,r18,1
1000ea24:	000b883a 	mov	r5,zero
1000ea28:	0005883a 	mov	r2,zero
1000ea2c:	003f4806 	br	1000e750 <__alt_data_end+0xf800e750>
1000ea30:	298cb03a 	or	r6,r5,r6
1000ea34:	300cc03a 	cmpne	r6,r6,zero
1000ea38:	0005883a 	mov	r2,zero
1000ea3c:	003f6406 	br	1000e7d0 <__alt_data_end+0xf800e7d0>
1000ea40:	10009a1e 	bne	r2,zero,1000ecac <__subdf3+0x640>
1000ea44:	82400044 	addi	r9,r16,1
1000ea48:	4881ffcc 	andi	r2,r9,2047
1000ea4c:	02800044 	movi	r10,1
1000ea50:	5080670e 	bge	r10,r2,1000ebf0 <__subdf3+0x584>
1000ea54:	0081ffc4 	movi	r2,2047
1000ea58:	4880af26 	beq	r9,r2,1000ed18 <__subdf3+0x6ac>
1000ea5c:	898d883a 	add	r6,r17,r6
1000ea60:	1945883a 	add	r2,r3,r5
1000ea64:	3447803a 	cmpltu	r3,r6,r17
1000ea68:	1887883a 	add	r3,r3,r2
1000ea6c:	182297fa 	slli	r17,r3,31
1000ea70:	300cd07a 	srli	r6,r6,1
1000ea74:	1806d07a 	srli	r3,r3,1
1000ea78:	4821883a 	mov	r16,r9
1000ea7c:	89a2b03a 	or	r17,r17,r6
1000ea80:	003f1b06 	br	1000e6f0 <__alt_data_end+0xf800e6f0>
1000ea84:	0101ffc4 	movi	r4,2047
1000ea88:	813f441e 	bne	r16,r4,1000e79c <__alt_data_end+0xf800e79c>
1000ea8c:	003f1806 	br	1000e6f0 <__alt_data_end+0xf800e6f0>
1000ea90:	843ff844 	addi	r16,r16,-31
1000ea94:	01400804 	movi	r5,32
1000ea98:	1408d83a 	srl	r4,r2,r16
1000ea9c:	19405026 	beq	r3,r5,1000ebe0 <__subdf3+0x574>
1000eaa0:	01401004 	movi	r5,64
1000eaa4:	28c7c83a 	sub	r3,r5,r3
1000eaa8:	10c4983a 	sll	r2,r2,r3
1000eaac:	88a2b03a 	or	r17,r17,r2
1000eab0:	8822c03a 	cmpne	r17,r17,zero
1000eab4:	2462b03a 	or	r17,r4,r17
1000eab8:	0007883a 	mov	r3,zero
1000eabc:	0021883a 	mov	r16,zero
1000eac0:	003f6d06 	br	1000e878 <__alt_data_end+0xf800e878>
1000eac4:	11fff804 	addi	r7,r2,-32
1000eac8:	01000804 	movi	r4,32
1000eacc:	29ced83a 	srl	r7,r5,r7
1000ead0:	11004526 	beq	r2,r4,1000ebe8 <__subdf3+0x57c>
1000ead4:	01001004 	movi	r4,64
1000ead8:	2089c83a 	sub	r4,r4,r2
1000eadc:	2904983a 	sll	r2,r5,r4
1000eae0:	118cb03a 	or	r6,r2,r6
1000eae4:	300cc03a 	cmpne	r6,r6,zero
1000eae8:	398cb03a 	or	r6,r7,r6
1000eaec:	0005883a 	mov	r2,zero
1000eaf0:	003f3706 	br	1000e7d0 <__alt_data_end+0xf800e7d0>
1000eaf4:	80002a26 	beq	r16,zero,1000eba0 <__subdf3+0x534>
1000eaf8:	0101ffc4 	movi	r4,2047
1000eafc:	49006626 	beq	r9,r4,1000ec98 <__subdf3+0x62c>
1000eb00:	0085c83a 	sub	r2,zero,r2
1000eb04:	18c02034 	orhi	r3,r3,128
1000eb08:	01000e04 	movi	r4,56
1000eb0c:	20807e16 	blt	r4,r2,1000ed08 <__subdf3+0x69c>
1000eb10:	010007c4 	movi	r4,31
1000eb14:	2080e716 	blt	r4,r2,1000eeb4 <__subdf3+0x848>
1000eb18:	01000804 	movi	r4,32
1000eb1c:	2089c83a 	sub	r4,r4,r2
1000eb20:	1914983a 	sll	r10,r3,r4
1000eb24:	8890d83a 	srl	r8,r17,r2
1000eb28:	8908983a 	sll	r4,r17,r4
1000eb2c:	1884d83a 	srl	r2,r3,r2
1000eb30:	5222b03a 	or	r17,r10,r8
1000eb34:	2006c03a 	cmpne	r3,r4,zero
1000eb38:	88e2b03a 	or	r17,r17,r3
1000eb3c:	3463c83a 	sub	r17,r6,r17
1000eb40:	2885c83a 	sub	r2,r5,r2
1000eb44:	344d803a 	cmpltu	r6,r6,r17
1000eb48:	1187c83a 	sub	r3,r2,r6
1000eb4c:	4821883a 	mov	r16,r9
1000eb50:	3825883a 	mov	r18,r7
1000eb54:	003f2306 	br	1000e7e4 <__alt_data_end+0xf800e7e4>
1000eb58:	24d0b03a 	or	r8,r4,r19
1000eb5c:	40001b1e 	bne	r8,zero,1000ebcc <__subdf3+0x560>
1000eb60:	0005883a 	mov	r2,zero
1000eb64:	0009883a 	mov	r4,zero
1000eb68:	0021883a 	mov	r16,zero
1000eb6c:	003f4906 	br	1000e894 <__alt_data_end+0xf800e894>
1000eb70:	010007c4 	movi	r4,31
1000eb74:	20803a16 	blt	r4,r2,1000ec60 <__subdf3+0x5f4>
1000eb78:	01000804 	movi	r4,32
1000eb7c:	2089c83a 	sub	r4,r4,r2
1000eb80:	2912983a 	sll	r9,r5,r4
1000eb84:	3090d83a 	srl	r8,r6,r2
1000eb88:	3108983a 	sll	r4,r6,r4
1000eb8c:	2884d83a 	srl	r2,r5,r2
1000eb90:	4a12b03a 	or	r9,r9,r8
1000eb94:	2008c03a 	cmpne	r4,r4,zero
1000eb98:	4912b03a 	or	r9,r9,r4
1000eb9c:	003f4e06 	br	1000e8d8 <__alt_data_end+0xf800e8d8>
1000eba0:	1c48b03a 	or	r4,r3,r17
1000eba4:	20003c26 	beq	r4,zero,1000ec98 <__subdf3+0x62c>
1000eba8:	0084303a 	nor	r2,zero,r2
1000ebac:	1000381e 	bne	r2,zero,1000ec90 <__subdf3+0x624>
1000ebb0:	3463c83a 	sub	r17,r6,r17
1000ebb4:	28c5c83a 	sub	r2,r5,r3
1000ebb8:	344d803a 	cmpltu	r6,r6,r17
1000ebbc:	1187c83a 	sub	r3,r2,r6
1000ebc0:	4821883a 	mov	r16,r9
1000ebc4:	3825883a 	mov	r18,r7
1000ebc8:	003f0606 	br	1000e7e4 <__alt_data_end+0xf800e7e4>
1000ebcc:	2023883a 	mov	r17,r4
1000ebd0:	003f0906 	br	1000e7f8 <__alt_data_end+0xf800e7f8>
1000ebd4:	0101ffc4 	movi	r4,2047
1000ebd8:	813f3a1e 	bne	r16,r4,1000e8c4 <__alt_data_end+0xf800e8c4>
1000ebdc:	003ec406 	br	1000e6f0 <__alt_data_end+0xf800e6f0>
1000ebe0:	0005883a 	mov	r2,zero
1000ebe4:	003fb106 	br	1000eaac <__alt_data_end+0xf800eaac>
1000ebe8:	0005883a 	mov	r2,zero
1000ebec:	003fbc06 	br	1000eae0 <__alt_data_end+0xf800eae0>
1000ebf0:	1c44b03a 	or	r2,r3,r17
1000ebf4:	80008e1e 	bne	r16,zero,1000ee30 <__subdf3+0x7c4>
1000ebf8:	1000c826 	beq	r2,zero,1000ef1c <__subdf3+0x8b0>
1000ebfc:	2984b03a 	or	r2,r5,r6
1000ec00:	103ebb26 	beq	r2,zero,1000e6f0 <__alt_data_end+0xf800e6f0>
1000ec04:	8989883a 	add	r4,r17,r6
1000ec08:	1945883a 	add	r2,r3,r5
1000ec0c:	2447803a 	cmpltu	r3,r4,r17
1000ec10:	1887883a 	add	r3,r3,r2
1000ec14:	1880202c 	andhi	r2,r3,128
1000ec18:	2023883a 	mov	r17,r4
1000ec1c:	103f1626 	beq	r2,zero,1000e878 <__alt_data_end+0xf800e878>
1000ec20:	00bfe034 	movhi	r2,65408
1000ec24:	10bfffc4 	addi	r2,r2,-1
1000ec28:	5021883a 	mov	r16,r10
1000ec2c:	1886703a 	and	r3,r3,r2
1000ec30:	003eaf06 	br	1000e6f0 <__alt_data_end+0xf800e6f0>
1000ec34:	3825883a 	mov	r18,r7
1000ec38:	003f0f06 	br	1000e878 <__alt_data_end+0xf800e878>
1000ec3c:	1c44b03a 	or	r2,r3,r17
1000ec40:	8000251e 	bne	r16,zero,1000ecd8 <__subdf3+0x66c>
1000ec44:	1000661e 	bne	r2,zero,1000ede0 <__subdf3+0x774>
1000ec48:	2990b03a 	or	r8,r5,r6
1000ec4c:	40009626 	beq	r8,zero,1000eea8 <__subdf3+0x83c>
1000ec50:	2807883a 	mov	r3,r5
1000ec54:	3023883a 	mov	r17,r6
1000ec58:	3825883a 	mov	r18,r7
1000ec5c:	003ea406 	br	1000e6f0 <__alt_data_end+0xf800e6f0>
1000ec60:	127ff804 	addi	r9,r2,-32
1000ec64:	01000804 	movi	r4,32
1000ec68:	2a52d83a 	srl	r9,r5,r9
1000ec6c:	11008c26 	beq	r2,r4,1000eea0 <__subdf3+0x834>
1000ec70:	01001004 	movi	r4,64
1000ec74:	2085c83a 	sub	r2,r4,r2
1000ec78:	2884983a 	sll	r2,r5,r2
1000ec7c:	118cb03a 	or	r6,r2,r6
1000ec80:	300cc03a 	cmpne	r6,r6,zero
1000ec84:	4992b03a 	or	r9,r9,r6
1000ec88:	0005883a 	mov	r2,zero
1000ec8c:	003f1206 	br	1000e8d8 <__alt_data_end+0xf800e8d8>
1000ec90:	0101ffc4 	movi	r4,2047
1000ec94:	493f9c1e 	bne	r9,r4,1000eb08 <__alt_data_end+0xf800eb08>
1000ec98:	2807883a 	mov	r3,r5
1000ec9c:	3023883a 	mov	r17,r6
1000eca0:	4821883a 	mov	r16,r9
1000eca4:	3825883a 	mov	r18,r7
1000eca8:	003e9106 	br	1000e6f0 <__alt_data_end+0xf800e6f0>
1000ecac:	80001f1e 	bne	r16,zero,1000ed2c <__subdf3+0x6c0>
1000ecb0:	1c48b03a 	or	r4,r3,r17
1000ecb4:	20005a26 	beq	r4,zero,1000ee20 <__subdf3+0x7b4>
1000ecb8:	0084303a 	nor	r2,zero,r2
1000ecbc:	1000561e 	bne	r2,zero,1000ee18 <__subdf3+0x7ac>
1000ecc0:	89a3883a 	add	r17,r17,r6
1000ecc4:	1945883a 	add	r2,r3,r5
1000ecc8:	898d803a 	cmpltu	r6,r17,r6
1000eccc:	3087883a 	add	r3,r6,r2
1000ecd0:	4821883a 	mov	r16,r9
1000ecd4:	003f0506 	br	1000e8ec <__alt_data_end+0xf800e8ec>
1000ecd8:	10002b1e 	bne	r2,zero,1000ed88 <__subdf3+0x71c>
1000ecdc:	2984b03a 	or	r2,r5,r6
1000ece0:	10008026 	beq	r2,zero,1000eee4 <__subdf3+0x878>
1000ece4:	2807883a 	mov	r3,r5
1000ece8:	3023883a 	mov	r17,r6
1000ecec:	3825883a 	mov	r18,r7
1000ecf0:	0401ffc4 	movi	r16,2047
1000ecf4:	003e7e06 	br	1000e6f0 <__alt_data_end+0xf800e6f0>
1000ecf8:	3809883a 	mov	r4,r7
1000ecfc:	0011883a 	mov	r8,zero
1000ed00:	0005883a 	mov	r2,zero
1000ed04:	003ee306 	br	1000e894 <__alt_data_end+0xf800e894>
1000ed08:	1c62b03a 	or	r17,r3,r17
1000ed0c:	8822c03a 	cmpne	r17,r17,zero
1000ed10:	0005883a 	mov	r2,zero
1000ed14:	003f8906 	br	1000eb3c <__alt_data_end+0xf800eb3c>
1000ed18:	3809883a 	mov	r4,r7
1000ed1c:	4821883a 	mov	r16,r9
1000ed20:	0011883a 	mov	r8,zero
1000ed24:	0005883a 	mov	r2,zero
1000ed28:	003eda06 	br	1000e894 <__alt_data_end+0xf800e894>
1000ed2c:	0101ffc4 	movi	r4,2047
1000ed30:	49003b26 	beq	r9,r4,1000ee20 <__subdf3+0x7b4>
1000ed34:	0085c83a 	sub	r2,zero,r2
1000ed38:	18c02034 	orhi	r3,r3,128
1000ed3c:	01000e04 	movi	r4,56
1000ed40:	20806e16 	blt	r4,r2,1000eefc <__subdf3+0x890>
1000ed44:	010007c4 	movi	r4,31
1000ed48:	20807716 	blt	r4,r2,1000ef28 <__subdf3+0x8bc>
1000ed4c:	01000804 	movi	r4,32
1000ed50:	2089c83a 	sub	r4,r4,r2
1000ed54:	1914983a 	sll	r10,r3,r4
1000ed58:	8890d83a 	srl	r8,r17,r2
1000ed5c:	8908983a 	sll	r4,r17,r4
1000ed60:	1884d83a 	srl	r2,r3,r2
1000ed64:	5222b03a 	or	r17,r10,r8
1000ed68:	2006c03a 	cmpne	r3,r4,zero
1000ed6c:	88e2b03a 	or	r17,r17,r3
1000ed70:	89a3883a 	add	r17,r17,r6
1000ed74:	1145883a 	add	r2,r2,r5
1000ed78:	898d803a 	cmpltu	r6,r17,r6
1000ed7c:	3087883a 	add	r3,r6,r2
1000ed80:	4821883a 	mov	r16,r9
1000ed84:	003ed906 	br	1000e8ec <__alt_data_end+0xf800e8ec>
1000ed88:	2984b03a 	or	r2,r5,r6
1000ed8c:	10004226 	beq	r2,zero,1000ee98 <__subdf3+0x82c>
1000ed90:	1808d0fa 	srli	r4,r3,3
1000ed94:	8822d0fa 	srli	r17,r17,3
1000ed98:	1806977a 	slli	r3,r3,29
1000ed9c:	2080022c 	andhi	r2,r4,8
1000eda0:	1c62b03a 	or	r17,r3,r17
1000eda4:	10000826 	beq	r2,zero,1000edc8 <__subdf3+0x75c>
1000eda8:	2812d0fa 	srli	r9,r5,3
1000edac:	4880022c 	andhi	r2,r9,8
1000edb0:	1000051e 	bne	r2,zero,1000edc8 <__subdf3+0x75c>
1000edb4:	300cd0fa 	srli	r6,r6,3
1000edb8:	2804977a 	slli	r2,r5,29
1000edbc:	4809883a 	mov	r4,r9
1000edc0:	3825883a 	mov	r18,r7
1000edc4:	11a2b03a 	or	r17,r2,r6
1000edc8:	8806d77a 	srli	r3,r17,29
1000edcc:	200890fa 	slli	r4,r4,3
1000edd0:	882290fa 	slli	r17,r17,3
1000edd4:	0401ffc4 	movi	r16,2047
1000edd8:	1906b03a 	or	r3,r3,r4
1000eddc:	003e4406 	br	1000e6f0 <__alt_data_end+0xf800e6f0>
1000ede0:	2984b03a 	or	r2,r5,r6
1000ede4:	103e4226 	beq	r2,zero,1000e6f0 <__alt_data_end+0xf800e6f0>
1000ede8:	8989c83a 	sub	r4,r17,r6
1000edec:	8911803a 	cmpltu	r8,r17,r4
1000edf0:	1945c83a 	sub	r2,r3,r5
1000edf4:	1205c83a 	sub	r2,r2,r8
1000edf8:	1200202c 	andhi	r8,r2,128
1000edfc:	403e9a26 	beq	r8,zero,1000e868 <__alt_data_end+0xf800e868>
1000ee00:	3463c83a 	sub	r17,r6,r17
1000ee04:	28c5c83a 	sub	r2,r5,r3
1000ee08:	344d803a 	cmpltu	r6,r6,r17
1000ee0c:	1187c83a 	sub	r3,r2,r6
1000ee10:	3825883a 	mov	r18,r7
1000ee14:	003e3606 	br	1000e6f0 <__alt_data_end+0xf800e6f0>
1000ee18:	0101ffc4 	movi	r4,2047
1000ee1c:	493fc71e 	bne	r9,r4,1000ed3c <__alt_data_end+0xf800ed3c>
1000ee20:	2807883a 	mov	r3,r5
1000ee24:	3023883a 	mov	r17,r6
1000ee28:	4821883a 	mov	r16,r9
1000ee2c:	003e3006 	br	1000e6f0 <__alt_data_end+0xf800e6f0>
1000ee30:	10003626 	beq	r2,zero,1000ef0c <__subdf3+0x8a0>
1000ee34:	2984b03a 	or	r2,r5,r6
1000ee38:	10001726 	beq	r2,zero,1000ee98 <__subdf3+0x82c>
1000ee3c:	1808d0fa 	srli	r4,r3,3
1000ee40:	8822d0fa 	srli	r17,r17,3
1000ee44:	1806977a 	slli	r3,r3,29
1000ee48:	2080022c 	andhi	r2,r4,8
1000ee4c:	1c62b03a 	or	r17,r3,r17
1000ee50:	10000726 	beq	r2,zero,1000ee70 <__subdf3+0x804>
1000ee54:	2812d0fa 	srli	r9,r5,3
1000ee58:	4880022c 	andhi	r2,r9,8
1000ee5c:	1000041e 	bne	r2,zero,1000ee70 <__subdf3+0x804>
1000ee60:	300cd0fa 	srli	r6,r6,3
1000ee64:	2804977a 	slli	r2,r5,29
1000ee68:	4809883a 	mov	r4,r9
1000ee6c:	11a2b03a 	or	r17,r2,r6
1000ee70:	8806d77a 	srli	r3,r17,29
1000ee74:	200890fa 	slli	r4,r4,3
1000ee78:	882290fa 	slli	r17,r17,3
1000ee7c:	3825883a 	mov	r18,r7
1000ee80:	1906b03a 	or	r3,r3,r4
1000ee84:	0401ffc4 	movi	r16,2047
1000ee88:	003e1906 	br	1000e6f0 <__alt_data_end+0xf800e6f0>
1000ee8c:	000b883a 	mov	r5,zero
1000ee90:	0005883a 	mov	r2,zero
1000ee94:	003e2e06 	br	1000e750 <__alt_data_end+0xf800e750>
1000ee98:	0401ffc4 	movi	r16,2047
1000ee9c:	003e1406 	br	1000e6f0 <__alt_data_end+0xf800e6f0>
1000eea0:	0005883a 	mov	r2,zero
1000eea4:	003f7506 	br	1000ec7c <__alt_data_end+0xf800ec7c>
1000eea8:	0005883a 	mov	r2,zero
1000eeac:	0009883a 	mov	r4,zero
1000eeb0:	003e7806 	br	1000e894 <__alt_data_end+0xf800e894>
1000eeb4:	123ff804 	addi	r8,r2,-32
1000eeb8:	01000804 	movi	r4,32
1000eebc:	1a10d83a 	srl	r8,r3,r8
1000eec0:	11002526 	beq	r2,r4,1000ef58 <__subdf3+0x8ec>
1000eec4:	01001004 	movi	r4,64
1000eec8:	2085c83a 	sub	r2,r4,r2
1000eecc:	1884983a 	sll	r2,r3,r2
1000eed0:	1444b03a 	or	r2,r2,r17
1000eed4:	1004c03a 	cmpne	r2,r2,zero
1000eed8:	40a2b03a 	or	r17,r8,r2
1000eedc:	0005883a 	mov	r2,zero
1000eee0:	003f1606 	br	1000eb3c <__alt_data_end+0xf800eb3c>
1000eee4:	02000434 	movhi	r8,16
1000eee8:	0009883a 	mov	r4,zero
1000eeec:	423fffc4 	addi	r8,r8,-1
1000eef0:	00bfffc4 	movi	r2,-1
1000eef4:	0401ffc4 	movi	r16,2047
1000eef8:	003e6606 	br	1000e894 <__alt_data_end+0xf800e894>
1000eefc:	1c62b03a 	or	r17,r3,r17
1000ef00:	8822c03a 	cmpne	r17,r17,zero
1000ef04:	0005883a 	mov	r2,zero
1000ef08:	003f9906 	br	1000ed70 <__alt_data_end+0xf800ed70>
1000ef0c:	2807883a 	mov	r3,r5
1000ef10:	3023883a 	mov	r17,r6
1000ef14:	0401ffc4 	movi	r16,2047
1000ef18:	003df506 	br	1000e6f0 <__alt_data_end+0xf800e6f0>
1000ef1c:	2807883a 	mov	r3,r5
1000ef20:	3023883a 	mov	r17,r6
1000ef24:	003df206 	br	1000e6f0 <__alt_data_end+0xf800e6f0>
1000ef28:	123ff804 	addi	r8,r2,-32
1000ef2c:	01000804 	movi	r4,32
1000ef30:	1a10d83a 	srl	r8,r3,r8
1000ef34:	11000a26 	beq	r2,r4,1000ef60 <__subdf3+0x8f4>
1000ef38:	01001004 	movi	r4,64
1000ef3c:	2085c83a 	sub	r2,r4,r2
1000ef40:	1884983a 	sll	r2,r3,r2
1000ef44:	1444b03a 	or	r2,r2,r17
1000ef48:	1004c03a 	cmpne	r2,r2,zero
1000ef4c:	40a2b03a 	or	r17,r8,r2
1000ef50:	0005883a 	mov	r2,zero
1000ef54:	003f8606 	br	1000ed70 <__alt_data_end+0xf800ed70>
1000ef58:	0005883a 	mov	r2,zero
1000ef5c:	003fdc06 	br	1000eed0 <__alt_data_end+0xf800eed0>
1000ef60:	0005883a 	mov	r2,zero
1000ef64:	003ff706 	br	1000ef44 <__alt_data_end+0xf800ef44>

1000ef68 <__fixdfsi>:
1000ef68:	280cd53a 	srli	r6,r5,20
1000ef6c:	00c00434 	movhi	r3,16
1000ef70:	18ffffc4 	addi	r3,r3,-1
1000ef74:	3181ffcc 	andi	r6,r6,2047
1000ef78:	01c0ff84 	movi	r7,1022
1000ef7c:	28c6703a 	and	r3,r5,r3
1000ef80:	280ad7fa 	srli	r5,r5,31
1000ef84:	3980120e 	bge	r7,r6,1000efd0 <__fixdfsi+0x68>
1000ef88:	00810744 	movi	r2,1053
1000ef8c:	11800c16 	blt	r2,r6,1000efc0 <__fixdfsi+0x58>
1000ef90:	00810cc4 	movi	r2,1075
1000ef94:	1185c83a 	sub	r2,r2,r6
1000ef98:	01c007c4 	movi	r7,31
1000ef9c:	18c00434 	orhi	r3,r3,16
1000efa0:	38800d16 	blt	r7,r2,1000efd8 <__fixdfsi+0x70>
1000efa4:	31befb44 	addi	r6,r6,-1043
1000efa8:	2084d83a 	srl	r2,r4,r2
1000efac:	1986983a 	sll	r3,r3,r6
1000efb0:	1884b03a 	or	r2,r3,r2
1000efb4:	28000726 	beq	r5,zero,1000efd4 <__fixdfsi+0x6c>
1000efb8:	0085c83a 	sub	r2,zero,r2
1000efbc:	f800283a 	ret
1000efc0:	00a00034 	movhi	r2,32768
1000efc4:	10bfffc4 	addi	r2,r2,-1
1000efc8:	2885883a 	add	r2,r5,r2
1000efcc:	f800283a 	ret
1000efd0:	0005883a 	mov	r2,zero
1000efd4:	f800283a 	ret
1000efd8:	008104c4 	movi	r2,1043
1000efdc:	1185c83a 	sub	r2,r2,r6
1000efe0:	1884d83a 	srl	r2,r3,r2
1000efe4:	003ff306 	br	1000efb4 <__alt_data_end+0xf800efb4>

1000efe8 <__floatsidf>:
1000efe8:	defffd04 	addi	sp,sp,-12
1000efec:	dfc00215 	stw	ra,8(sp)
1000eff0:	dc400115 	stw	r17,4(sp)
1000eff4:	dc000015 	stw	r16,0(sp)
1000eff8:	20002b26 	beq	r4,zero,1000f0a8 <__floatsidf+0xc0>
1000effc:	2023883a 	mov	r17,r4
1000f000:	2020d7fa 	srli	r16,r4,31
1000f004:	20002d16 	blt	r4,zero,1000f0bc <__floatsidf+0xd4>
1000f008:	8809883a 	mov	r4,r17
1000f00c:	000f16c0 	call	1000f16c <__clzsi2>
1000f010:	01410784 	movi	r5,1054
1000f014:	288bc83a 	sub	r5,r5,r2
1000f018:	01010cc4 	movi	r4,1075
1000f01c:	2149c83a 	sub	r4,r4,r5
1000f020:	00c007c4 	movi	r3,31
1000f024:	1900160e 	bge	r3,r4,1000f080 <__floatsidf+0x98>
1000f028:	00c104c4 	movi	r3,1043
1000f02c:	1947c83a 	sub	r3,r3,r5
1000f030:	88c6983a 	sll	r3,r17,r3
1000f034:	00800434 	movhi	r2,16
1000f038:	10bfffc4 	addi	r2,r2,-1
1000f03c:	1886703a 	and	r3,r3,r2
1000f040:	2941ffcc 	andi	r5,r5,2047
1000f044:	800d883a 	mov	r6,r16
1000f048:	0005883a 	mov	r2,zero
1000f04c:	280a953a 	slli	r5,r5,20
1000f050:	31803fcc 	andi	r6,r6,255
1000f054:	01000434 	movhi	r4,16
1000f058:	300c97fa 	slli	r6,r6,31
1000f05c:	213fffc4 	addi	r4,r4,-1
1000f060:	1906703a 	and	r3,r3,r4
1000f064:	1946b03a 	or	r3,r3,r5
1000f068:	1986b03a 	or	r3,r3,r6
1000f06c:	dfc00217 	ldw	ra,8(sp)
1000f070:	dc400117 	ldw	r17,4(sp)
1000f074:	dc000017 	ldw	r16,0(sp)
1000f078:	dec00304 	addi	sp,sp,12
1000f07c:	f800283a 	ret
1000f080:	00c002c4 	movi	r3,11
1000f084:	1887c83a 	sub	r3,r3,r2
1000f088:	88c6d83a 	srl	r3,r17,r3
1000f08c:	8904983a 	sll	r2,r17,r4
1000f090:	01000434 	movhi	r4,16
1000f094:	213fffc4 	addi	r4,r4,-1
1000f098:	2941ffcc 	andi	r5,r5,2047
1000f09c:	1906703a 	and	r3,r3,r4
1000f0a0:	800d883a 	mov	r6,r16
1000f0a4:	003fe906 	br	1000f04c <__alt_data_end+0xf800f04c>
1000f0a8:	000d883a 	mov	r6,zero
1000f0ac:	000b883a 	mov	r5,zero
1000f0b0:	0007883a 	mov	r3,zero
1000f0b4:	0005883a 	mov	r2,zero
1000f0b8:	003fe406 	br	1000f04c <__alt_data_end+0xf800f04c>
1000f0bc:	0123c83a 	sub	r17,zero,r4
1000f0c0:	003fd106 	br	1000f008 <__alt_data_end+0xf800f008>

1000f0c4 <__floatunsidf>:
1000f0c4:	defffe04 	addi	sp,sp,-8
1000f0c8:	dc000015 	stw	r16,0(sp)
1000f0cc:	dfc00115 	stw	ra,4(sp)
1000f0d0:	2021883a 	mov	r16,r4
1000f0d4:	20002226 	beq	r4,zero,1000f160 <__floatunsidf+0x9c>
1000f0d8:	000f16c0 	call	1000f16c <__clzsi2>
1000f0dc:	01010784 	movi	r4,1054
1000f0e0:	2089c83a 	sub	r4,r4,r2
1000f0e4:	01810cc4 	movi	r6,1075
1000f0e8:	310dc83a 	sub	r6,r6,r4
1000f0ec:	00c007c4 	movi	r3,31
1000f0f0:	1980120e 	bge	r3,r6,1000f13c <__floatunsidf+0x78>
1000f0f4:	00c104c4 	movi	r3,1043
1000f0f8:	1907c83a 	sub	r3,r3,r4
1000f0fc:	80ca983a 	sll	r5,r16,r3
1000f100:	00800434 	movhi	r2,16
1000f104:	10bfffc4 	addi	r2,r2,-1
1000f108:	2101ffcc 	andi	r4,r4,2047
1000f10c:	0021883a 	mov	r16,zero
1000f110:	288a703a 	and	r5,r5,r2
1000f114:	2008953a 	slli	r4,r4,20
1000f118:	00c00434 	movhi	r3,16
1000f11c:	18ffffc4 	addi	r3,r3,-1
1000f120:	28c6703a 	and	r3,r5,r3
1000f124:	8005883a 	mov	r2,r16
1000f128:	1906b03a 	or	r3,r3,r4
1000f12c:	dfc00117 	ldw	ra,4(sp)
1000f130:	dc000017 	ldw	r16,0(sp)
1000f134:	dec00204 	addi	sp,sp,8
1000f138:	f800283a 	ret
1000f13c:	00c002c4 	movi	r3,11
1000f140:	188bc83a 	sub	r5,r3,r2
1000f144:	814ad83a 	srl	r5,r16,r5
1000f148:	00c00434 	movhi	r3,16
1000f14c:	18ffffc4 	addi	r3,r3,-1
1000f150:	81a0983a 	sll	r16,r16,r6
1000f154:	2101ffcc 	andi	r4,r4,2047
1000f158:	28ca703a 	and	r5,r5,r3
1000f15c:	003fed06 	br	1000f114 <__alt_data_end+0xf800f114>
1000f160:	0009883a 	mov	r4,zero
1000f164:	000b883a 	mov	r5,zero
1000f168:	003fea06 	br	1000f114 <__alt_data_end+0xf800f114>

1000f16c <__clzsi2>:
1000f16c:	00bfffd4 	movui	r2,65535
1000f170:	11000536 	bltu	r2,r4,1000f188 <__clzsi2+0x1c>
1000f174:	00803fc4 	movi	r2,255
1000f178:	11000f36 	bltu	r2,r4,1000f1b8 <__clzsi2+0x4c>
1000f17c:	00800804 	movi	r2,32
1000f180:	0007883a 	mov	r3,zero
1000f184:	00000506 	br	1000f19c <__clzsi2+0x30>
1000f188:	00804034 	movhi	r2,256
1000f18c:	10bfffc4 	addi	r2,r2,-1
1000f190:	11000c2e 	bgeu	r2,r4,1000f1c4 <__clzsi2+0x58>
1000f194:	00800204 	movi	r2,8
1000f198:	00c00604 	movi	r3,24
1000f19c:	20c8d83a 	srl	r4,r4,r3
1000f1a0:	00c40074 	movhi	r3,4097
1000f1a4:	18c8cf04 	addi	r3,r3,9020
1000f1a8:	1909883a 	add	r4,r3,r4
1000f1ac:	20c00003 	ldbu	r3,0(r4)
1000f1b0:	10c5c83a 	sub	r2,r2,r3
1000f1b4:	f800283a 	ret
1000f1b8:	00800604 	movi	r2,24
1000f1bc:	00c00204 	movi	r3,8
1000f1c0:	003ff606 	br	1000f19c <__alt_data_end+0xf800f19c>
1000f1c4:	00800404 	movi	r2,16
1000f1c8:	1007883a 	mov	r3,r2
1000f1cc:	003ff306 	br	1000f19c <__alt_data_end+0xf800f19c>

1000f1d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000f1d0:	defffe04 	addi	sp,sp,-8
1000f1d4:	dfc00115 	stw	ra,4(sp)
1000f1d8:	df000015 	stw	fp,0(sp)
1000f1dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f1e0:	d0a00b17 	ldw	r2,-32724(gp)
1000f1e4:	10000326 	beq	r2,zero,1000f1f4 <alt_get_errno+0x24>
1000f1e8:	d0a00b17 	ldw	r2,-32724(gp)
1000f1ec:	103ee83a 	callr	r2
1000f1f0:	00000106 	br	1000f1f8 <alt_get_errno+0x28>
1000f1f4:	d0a6d204 	addi	r2,gp,-25784
}
1000f1f8:	e037883a 	mov	sp,fp
1000f1fc:	dfc00117 	ldw	ra,4(sp)
1000f200:	df000017 	ldw	fp,0(sp)
1000f204:	dec00204 	addi	sp,sp,8
1000f208:	f800283a 	ret

1000f20c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
1000f20c:	defffb04 	addi	sp,sp,-20
1000f210:	dfc00415 	stw	ra,16(sp)
1000f214:	df000315 	stw	fp,12(sp)
1000f218:	df000304 	addi	fp,sp,12
1000f21c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
1000f220:	e0bfff17 	ldw	r2,-4(fp)
1000f224:	10000816 	blt	r2,zero,1000f248 <close+0x3c>
1000f228:	01400304 	movi	r5,12
1000f22c:	e13fff17 	ldw	r4,-4(fp)
1000f230:	000c9040 	call	1000c904 <__mulsi3>
1000f234:	1007883a 	mov	r3,r2
1000f238:	00840074 	movhi	r2,4097
1000f23c:	108b4f04 	addi	r2,r2,11580
1000f240:	1885883a 	add	r2,r3,r2
1000f244:	00000106 	br	1000f24c <close+0x40>
1000f248:	0005883a 	mov	r2,zero
1000f24c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
1000f250:	e0bffd17 	ldw	r2,-12(fp)
1000f254:	10001926 	beq	r2,zero,1000f2bc <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
1000f258:	e0bffd17 	ldw	r2,-12(fp)
1000f25c:	10800017 	ldw	r2,0(r2)
1000f260:	10800417 	ldw	r2,16(r2)
1000f264:	10000626 	beq	r2,zero,1000f280 <close+0x74>
1000f268:	e0bffd17 	ldw	r2,-12(fp)
1000f26c:	10800017 	ldw	r2,0(r2)
1000f270:	10800417 	ldw	r2,16(r2)
1000f274:	e13ffd17 	ldw	r4,-12(fp)
1000f278:	103ee83a 	callr	r2
1000f27c:	00000106 	br	1000f284 <close+0x78>
1000f280:	0005883a 	mov	r2,zero
1000f284:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
1000f288:	e13fff17 	ldw	r4,-4(fp)
1000f28c:	000f8f40 	call	1000f8f4 <alt_release_fd>
    if (rval < 0)
1000f290:	e0bffe17 	ldw	r2,-8(fp)
1000f294:	1000070e 	bge	r2,zero,1000f2b4 <close+0xa8>
    {
      ALT_ERRNO = -rval;
1000f298:	000f1d00 	call	1000f1d0 <alt_get_errno>
1000f29c:	1007883a 	mov	r3,r2
1000f2a0:	e0bffe17 	ldw	r2,-8(fp)
1000f2a4:	0085c83a 	sub	r2,zero,r2
1000f2a8:	18800015 	stw	r2,0(r3)
      return -1;
1000f2ac:	00bfffc4 	movi	r2,-1
1000f2b0:	00000706 	br	1000f2d0 <close+0xc4>
    }
    return 0;
1000f2b4:	0005883a 	mov	r2,zero
1000f2b8:	00000506 	br	1000f2d0 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000f2bc:	000f1d00 	call	1000f1d0 <alt_get_errno>
1000f2c0:	1007883a 	mov	r3,r2
1000f2c4:	00801444 	movi	r2,81
1000f2c8:	18800015 	stw	r2,0(r3)
    return -1;
1000f2cc:	00bfffc4 	movi	r2,-1
  }
}
1000f2d0:	e037883a 	mov	sp,fp
1000f2d4:	dfc00117 	ldw	ra,4(sp)
1000f2d8:	df000017 	ldw	fp,0(sp)
1000f2dc:	dec00204 	addi	sp,sp,8
1000f2e0:	f800283a 	ret

1000f2e4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
1000f2e4:	defffc04 	addi	sp,sp,-16
1000f2e8:	df000315 	stw	fp,12(sp)
1000f2ec:	df000304 	addi	fp,sp,12
1000f2f0:	e13ffd15 	stw	r4,-12(fp)
1000f2f4:	e17ffe15 	stw	r5,-8(fp)
1000f2f8:	e1bfff15 	stw	r6,-4(fp)
  return len;
1000f2fc:	e0bfff17 	ldw	r2,-4(fp)
}
1000f300:	e037883a 	mov	sp,fp
1000f304:	df000017 	ldw	fp,0(sp)
1000f308:	dec00104 	addi	sp,sp,4
1000f30c:	f800283a 	ret

1000f310 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000f310:	defffe04 	addi	sp,sp,-8
1000f314:	dfc00115 	stw	ra,4(sp)
1000f318:	df000015 	stw	fp,0(sp)
1000f31c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f320:	d0a00b17 	ldw	r2,-32724(gp)
1000f324:	10000326 	beq	r2,zero,1000f334 <alt_get_errno+0x24>
1000f328:	d0a00b17 	ldw	r2,-32724(gp)
1000f32c:	103ee83a 	callr	r2
1000f330:	00000106 	br	1000f338 <alt_get_errno+0x28>
1000f334:	d0a6d204 	addi	r2,gp,-25784
}
1000f338:	e037883a 	mov	sp,fp
1000f33c:	dfc00117 	ldw	ra,4(sp)
1000f340:	df000017 	ldw	fp,0(sp)
1000f344:	dec00204 	addi	sp,sp,8
1000f348:	f800283a 	ret

1000f34c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
1000f34c:	defffb04 	addi	sp,sp,-20
1000f350:	dfc00415 	stw	ra,16(sp)
1000f354:	df000315 	stw	fp,12(sp)
1000f358:	df000304 	addi	fp,sp,12
1000f35c:	e13ffe15 	stw	r4,-8(fp)
1000f360:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000f364:	e0bffe17 	ldw	r2,-8(fp)
1000f368:	10000816 	blt	r2,zero,1000f38c <fstat+0x40>
1000f36c:	01400304 	movi	r5,12
1000f370:	e13ffe17 	ldw	r4,-8(fp)
1000f374:	000c9040 	call	1000c904 <__mulsi3>
1000f378:	1007883a 	mov	r3,r2
1000f37c:	00840074 	movhi	r2,4097
1000f380:	108b4f04 	addi	r2,r2,11580
1000f384:	1885883a 	add	r2,r3,r2
1000f388:	00000106 	br	1000f390 <fstat+0x44>
1000f38c:	0005883a 	mov	r2,zero
1000f390:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
1000f394:	e0bffd17 	ldw	r2,-12(fp)
1000f398:	10001026 	beq	r2,zero,1000f3dc <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
1000f39c:	e0bffd17 	ldw	r2,-12(fp)
1000f3a0:	10800017 	ldw	r2,0(r2)
1000f3a4:	10800817 	ldw	r2,32(r2)
1000f3a8:	10000726 	beq	r2,zero,1000f3c8 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
1000f3ac:	e0bffd17 	ldw	r2,-12(fp)
1000f3b0:	10800017 	ldw	r2,0(r2)
1000f3b4:	10800817 	ldw	r2,32(r2)
1000f3b8:	e17fff17 	ldw	r5,-4(fp)
1000f3bc:	e13ffd17 	ldw	r4,-12(fp)
1000f3c0:	103ee83a 	callr	r2
1000f3c4:	00000a06 	br	1000f3f0 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
1000f3c8:	e0bfff17 	ldw	r2,-4(fp)
1000f3cc:	00c80004 	movi	r3,8192
1000f3d0:	10c00115 	stw	r3,4(r2)
      return 0;
1000f3d4:	0005883a 	mov	r2,zero
1000f3d8:	00000506 	br	1000f3f0 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000f3dc:	000f3100 	call	1000f310 <alt_get_errno>
1000f3e0:	1007883a 	mov	r3,r2
1000f3e4:	00801444 	movi	r2,81
1000f3e8:	18800015 	stw	r2,0(r3)
    return -1;
1000f3ec:	00bfffc4 	movi	r2,-1
  }
}
1000f3f0:	e037883a 	mov	sp,fp
1000f3f4:	dfc00117 	ldw	ra,4(sp)
1000f3f8:	df000017 	ldw	fp,0(sp)
1000f3fc:	dec00204 	addi	sp,sp,8
1000f400:	f800283a 	ret

1000f404 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000f404:	defffe04 	addi	sp,sp,-8
1000f408:	dfc00115 	stw	ra,4(sp)
1000f40c:	df000015 	stw	fp,0(sp)
1000f410:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f414:	d0a00b17 	ldw	r2,-32724(gp)
1000f418:	10000326 	beq	r2,zero,1000f428 <alt_get_errno+0x24>
1000f41c:	d0a00b17 	ldw	r2,-32724(gp)
1000f420:	103ee83a 	callr	r2
1000f424:	00000106 	br	1000f42c <alt_get_errno+0x28>
1000f428:	d0a6d204 	addi	r2,gp,-25784
}
1000f42c:	e037883a 	mov	sp,fp
1000f430:	dfc00117 	ldw	ra,4(sp)
1000f434:	df000017 	ldw	fp,0(sp)
1000f438:	dec00204 	addi	sp,sp,8
1000f43c:	f800283a 	ret

1000f440 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
1000f440:	deffed04 	addi	sp,sp,-76
1000f444:	dfc01215 	stw	ra,72(sp)
1000f448:	df001115 	stw	fp,68(sp)
1000f44c:	df001104 	addi	fp,sp,68
1000f450:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000f454:	e0bfff17 	ldw	r2,-4(fp)
1000f458:	10000816 	blt	r2,zero,1000f47c <isatty+0x3c>
1000f45c:	01400304 	movi	r5,12
1000f460:	e13fff17 	ldw	r4,-4(fp)
1000f464:	000c9040 	call	1000c904 <__mulsi3>
1000f468:	1007883a 	mov	r3,r2
1000f46c:	00840074 	movhi	r2,4097
1000f470:	108b4f04 	addi	r2,r2,11580
1000f474:	1885883a 	add	r2,r3,r2
1000f478:	00000106 	br	1000f480 <isatty+0x40>
1000f47c:	0005883a 	mov	r2,zero
1000f480:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
1000f484:	e0bfef17 	ldw	r2,-68(fp)
1000f488:	10000e26 	beq	r2,zero,1000f4c4 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
1000f48c:	e0bfef17 	ldw	r2,-68(fp)
1000f490:	10800017 	ldw	r2,0(r2)
1000f494:	10800817 	ldw	r2,32(r2)
1000f498:	1000021e 	bne	r2,zero,1000f4a4 <isatty+0x64>
    {
      return 1;
1000f49c:	00800044 	movi	r2,1
1000f4a0:	00000d06 	br	1000f4d8 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
1000f4a4:	e0bff004 	addi	r2,fp,-64
1000f4a8:	100b883a 	mov	r5,r2
1000f4ac:	e13fff17 	ldw	r4,-4(fp)
1000f4b0:	000f34c0 	call	1000f34c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
1000f4b4:	e0bff117 	ldw	r2,-60(fp)
1000f4b8:	10880020 	cmpeqi	r2,r2,8192
1000f4bc:	10803fcc 	andi	r2,r2,255
1000f4c0:	00000506 	br	1000f4d8 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000f4c4:	000f4040 	call	1000f404 <alt_get_errno>
1000f4c8:	1007883a 	mov	r3,r2
1000f4cc:	00801444 	movi	r2,81
1000f4d0:	18800015 	stw	r2,0(r3)
    return 0;
1000f4d4:	0005883a 	mov	r2,zero
  }
}
1000f4d8:	e037883a 	mov	sp,fp
1000f4dc:	dfc00117 	ldw	ra,4(sp)
1000f4e0:	df000017 	ldw	fp,0(sp)
1000f4e4:	dec00204 	addi	sp,sp,8
1000f4e8:	f800283a 	ret

1000f4ec <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
1000f4ec:	defffc04 	addi	sp,sp,-16
1000f4f0:	df000315 	stw	fp,12(sp)
1000f4f4:	df000304 	addi	fp,sp,12
1000f4f8:	e13ffd15 	stw	r4,-12(fp)
1000f4fc:	e17ffe15 	stw	r5,-8(fp)
1000f500:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
1000f504:	e0fffe17 	ldw	r3,-8(fp)
1000f508:	e0bffd17 	ldw	r2,-12(fp)
1000f50c:	18800c26 	beq	r3,r2,1000f540 <alt_load_section+0x54>
  {
    while( to != end )
1000f510:	00000806 	br	1000f534 <alt_load_section+0x48>
    {
      *to++ = *from++;
1000f514:	e0bffe17 	ldw	r2,-8(fp)
1000f518:	10c00104 	addi	r3,r2,4
1000f51c:	e0fffe15 	stw	r3,-8(fp)
1000f520:	e0fffd17 	ldw	r3,-12(fp)
1000f524:	19000104 	addi	r4,r3,4
1000f528:	e13ffd15 	stw	r4,-12(fp)
1000f52c:	18c00017 	ldw	r3,0(r3)
1000f530:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
1000f534:	e0fffe17 	ldw	r3,-8(fp)
1000f538:	e0bfff17 	ldw	r2,-4(fp)
1000f53c:	18bff51e 	bne	r3,r2,1000f514 <__alt_data_end+0xf800f514>
    {
      *to++ = *from++;
    }
  }
}
1000f540:	0001883a 	nop
1000f544:	e037883a 	mov	sp,fp
1000f548:	df000017 	ldw	fp,0(sp)
1000f54c:	dec00104 	addi	sp,sp,4
1000f550:	f800283a 	ret

1000f554 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
1000f554:	defffe04 	addi	sp,sp,-8
1000f558:	dfc00115 	stw	ra,4(sp)
1000f55c:	df000015 	stw	fp,0(sp)
1000f560:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
1000f564:	01840074 	movhi	r6,4097
1000f568:	318fd704 	addi	r6,r6,16220
1000f56c:	01440074 	movhi	r5,4097
1000f570:	29491c04 	addi	r5,r5,9328
1000f574:	01040074 	movhi	r4,4097
1000f578:	210fd704 	addi	r4,r4,16220
1000f57c:	000f4ec0 	call	1000f4ec <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
1000f580:	01840034 	movhi	r6,4096
1000f584:	31808c04 	addi	r6,r6,560
1000f588:	01440034 	movhi	r5,4096
1000f58c:	29400804 	addi	r5,r5,32
1000f590:	01040034 	movhi	r4,4096
1000f594:	21000804 	addi	r4,r4,32
1000f598:	000f4ec0 	call	1000f4ec <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
1000f59c:	01840074 	movhi	r6,4097
1000f5a0:	31891c04 	addi	r6,r6,9328
1000f5a4:	01440074 	movhi	r5,4097
1000f5a8:	29467c04 	addi	r5,r5,6640
1000f5ac:	01040074 	movhi	r4,4097
1000f5b0:	21067c04 	addi	r4,r4,6640
1000f5b4:	000f4ec0 	call	1000f4ec <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
1000f5b8:	00109380 	call	10010938 <alt_dcache_flush_all>
  alt_icache_flush_all();
1000f5bc:	0010af80 	call	10010af8 <alt_icache_flush_all>
}
1000f5c0:	0001883a 	nop
1000f5c4:	e037883a 	mov	sp,fp
1000f5c8:	dfc00117 	ldw	ra,4(sp)
1000f5cc:	df000017 	ldw	fp,0(sp)
1000f5d0:	dec00204 	addi	sp,sp,8
1000f5d4:	f800283a 	ret

1000f5d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000f5d8:	defffe04 	addi	sp,sp,-8
1000f5dc:	dfc00115 	stw	ra,4(sp)
1000f5e0:	df000015 	stw	fp,0(sp)
1000f5e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f5e8:	d0a00b17 	ldw	r2,-32724(gp)
1000f5ec:	10000326 	beq	r2,zero,1000f5fc <alt_get_errno+0x24>
1000f5f0:	d0a00b17 	ldw	r2,-32724(gp)
1000f5f4:	103ee83a 	callr	r2
1000f5f8:	00000106 	br	1000f600 <alt_get_errno+0x28>
1000f5fc:	d0a6d204 	addi	r2,gp,-25784
}
1000f600:	e037883a 	mov	sp,fp
1000f604:	dfc00117 	ldw	ra,4(sp)
1000f608:	df000017 	ldw	fp,0(sp)
1000f60c:	dec00204 	addi	sp,sp,8
1000f610:	f800283a 	ret

1000f614 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
1000f614:	defff904 	addi	sp,sp,-28
1000f618:	dfc00615 	stw	ra,24(sp)
1000f61c:	df000515 	stw	fp,20(sp)
1000f620:	df000504 	addi	fp,sp,20
1000f624:	e13ffd15 	stw	r4,-12(fp)
1000f628:	e17ffe15 	stw	r5,-8(fp)
1000f62c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
1000f630:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000f634:	e0bffd17 	ldw	r2,-12(fp)
1000f638:	10000816 	blt	r2,zero,1000f65c <lseek+0x48>
1000f63c:	01400304 	movi	r5,12
1000f640:	e13ffd17 	ldw	r4,-12(fp)
1000f644:	000c9040 	call	1000c904 <__mulsi3>
1000f648:	1007883a 	mov	r3,r2
1000f64c:	00840074 	movhi	r2,4097
1000f650:	108b4f04 	addi	r2,r2,11580
1000f654:	1885883a 	add	r2,r3,r2
1000f658:	00000106 	br	1000f660 <lseek+0x4c>
1000f65c:	0005883a 	mov	r2,zero
1000f660:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
1000f664:	e0bffc17 	ldw	r2,-16(fp)
1000f668:	10001026 	beq	r2,zero,1000f6ac <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
1000f66c:	e0bffc17 	ldw	r2,-16(fp)
1000f670:	10800017 	ldw	r2,0(r2)
1000f674:	10800717 	ldw	r2,28(r2)
1000f678:	10000926 	beq	r2,zero,1000f6a0 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
1000f67c:	e0bffc17 	ldw	r2,-16(fp)
1000f680:	10800017 	ldw	r2,0(r2)
1000f684:	10800717 	ldw	r2,28(r2)
1000f688:	e1bfff17 	ldw	r6,-4(fp)
1000f68c:	e17ffe17 	ldw	r5,-8(fp)
1000f690:	e13ffc17 	ldw	r4,-16(fp)
1000f694:	103ee83a 	callr	r2
1000f698:	e0bffb15 	stw	r2,-20(fp)
1000f69c:	00000506 	br	1000f6b4 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
1000f6a0:	00bfde84 	movi	r2,-134
1000f6a4:	e0bffb15 	stw	r2,-20(fp)
1000f6a8:	00000206 	br	1000f6b4 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
1000f6ac:	00bfebc4 	movi	r2,-81
1000f6b0:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
1000f6b4:	e0bffb17 	ldw	r2,-20(fp)
1000f6b8:	1000070e 	bge	r2,zero,1000f6d8 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
1000f6bc:	000f5d80 	call	1000f5d8 <alt_get_errno>
1000f6c0:	1007883a 	mov	r3,r2
1000f6c4:	e0bffb17 	ldw	r2,-20(fp)
1000f6c8:	0085c83a 	sub	r2,zero,r2
1000f6cc:	18800015 	stw	r2,0(r3)
    rc = -1;
1000f6d0:	00bfffc4 	movi	r2,-1
1000f6d4:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
1000f6d8:	e0bffb17 	ldw	r2,-20(fp)
}
1000f6dc:	e037883a 	mov	sp,fp
1000f6e0:	dfc00117 	ldw	ra,4(sp)
1000f6e4:	df000017 	ldw	fp,0(sp)
1000f6e8:	dec00204 	addi	sp,sp,8
1000f6ec:	f800283a 	ret

1000f6f0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
1000f6f0:	defffd04 	addi	sp,sp,-12
1000f6f4:	dfc00215 	stw	ra,8(sp)
1000f6f8:	df000115 	stw	fp,4(sp)
1000f6fc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
1000f700:	0009883a 	mov	r4,zero
1000f704:	000fbc80 	call	1000fbc8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
1000f708:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
1000f70c:	000fc000 	call	1000fc00 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
1000f710:	01840074 	movhi	r6,4097
1000f714:	31891204 	addi	r6,r6,9288
1000f718:	01440074 	movhi	r5,4097
1000f71c:	29491204 	addi	r5,r5,9288
1000f720:	01040074 	movhi	r4,4097
1000f724:	21091204 	addi	r4,r4,9288
1000f728:	0010e9c0 	call	10010e9c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
1000f72c:	0010a380 	call	10010a38 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
1000f730:	01040074 	movhi	r4,4097
1000f734:	2102a604 	addi	r4,r4,2712
1000f738:	001165c0 	call	1001165c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
1000f73c:	d0a6d317 	ldw	r2,-25780(gp)
1000f740:	d0e6d417 	ldw	r3,-25776(gp)
1000f744:	d126d517 	ldw	r4,-25772(gp)
1000f748:	200d883a 	mov	r6,r4
1000f74c:	180b883a 	mov	r5,r3
1000f750:	1009883a 	mov	r4,r2
1000f754:	00003cc0 	call	100003cc <main>
1000f758:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
1000f75c:	01000044 	movi	r4,1
1000f760:	000f20c0 	call	1000f20c <close>
  exit (result);
1000f764:	e13fff17 	ldw	r4,-4(fp)
1000f768:	00116700 	call	10011670 <exit>

1000f76c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
1000f76c:	defffe04 	addi	sp,sp,-8
1000f770:	df000115 	stw	fp,4(sp)
1000f774:	df000104 	addi	fp,sp,4
1000f778:	e13fff15 	stw	r4,-4(fp)
}
1000f77c:	0001883a 	nop
1000f780:	e037883a 	mov	sp,fp
1000f784:	df000017 	ldw	fp,0(sp)
1000f788:	dec00104 	addi	sp,sp,4
1000f78c:	f800283a 	ret

1000f790 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
1000f790:	defffe04 	addi	sp,sp,-8
1000f794:	df000115 	stw	fp,4(sp)
1000f798:	df000104 	addi	fp,sp,4
1000f79c:	e13fff15 	stw	r4,-4(fp)
}
1000f7a0:	0001883a 	nop
1000f7a4:	e037883a 	mov	sp,fp
1000f7a8:	df000017 	ldw	fp,0(sp)
1000f7ac:	dec00104 	addi	sp,sp,4
1000f7b0:	f800283a 	ret

1000f7b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000f7b4:	defffe04 	addi	sp,sp,-8
1000f7b8:	dfc00115 	stw	ra,4(sp)
1000f7bc:	df000015 	stw	fp,0(sp)
1000f7c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f7c4:	d0a00b17 	ldw	r2,-32724(gp)
1000f7c8:	10000326 	beq	r2,zero,1000f7d8 <alt_get_errno+0x24>
1000f7cc:	d0a00b17 	ldw	r2,-32724(gp)
1000f7d0:	103ee83a 	callr	r2
1000f7d4:	00000106 	br	1000f7dc <alt_get_errno+0x28>
1000f7d8:	d0a6d204 	addi	r2,gp,-25784
}
1000f7dc:	e037883a 	mov	sp,fp
1000f7e0:	dfc00117 	ldw	ra,4(sp)
1000f7e4:	df000017 	ldw	fp,0(sp)
1000f7e8:	dec00204 	addi	sp,sp,8
1000f7ec:	f800283a 	ret

1000f7f0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
1000f7f0:	defff904 	addi	sp,sp,-28
1000f7f4:	dfc00615 	stw	ra,24(sp)
1000f7f8:	df000515 	stw	fp,20(sp)
1000f7fc:	df000504 	addi	fp,sp,20
1000f800:	e13ffd15 	stw	r4,-12(fp)
1000f804:	e17ffe15 	stw	r5,-8(fp)
1000f808:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000f80c:	e0bffd17 	ldw	r2,-12(fp)
1000f810:	10000816 	blt	r2,zero,1000f834 <read+0x44>
1000f814:	01400304 	movi	r5,12
1000f818:	e13ffd17 	ldw	r4,-12(fp)
1000f81c:	000c9040 	call	1000c904 <__mulsi3>
1000f820:	1007883a 	mov	r3,r2
1000f824:	00840074 	movhi	r2,4097
1000f828:	108b4f04 	addi	r2,r2,11580
1000f82c:	1885883a 	add	r2,r3,r2
1000f830:	00000106 	br	1000f838 <read+0x48>
1000f834:	0005883a 	mov	r2,zero
1000f838:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1000f83c:	e0bffb17 	ldw	r2,-20(fp)
1000f840:	10002226 	beq	r2,zero,1000f8cc <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000f844:	e0bffb17 	ldw	r2,-20(fp)
1000f848:	10800217 	ldw	r2,8(r2)
1000f84c:	108000cc 	andi	r2,r2,3
1000f850:	10800060 	cmpeqi	r2,r2,1
1000f854:	1000181e 	bne	r2,zero,1000f8b8 <read+0xc8>
        (fd->dev->read))
1000f858:	e0bffb17 	ldw	r2,-20(fp)
1000f85c:	10800017 	ldw	r2,0(r2)
1000f860:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000f864:	10001426 	beq	r2,zero,1000f8b8 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
1000f868:	e0bffb17 	ldw	r2,-20(fp)
1000f86c:	10800017 	ldw	r2,0(r2)
1000f870:	10800517 	ldw	r2,20(r2)
1000f874:	e0ffff17 	ldw	r3,-4(fp)
1000f878:	180d883a 	mov	r6,r3
1000f87c:	e17ffe17 	ldw	r5,-8(fp)
1000f880:	e13ffb17 	ldw	r4,-20(fp)
1000f884:	103ee83a 	callr	r2
1000f888:	e0bffc15 	stw	r2,-16(fp)
1000f88c:	e0bffc17 	ldw	r2,-16(fp)
1000f890:	1000070e 	bge	r2,zero,1000f8b0 <read+0xc0>
        {
          ALT_ERRNO = -rval;
1000f894:	000f7b40 	call	1000f7b4 <alt_get_errno>
1000f898:	1007883a 	mov	r3,r2
1000f89c:	e0bffc17 	ldw	r2,-16(fp)
1000f8a0:	0085c83a 	sub	r2,zero,r2
1000f8a4:	18800015 	stw	r2,0(r3)
          return -1;
1000f8a8:	00bfffc4 	movi	r2,-1
1000f8ac:	00000c06 	br	1000f8e0 <read+0xf0>
        }
        return rval;
1000f8b0:	e0bffc17 	ldw	r2,-16(fp)
1000f8b4:	00000a06 	br	1000f8e0 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
1000f8b8:	000f7b40 	call	1000f7b4 <alt_get_errno>
1000f8bc:	1007883a 	mov	r3,r2
1000f8c0:	00800344 	movi	r2,13
1000f8c4:	18800015 	stw	r2,0(r3)
1000f8c8:	00000406 	br	1000f8dc <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
1000f8cc:	000f7b40 	call	1000f7b4 <alt_get_errno>
1000f8d0:	1007883a 	mov	r3,r2
1000f8d4:	00801444 	movi	r2,81
1000f8d8:	18800015 	stw	r2,0(r3)
  }
  return -1;
1000f8dc:	00bfffc4 	movi	r2,-1
}
1000f8e0:	e037883a 	mov	sp,fp
1000f8e4:	dfc00117 	ldw	ra,4(sp)
1000f8e8:	df000017 	ldw	fp,0(sp)
1000f8ec:	dec00204 	addi	sp,sp,8
1000f8f0:	f800283a 	ret

1000f8f4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
1000f8f4:	defffc04 	addi	sp,sp,-16
1000f8f8:	dfc00315 	stw	ra,12(sp)
1000f8fc:	df000215 	stw	fp,8(sp)
1000f900:	dc000115 	stw	r16,4(sp)
1000f904:	df000204 	addi	fp,sp,8
1000f908:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
1000f90c:	e0bffe17 	ldw	r2,-8(fp)
1000f910:	108000d0 	cmplti	r2,r2,3
1000f914:	1000111e 	bne	r2,zero,1000f95c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
1000f918:	04040074 	movhi	r16,4097
1000f91c:	840b4f04 	addi	r16,r16,11580
1000f920:	e0bffe17 	ldw	r2,-8(fp)
1000f924:	01400304 	movi	r5,12
1000f928:	1009883a 	mov	r4,r2
1000f92c:	000c9040 	call	1000c904 <__mulsi3>
1000f930:	8085883a 	add	r2,r16,r2
1000f934:	10800204 	addi	r2,r2,8
1000f938:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
1000f93c:	04040074 	movhi	r16,4097
1000f940:	840b4f04 	addi	r16,r16,11580
1000f944:	e0bffe17 	ldw	r2,-8(fp)
1000f948:	01400304 	movi	r5,12
1000f94c:	1009883a 	mov	r4,r2
1000f950:	000c9040 	call	1000c904 <__mulsi3>
1000f954:	8085883a 	add	r2,r16,r2
1000f958:	10000015 	stw	zero,0(r2)
  }
}
1000f95c:	0001883a 	nop
1000f960:	e6ffff04 	addi	sp,fp,-4
1000f964:	dfc00217 	ldw	ra,8(sp)
1000f968:	df000117 	ldw	fp,4(sp)
1000f96c:	dc000017 	ldw	r16,0(sp)
1000f970:	dec00304 	addi	sp,sp,12
1000f974:	f800283a 	ret

1000f978 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
1000f978:	defff904 	addi	sp,sp,-28
1000f97c:	df000615 	stw	fp,24(sp)
1000f980:	df000604 	addi	fp,sp,24
1000f984:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000f988:	0005303a 	rdctl	r2,status
1000f98c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000f990:	e0fffe17 	ldw	r3,-8(fp)
1000f994:	00bfff84 	movi	r2,-2
1000f998:	1884703a 	and	r2,r3,r2
1000f99c:	1001703a 	wrctl	status,r2
  
  return context;
1000f9a0:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
1000f9a4:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
1000f9a8:	d0a00c17 	ldw	r2,-32720(gp)
1000f9ac:	10c000c4 	addi	r3,r2,3
1000f9b0:	00bfff04 	movi	r2,-4
1000f9b4:	1884703a 	and	r2,r3,r2
1000f9b8:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
1000f9bc:	d0e00c17 	ldw	r3,-32720(gp)
1000f9c0:	e0bfff17 	ldw	r2,-4(fp)
1000f9c4:	1887883a 	add	r3,r3,r2
1000f9c8:	00860034 	movhi	r2,6144
1000f9cc:	10800004 	addi	r2,r2,0
1000f9d0:	10c0062e 	bgeu	r2,r3,1000f9ec <sbrk+0x74>
1000f9d4:	e0bffb17 	ldw	r2,-20(fp)
1000f9d8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000f9dc:	e0bffa17 	ldw	r2,-24(fp)
1000f9e0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
1000f9e4:	00bfffc4 	movi	r2,-1
1000f9e8:	00000b06 	br	1000fa18 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
1000f9ec:	d0a00c17 	ldw	r2,-32720(gp)
1000f9f0:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
1000f9f4:	d0e00c17 	ldw	r3,-32720(gp)
1000f9f8:	e0bfff17 	ldw	r2,-4(fp)
1000f9fc:	1885883a 	add	r2,r3,r2
1000fa00:	d0a00c15 	stw	r2,-32720(gp)
1000fa04:	e0bffb17 	ldw	r2,-20(fp)
1000fa08:	e0bffc15 	stw	r2,-16(fp)
1000fa0c:	e0bffc17 	ldw	r2,-16(fp)
1000fa10:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
1000fa14:	e0bffd17 	ldw	r2,-12(fp)
} 
1000fa18:	e037883a 	mov	sp,fp
1000fa1c:	df000017 	ldw	fp,0(sp)
1000fa20:	dec00104 	addi	sp,sp,4
1000fa24:	f800283a 	ret

1000fa28 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
1000fa28:	defffd04 	addi	sp,sp,-12
1000fa2c:	dfc00215 	stw	ra,8(sp)
1000fa30:	df000115 	stw	fp,4(sp)
1000fa34:	df000104 	addi	fp,sp,4
1000fa38:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
1000fa3c:	e13fff17 	ldw	r4,-4(fp)
1000fa40:	00107e00 	call	100107e0 <alt_busy_sleep>
}
1000fa44:	e037883a 	mov	sp,fp
1000fa48:	dfc00117 	ldw	ra,4(sp)
1000fa4c:	df000017 	ldw	fp,0(sp)
1000fa50:	dec00204 	addi	sp,sp,8
1000fa54:	f800283a 	ret

1000fa58 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000fa58:	defffe04 	addi	sp,sp,-8
1000fa5c:	dfc00115 	stw	ra,4(sp)
1000fa60:	df000015 	stw	fp,0(sp)
1000fa64:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000fa68:	d0a00b17 	ldw	r2,-32724(gp)
1000fa6c:	10000326 	beq	r2,zero,1000fa7c <alt_get_errno+0x24>
1000fa70:	d0a00b17 	ldw	r2,-32724(gp)
1000fa74:	103ee83a 	callr	r2
1000fa78:	00000106 	br	1000fa80 <alt_get_errno+0x28>
1000fa7c:	d0a6d204 	addi	r2,gp,-25784
}
1000fa80:	e037883a 	mov	sp,fp
1000fa84:	dfc00117 	ldw	ra,4(sp)
1000fa88:	df000017 	ldw	fp,0(sp)
1000fa8c:	dec00204 	addi	sp,sp,8
1000fa90:	f800283a 	ret

1000fa94 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
1000fa94:	defff904 	addi	sp,sp,-28
1000fa98:	dfc00615 	stw	ra,24(sp)
1000fa9c:	df000515 	stw	fp,20(sp)
1000faa0:	df000504 	addi	fp,sp,20
1000faa4:	e13ffd15 	stw	r4,-12(fp)
1000faa8:	e17ffe15 	stw	r5,-8(fp)
1000faac:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000fab0:	e0bffd17 	ldw	r2,-12(fp)
1000fab4:	10000816 	blt	r2,zero,1000fad8 <write+0x44>
1000fab8:	01400304 	movi	r5,12
1000fabc:	e13ffd17 	ldw	r4,-12(fp)
1000fac0:	000c9040 	call	1000c904 <__mulsi3>
1000fac4:	1007883a 	mov	r3,r2
1000fac8:	00840074 	movhi	r2,4097
1000facc:	108b4f04 	addi	r2,r2,11580
1000fad0:	1885883a 	add	r2,r3,r2
1000fad4:	00000106 	br	1000fadc <write+0x48>
1000fad8:	0005883a 	mov	r2,zero
1000fadc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1000fae0:	e0bffb17 	ldw	r2,-20(fp)
1000fae4:	10002126 	beq	r2,zero,1000fb6c <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
1000fae8:	e0bffb17 	ldw	r2,-20(fp)
1000faec:	10800217 	ldw	r2,8(r2)
1000faf0:	108000cc 	andi	r2,r2,3
1000faf4:	10001826 	beq	r2,zero,1000fb58 <write+0xc4>
1000faf8:	e0bffb17 	ldw	r2,-20(fp)
1000fafc:	10800017 	ldw	r2,0(r2)
1000fb00:	10800617 	ldw	r2,24(r2)
1000fb04:	10001426 	beq	r2,zero,1000fb58 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
1000fb08:	e0bffb17 	ldw	r2,-20(fp)
1000fb0c:	10800017 	ldw	r2,0(r2)
1000fb10:	10800617 	ldw	r2,24(r2)
1000fb14:	e0ffff17 	ldw	r3,-4(fp)
1000fb18:	180d883a 	mov	r6,r3
1000fb1c:	e17ffe17 	ldw	r5,-8(fp)
1000fb20:	e13ffb17 	ldw	r4,-20(fp)
1000fb24:	103ee83a 	callr	r2
1000fb28:	e0bffc15 	stw	r2,-16(fp)
1000fb2c:	e0bffc17 	ldw	r2,-16(fp)
1000fb30:	1000070e 	bge	r2,zero,1000fb50 <write+0xbc>
      {
        ALT_ERRNO = -rval;
1000fb34:	000fa580 	call	1000fa58 <alt_get_errno>
1000fb38:	1007883a 	mov	r3,r2
1000fb3c:	e0bffc17 	ldw	r2,-16(fp)
1000fb40:	0085c83a 	sub	r2,zero,r2
1000fb44:	18800015 	stw	r2,0(r3)
        return -1;
1000fb48:	00bfffc4 	movi	r2,-1
1000fb4c:	00000c06 	br	1000fb80 <write+0xec>
      }
      return rval;
1000fb50:	e0bffc17 	ldw	r2,-16(fp)
1000fb54:	00000a06 	br	1000fb80 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
1000fb58:	000fa580 	call	1000fa58 <alt_get_errno>
1000fb5c:	1007883a 	mov	r3,r2
1000fb60:	00800344 	movi	r2,13
1000fb64:	18800015 	stw	r2,0(r3)
1000fb68:	00000406 	br	1000fb7c <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
1000fb6c:	000fa580 	call	1000fa58 <alt_get_errno>
1000fb70:	1007883a 	mov	r3,r2
1000fb74:	00801444 	movi	r2,81
1000fb78:	18800015 	stw	r2,0(r3)
  }
  return -1;
1000fb7c:	00bfffc4 	movi	r2,-1
}
1000fb80:	e037883a 	mov	sp,fp
1000fb84:	dfc00117 	ldw	ra,4(sp)
1000fb88:	df000017 	ldw	fp,0(sp)
1000fb8c:	dec00204 	addi	sp,sp,8
1000fb90:	f800283a 	ret

1000fb94 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
1000fb94:	defffd04 	addi	sp,sp,-12
1000fb98:	dfc00215 	stw	ra,8(sp)
1000fb9c:	df000115 	stw	fp,4(sp)
1000fba0:	df000104 	addi	fp,sp,4
1000fba4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
1000fba8:	d1600804 	addi	r5,gp,-32736
1000fbac:	e13fff17 	ldw	r4,-4(fp)
1000fbb0:	00109940 	call	10010994 <alt_dev_llist_insert>
}
1000fbb4:	e037883a 	mov	sp,fp
1000fbb8:	dfc00117 	ldw	ra,4(sp)
1000fbbc:	df000017 	ldw	fp,0(sp)
1000fbc0:	dec00204 	addi	sp,sp,8
1000fbc4:	f800283a 	ret

1000fbc8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
1000fbc8:	defffd04 	addi	sp,sp,-12
1000fbcc:	dfc00215 	stw	ra,8(sp)
1000fbd0:	df000115 	stw	fp,4(sp)
1000fbd4:	df000104 	addi	fp,sp,4
1000fbd8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
1000fbdc:	00113400 	call	10011340 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
1000fbe0:	00800044 	movi	r2,1
1000fbe4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
1000fbe8:	0001883a 	nop
1000fbec:	e037883a 	mov	sp,fp
1000fbf0:	dfc00117 	ldw	ra,4(sp)
1000fbf4:	df000017 	ldw	fp,0(sp)
1000fbf8:	dec00204 	addi	sp,sp,8
1000fbfc:	f800283a 	ret

1000fc00 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
1000fc00:	defffe04 	addi	sp,sp,-8
1000fc04:	dfc00115 	stw	ra,4(sp)
1000fc08:	df000015 	stw	fp,0(sp)
1000fc0c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
1000fc10:	01800144 	movi	r6,5
1000fc14:	000b883a 	mov	r5,zero
1000fc18:	01040074 	movhi	r4,4097
1000fc1c:	210bb904 	addi	r4,r4,12004
1000fc20:	000fdb00 	call	1000fdb0 <altera_avalon_jtag_uart_init>
1000fc24:	01040074 	movhi	r4,4097
1000fc28:	210baf04 	addi	r4,r4,11964
1000fc2c:	000fb940 	call	1000fb94 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
1000fc30:	0001883a 	nop
}
1000fc34:	0001883a 	nop
1000fc38:	e037883a 	mov	sp,fp
1000fc3c:	dfc00117 	ldw	ra,4(sp)
1000fc40:	df000017 	ldw	fp,0(sp)
1000fc44:	dec00204 	addi	sp,sp,8
1000fc48:	f800283a 	ret

1000fc4c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
1000fc4c:	defffa04 	addi	sp,sp,-24
1000fc50:	dfc00515 	stw	ra,20(sp)
1000fc54:	df000415 	stw	fp,16(sp)
1000fc58:	df000404 	addi	fp,sp,16
1000fc5c:	e13ffd15 	stw	r4,-12(fp)
1000fc60:	e17ffe15 	stw	r5,-8(fp)
1000fc64:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000fc68:	e0bffd17 	ldw	r2,-12(fp)
1000fc6c:	10800017 	ldw	r2,0(r2)
1000fc70:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
1000fc74:	e0bffc17 	ldw	r2,-16(fp)
1000fc78:	10c00a04 	addi	r3,r2,40
1000fc7c:	e0bffd17 	ldw	r2,-12(fp)
1000fc80:	10800217 	ldw	r2,8(r2)
1000fc84:	100f883a 	mov	r7,r2
1000fc88:	e1bfff17 	ldw	r6,-4(fp)
1000fc8c:	e17ffe17 	ldw	r5,-8(fp)
1000fc90:	1809883a 	mov	r4,r3
1000fc94:	00102740 	call	10010274 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
1000fc98:	e037883a 	mov	sp,fp
1000fc9c:	dfc00117 	ldw	ra,4(sp)
1000fca0:	df000017 	ldw	fp,0(sp)
1000fca4:	dec00204 	addi	sp,sp,8
1000fca8:	f800283a 	ret

1000fcac <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
1000fcac:	defffa04 	addi	sp,sp,-24
1000fcb0:	dfc00515 	stw	ra,20(sp)
1000fcb4:	df000415 	stw	fp,16(sp)
1000fcb8:	df000404 	addi	fp,sp,16
1000fcbc:	e13ffd15 	stw	r4,-12(fp)
1000fcc0:	e17ffe15 	stw	r5,-8(fp)
1000fcc4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000fcc8:	e0bffd17 	ldw	r2,-12(fp)
1000fccc:	10800017 	ldw	r2,0(r2)
1000fcd0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
1000fcd4:	e0bffc17 	ldw	r2,-16(fp)
1000fcd8:	10c00a04 	addi	r3,r2,40
1000fcdc:	e0bffd17 	ldw	r2,-12(fp)
1000fce0:	10800217 	ldw	r2,8(r2)
1000fce4:	100f883a 	mov	r7,r2
1000fce8:	e1bfff17 	ldw	r6,-4(fp)
1000fcec:	e17ffe17 	ldw	r5,-8(fp)
1000fcf0:	1809883a 	mov	r4,r3
1000fcf4:	00104900 	call	10010490 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
1000fcf8:	e037883a 	mov	sp,fp
1000fcfc:	dfc00117 	ldw	ra,4(sp)
1000fd00:	df000017 	ldw	fp,0(sp)
1000fd04:	dec00204 	addi	sp,sp,8
1000fd08:	f800283a 	ret

1000fd0c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
1000fd0c:	defffc04 	addi	sp,sp,-16
1000fd10:	dfc00315 	stw	ra,12(sp)
1000fd14:	df000215 	stw	fp,8(sp)
1000fd18:	df000204 	addi	fp,sp,8
1000fd1c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000fd20:	e0bfff17 	ldw	r2,-4(fp)
1000fd24:	10800017 	ldw	r2,0(r2)
1000fd28:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
1000fd2c:	e0bffe17 	ldw	r2,-8(fp)
1000fd30:	10c00a04 	addi	r3,r2,40
1000fd34:	e0bfff17 	ldw	r2,-4(fp)
1000fd38:	10800217 	ldw	r2,8(r2)
1000fd3c:	100b883a 	mov	r5,r2
1000fd40:	1809883a 	mov	r4,r3
1000fd44:	001011c0 	call	1001011c <altera_avalon_jtag_uart_close>
}
1000fd48:	e037883a 	mov	sp,fp
1000fd4c:	dfc00117 	ldw	ra,4(sp)
1000fd50:	df000017 	ldw	fp,0(sp)
1000fd54:	dec00204 	addi	sp,sp,8
1000fd58:	f800283a 	ret

1000fd5c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
1000fd5c:	defffa04 	addi	sp,sp,-24
1000fd60:	dfc00515 	stw	ra,20(sp)
1000fd64:	df000415 	stw	fp,16(sp)
1000fd68:	df000404 	addi	fp,sp,16
1000fd6c:	e13ffd15 	stw	r4,-12(fp)
1000fd70:	e17ffe15 	stw	r5,-8(fp)
1000fd74:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
1000fd78:	e0bffd17 	ldw	r2,-12(fp)
1000fd7c:	10800017 	ldw	r2,0(r2)
1000fd80:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
1000fd84:	e0bffc17 	ldw	r2,-16(fp)
1000fd88:	10800a04 	addi	r2,r2,40
1000fd8c:	e1bfff17 	ldw	r6,-4(fp)
1000fd90:	e17ffe17 	ldw	r5,-8(fp)
1000fd94:	1009883a 	mov	r4,r2
1000fd98:	00101840 	call	10010184 <altera_avalon_jtag_uart_ioctl>
}
1000fd9c:	e037883a 	mov	sp,fp
1000fda0:	dfc00117 	ldw	ra,4(sp)
1000fda4:	df000017 	ldw	fp,0(sp)
1000fda8:	dec00204 	addi	sp,sp,8
1000fdac:	f800283a 	ret

1000fdb0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
1000fdb0:	defffa04 	addi	sp,sp,-24
1000fdb4:	dfc00515 	stw	ra,20(sp)
1000fdb8:	df000415 	stw	fp,16(sp)
1000fdbc:	df000404 	addi	fp,sp,16
1000fdc0:	e13ffd15 	stw	r4,-12(fp)
1000fdc4:	e17ffe15 	stw	r5,-8(fp)
1000fdc8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000fdcc:	e0bffd17 	ldw	r2,-12(fp)
1000fdd0:	00c00044 	movi	r3,1
1000fdd4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
1000fdd8:	e0bffd17 	ldw	r2,-12(fp)
1000fddc:	10800017 	ldw	r2,0(r2)
1000fde0:	10800104 	addi	r2,r2,4
1000fde4:	1007883a 	mov	r3,r2
1000fde8:	e0bffd17 	ldw	r2,-12(fp)
1000fdec:	10800817 	ldw	r2,32(r2)
1000fdf0:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
1000fdf4:	e0bffe17 	ldw	r2,-8(fp)
1000fdf8:	e0ffff17 	ldw	r3,-4(fp)
1000fdfc:	d8000015 	stw	zero,0(sp)
1000fe00:	e1fffd17 	ldw	r7,-12(fp)
1000fe04:	01840074 	movhi	r6,4097
1000fe08:	31bf9c04 	addi	r6,r6,-400
1000fe0c:	180b883a 	mov	r5,r3
1000fe10:	1009883a 	mov	r4,r2
1000fe14:	0010b180 	call	10010b18 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
1000fe18:	e0bffd17 	ldw	r2,-12(fp)
1000fe1c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
1000fe20:	e0bffd17 	ldw	r2,-12(fp)
1000fe24:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
1000fe28:	d0e6d717 	ldw	r3,-25764(gp)
1000fe2c:	e1fffd17 	ldw	r7,-12(fp)
1000fe30:	01840074 	movhi	r6,4097
1000fe34:	31801f04 	addi	r6,r6,124
1000fe38:	180b883a 	mov	r5,r3
1000fe3c:	1009883a 	mov	r4,r2
1000fe40:	00106b40 	call	100106b4 <alt_alarm_start>
1000fe44:	1000040e 	bge	r2,zero,1000fe58 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
1000fe48:	e0fffd17 	ldw	r3,-12(fp)
1000fe4c:	00a00034 	movhi	r2,32768
1000fe50:	10bfffc4 	addi	r2,r2,-1
1000fe54:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
1000fe58:	0001883a 	nop
1000fe5c:	e037883a 	mov	sp,fp
1000fe60:	dfc00117 	ldw	ra,4(sp)
1000fe64:	df000017 	ldw	fp,0(sp)
1000fe68:	dec00204 	addi	sp,sp,8
1000fe6c:	f800283a 	ret

1000fe70 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
1000fe70:	defff804 	addi	sp,sp,-32
1000fe74:	df000715 	stw	fp,28(sp)
1000fe78:	df000704 	addi	fp,sp,28
1000fe7c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
1000fe80:	e0bfff17 	ldw	r2,-4(fp)
1000fe84:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
1000fe88:	e0bffb17 	ldw	r2,-20(fp)
1000fe8c:	10800017 	ldw	r2,0(r2)
1000fe90:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000fe94:	e0bffc17 	ldw	r2,-16(fp)
1000fe98:	10800104 	addi	r2,r2,4
1000fe9c:	10800037 	ldwio	r2,0(r2)
1000fea0:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
1000fea4:	e0bffd17 	ldw	r2,-12(fp)
1000fea8:	1080c00c 	andi	r2,r2,768
1000feac:	10006d26 	beq	r2,zero,10010064 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
1000feb0:	e0bffd17 	ldw	r2,-12(fp)
1000feb4:	1080400c 	andi	r2,r2,256
1000feb8:	10003526 	beq	r2,zero,1000ff90 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
1000febc:	00800074 	movhi	r2,1
1000fec0:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000fec4:	e0bffb17 	ldw	r2,-20(fp)
1000fec8:	10800a17 	ldw	r2,40(r2)
1000fecc:	10800044 	addi	r2,r2,1
1000fed0:	1081ffcc 	andi	r2,r2,2047
1000fed4:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
1000fed8:	e0bffb17 	ldw	r2,-20(fp)
1000fedc:	10c00b17 	ldw	r3,44(r2)
1000fee0:	e0bffe17 	ldw	r2,-8(fp)
1000fee4:	18801526 	beq	r3,r2,1000ff3c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
1000fee8:	e0bffc17 	ldw	r2,-16(fp)
1000feec:	10800037 	ldwio	r2,0(r2)
1000fef0:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
1000fef4:	e0bff917 	ldw	r2,-28(fp)
1000fef8:	10a0000c 	andi	r2,r2,32768
1000fefc:	10001126 	beq	r2,zero,1000ff44 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
1000ff00:	e0bffb17 	ldw	r2,-20(fp)
1000ff04:	10800a17 	ldw	r2,40(r2)
1000ff08:	e0fff917 	ldw	r3,-28(fp)
1000ff0c:	1809883a 	mov	r4,r3
1000ff10:	e0fffb17 	ldw	r3,-20(fp)
1000ff14:	1885883a 	add	r2,r3,r2
1000ff18:	10800e04 	addi	r2,r2,56
1000ff1c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000ff20:	e0bffb17 	ldw	r2,-20(fp)
1000ff24:	10800a17 	ldw	r2,40(r2)
1000ff28:	10800044 	addi	r2,r2,1
1000ff2c:	10c1ffcc 	andi	r3,r2,2047
1000ff30:	e0bffb17 	ldw	r2,-20(fp)
1000ff34:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
1000ff38:	003fe206 	br	1000fec4 <__alt_data_end+0xf800fec4>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
1000ff3c:	0001883a 	nop
1000ff40:	00000106 	br	1000ff48 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
1000ff44:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
1000ff48:	e0bff917 	ldw	r2,-28(fp)
1000ff4c:	10bfffec 	andhi	r2,r2,65535
1000ff50:	10000f26 	beq	r2,zero,1000ff90 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000ff54:	e0bffb17 	ldw	r2,-20(fp)
1000ff58:	10c00817 	ldw	r3,32(r2)
1000ff5c:	00bfff84 	movi	r2,-2
1000ff60:	1886703a 	and	r3,r3,r2
1000ff64:	e0bffb17 	ldw	r2,-20(fp)
1000ff68:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
1000ff6c:	e0bffc17 	ldw	r2,-16(fp)
1000ff70:	10800104 	addi	r2,r2,4
1000ff74:	1007883a 	mov	r3,r2
1000ff78:	e0bffb17 	ldw	r2,-20(fp)
1000ff7c:	10800817 	ldw	r2,32(r2)
1000ff80:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000ff84:	e0bffc17 	ldw	r2,-16(fp)
1000ff88:	10800104 	addi	r2,r2,4
1000ff8c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
1000ff90:	e0bffd17 	ldw	r2,-12(fp)
1000ff94:	1080800c 	andi	r2,r2,512
1000ff98:	103fbe26 	beq	r2,zero,1000fe94 <__alt_data_end+0xf800fe94>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
1000ff9c:	e0bffd17 	ldw	r2,-12(fp)
1000ffa0:	1004d43a 	srli	r2,r2,16
1000ffa4:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
1000ffa8:	00001406 	br	1000fffc <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
1000ffac:	e0bffc17 	ldw	r2,-16(fp)
1000ffb0:	e0fffb17 	ldw	r3,-20(fp)
1000ffb4:	18c00d17 	ldw	r3,52(r3)
1000ffb8:	e13ffb17 	ldw	r4,-20(fp)
1000ffbc:	20c7883a 	add	r3,r4,r3
1000ffc0:	18c20e04 	addi	r3,r3,2104
1000ffc4:	18c00003 	ldbu	r3,0(r3)
1000ffc8:	18c03fcc 	andi	r3,r3,255
1000ffcc:	18c0201c 	xori	r3,r3,128
1000ffd0:	18ffe004 	addi	r3,r3,-128
1000ffd4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000ffd8:	e0bffb17 	ldw	r2,-20(fp)
1000ffdc:	10800d17 	ldw	r2,52(r2)
1000ffe0:	10800044 	addi	r2,r2,1
1000ffe4:	10c1ffcc 	andi	r3,r2,2047
1000ffe8:	e0bffb17 	ldw	r2,-20(fp)
1000ffec:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
1000fff0:	e0bffa17 	ldw	r2,-24(fp)
1000fff4:	10bfffc4 	addi	r2,r2,-1
1000fff8:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
1000fffc:	e0bffa17 	ldw	r2,-24(fp)
10010000:	10000526 	beq	r2,zero,10010018 <altera_avalon_jtag_uart_irq+0x1a8>
10010004:	e0bffb17 	ldw	r2,-20(fp)
10010008:	10c00d17 	ldw	r3,52(r2)
1001000c:	e0bffb17 	ldw	r2,-20(fp)
10010010:	10800c17 	ldw	r2,48(r2)
10010014:	18bfe51e 	bne	r3,r2,1000ffac <__alt_data_end+0xf800ffac>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
10010018:	e0bffa17 	ldw	r2,-24(fp)
1001001c:	103f9d26 	beq	r2,zero,1000fe94 <__alt_data_end+0xf800fe94>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10010020:	e0bffb17 	ldw	r2,-20(fp)
10010024:	10c00817 	ldw	r3,32(r2)
10010028:	00bfff44 	movi	r2,-3
1001002c:	1886703a 	and	r3,r3,r2
10010030:	e0bffb17 	ldw	r2,-20(fp)
10010034:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10010038:	e0bffb17 	ldw	r2,-20(fp)
1001003c:	10800017 	ldw	r2,0(r2)
10010040:	10800104 	addi	r2,r2,4
10010044:	1007883a 	mov	r3,r2
10010048:	e0bffb17 	ldw	r2,-20(fp)
1001004c:	10800817 	ldw	r2,32(r2)
10010050:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10010054:	e0bffc17 	ldw	r2,-16(fp)
10010058:	10800104 	addi	r2,r2,4
1001005c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
10010060:	003f8c06 	br	1000fe94 <__alt_data_end+0xf800fe94>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
10010064:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
10010068:	0001883a 	nop
1001006c:	e037883a 	mov	sp,fp
10010070:	df000017 	ldw	fp,0(sp)
10010074:	dec00104 	addi	sp,sp,4
10010078:	f800283a 	ret

1001007c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
1001007c:	defff804 	addi	sp,sp,-32
10010080:	df000715 	stw	fp,28(sp)
10010084:	df000704 	addi	fp,sp,28
10010088:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
1001008c:	e0bffb17 	ldw	r2,-20(fp)
10010090:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
10010094:	e0bff917 	ldw	r2,-28(fp)
10010098:	10800017 	ldw	r2,0(r2)
1001009c:	10800104 	addi	r2,r2,4
100100a0:	10800037 	ldwio	r2,0(r2)
100100a4:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
100100a8:	e0bffa17 	ldw	r2,-24(fp)
100100ac:	1081000c 	andi	r2,r2,1024
100100b0:	10000b26 	beq	r2,zero,100100e0 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
100100b4:	e0bff917 	ldw	r2,-28(fp)
100100b8:	10800017 	ldw	r2,0(r2)
100100bc:	10800104 	addi	r2,r2,4
100100c0:	1007883a 	mov	r3,r2
100100c4:	e0bff917 	ldw	r2,-28(fp)
100100c8:	10800817 	ldw	r2,32(r2)
100100cc:	10810014 	ori	r2,r2,1024
100100d0:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
100100d4:	e0bff917 	ldw	r2,-28(fp)
100100d8:	10000915 	stw	zero,36(r2)
100100dc:	00000a06 	br	10010108 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
100100e0:	e0bff917 	ldw	r2,-28(fp)
100100e4:	10c00917 	ldw	r3,36(r2)
100100e8:	00a00034 	movhi	r2,32768
100100ec:	10bfff04 	addi	r2,r2,-4
100100f0:	10c00536 	bltu	r2,r3,10010108 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
100100f4:	e0bff917 	ldw	r2,-28(fp)
100100f8:	10800917 	ldw	r2,36(r2)
100100fc:	10c00044 	addi	r3,r2,1
10010100:	e0bff917 	ldw	r2,-28(fp)
10010104:	10c00915 	stw	r3,36(r2)
10010108:	d0a6d717 	ldw	r2,-25764(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
1001010c:	e037883a 	mov	sp,fp
10010110:	df000017 	ldw	fp,0(sp)
10010114:	dec00104 	addi	sp,sp,4
10010118:	f800283a 	ret

1001011c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
1001011c:	defffd04 	addi	sp,sp,-12
10010120:	df000215 	stw	fp,8(sp)
10010124:	df000204 	addi	fp,sp,8
10010128:	e13ffe15 	stw	r4,-8(fp)
1001012c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10010130:	00000506 	br	10010148 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
10010134:	e0bfff17 	ldw	r2,-4(fp)
10010138:	1090000c 	andi	r2,r2,16384
1001013c:	10000226 	beq	r2,zero,10010148 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
10010140:	00bffd44 	movi	r2,-11
10010144:	00000b06 	br	10010174 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10010148:	e0bffe17 	ldw	r2,-8(fp)
1001014c:	10c00d17 	ldw	r3,52(r2)
10010150:	e0bffe17 	ldw	r2,-8(fp)
10010154:	10800c17 	ldw	r2,48(r2)
10010158:	18800526 	beq	r3,r2,10010170 <altera_avalon_jtag_uart_close+0x54>
1001015c:	e0bffe17 	ldw	r2,-8(fp)
10010160:	10c00917 	ldw	r3,36(r2)
10010164:	e0bffe17 	ldw	r2,-8(fp)
10010168:	10800117 	ldw	r2,4(r2)
1001016c:	18bff136 	bltu	r3,r2,10010134 <__alt_data_end+0xf8010134>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
10010170:	0005883a 	mov	r2,zero
}
10010174:	e037883a 	mov	sp,fp
10010178:	df000017 	ldw	fp,0(sp)
1001017c:	dec00104 	addi	sp,sp,4
10010180:	f800283a 	ret

10010184 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
10010184:	defffa04 	addi	sp,sp,-24
10010188:	df000515 	stw	fp,20(sp)
1001018c:	df000504 	addi	fp,sp,20
10010190:	e13ffd15 	stw	r4,-12(fp)
10010194:	e17ffe15 	stw	r5,-8(fp)
10010198:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
1001019c:	00bff9c4 	movi	r2,-25
100101a0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
100101a4:	e0bffe17 	ldw	r2,-8(fp)
100101a8:	10da8060 	cmpeqi	r3,r2,27137
100101ac:	1800031e 	bne	r3,zero,100101bc <altera_avalon_jtag_uart_ioctl+0x38>
100101b0:	109a80a0 	cmpeqi	r2,r2,27138
100101b4:	1000181e 	bne	r2,zero,10010218 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
100101b8:	00002906 	br	10010260 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
100101bc:	e0bffd17 	ldw	r2,-12(fp)
100101c0:	10c00117 	ldw	r3,4(r2)
100101c4:	00a00034 	movhi	r2,32768
100101c8:	10bfffc4 	addi	r2,r2,-1
100101cc:	18802126 	beq	r3,r2,10010254 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
100101d0:	e0bfff17 	ldw	r2,-4(fp)
100101d4:	10800017 	ldw	r2,0(r2)
100101d8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
100101dc:	e0bffc17 	ldw	r2,-16(fp)
100101e0:	10800090 	cmplti	r2,r2,2
100101e4:	1000061e 	bne	r2,zero,10010200 <altera_avalon_jtag_uart_ioctl+0x7c>
100101e8:	e0fffc17 	ldw	r3,-16(fp)
100101ec:	00a00034 	movhi	r2,32768
100101f0:	10bfffc4 	addi	r2,r2,-1
100101f4:	18800226 	beq	r3,r2,10010200 <altera_avalon_jtag_uart_ioctl+0x7c>
100101f8:	e0bffc17 	ldw	r2,-16(fp)
100101fc:	00000206 	br	10010208 <altera_avalon_jtag_uart_ioctl+0x84>
10010200:	00a00034 	movhi	r2,32768
10010204:	10bfff84 	addi	r2,r2,-2
10010208:	e0fffd17 	ldw	r3,-12(fp)
1001020c:	18800115 	stw	r2,4(r3)
      rc = 0;
10010210:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10010214:	00000f06 	br	10010254 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
10010218:	e0bffd17 	ldw	r2,-12(fp)
1001021c:	10c00117 	ldw	r3,4(r2)
10010220:	00a00034 	movhi	r2,32768
10010224:	10bfffc4 	addi	r2,r2,-1
10010228:	18800c26 	beq	r3,r2,1001025c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
1001022c:	e0bffd17 	ldw	r2,-12(fp)
10010230:	10c00917 	ldw	r3,36(r2)
10010234:	e0bffd17 	ldw	r2,-12(fp)
10010238:	10800117 	ldw	r2,4(r2)
1001023c:	1885803a 	cmpltu	r2,r3,r2
10010240:	10c03fcc 	andi	r3,r2,255
10010244:	e0bfff17 	ldw	r2,-4(fp)
10010248:	10c00015 	stw	r3,0(r2)
      rc = 0;
1001024c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10010250:	00000206 	br	1001025c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
10010254:	0001883a 	nop
10010258:	00000106 	br	10010260 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
1001025c:	0001883a 	nop

  default:
    break;
  }

  return rc;
10010260:	e0bffb17 	ldw	r2,-20(fp)
}
10010264:	e037883a 	mov	sp,fp
10010268:	df000017 	ldw	fp,0(sp)
1001026c:	dec00104 	addi	sp,sp,4
10010270:	f800283a 	ret

10010274 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
10010274:	defff304 	addi	sp,sp,-52
10010278:	dfc00c15 	stw	ra,48(sp)
1001027c:	df000b15 	stw	fp,44(sp)
10010280:	df000b04 	addi	fp,sp,44
10010284:	e13ffc15 	stw	r4,-16(fp)
10010288:	e17ffd15 	stw	r5,-12(fp)
1001028c:	e1bffe15 	stw	r6,-8(fp)
10010290:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
10010294:	e0bffd17 	ldw	r2,-12(fp)
10010298:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1001029c:	00004706 	br	100103bc <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
100102a0:	e0bffc17 	ldw	r2,-16(fp)
100102a4:	10800a17 	ldw	r2,40(r2)
100102a8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
100102ac:	e0bffc17 	ldw	r2,-16(fp)
100102b0:	10800b17 	ldw	r2,44(r2)
100102b4:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
100102b8:	e0fff717 	ldw	r3,-36(fp)
100102bc:	e0bff817 	ldw	r2,-32(fp)
100102c0:	18800536 	bltu	r3,r2,100102d8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
100102c4:	e0fff717 	ldw	r3,-36(fp)
100102c8:	e0bff817 	ldw	r2,-32(fp)
100102cc:	1885c83a 	sub	r2,r3,r2
100102d0:	e0bff615 	stw	r2,-40(fp)
100102d4:	00000406 	br	100102e8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
100102d8:	00c20004 	movi	r3,2048
100102dc:	e0bff817 	ldw	r2,-32(fp)
100102e0:	1885c83a 	sub	r2,r3,r2
100102e4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
100102e8:	e0bff617 	ldw	r2,-40(fp)
100102ec:	10001e26 	beq	r2,zero,10010368 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
100102f0:	e0fffe17 	ldw	r3,-8(fp)
100102f4:	e0bff617 	ldw	r2,-40(fp)
100102f8:	1880022e 	bgeu	r3,r2,10010304 <altera_avalon_jtag_uart_read+0x90>
        n = space;
100102fc:	e0bffe17 	ldw	r2,-8(fp)
10010300:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
10010304:	e0bffc17 	ldw	r2,-16(fp)
10010308:	10c00e04 	addi	r3,r2,56
1001030c:	e0bff817 	ldw	r2,-32(fp)
10010310:	1885883a 	add	r2,r3,r2
10010314:	e1bff617 	ldw	r6,-40(fp)
10010318:	100b883a 	mov	r5,r2
1001031c:	e13ff517 	ldw	r4,-44(fp)
10010320:	0007e840 	call	10007e84 <memcpy>
      ptr   += n;
10010324:	e0fff517 	ldw	r3,-44(fp)
10010328:	e0bff617 	ldw	r2,-40(fp)
1001032c:	1885883a 	add	r2,r3,r2
10010330:	e0bff515 	stw	r2,-44(fp)
      space -= n;
10010334:	e0fffe17 	ldw	r3,-8(fp)
10010338:	e0bff617 	ldw	r2,-40(fp)
1001033c:	1885c83a 	sub	r2,r3,r2
10010340:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10010344:	e0fff817 	ldw	r3,-32(fp)
10010348:	e0bff617 	ldw	r2,-40(fp)
1001034c:	1885883a 	add	r2,r3,r2
10010350:	10c1ffcc 	andi	r3,r2,2047
10010354:	e0bffc17 	ldw	r2,-16(fp)
10010358:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
1001035c:	e0bffe17 	ldw	r2,-8(fp)
10010360:	00bfcf16 	blt	zero,r2,100102a0 <__alt_data_end+0xf80102a0>
10010364:	00000106 	br	1001036c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
10010368:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
1001036c:	e0fff517 	ldw	r3,-44(fp)
10010370:	e0bffd17 	ldw	r2,-12(fp)
10010374:	1880141e 	bne	r3,r2,100103c8 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
10010378:	e0bfff17 	ldw	r2,-4(fp)
1001037c:	1090000c 	andi	r2,r2,16384
10010380:	1000131e 	bne	r2,zero,100103d0 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
10010384:	0001883a 	nop
10010388:	e0bffc17 	ldw	r2,-16(fp)
1001038c:	10c00a17 	ldw	r3,40(r2)
10010390:	e0bff717 	ldw	r2,-36(fp)
10010394:	1880051e 	bne	r3,r2,100103ac <altera_avalon_jtag_uart_read+0x138>
10010398:	e0bffc17 	ldw	r2,-16(fp)
1001039c:	10c00917 	ldw	r3,36(r2)
100103a0:	e0bffc17 	ldw	r2,-16(fp)
100103a4:	10800117 	ldw	r2,4(r2)
100103a8:	18bff736 	bltu	r3,r2,10010388 <__alt_data_end+0xf8010388>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
100103ac:	e0bffc17 	ldw	r2,-16(fp)
100103b0:	10c00a17 	ldw	r3,40(r2)
100103b4:	e0bff717 	ldw	r2,-36(fp)
100103b8:	18800726 	beq	r3,r2,100103d8 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
100103bc:	e0bffe17 	ldw	r2,-8(fp)
100103c0:	00bfb716 	blt	zero,r2,100102a0 <__alt_data_end+0xf80102a0>
100103c4:	00000506 	br	100103dc <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
100103c8:	0001883a 	nop
100103cc:	00000306 	br	100103dc <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
100103d0:	0001883a 	nop
100103d4:	00000106 	br	100103dc <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
100103d8:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
100103dc:	e0fff517 	ldw	r3,-44(fp)
100103e0:	e0bffd17 	ldw	r2,-12(fp)
100103e4:	18801826 	beq	r3,r2,10010448 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100103e8:	0005303a 	rdctl	r2,status
100103ec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100103f0:	e0fffb17 	ldw	r3,-20(fp)
100103f4:	00bfff84 	movi	r2,-2
100103f8:	1884703a 	and	r2,r3,r2
100103fc:	1001703a 	wrctl	status,r2
  
  return context;
10010400:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
10010404:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10010408:	e0bffc17 	ldw	r2,-16(fp)
1001040c:	10800817 	ldw	r2,32(r2)
10010410:	10c00054 	ori	r3,r2,1
10010414:	e0bffc17 	ldw	r2,-16(fp)
10010418:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1001041c:	e0bffc17 	ldw	r2,-16(fp)
10010420:	10800017 	ldw	r2,0(r2)
10010424:	10800104 	addi	r2,r2,4
10010428:	1007883a 	mov	r3,r2
1001042c:	e0bffc17 	ldw	r2,-16(fp)
10010430:	10800817 	ldw	r2,32(r2)
10010434:	18800035 	stwio	r2,0(r3)
10010438:	e0bffa17 	ldw	r2,-24(fp)
1001043c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010440:	e0bff917 	ldw	r2,-28(fp)
10010444:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
10010448:	e0fff517 	ldw	r3,-44(fp)
1001044c:	e0bffd17 	ldw	r2,-12(fp)
10010450:	18800426 	beq	r3,r2,10010464 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
10010454:	e0fff517 	ldw	r3,-44(fp)
10010458:	e0bffd17 	ldw	r2,-12(fp)
1001045c:	1885c83a 	sub	r2,r3,r2
10010460:	00000606 	br	1001047c <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
10010464:	e0bfff17 	ldw	r2,-4(fp)
10010468:	1090000c 	andi	r2,r2,16384
1001046c:	10000226 	beq	r2,zero,10010478 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
10010470:	00bffd44 	movi	r2,-11
10010474:	00000106 	br	1001047c <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
10010478:	00bffec4 	movi	r2,-5
}
1001047c:	e037883a 	mov	sp,fp
10010480:	dfc00117 	ldw	ra,4(sp)
10010484:	df000017 	ldw	fp,0(sp)
10010488:	dec00204 	addi	sp,sp,8
1001048c:	f800283a 	ret

10010490 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
10010490:	defff304 	addi	sp,sp,-52
10010494:	dfc00c15 	stw	ra,48(sp)
10010498:	df000b15 	stw	fp,44(sp)
1001049c:	df000b04 	addi	fp,sp,44
100104a0:	e13ffc15 	stw	r4,-16(fp)
100104a4:	e17ffd15 	stw	r5,-12(fp)
100104a8:	e1bffe15 	stw	r6,-8(fp)
100104ac:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
100104b0:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
100104b4:	e0bffd17 	ldw	r2,-12(fp)
100104b8:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
100104bc:	00003706 	br	1001059c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
100104c0:	e0bffc17 	ldw	r2,-16(fp)
100104c4:	10800c17 	ldw	r2,48(r2)
100104c8:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
100104cc:	e0bffc17 	ldw	r2,-16(fp)
100104d0:	10800d17 	ldw	r2,52(r2)
100104d4:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
100104d8:	e0fff917 	ldw	r3,-28(fp)
100104dc:	e0bff517 	ldw	r2,-44(fp)
100104e0:	1880062e 	bgeu	r3,r2,100104fc <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
100104e4:	e0fff517 	ldw	r3,-44(fp)
100104e8:	e0bff917 	ldw	r2,-28(fp)
100104ec:	1885c83a 	sub	r2,r3,r2
100104f0:	10bfffc4 	addi	r2,r2,-1
100104f4:	e0bff615 	stw	r2,-40(fp)
100104f8:	00000b06 	br	10010528 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
100104fc:	e0bff517 	ldw	r2,-44(fp)
10010500:	10000526 	beq	r2,zero,10010518 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
10010504:	00c20004 	movi	r3,2048
10010508:	e0bff917 	ldw	r2,-28(fp)
1001050c:	1885c83a 	sub	r2,r3,r2
10010510:	e0bff615 	stw	r2,-40(fp)
10010514:	00000406 	br	10010528 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
10010518:	00c1ffc4 	movi	r3,2047
1001051c:	e0bff917 	ldw	r2,-28(fp)
10010520:	1885c83a 	sub	r2,r3,r2
10010524:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10010528:	e0bff617 	ldw	r2,-40(fp)
1001052c:	10001e26 	beq	r2,zero,100105a8 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
10010530:	e0fffe17 	ldw	r3,-8(fp)
10010534:	e0bff617 	ldw	r2,-40(fp)
10010538:	1880022e 	bgeu	r3,r2,10010544 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
1001053c:	e0bffe17 	ldw	r2,-8(fp)
10010540:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
10010544:	e0bffc17 	ldw	r2,-16(fp)
10010548:	10c20e04 	addi	r3,r2,2104
1001054c:	e0bff917 	ldw	r2,-28(fp)
10010550:	1885883a 	add	r2,r3,r2
10010554:	e1bff617 	ldw	r6,-40(fp)
10010558:	e17ffd17 	ldw	r5,-12(fp)
1001055c:	1009883a 	mov	r4,r2
10010560:	0007e840 	call	10007e84 <memcpy>
      ptr   += n;
10010564:	e0fffd17 	ldw	r3,-12(fp)
10010568:	e0bff617 	ldw	r2,-40(fp)
1001056c:	1885883a 	add	r2,r3,r2
10010570:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
10010574:	e0fffe17 	ldw	r3,-8(fp)
10010578:	e0bff617 	ldw	r2,-40(fp)
1001057c:	1885c83a 	sub	r2,r3,r2
10010580:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10010584:	e0fff917 	ldw	r3,-28(fp)
10010588:	e0bff617 	ldw	r2,-40(fp)
1001058c:	1885883a 	add	r2,r3,r2
10010590:	10c1ffcc 	andi	r3,r2,2047
10010594:	e0bffc17 	ldw	r2,-16(fp)
10010598:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1001059c:	e0bffe17 	ldw	r2,-8(fp)
100105a0:	00bfc716 	blt	zero,r2,100104c0 <__alt_data_end+0xf80104c0>
100105a4:	00000106 	br	100105ac <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
100105a8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100105ac:	0005303a 	rdctl	r2,status
100105b0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100105b4:	e0fffb17 	ldw	r3,-20(fp)
100105b8:	00bfff84 	movi	r2,-2
100105bc:	1884703a 	and	r2,r3,r2
100105c0:	1001703a 	wrctl	status,r2
  
  return context;
100105c4:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
100105c8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
100105cc:	e0bffc17 	ldw	r2,-16(fp)
100105d0:	10800817 	ldw	r2,32(r2)
100105d4:	10c00094 	ori	r3,r2,2
100105d8:	e0bffc17 	ldw	r2,-16(fp)
100105dc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
100105e0:	e0bffc17 	ldw	r2,-16(fp)
100105e4:	10800017 	ldw	r2,0(r2)
100105e8:	10800104 	addi	r2,r2,4
100105ec:	1007883a 	mov	r3,r2
100105f0:	e0bffc17 	ldw	r2,-16(fp)
100105f4:	10800817 	ldw	r2,32(r2)
100105f8:	18800035 	stwio	r2,0(r3)
100105fc:	e0bffa17 	ldw	r2,-24(fp)
10010600:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010604:	e0bff817 	ldw	r2,-32(fp)
10010608:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
1001060c:	e0bffe17 	ldw	r2,-8(fp)
10010610:	0080100e 	bge	zero,r2,10010654 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
10010614:	e0bfff17 	ldw	r2,-4(fp)
10010618:	1090000c 	andi	r2,r2,16384
1001061c:	1000101e 	bne	r2,zero,10010660 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
10010620:	0001883a 	nop
10010624:	e0bffc17 	ldw	r2,-16(fp)
10010628:	10c00d17 	ldw	r3,52(r2)
1001062c:	e0bff517 	ldw	r2,-44(fp)
10010630:	1880051e 	bne	r3,r2,10010648 <altera_avalon_jtag_uart_write+0x1b8>
10010634:	e0bffc17 	ldw	r2,-16(fp)
10010638:	10c00917 	ldw	r3,36(r2)
1001063c:	e0bffc17 	ldw	r2,-16(fp)
10010640:	10800117 	ldw	r2,4(r2)
10010644:	18bff736 	bltu	r3,r2,10010624 <__alt_data_end+0xf8010624>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
10010648:	e0bffc17 	ldw	r2,-16(fp)
1001064c:	10800917 	ldw	r2,36(r2)
10010650:	1000051e 	bne	r2,zero,10010668 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
10010654:	e0bffe17 	ldw	r2,-8(fp)
10010658:	00bfd016 	blt	zero,r2,1001059c <__alt_data_end+0xf801059c>
1001065c:	00000306 	br	1001066c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
10010660:	0001883a 	nop
10010664:	00000106 	br	1001066c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
10010668:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
1001066c:	e0fffd17 	ldw	r3,-12(fp)
10010670:	e0bff717 	ldw	r2,-36(fp)
10010674:	18800426 	beq	r3,r2,10010688 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
10010678:	e0fffd17 	ldw	r3,-12(fp)
1001067c:	e0bff717 	ldw	r2,-36(fp)
10010680:	1885c83a 	sub	r2,r3,r2
10010684:	00000606 	br	100106a0 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
10010688:	e0bfff17 	ldw	r2,-4(fp)
1001068c:	1090000c 	andi	r2,r2,16384
10010690:	10000226 	beq	r2,zero,1001069c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
10010694:	00bffd44 	movi	r2,-11
10010698:	00000106 	br	100106a0 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
1001069c:	00bffec4 	movi	r2,-5
}
100106a0:	e037883a 	mov	sp,fp
100106a4:	dfc00117 	ldw	ra,4(sp)
100106a8:	df000017 	ldw	fp,0(sp)
100106ac:	dec00204 	addi	sp,sp,8
100106b0:	f800283a 	ret

100106b4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
100106b4:	defff504 	addi	sp,sp,-44
100106b8:	df000a15 	stw	fp,40(sp)
100106bc:	df000a04 	addi	fp,sp,40
100106c0:	e13ffc15 	stw	r4,-16(fp)
100106c4:	e17ffd15 	stw	r5,-12(fp)
100106c8:	e1bffe15 	stw	r6,-8(fp)
100106cc:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
100106d0:	e03ff615 	stw	zero,-40(fp)
100106d4:	d0a6d717 	ldw	r2,-25764(gp)
  
  if (alt_ticks_per_second ())
100106d8:	10003c26 	beq	r2,zero,100107cc <alt_alarm_start+0x118>
  {
    if (alarm)
100106dc:	e0bffc17 	ldw	r2,-16(fp)
100106e0:	10003826 	beq	r2,zero,100107c4 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
100106e4:	e0bffc17 	ldw	r2,-16(fp)
100106e8:	e0fffe17 	ldw	r3,-8(fp)
100106ec:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
100106f0:	e0bffc17 	ldw	r2,-16(fp)
100106f4:	e0ffff17 	ldw	r3,-4(fp)
100106f8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100106fc:	0005303a 	rdctl	r2,status
10010700:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010704:	e0fff917 	ldw	r3,-28(fp)
10010708:	00bfff84 	movi	r2,-2
1001070c:	1884703a 	and	r2,r3,r2
10010710:	1001703a 	wrctl	status,r2
  
  return context;
10010714:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
10010718:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
1001071c:	d0a6d817 	ldw	r2,-25760(gp)
      
      current_nticks = alt_nticks();
10010720:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
10010724:	e0fffd17 	ldw	r3,-12(fp)
10010728:	e0bff617 	ldw	r2,-40(fp)
1001072c:	1885883a 	add	r2,r3,r2
10010730:	10c00044 	addi	r3,r2,1
10010734:	e0bffc17 	ldw	r2,-16(fp)
10010738:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
1001073c:	e0bffc17 	ldw	r2,-16(fp)
10010740:	10c00217 	ldw	r3,8(r2)
10010744:	e0bff617 	ldw	r2,-40(fp)
10010748:	1880042e 	bgeu	r3,r2,1001075c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
1001074c:	e0bffc17 	ldw	r2,-16(fp)
10010750:	00c00044 	movi	r3,1
10010754:	10c00405 	stb	r3,16(r2)
10010758:	00000206 	br	10010764 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
1001075c:	e0bffc17 	ldw	r2,-16(fp)
10010760:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
10010764:	e0bffc17 	ldw	r2,-16(fp)
10010768:	d0e00e04 	addi	r3,gp,-32712
1001076c:	e0fffa15 	stw	r3,-24(fp)
10010770:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10010774:	e0bffb17 	ldw	r2,-20(fp)
10010778:	e0fffa17 	ldw	r3,-24(fp)
1001077c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10010780:	e0bffa17 	ldw	r2,-24(fp)
10010784:	10c00017 	ldw	r3,0(r2)
10010788:	e0bffb17 	ldw	r2,-20(fp)
1001078c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10010790:	e0bffa17 	ldw	r2,-24(fp)
10010794:	10800017 	ldw	r2,0(r2)
10010798:	e0fffb17 	ldw	r3,-20(fp)
1001079c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
100107a0:	e0bffa17 	ldw	r2,-24(fp)
100107a4:	e0fffb17 	ldw	r3,-20(fp)
100107a8:	10c00015 	stw	r3,0(r2)
100107ac:	e0bff817 	ldw	r2,-32(fp)
100107b0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100107b4:	e0bff717 	ldw	r2,-36(fp)
100107b8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
100107bc:	0005883a 	mov	r2,zero
100107c0:	00000306 	br	100107d0 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
100107c4:	00bffa84 	movi	r2,-22
100107c8:	00000106 	br	100107d0 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
100107cc:	00bfde84 	movi	r2,-134
  }
}
100107d0:	e037883a 	mov	sp,fp
100107d4:	df000017 	ldw	fp,0(sp)
100107d8:	dec00104 	addi	sp,sp,4
100107dc:	f800283a 	ret

100107e0 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
100107e0:	defffa04 	addi	sp,sp,-24
100107e4:	dfc00515 	stw	ra,20(sp)
100107e8:	df000415 	stw	fp,16(sp)
100107ec:	df000404 	addi	fp,sp,16
100107f0:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
100107f4:	00800244 	movi	r2,9
100107f8:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
100107fc:	014003f4 	movhi	r5,15
10010800:	29509004 	addi	r5,r5,16960
10010804:	e13ffd17 	ldw	r4,-12(fp)
10010808:	000c9040 	call	1000c904 <__mulsi3>
1001080c:	100b883a 	mov	r5,r2
10010810:	0100bef4 	movhi	r4,763
10010814:	213c2004 	addi	r4,r4,-3968
10010818:	000c8480 	call	1000c848 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
1001081c:	100b883a 	mov	r5,r2
10010820:	01200034 	movhi	r4,32768
10010824:	213fffc4 	addi	r4,r4,-1
10010828:	000c8480 	call	1000c848 <__udivsi3>
1001082c:	100b883a 	mov	r5,r2
10010830:	e13fff17 	ldw	r4,-4(fp)
10010834:	000c8480 	call	1000c848 <__udivsi3>
10010838:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
1001083c:	e0bffe17 	ldw	r2,-8(fp)
10010840:	10002a26 	beq	r2,zero,100108ec <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
10010844:	e03ffc15 	stw	zero,-16(fp)
10010848:	00001706 	br	100108a8 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
1001084c:	00a00034 	movhi	r2,32768
10010850:	10bfffc4 	addi	r2,r2,-1
10010854:	10bfffc4 	addi	r2,r2,-1
10010858:	103ffe1e 	bne	r2,zero,10010854 <__alt_data_end+0xf8010854>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
1001085c:	014003f4 	movhi	r5,15
10010860:	29509004 	addi	r5,r5,16960
10010864:	e13ffd17 	ldw	r4,-12(fp)
10010868:	000c9040 	call	1000c904 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
1001086c:	100b883a 	mov	r5,r2
10010870:	0100bef4 	movhi	r4,763
10010874:	213c2004 	addi	r4,r4,-3968
10010878:	000c8480 	call	1000c848 <__udivsi3>
1001087c:	100b883a 	mov	r5,r2
10010880:	01200034 	movhi	r4,32768
10010884:	213fffc4 	addi	r4,r4,-1
10010888:	000c8480 	call	1000c848 <__udivsi3>
1001088c:	1007883a 	mov	r3,r2
10010890:	e0bfff17 	ldw	r2,-4(fp)
10010894:	10c5c83a 	sub	r2,r2,r3
10010898:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
1001089c:	e0bffc17 	ldw	r2,-16(fp)
100108a0:	10800044 	addi	r2,r2,1
100108a4:	e0bffc15 	stw	r2,-16(fp)
100108a8:	e0fffc17 	ldw	r3,-16(fp)
100108ac:	e0bffe17 	ldw	r2,-8(fp)
100108b0:	18bfe616 	blt	r3,r2,1001084c <__alt_data_end+0xf801084c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
100108b4:	014003f4 	movhi	r5,15
100108b8:	29509004 	addi	r5,r5,16960
100108bc:	e13ffd17 	ldw	r4,-12(fp)
100108c0:	000c9040 	call	1000c904 <__mulsi3>
100108c4:	100b883a 	mov	r5,r2
100108c8:	0100bef4 	movhi	r4,763
100108cc:	213c2004 	addi	r4,r4,-3968
100108d0:	000c8480 	call	1000c848 <__udivsi3>
100108d4:	e17fff17 	ldw	r5,-4(fp)
100108d8:	1009883a 	mov	r4,r2
100108dc:	000c9040 	call	1000c904 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
100108e0:	10bfffc4 	addi	r2,r2,-1
100108e4:	103ffe1e 	bne	r2,zero,100108e0 <__alt_data_end+0xf80108e0>
100108e8:	00000d06 	br	10010920 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
100108ec:	014003f4 	movhi	r5,15
100108f0:	29509004 	addi	r5,r5,16960
100108f4:	e13ffd17 	ldw	r4,-12(fp)
100108f8:	000c9040 	call	1000c904 <__mulsi3>
100108fc:	100b883a 	mov	r5,r2
10010900:	0100bef4 	movhi	r4,763
10010904:	213c2004 	addi	r4,r4,-3968
10010908:	000c8480 	call	1000c848 <__udivsi3>
1001090c:	e17fff17 	ldw	r5,-4(fp)
10010910:	1009883a 	mov	r4,r2
10010914:	000c9040 	call	1000c904 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
10010918:	10bfffc4 	addi	r2,r2,-1
1001091c:	00bffe16 	blt	zero,r2,10010918 <__alt_data_end+0xf8010918>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
10010920:	0005883a 	mov	r2,zero
}
10010924:	e037883a 	mov	sp,fp
10010928:	dfc00117 	ldw	ra,4(sp)
1001092c:	df000017 	ldw	fp,0(sp)
10010930:	dec00204 	addi	sp,sp,8
10010934:	f800283a 	ret

10010938 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
10010938:	deffff04 	addi	sp,sp,-4
1001093c:	df000015 	stw	fp,0(sp)
10010940:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
10010944:	0001883a 	nop
10010948:	e037883a 	mov	sp,fp
1001094c:	df000017 	ldw	fp,0(sp)
10010950:	dec00104 	addi	sp,sp,4
10010954:	f800283a 	ret

10010958 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10010958:	defffe04 	addi	sp,sp,-8
1001095c:	dfc00115 	stw	ra,4(sp)
10010960:	df000015 	stw	fp,0(sp)
10010964:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10010968:	d0a00b17 	ldw	r2,-32724(gp)
1001096c:	10000326 	beq	r2,zero,1001097c <alt_get_errno+0x24>
10010970:	d0a00b17 	ldw	r2,-32724(gp)
10010974:	103ee83a 	callr	r2
10010978:	00000106 	br	10010980 <alt_get_errno+0x28>
1001097c:	d0a6d204 	addi	r2,gp,-25784
}
10010980:	e037883a 	mov	sp,fp
10010984:	dfc00117 	ldw	ra,4(sp)
10010988:	df000017 	ldw	fp,0(sp)
1001098c:	dec00204 	addi	sp,sp,8
10010990:	f800283a 	ret

10010994 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
10010994:	defffa04 	addi	sp,sp,-24
10010998:	dfc00515 	stw	ra,20(sp)
1001099c:	df000415 	stw	fp,16(sp)
100109a0:	df000404 	addi	fp,sp,16
100109a4:	e13ffe15 	stw	r4,-8(fp)
100109a8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
100109ac:	e0bffe17 	ldw	r2,-8(fp)
100109b0:	10000326 	beq	r2,zero,100109c0 <alt_dev_llist_insert+0x2c>
100109b4:	e0bffe17 	ldw	r2,-8(fp)
100109b8:	10800217 	ldw	r2,8(r2)
100109bc:	1000061e 	bne	r2,zero,100109d8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
100109c0:	00109580 	call	10010958 <alt_get_errno>
100109c4:	1007883a 	mov	r3,r2
100109c8:	00800584 	movi	r2,22
100109cc:	18800015 	stw	r2,0(r3)
    return -EINVAL;
100109d0:	00bffa84 	movi	r2,-22
100109d4:	00001306 	br	10010a24 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
100109d8:	e0bffe17 	ldw	r2,-8(fp)
100109dc:	e0ffff17 	ldw	r3,-4(fp)
100109e0:	e0fffc15 	stw	r3,-16(fp)
100109e4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
100109e8:	e0bffd17 	ldw	r2,-12(fp)
100109ec:	e0fffc17 	ldw	r3,-16(fp)
100109f0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
100109f4:	e0bffc17 	ldw	r2,-16(fp)
100109f8:	10c00017 	ldw	r3,0(r2)
100109fc:	e0bffd17 	ldw	r2,-12(fp)
10010a00:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10010a04:	e0bffc17 	ldw	r2,-16(fp)
10010a08:	10800017 	ldw	r2,0(r2)
10010a0c:	e0fffd17 	ldw	r3,-12(fp)
10010a10:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10010a14:	e0bffc17 	ldw	r2,-16(fp)
10010a18:	e0fffd17 	ldw	r3,-12(fp)
10010a1c:	10c00015 	stw	r3,0(r2)

  return 0;  
10010a20:	0005883a 	mov	r2,zero
}
10010a24:	e037883a 	mov	sp,fp
10010a28:	dfc00117 	ldw	ra,4(sp)
10010a2c:	df000017 	ldw	fp,0(sp)
10010a30:	dec00204 	addi	sp,sp,8
10010a34:	f800283a 	ret

10010a38 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
10010a38:	defffd04 	addi	sp,sp,-12
10010a3c:	dfc00215 	stw	ra,8(sp)
10010a40:	df000115 	stw	fp,4(sp)
10010a44:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10010a48:	00840074 	movhi	r2,4097
10010a4c:	10867b04 	addi	r2,r2,6636
10010a50:	e0bfff15 	stw	r2,-4(fp)
10010a54:	00000606 	br	10010a70 <_do_ctors+0x38>
        (*ctor) (); 
10010a58:	e0bfff17 	ldw	r2,-4(fp)
10010a5c:	10800017 	ldw	r2,0(r2)
10010a60:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10010a64:	e0bfff17 	ldw	r2,-4(fp)
10010a68:	10bfff04 	addi	r2,r2,-4
10010a6c:	e0bfff15 	stw	r2,-4(fp)
10010a70:	e0ffff17 	ldw	r3,-4(fp)
10010a74:	00840074 	movhi	r2,4097
10010a78:	10867c04 	addi	r2,r2,6640
10010a7c:	18bff62e 	bgeu	r3,r2,10010a58 <__alt_data_end+0xf8010a58>
        (*ctor) (); 
}
10010a80:	0001883a 	nop
10010a84:	e037883a 	mov	sp,fp
10010a88:	dfc00117 	ldw	ra,4(sp)
10010a8c:	df000017 	ldw	fp,0(sp)
10010a90:	dec00204 	addi	sp,sp,8
10010a94:	f800283a 	ret

10010a98 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
10010a98:	defffd04 	addi	sp,sp,-12
10010a9c:	dfc00215 	stw	ra,8(sp)
10010aa0:	df000115 	stw	fp,4(sp)
10010aa4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10010aa8:	00840074 	movhi	r2,4097
10010aac:	10867b04 	addi	r2,r2,6636
10010ab0:	e0bfff15 	stw	r2,-4(fp)
10010ab4:	00000606 	br	10010ad0 <_do_dtors+0x38>
        (*dtor) (); 
10010ab8:	e0bfff17 	ldw	r2,-4(fp)
10010abc:	10800017 	ldw	r2,0(r2)
10010ac0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10010ac4:	e0bfff17 	ldw	r2,-4(fp)
10010ac8:	10bfff04 	addi	r2,r2,-4
10010acc:	e0bfff15 	stw	r2,-4(fp)
10010ad0:	e0ffff17 	ldw	r3,-4(fp)
10010ad4:	00840074 	movhi	r2,4097
10010ad8:	10867c04 	addi	r2,r2,6640
10010adc:	18bff62e 	bgeu	r3,r2,10010ab8 <__alt_data_end+0xf8010ab8>
        (*dtor) (); 
}
10010ae0:	0001883a 	nop
10010ae4:	e037883a 	mov	sp,fp
10010ae8:	dfc00117 	ldw	ra,4(sp)
10010aec:	df000017 	ldw	fp,0(sp)
10010af0:	dec00204 	addi	sp,sp,8
10010af4:	f800283a 	ret

10010af8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
10010af8:	deffff04 	addi	sp,sp,-4
10010afc:	df000015 	stw	fp,0(sp)
10010b00:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
10010b04:	0001883a 	nop
10010b08:	e037883a 	mov	sp,fp
10010b0c:	df000017 	ldw	fp,0(sp)
10010b10:	dec00104 	addi	sp,sp,4
10010b14:	f800283a 	ret

10010b18 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10010b18:	defff904 	addi	sp,sp,-28
10010b1c:	dfc00615 	stw	ra,24(sp)
10010b20:	df000515 	stw	fp,20(sp)
10010b24:	df000504 	addi	fp,sp,20
10010b28:	e13ffc15 	stw	r4,-16(fp)
10010b2c:	e17ffd15 	stw	r5,-12(fp)
10010b30:	e1bffe15 	stw	r6,-8(fp)
10010b34:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
10010b38:	e0800217 	ldw	r2,8(fp)
10010b3c:	d8800015 	stw	r2,0(sp)
10010b40:	e1ffff17 	ldw	r7,-4(fp)
10010b44:	e1bffe17 	ldw	r6,-8(fp)
10010b48:	e17ffd17 	ldw	r5,-12(fp)
10010b4c:	e13ffc17 	ldw	r4,-16(fp)
10010b50:	0010cc80 	call	10010cc8 <alt_iic_isr_register>
}  
10010b54:	e037883a 	mov	sp,fp
10010b58:	dfc00117 	ldw	ra,4(sp)
10010b5c:	df000017 	ldw	fp,0(sp)
10010b60:	dec00204 	addi	sp,sp,8
10010b64:	f800283a 	ret

10010b68 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
10010b68:	defff904 	addi	sp,sp,-28
10010b6c:	df000615 	stw	fp,24(sp)
10010b70:	df000604 	addi	fp,sp,24
10010b74:	e13ffe15 	stw	r4,-8(fp)
10010b78:	e17fff15 	stw	r5,-4(fp)
10010b7c:	e0bfff17 	ldw	r2,-4(fp)
10010b80:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10010b84:	0005303a 	rdctl	r2,status
10010b88:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010b8c:	e0fffb17 	ldw	r3,-20(fp)
10010b90:	00bfff84 	movi	r2,-2
10010b94:	1884703a 	and	r2,r3,r2
10010b98:	1001703a 	wrctl	status,r2
  
  return context;
10010b9c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10010ba0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
10010ba4:	00c00044 	movi	r3,1
10010ba8:	e0bffa17 	ldw	r2,-24(fp)
10010bac:	1884983a 	sll	r2,r3,r2
10010bb0:	1007883a 	mov	r3,r2
10010bb4:	d0a6d617 	ldw	r2,-25768(gp)
10010bb8:	1884b03a 	or	r2,r3,r2
10010bbc:	d0a6d615 	stw	r2,-25768(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10010bc0:	d0a6d617 	ldw	r2,-25768(gp)
10010bc4:	100170fa 	wrctl	ienable,r2
10010bc8:	e0bffc17 	ldw	r2,-16(fp)
10010bcc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010bd0:	e0bffd17 	ldw	r2,-12(fp)
10010bd4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10010bd8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
10010bdc:	0001883a 	nop
}
10010be0:	e037883a 	mov	sp,fp
10010be4:	df000017 	ldw	fp,0(sp)
10010be8:	dec00104 	addi	sp,sp,4
10010bec:	f800283a 	ret

10010bf0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
10010bf0:	defff904 	addi	sp,sp,-28
10010bf4:	df000615 	stw	fp,24(sp)
10010bf8:	df000604 	addi	fp,sp,24
10010bfc:	e13ffe15 	stw	r4,-8(fp)
10010c00:	e17fff15 	stw	r5,-4(fp)
10010c04:	e0bfff17 	ldw	r2,-4(fp)
10010c08:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10010c0c:	0005303a 	rdctl	r2,status
10010c10:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010c14:	e0fffb17 	ldw	r3,-20(fp)
10010c18:	00bfff84 	movi	r2,-2
10010c1c:	1884703a 	and	r2,r3,r2
10010c20:	1001703a 	wrctl	status,r2
  
  return context;
10010c24:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10010c28:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
10010c2c:	00c00044 	movi	r3,1
10010c30:	e0bffa17 	ldw	r2,-24(fp)
10010c34:	1884983a 	sll	r2,r3,r2
10010c38:	0084303a 	nor	r2,zero,r2
10010c3c:	1007883a 	mov	r3,r2
10010c40:	d0a6d617 	ldw	r2,-25768(gp)
10010c44:	1884703a 	and	r2,r3,r2
10010c48:	d0a6d615 	stw	r2,-25768(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10010c4c:	d0a6d617 	ldw	r2,-25768(gp)
10010c50:	100170fa 	wrctl	ienable,r2
10010c54:	e0bffc17 	ldw	r2,-16(fp)
10010c58:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010c5c:	e0bffd17 	ldw	r2,-12(fp)
10010c60:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10010c64:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
10010c68:	0001883a 	nop
}
10010c6c:	e037883a 	mov	sp,fp
10010c70:	df000017 	ldw	fp,0(sp)
10010c74:	dec00104 	addi	sp,sp,4
10010c78:	f800283a 	ret

10010c7c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
10010c7c:	defffc04 	addi	sp,sp,-16
10010c80:	df000315 	stw	fp,12(sp)
10010c84:	df000304 	addi	fp,sp,12
10010c88:	e13ffe15 	stw	r4,-8(fp)
10010c8c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
10010c90:	000530fa 	rdctl	r2,ienable
10010c94:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
10010c98:	00c00044 	movi	r3,1
10010c9c:	e0bfff17 	ldw	r2,-4(fp)
10010ca0:	1884983a 	sll	r2,r3,r2
10010ca4:	1007883a 	mov	r3,r2
10010ca8:	e0bffd17 	ldw	r2,-12(fp)
10010cac:	1884703a 	and	r2,r3,r2
10010cb0:	1004c03a 	cmpne	r2,r2,zero
10010cb4:	10803fcc 	andi	r2,r2,255
}
10010cb8:	e037883a 	mov	sp,fp
10010cbc:	df000017 	ldw	fp,0(sp)
10010cc0:	dec00104 	addi	sp,sp,4
10010cc4:	f800283a 	ret

10010cc8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10010cc8:	defff504 	addi	sp,sp,-44
10010ccc:	dfc00a15 	stw	ra,40(sp)
10010cd0:	df000915 	stw	fp,36(sp)
10010cd4:	df000904 	addi	fp,sp,36
10010cd8:	e13ffc15 	stw	r4,-16(fp)
10010cdc:	e17ffd15 	stw	r5,-12(fp)
10010ce0:	e1bffe15 	stw	r6,-8(fp)
10010ce4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
10010ce8:	00bffa84 	movi	r2,-22
10010cec:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
10010cf0:	e0bffd17 	ldw	r2,-12(fp)
10010cf4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
10010cf8:	e0bff817 	ldw	r2,-32(fp)
10010cfc:	10800808 	cmpgei	r2,r2,32
10010d00:	1000271e 	bne	r2,zero,10010da0 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10010d04:	0005303a 	rdctl	r2,status
10010d08:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010d0c:	e0fffb17 	ldw	r3,-20(fp)
10010d10:	00bfff84 	movi	r2,-2
10010d14:	1884703a 	and	r2,r3,r2
10010d18:	1001703a 	wrctl	status,r2
  
  return context;
10010d1c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
10010d20:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
10010d24:	00840074 	movhi	r2,4097
10010d28:	1096ab04 	addi	r2,r2,23212
10010d2c:	e0fff817 	ldw	r3,-32(fp)
10010d30:	180690fa 	slli	r3,r3,3
10010d34:	10c5883a 	add	r2,r2,r3
10010d38:	e0fffe17 	ldw	r3,-8(fp)
10010d3c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
10010d40:	00840074 	movhi	r2,4097
10010d44:	1096ab04 	addi	r2,r2,23212
10010d48:	e0fff817 	ldw	r3,-32(fp)
10010d4c:	180690fa 	slli	r3,r3,3
10010d50:	10c5883a 	add	r2,r2,r3
10010d54:	10800104 	addi	r2,r2,4
10010d58:	e0ffff17 	ldw	r3,-4(fp)
10010d5c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
10010d60:	e0bffe17 	ldw	r2,-8(fp)
10010d64:	10000526 	beq	r2,zero,10010d7c <alt_iic_isr_register+0xb4>
10010d68:	e0bff817 	ldw	r2,-32(fp)
10010d6c:	100b883a 	mov	r5,r2
10010d70:	e13ffc17 	ldw	r4,-16(fp)
10010d74:	0010b680 	call	10010b68 <alt_ic_irq_enable>
10010d78:	00000406 	br	10010d8c <alt_iic_isr_register+0xc4>
10010d7c:	e0bff817 	ldw	r2,-32(fp)
10010d80:	100b883a 	mov	r5,r2
10010d84:	e13ffc17 	ldw	r4,-16(fp)
10010d88:	0010bf00 	call	10010bf0 <alt_ic_irq_disable>
10010d8c:	e0bff715 	stw	r2,-36(fp)
10010d90:	e0bffa17 	ldw	r2,-24(fp)
10010d94:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010d98:	e0bff917 	ldw	r2,-28(fp)
10010d9c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
10010da0:	e0bff717 	ldw	r2,-36(fp)
}
10010da4:	e037883a 	mov	sp,fp
10010da8:	dfc00117 	ldw	ra,4(sp)
10010dac:	df000017 	ldw	fp,0(sp)
10010db0:	dec00204 	addi	sp,sp,8
10010db4:	f800283a 	ret

10010db8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
10010db8:	defff804 	addi	sp,sp,-32
10010dbc:	dfc00715 	stw	ra,28(sp)
10010dc0:	df000615 	stw	fp,24(sp)
10010dc4:	dc000515 	stw	r16,20(sp)
10010dc8:	df000604 	addi	fp,sp,24
10010dcc:	e13ffb15 	stw	r4,-20(fp)
10010dd0:	e17ffc15 	stw	r5,-16(fp)
10010dd4:	e1bffd15 	stw	r6,-12(fp)
10010dd8:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
10010ddc:	e1bffe17 	ldw	r6,-8(fp)
10010de0:	e17ffd17 	ldw	r5,-12(fp)
10010de4:	e13ffc17 	ldw	r4,-16(fp)
10010de8:	00110400 	call	10011040 <open>
10010dec:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
10010df0:	e0bffa17 	ldw	r2,-24(fp)
10010df4:	10002216 	blt	r2,zero,10010e80 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
10010df8:	04040074 	movhi	r16,4097
10010dfc:	840b4f04 	addi	r16,r16,11580
10010e00:	e0bffa17 	ldw	r2,-24(fp)
10010e04:	01400304 	movi	r5,12
10010e08:	1009883a 	mov	r4,r2
10010e0c:	000c9040 	call	1000c904 <__mulsi3>
10010e10:	8085883a 	add	r2,r16,r2
10010e14:	10c00017 	ldw	r3,0(r2)
10010e18:	e0bffb17 	ldw	r2,-20(fp)
10010e1c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
10010e20:	04040074 	movhi	r16,4097
10010e24:	840b4f04 	addi	r16,r16,11580
10010e28:	e0bffa17 	ldw	r2,-24(fp)
10010e2c:	01400304 	movi	r5,12
10010e30:	1009883a 	mov	r4,r2
10010e34:	000c9040 	call	1000c904 <__mulsi3>
10010e38:	8085883a 	add	r2,r16,r2
10010e3c:	10800104 	addi	r2,r2,4
10010e40:	10c00017 	ldw	r3,0(r2)
10010e44:	e0bffb17 	ldw	r2,-20(fp)
10010e48:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
10010e4c:	04040074 	movhi	r16,4097
10010e50:	840b4f04 	addi	r16,r16,11580
10010e54:	e0bffa17 	ldw	r2,-24(fp)
10010e58:	01400304 	movi	r5,12
10010e5c:	1009883a 	mov	r4,r2
10010e60:	000c9040 	call	1000c904 <__mulsi3>
10010e64:	8085883a 	add	r2,r16,r2
10010e68:	10800204 	addi	r2,r2,8
10010e6c:	10c00017 	ldw	r3,0(r2)
10010e70:	e0bffb17 	ldw	r2,-20(fp)
10010e74:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
10010e78:	e13ffa17 	ldw	r4,-24(fp)
10010e7c:	000f8f40 	call	1000f8f4 <alt_release_fd>
  }
} 
10010e80:	0001883a 	nop
10010e84:	e6ffff04 	addi	sp,fp,-4
10010e88:	dfc00217 	ldw	ra,8(sp)
10010e8c:	df000117 	ldw	fp,4(sp)
10010e90:	dc000017 	ldw	r16,0(sp)
10010e94:	dec00304 	addi	sp,sp,12
10010e98:	f800283a 	ret

10010e9c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
10010e9c:	defffb04 	addi	sp,sp,-20
10010ea0:	dfc00415 	stw	ra,16(sp)
10010ea4:	df000315 	stw	fp,12(sp)
10010ea8:	df000304 	addi	fp,sp,12
10010eac:	e13ffd15 	stw	r4,-12(fp)
10010eb0:	e17ffe15 	stw	r5,-8(fp)
10010eb4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
10010eb8:	01c07fc4 	movi	r7,511
10010ebc:	01800044 	movi	r6,1
10010ec0:	e17ffd17 	ldw	r5,-12(fp)
10010ec4:	01040074 	movhi	r4,4097
10010ec8:	210b5204 	addi	r4,r4,11592
10010ecc:	0010db80 	call	10010db8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
10010ed0:	01c07fc4 	movi	r7,511
10010ed4:	000d883a 	mov	r6,zero
10010ed8:	e17ffe17 	ldw	r5,-8(fp)
10010edc:	01040074 	movhi	r4,4097
10010ee0:	210b4f04 	addi	r4,r4,11580
10010ee4:	0010db80 	call	10010db8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
10010ee8:	01c07fc4 	movi	r7,511
10010eec:	01800044 	movi	r6,1
10010ef0:	e17fff17 	ldw	r5,-4(fp)
10010ef4:	01040074 	movhi	r4,4097
10010ef8:	210b5504 	addi	r4,r4,11604
10010efc:	0010db80 	call	10010db8 <alt_open_fd>
}  
10010f00:	0001883a 	nop
10010f04:	e037883a 	mov	sp,fp
10010f08:	dfc00117 	ldw	ra,4(sp)
10010f0c:	df000017 	ldw	fp,0(sp)
10010f10:	dec00204 	addi	sp,sp,8
10010f14:	f800283a 	ret

10010f18 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10010f18:	defffe04 	addi	sp,sp,-8
10010f1c:	dfc00115 	stw	ra,4(sp)
10010f20:	df000015 	stw	fp,0(sp)
10010f24:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10010f28:	d0a00b17 	ldw	r2,-32724(gp)
10010f2c:	10000326 	beq	r2,zero,10010f3c <alt_get_errno+0x24>
10010f30:	d0a00b17 	ldw	r2,-32724(gp)
10010f34:	103ee83a 	callr	r2
10010f38:	00000106 	br	10010f40 <alt_get_errno+0x28>
10010f3c:	d0a6d204 	addi	r2,gp,-25784
}
10010f40:	e037883a 	mov	sp,fp
10010f44:	dfc00117 	ldw	ra,4(sp)
10010f48:	df000017 	ldw	fp,0(sp)
10010f4c:	dec00204 	addi	sp,sp,8
10010f50:	f800283a 	ret

10010f54 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
10010f54:	defffb04 	addi	sp,sp,-20
10010f58:	dfc00415 	stw	ra,16(sp)
10010f5c:	df000315 	stw	fp,12(sp)
10010f60:	dc000215 	stw	r16,8(sp)
10010f64:	df000304 	addi	fp,sp,12
10010f68:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
10010f6c:	e0bffe17 	ldw	r2,-8(fp)
10010f70:	10800217 	ldw	r2,8(r2)
10010f74:	10d00034 	orhi	r3,r2,16384
10010f78:	e0bffe17 	ldw	r2,-8(fp)
10010f7c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10010f80:	e03ffd15 	stw	zero,-12(fp)
10010f84:	00002306 	br	10011014 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10010f88:	04040074 	movhi	r16,4097
10010f8c:	840b4f04 	addi	r16,r16,11580
10010f90:	e0bffd17 	ldw	r2,-12(fp)
10010f94:	01400304 	movi	r5,12
10010f98:	1009883a 	mov	r4,r2
10010f9c:	000c9040 	call	1000c904 <__mulsi3>
10010fa0:	8085883a 	add	r2,r16,r2
10010fa4:	10c00017 	ldw	r3,0(r2)
10010fa8:	e0bffe17 	ldw	r2,-8(fp)
10010fac:	10800017 	ldw	r2,0(r2)
10010fb0:	1880151e 	bne	r3,r2,10011008 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10010fb4:	04040074 	movhi	r16,4097
10010fb8:	840b4f04 	addi	r16,r16,11580
10010fbc:	e0bffd17 	ldw	r2,-12(fp)
10010fc0:	01400304 	movi	r5,12
10010fc4:	1009883a 	mov	r4,r2
10010fc8:	000c9040 	call	1000c904 <__mulsi3>
10010fcc:	8085883a 	add	r2,r16,r2
10010fd0:	10800204 	addi	r2,r2,8
10010fd4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10010fd8:	10000b0e 	bge	r2,zero,10011008 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
10010fdc:	01400304 	movi	r5,12
10010fe0:	e13ffd17 	ldw	r4,-12(fp)
10010fe4:	000c9040 	call	1000c904 <__mulsi3>
10010fe8:	1007883a 	mov	r3,r2
10010fec:	00840074 	movhi	r2,4097
10010ff0:	108b4f04 	addi	r2,r2,11580
10010ff4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10010ff8:	e0bffe17 	ldw	r2,-8(fp)
10010ffc:	18800226 	beq	r3,r2,10011008 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
10011000:	00bffcc4 	movi	r2,-13
10011004:	00000806 	br	10011028 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10011008:	e0bffd17 	ldw	r2,-12(fp)
1001100c:	10800044 	addi	r2,r2,1
10011010:	e0bffd15 	stw	r2,-12(fp)
10011014:	d0a00a17 	ldw	r2,-32728(gp)
10011018:	1007883a 	mov	r3,r2
1001101c:	e0bffd17 	ldw	r2,-12(fp)
10011020:	18bfd92e 	bgeu	r3,r2,10010f88 <__alt_data_end+0xf8010f88>
    }
  }
  
  /* The device is not locked */
 
  return 0;
10011024:	0005883a 	mov	r2,zero
}
10011028:	e6ffff04 	addi	sp,fp,-4
1001102c:	dfc00217 	ldw	ra,8(sp)
10011030:	df000117 	ldw	fp,4(sp)
10011034:	dc000017 	ldw	r16,0(sp)
10011038:	dec00304 	addi	sp,sp,12
1001103c:	f800283a 	ret

10011040 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
10011040:	defff604 	addi	sp,sp,-40
10011044:	dfc00915 	stw	ra,36(sp)
10011048:	df000815 	stw	fp,32(sp)
1001104c:	df000804 	addi	fp,sp,32
10011050:	e13ffd15 	stw	r4,-12(fp)
10011054:	e17ffe15 	stw	r5,-8(fp)
10011058:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
1001105c:	00bfffc4 	movi	r2,-1
10011060:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
10011064:	00bffb44 	movi	r2,-19
10011068:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
1001106c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
10011070:	d1600804 	addi	r5,gp,-32736
10011074:	e13ffd17 	ldw	r4,-12(fp)
10011078:	00113640 	call	10011364 <alt_find_dev>
1001107c:	e0bff815 	stw	r2,-32(fp)
10011080:	e0bff817 	ldw	r2,-32(fp)
10011084:	1000051e 	bne	r2,zero,1001109c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
10011088:	e13ffd17 	ldw	r4,-12(fp)
1001108c:	00113f40 	call	100113f4 <alt_find_file>
10011090:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
10011094:	00800044 	movi	r2,1
10011098:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
1001109c:	e0bff817 	ldw	r2,-32(fp)
100110a0:	10002b26 	beq	r2,zero,10011150 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
100110a4:	e13ff817 	ldw	r4,-32(fp)
100110a8:	00114fc0 	call	100114fc <alt_get_fd>
100110ac:	e0bff915 	stw	r2,-28(fp)
100110b0:	e0bff917 	ldw	r2,-28(fp)
100110b4:	1000030e 	bge	r2,zero,100110c4 <open+0x84>
    {
      status = index;
100110b8:	e0bff917 	ldw	r2,-28(fp)
100110bc:	e0bffa15 	stw	r2,-24(fp)
100110c0:	00002506 	br	10011158 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
100110c4:	01400304 	movi	r5,12
100110c8:	e13ff917 	ldw	r4,-28(fp)
100110cc:	000c9040 	call	1000c904 <__mulsi3>
100110d0:	1007883a 	mov	r3,r2
100110d4:	00840074 	movhi	r2,4097
100110d8:	108b4f04 	addi	r2,r2,11580
100110dc:	1885883a 	add	r2,r3,r2
100110e0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
100110e4:	e0fffe17 	ldw	r3,-8(fp)
100110e8:	00900034 	movhi	r2,16384
100110ec:	10bfffc4 	addi	r2,r2,-1
100110f0:	1886703a 	and	r3,r3,r2
100110f4:	e0bffc17 	ldw	r2,-16(fp)
100110f8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
100110fc:	e0bffb17 	ldw	r2,-20(fp)
10011100:	1000051e 	bne	r2,zero,10011118 <open+0xd8>
10011104:	e13ffc17 	ldw	r4,-16(fp)
10011108:	0010f540 	call	10010f54 <alt_file_locked>
1001110c:	e0bffa15 	stw	r2,-24(fp)
10011110:	e0bffa17 	ldw	r2,-24(fp)
10011114:	10001016 	blt	r2,zero,10011158 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
10011118:	e0bff817 	ldw	r2,-32(fp)
1001111c:	10800317 	ldw	r2,12(r2)
10011120:	10000826 	beq	r2,zero,10011144 <open+0x104>
10011124:	e0bff817 	ldw	r2,-32(fp)
10011128:	10800317 	ldw	r2,12(r2)
1001112c:	e1ffff17 	ldw	r7,-4(fp)
10011130:	e1bffe17 	ldw	r6,-8(fp)
10011134:	e17ffd17 	ldw	r5,-12(fp)
10011138:	e13ffc17 	ldw	r4,-16(fp)
1001113c:	103ee83a 	callr	r2
10011140:	00000106 	br	10011148 <open+0x108>
10011144:	0005883a 	mov	r2,zero
10011148:	e0bffa15 	stw	r2,-24(fp)
1001114c:	00000206 	br	10011158 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
10011150:	00bffb44 	movi	r2,-19
10011154:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
10011158:	e0bffa17 	ldw	r2,-24(fp)
1001115c:	1000090e 	bge	r2,zero,10011184 <open+0x144>
  {
    alt_release_fd (index);  
10011160:	e13ff917 	ldw	r4,-28(fp)
10011164:	000f8f40 	call	1000f8f4 <alt_release_fd>
    ALT_ERRNO = -status;
10011168:	0010f180 	call	10010f18 <alt_get_errno>
1001116c:	1007883a 	mov	r3,r2
10011170:	e0bffa17 	ldw	r2,-24(fp)
10011174:	0085c83a 	sub	r2,zero,r2
10011178:	18800015 	stw	r2,0(r3)
    return -1;
1001117c:	00bfffc4 	movi	r2,-1
10011180:	00000106 	br	10011188 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
10011184:	e0bff917 	ldw	r2,-28(fp)
}
10011188:	e037883a 	mov	sp,fp
1001118c:	dfc00117 	ldw	ra,4(sp)
10011190:	df000017 	ldw	fp,0(sp)
10011194:	dec00204 	addi	sp,sp,8
10011198:	f800283a 	ret

1001119c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
1001119c:	defffa04 	addi	sp,sp,-24
100111a0:	df000515 	stw	fp,20(sp)
100111a4:	df000504 	addi	fp,sp,20
100111a8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100111ac:	0005303a 	rdctl	r2,status
100111b0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100111b4:	e0fffc17 	ldw	r3,-16(fp)
100111b8:	00bfff84 	movi	r2,-2
100111bc:	1884703a 	and	r2,r3,r2
100111c0:	1001703a 	wrctl	status,r2
  
  return context;
100111c4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
100111c8:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
100111cc:	e0bfff17 	ldw	r2,-4(fp)
100111d0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
100111d4:	e0bffd17 	ldw	r2,-12(fp)
100111d8:	10800017 	ldw	r2,0(r2)
100111dc:	e0fffd17 	ldw	r3,-12(fp)
100111e0:	18c00117 	ldw	r3,4(r3)
100111e4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
100111e8:	e0bffd17 	ldw	r2,-12(fp)
100111ec:	10800117 	ldw	r2,4(r2)
100111f0:	e0fffd17 	ldw	r3,-12(fp)
100111f4:	18c00017 	ldw	r3,0(r3)
100111f8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
100111fc:	e0bffd17 	ldw	r2,-12(fp)
10011200:	e0fffd17 	ldw	r3,-12(fp)
10011204:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
10011208:	e0bffd17 	ldw	r2,-12(fp)
1001120c:	e0fffd17 	ldw	r3,-12(fp)
10011210:	10c00015 	stw	r3,0(r2)
10011214:	e0bffb17 	ldw	r2,-20(fp)
10011218:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1001121c:	e0bffe17 	ldw	r2,-8(fp)
10011220:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
10011224:	0001883a 	nop
10011228:	e037883a 	mov	sp,fp
1001122c:	df000017 	ldw	fp,0(sp)
10011230:	dec00104 	addi	sp,sp,4
10011234:	f800283a 	ret

10011238 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
10011238:	defffb04 	addi	sp,sp,-20
1001123c:	dfc00415 	stw	ra,16(sp)
10011240:	df000315 	stw	fp,12(sp)
10011244:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
10011248:	d0a00e17 	ldw	r2,-32712(gp)
1001124c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
10011250:	d0a6d817 	ldw	r2,-25760(gp)
10011254:	10800044 	addi	r2,r2,1
10011258:	d0a6d815 	stw	r2,-25760(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
1001125c:	00002e06 	br	10011318 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
10011260:	e0bffd17 	ldw	r2,-12(fp)
10011264:	10800017 	ldw	r2,0(r2)
10011268:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
1001126c:	e0bffd17 	ldw	r2,-12(fp)
10011270:	10800403 	ldbu	r2,16(r2)
10011274:	10803fcc 	andi	r2,r2,255
10011278:	10000426 	beq	r2,zero,1001128c <alt_tick+0x54>
1001127c:	d0a6d817 	ldw	r2,-25760(gp)
10011280:	1000021e 	bne	r2,zero,1001128c <alt_tick+0x54>
    {
      alarm->rollover = 0;
10011284:	e0bffd17 	ldw	r2,-12(fp)
10011288:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
1001128c:	e0bffd17 	ldw	r2,-12(fp)
10011290:	10800217 	ldw	r2,8(r2)
10011294:	d0e6d817 	ldw	r3,-25760(gp)
10011298:	18801d36 	bltu	r3,r2,10011310 <alt_tick+0xd8>
1001129c:	e0bffd17 	ldw	r2,-12(fp)
100112a0:	10800403 	ldbu	r2,16(r2)
100112a4:	10803fcc 	andi	r2,r2,255
100112a8:	1000191e 	bne	r2,zero,10011310 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
100112ac:	e0bffd17 	ldw	r2,-12(fp)
100112b0:	10800317 	ldw	r2,12(r2)
100112b4:	e0fffd17 	ldw	r3,-12(fp)
100112b8:	18c00517 	ldw	r3,20(r3)
100112bc:	1809883a 	mov	r4,r3
100112c0:	103ee83a 	callr	r2
100112c4:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
100112c8:	e0bfff17 	ldw	r2,-4(fp)
100112cc:	1000031e 	bne	r2,zero,100112dc <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
100112d0:	e13ffd17 	ldw	r4,-12(fp)
100112d4:	001119c0 	call	1001119c <alt_alarm_stop>
100112d8:	00000d06 	br	10011310 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
100112dc:	e0bffd17 	ldw	r2,-12(fp)
100112e0:	10c00217 	ldw	r3,8(r2)
100112e4:	e0bfff17 	ldw	r2,-4(fp)
100112e8:	1887883a 	add	r3,r3,r2
100112ec:	e0bffd17 	ldw	r2,-12(fp)
100112f0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
100112f4:	e0bffd17 	ldw	r2,-12(fp)
100112f8:	10c00217 	ldw	r3,8(r2)
100112fc:	d0a6d817 	ldw	r2,-25760(gp)
10011300:	1880032e 	bgeu	r3,r2,10011310 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
10011304:	e0bffd17 	ldw	r2,-12(fp)
10011308:	00c00044 	movi	r3,1
1001130c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
10011310:	e0bffe17 	ldw	r2,-8(fp)
10011314:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10011318:	e0fffd17 	ldw	r3,-12(fp)
1001131c:	d0a00e04 	addi	r2,gp,-32712
10011320:	18bfcf1e 	bne	r3,r2,10011260 <__alt_data_end+0xf8011260>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
10011324:	0001883a 	nop
}
10011328:	0001883a 	nop
1001132c:	e037883a 	mov	sp,fp
10011330:	dfc00117 	ldw	ra,4(sp)
10011334:	df000017 	ldw	fp,0(sp)
10011338:	dec00204 	addi	sp,sp,8
1001133c:	f800283a 	ret

10011340 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
10011340:	deffff04 	addi	sp,sp,-4
10011344:	df000015 	stw	fp,0(sp)
10011348:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
1001134c:	000170fa 	wrctl	ienable,zero
}
10011350:	0001883a 	nop
10011354:	e037883a 	mov	sp,fp
10011358:	df000017 	ldw	fp,0(sp)
1001135c:	dec00104 	addi	sp,sp,4
10011360:	f800283a 	ret

10011364 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
10011364:	defffa04 	addi	sp,sp,-24
10011368:	dfc00515 	stw	ra,20(sp)
1001136c:	df000415 	stw	fp,16(sp)
10011370:	df000404 	addi	fp,sp,16
10011374:	e13ffe15 	stw	r4,-8(fp)
10011378:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
1001137c:	e0bfff17 	ldw	r2,-4(fp)
10011380:	10800017 	ldw	r2,0(r2)
10011384:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
10011388:	e13ffe17 	ldw	r4,-8(fp)
1001138c:	00023d00 	call	100023d0 <strlen>
10011390:	10800044 	addi	r2,r2,1
10011394:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10011398:	00000d06 	br	100113d0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
1001139c:	e0bffc17 	ldw	r2,-16(fp)
100113a0:	10800217 	ldw	r2,8(r2)
100113a4:	e0fffd17 	ldw	r3,-12(fp)
100113a8:	180d883a 	mov	r6,r3
100113ac:	e17ffe17 	ldw	r5,-8(fp)
100113b0:	1009883a 	mov	r4,r2
100113b4:	00116a80 	call	100116a8 <memcmp>
100113b8:	1000021e 	bne	r2,zero,100113c4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
100113bc:	e0bffc17 	ldw	r2,-16(fp)
100113c0:	00000706 	br	100113e0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
100113c4:	e0bffc17 	ldw	r2,-16(fp)
100113c8:	10800017 	ldw	r2,0(r2)
100113cc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
100113d0:	e0fffc17 	ldw	r3,-16(fp)
100113d4:	e0bfff17 	ldw	r2,-4(fp)
100113d8:	18bff01e 	bne	r3,r2,1001139c <__alt_data_end+0xf801139c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
100113dc:	0005883a 	mov	r2,zero
}
100113e0:	e037883a 	mov	sp,fp
100113e4:	dfc00117 	ldw	ra,4(sp)
100113e8:	df000017 	ldw	fp,0(sp)
100113ec:	dec00204 	addi	sp,sp,8
100113f0:	f800283a 	ret

100113f4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
100113f4:	defffb04 	addi	sp,sp,-20
100113f8:	dfc00415 	stw	ra,16(sp)
100113fc:	df000315 	stw	fp,12(sp)
10011400:	df000304 	addi	fp,sp,12
10011404:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
10011408:	d0a00617 	ldw	r2,-32744(gp)
1001140c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10011410:	00003106 	br	100114d8 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
10011414:	e0bffd17 	ldw	r2,-12(fp)
10011418:	10800217 	ldw	r2,8(r2)
1001141c:	1009883a 	mov	r4,r2
10011420:	00023d00 	call	100023d0 <strlen>
10011424:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
10011428:	e0bffd17 	ldw	r2,-12(fp)
1001142c:	10c00217 	ldw	r3,8(r2)
10011430:	e0bffe17 	ldw	r2,-8(fp)
10011434:	10bfffc4 	addi	r2,r2,-1
10011438:	1885883a 	add	r2,r3,r2
1001143c:	10800003 	ldbu	r2,0(r2)
10011440:	10803fcc 	andi	r2,r2,255
10011444:	1080201c 	xori	r2,r2,128
10011448:	10bfe004 	addi	r2,r2,-128
1001144c:	10800bd8 	cmpnei	r2,r2,47
10011450:	1000031e 	bne	r2,zero,10011460 <alt_find_file+0x6c>
    {
      len -= 1;
10011454:	e0bffe17 	ldw	r2,-8(fp)
10011458:	10bfffc4 	addi	r2,r2,-1
1001145c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10011460:	e0bffe17 	ldw	r2,-8(fp)
10011464:	e0ffff17 	ldw	r3,-4(fp)
10011468:	1885883a 	add	r2,r3,r2
1001146c:	10800003 	ldbu	r2,0(r2)
10011470:	10803fcc 	andi	r2,r2,255
10011474:	1080201c 	xori	r2,r2,128
10011478:	10bfe004 	addi	r2,r2,-128
1001147c:	10800be0 	cmpeqi	r2,r2,47
10011480:	1000081e 	bne	r2,zero,100114a4 <alt_find_file+0xb0>
10011484:	e0bffe17 	ldw	r2,-8(fp)
10011488:	e0ffff17 	ldw	r3,-4(fp)
1001148c:	1885883a 	add	r2,r3,r2
10011490:	10800003 	ldbu	r2,0(r2)
10011494:	10803fcc 	andi	r2,r2,255
10011498:	1080201c 	xori	r2,r2,128
1001149c:	10bfe004 	addi	r2,r2,-128
100114a0:	10000a1e 	bne	r2,zero,100114cc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
100114a4:	e0bffd17 	ldw	r2,-12(fp)
100114a8:	10800217 	ldw	r2,8(r2)
100114ac:	e0fffe17 	ldw	r3,-8(fp)
100114b0:	180d883a 	mov	r6,r3
100114b4:	e17fff17 	ldw	r5,-4(fp)
100114b8:	1009883a 	mov	r4,r2
100114bc:	00116a80 	call	100116a8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
100114c0:	1000021e 	bne	r2,zero,100114cc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
100114c4:	e0bffd17 	ldw	r2,-12(fp)
100114c8:	00000706 	br	100114e8 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
100114cc:	e0bffd17 	ldw	r2,-12(fp)
100114d0:	10800017 	ldw	r2,0(r2)
100114d4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
100114d8:	e0fffd17 	ldw	r3,-12(fp)
100114dc:	d0a00604 	addi	r2,gp,-32744
100114e0:	18bfcc1e 	bne	r3,r2,10011414 <__alt_data_end+0xf8011414>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
100114e4:	0005883a 	mov	r2,zero
}
100114e8:	e037883a 	mov	sp,fp
100114ec:	dfc00117 	ldw	ra,4(sp)
100114f0:	df000017 	ldw	fp,0(sp)
100114f4:	dec00204 	addi	sp,sp,8
100114f8:	f800283a 	ret

100114fc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
100114fc:	defffa04 	addi	sp,sp,-24
10011500:	dfc00515 	stw	ra,20(sp)
10011504:	df000415 	stw	fp,16(sp)
10011508:	dc000315 	stw	r16,12(sp)
1001150c:	df000404 	addi	fp,sp,16
10011510:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
10011514:	00bffa04 	movi	r2,-24
10011518:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
1001151c:	e03ffc15 	stw	zero,-16(fp)
10011520:	00001d06 	br	10011598 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
10011524:	04040074 	movhi	r16,4097
10011528:	840b4f04 	addi	r16,r16,11580
1001152c:	e0bffc17 	ldw	r2,-16(fp)
10011530:	01400304 	movi	r5,12
10011534:	1009883a 	mov	r4,r2
10011538:	000c9040 	call	1000c904 <__mulsi3>
1001153c:	8085883a 	add	r2,r16,r2
10011540:	10800017 	ldw	r2,0(r2)
10011544:	1000111e 	bne	r2,zero,1001158c <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
10011548:	04040074 	movhi	r16,4097
1001154c:	840b4f04 	addi	r16,r16,11580
10011550:	e0bffc17 	ldw	r2,-16(fp)
10011554:	01400304 	movi	r5,12
10011558:	1009883a 	mov	r4,r2
1001155c:	000c9040 	call	1000c904 <__mulsi3>
10011560:	8085883a 	add	r2,r16,r2
10011564:	e0fffe17 	ldw	r3,-8(fp)
10011568:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
1001156c:	d0e00a17 	ldw	r3,-32728(gp)
10011570:	e0bffc17 	ldw	r2,-16(fp)
10011574:	1880020e 	bge	r3,r2,10011580 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
10011578:	e0bffc17 	ldw	r2,-16(fp)
1001157c:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
10011580:	e0bffc17 	ldw	r2,-16(fp)
10011584:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
10011588:	00000606 	br	100115a4 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
1001158c:	e0bffc17 	ldw	r2,-16(fp)
10011590:	10800044 	addi	r2,r2,1
10011594:	e0bffc15 	stw	r2,-16(fp)
10011598:	e0bffc17 	ldw	r2,-16(fp)
1001159c:	10800810 	cmplti	r2,r2,32
100115a0:	103fe01e 	bne	r2,zero,10011524 <__alt_data_end+0xf8011524>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
100115a4:	e0bffd17 	ldw	r2,-12(fp)
}
100115a8:	e6ffff04 	addi	sp,fp,-4
100115ac:	dfc00217 	ldw	ra,8(sp)
100115b0:	df000117 	ldw	fp,4(sp)
100115b4:	dc000017 	ldw	r16,0(sp)
100115b8:	dec00304 	addi	sp,sp,12
100115bc:	f800283a 	ret

100115c0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
100115c0:	defffe04 	addi	sp,sp,-8
100115c4:	df000115 	stw	fp,4(sp)
100115c8:	df000104 	addi	fp,sp,4
100115cc:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
100115d0:	e0bfff17 	ldw	r2,-4(fp)
100115d4:	10bffe84 	addi	r2,r2,-6
100115d8:	10c00428 	cmpgeui	r3,r2,16
100115dc:	18001a1e 	bne	r3,zero,10011648 <alt_exception_cause_generated_bad_addr+0x88>
100115e0:	100690ba 	slli	r3,r2,2
100115e4:	00840074 	movhi	r2,4097
100115e8:	10857e04 	addi	r2,r2,5624
100115ec:	1885883a 	add	r2,r3,r2
100115f0:	10800017 	ldw	r2,0(r2)
100115f4:	1000683a 	jmp	r2
100115f8:	10011638 	rdprs	zero,r2,1112
100115fc:	10011638 	rdprs	zero,r2,1112
10011600:	10011648 	cmpgei	zero,r2,1113
10011604:	10011648 	cmpgei	zero,r2,1113
10011608:	10011648 	cmpgei	zero,r2,1113
1001160c:	10011638 	rdprs	zero,r2,1112
10011610:	10011640 	call	11001164 <_gp+0xfe5248>
10011614:	10011648 	cmpgei	zero,r2,1113
10011618:	10011638 	rdprs	zero,r2,1112
1001161c:	10011638 	rdprs	zero,r2,1112
10011620:	10011648 	cmpgei	zero,r2,1113
10011624:	10011638 	rdprs	zero,r2,1112
10011628:	10011640 	call	11001164 <_gp+0xfe5248>
1001162c:	10011648 	cmpgei	zero,r2,1113
10011630:	10011648 	cmpgei	zero,r2,1113
10011634:	10011638 	rdprs	zero,r2,1112
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
10011638:	00800044 	movi	r2,1
1001163c:	00000306 	br	1001164c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
10011640:	0005883a 	mov	r2,zero
10011644:	00000106 	br	1001164c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
10011648:	0005883a 	mov	r2,zero
  }
}
1001164c:	e037883a 	mov	sp,fp
10011650:	df000017 	ldw	fp,0(sp)
10011654:	dec00104 	addi	sp,sp,4
10011658:	f800283a 	ret

1001165c <atexit>:
1001165c:	200b883a 	mov	r5,r4
10011660:	000f883a 	mov	r7,zero
10011664:	000d883a 	mov	r6,zero
10011668:	0009883a 	mov	r4,zero
1001166c:	00117241 	jmpi	10011724 <__register_exitproc>

10011670 <exit>:
10011670:	defffe04 	addi	sp,sp,-8
10011674:	000b883a 	mov	r5,zero
10011678:	dc000015 	stw	r16,0(sp)
1001167c:	dfc00115 	stw	ra,4(sp)
10011680:	2021883a 	mov	r16,r4
10011684:	001183c0 	call	1001183c <__call_exitprocs>
10011688:	00840074 	movhi	r2,4097
1001168c:	108fc704 	addi	r2,r2,16156
10011690:	11000017 	ldw	r4,0(r2)
10011694:	20800f17 	ldw	r2,60(r4)
10011698:	10000126 	beq	r2,zero,100116a0 <exit+0x30>
1001169c:	103ee83a 	callr	r2
100116a0:	8009883a 	mov	r4,r16
100116a4:	00119bc0 	call	100119bc <_exit>

100116a8 <memcmp>:
100116a8:	01c000c4 	movi	r7,3
100116ac:	3980192e 	bgeu	r7,r6,10011714 <memcmp+0x6c>
100116b0:	2144b03a 	or	r2,r4,r5
100116b4:	11c4703a 	and	r2,r2,r7
100116b8:	10000f26 	beq	r2,zero,100116f8 <memcmp+0x50>
100116bc:	20800003 	ldbu	r2,0(r4)
100116c0:	28c00003 	ldbu	r3,0(r5)
100116c4:	10c0151e 	bne	r2,r3,1001171c <memcmp+0x74>
100116c8:	31bfff84 	addi	r6,r6,-2
100116cc:	01ffffc4 	movi	r7,-1
100116d0:	00000406 	br	100116e4 <memcmp+0x3c>
100116d4:	20800003 	ldbu	r2,0(r4)
100116d8:	28c00003 	ldbu	r3,0(r5)
100116dc:	31bfffc4 	addi	r6,r6,-1
100116e0:	10c00e1e 	bne	r2,r3,1001171c <memcmp+0x74>
100116e4:	21000044 	addi	r4,r4,1
100116e8:	29400044 	addi	r5,r5,1
100116ec:	31fff91e 	bne	r6,r7,100116d4 <__alt_data_end+0xf80116d4>
100116f0:	0005883a 	mov	r2,zero
100116f4:	f800283a 	ret
100116f8:	20c00017 	ldw	r3,0(r4)
100116fc:	28800017 	ldw	r2,0(r5)
10011700:	18bfee1e 	bne	r3,r2,100116bc <__alt_data_end+0xf80116bc>
10011704:	31bfff04 	addi	r6,r6,-4
10011708:	21000104 	addi	r4,r4,4
1001170c:	29400104 	addi	r5,r5,4
10011710:	39bff936 	bltu	r7,r6,100116f8 <__alt_data_end+0xf80116f8>
10011714:	303fe91e 	bne	r6,zero,100116bc <__alt_data_end+0xf80116bc>
10011718:	003ff506 	br	100116f0 <__alt_data_end+0xf80116f0>
1001171c:	10c5c83a 	sub	r2,r2,r3
10011720:	f800283a 	ret

10011724 <__register_exitproc>:
10011724:	defffa04 	addi	sp,sp,-24
10011728:	dc000315 	stw	r16,12(sp)
1001172c:	04040074 	movhi	r16,4097
10011730:	840fc704 	addi	r16,r16,16156
10011734:	80c00017 	ldw	r3,0(r16)
10011738:	dc400415 	stw	r17,16(sp)
1001173c:	dfc00515 	stw	ra,20(sp)
10011740:	18805217 	ldw	r2,328(r3)
10011744:	2023883a 	mov	r17,r4
10011748:	10003726 	beq	r2,zero,10011828 <__register_exitproc+0x104>
1001174c:	10c00117 	ldw	r3,4(r2)
10011750:	010007c4 	movi	r4,31
10011754:	20c00e16 	blt	r4,r3,10011790 <__register_exitproc+0x6c>
10011758:	1a000044 	addi	r8,r3,1
1001175c:	8800221e 	bne	r17,zero,100117e8 <__register_exitproc+0xc4>
10011760:	18c00084 	addi	r3,r3,2
10011764:	18c7883a 	add	r3,r3,r3
10011768:	18c7883a 	add	r3,r3,r3
1001176c:	12000115 	stw	r8,4(r2)
10011770:	10c7883a 	add	r3,r2,r3
10011774:	19400015 	stw	r5,0(r3)
10011778:	0005883a 	mov	r2,zero
1001177c:	dfc00517 	ldw	ra,20(sp)
10011780:	dc400417 	ldw	r17,16(sp)
10011784:	dc000317 	ldw	r16,12(sp)
10011788:	dec00604 	addi	sp,sp,24
1001178c:	f800283a 	ret
10011790:	00800034 	movhi	r2,0
10011794:	10800004 	addi	r2,r2,0
10011798:	10002626 	beq	r2,zero,10011834 <__register_exitproc+0x110>
1001179c:	01006404 	movi	r4,400
100117a0:	d9400015 	stw	r5,0(sp)
100117a4:	d9800115 	stw	r6,4(sp)
100117a8:	d9c00215 	stw	r7,8(sp)
100117ac:	00000000 	call	10000000 <__alt_mem_sdram>
100117b0:	d9400017 	ldw	r5,0(sp)
100117b4:	d9800117 	ldw	r6,4(sp)
100117b8:	d9c00217 	ldw	r7,8(sp)
100117bc:	10001d26 	beq	r2,zero,10011834 <__register_exitproc+0x110>
100117c0:	81000017 	ldw	r4,0(r16)
100117c4:	10000115 	stw	zero,4(r2)
100117c8:	02000044 	movi	r8,1
100117cc:	22405217 	ldw	r9,328(r4)
100117d0:	0007883a 	mov	r3,zero
100117d4:	12400015 	stw	r9,0(r2)
100117d8:	20805215 	stw	r2,328(r4)
100117dc:	10006215 	stw	zero,392(r2)
100117e0:	10006315 	stw	zero,396(r2)
100117e4:	883fde26 	beq	r17,zero,10011760 <__alt_data_end+0xf8011760>
100117e8:	18c9883a 	add	r4,r3,r3
100117ec:	2109883a 	add	r4,r4,r4
100117f0:	1109883a 	add	r4,r2,r4
100117f4:	21802215 	stw	r6,136(r4)
100117f8:	01800044 	movi	r6,1
100117fc:	12406217 	ldw	r9,392(r2)
10011800:	30cc983a 	sll	r6,r6,r3
10011804:	4992b03a 	or	r9,r9,r6
10011808:	12406215 	stw	r9,392(r2)
1001180c:	21c04215 	stw	r7,264(r4)
10011810:	01000084 	movi	r4,2
10011814:	893fd21e 	bne	r17,r4,10011760 <__alt_data_end+0xf8011760>
10011818:	11006317 	ldw	r4,396(r2)
1001181c:	218cb03a 	or	r6,r4,r6
10011820:	11806315 	stw	r6,396(r2)
10011824:	003fce06 	br	10011760 <__alt_data_end+0xf8011760>
10011828:	18805304 	addi	r2,r3,332
1001182c:	18805215 	stw	r2,328(r3)
10011830:	003fc606 	br	1001174c <__alt_data_end+0xf801174c>
10011834:	00bfffc4 	movi	r2,-1
10011838:	003fd006 	br	1001177c <__alt_data_end+0xf801177c>

1001183c <__call_exitprocs>:
1001183c:	defff504 	addi	sp,sp,-44
10011840:	df000915 	stw	fp,36(sp)
10011844:	dd400615 	stw	r21,24(sp)
10011848:	dc800315 	stw	r18,12(sp)
1001184c:	dfc00a15 	stw	ra,40(sp)
10011850:	ddc00815 	stw	r23,32(sp)
10011854:	dd800715 	stw	r22,28(sp)
10011858:	dd000515 	stw	r20,20(sp)
1001185c:	dcc00415 	stw	r19,16(sp)
10011860:	dc400215 	stw	r17,8(sp)
10011864:	dc000115 	stw	r16,4(sp)
10011868:	d9000015 	stw	r4,0(sp)
1001186c:	2839883a 	mov	fp,r5
10011870:	04800044 	movi	r18,1
10011874:	057fffc4 	movi	r21,-1
10011878:	00840074 	movhi	r2,4097
1001187c:	108fc704 	addi	r2,r2,16156
10011880:	12000017 	ldw	r8,0(r2)
10011884:	45005217 	ldw	r20,328(r8)
10011888:	44c05204 	addi	r19,r8,328
1001188c:	a0001c26 	beq	r20,zero,10011900 <__call_exitprocs+0xc4>
10011890:	a0800117 	ldw	r2,4(r20)
10011894:	15ffffc4 	addi	r23,r2,-1
10011898:	b8000d16 	blt	r23,zero,100118d0 <__call_exitprocs+0x94>
1001189c:	14000044 	addi	r16,r2,1
100118a0:	8421883a 	add	r16,r16,r16
100118a4:	8421883a 	add	r16,r16,r16
100118a8:	84402004 	addi	r17,r16,128
100118ac:	a463883a 	add	r17,r20,r17
100118b0:	a421883a 	add	r16,r20,r16
100118b4:	e0001e26 	beq	fp,zero,10011930 <__call_exitprocs+0xf4>
100118b8:	80804017 	ldw	r2,256(r16)
100118bc:	e0801c26 	beq	fp,r2,10011930 <__call_exitprocs+0xf4>
100118c0:	bdffffc4 	addi	r23,r23,-1
100118c4:	843fff04 	addi	r16,r16,-4
100118c8:	8c7fff04 	addi	r17,r17,-4
100118cc:	bd7ff91e 	bne	r23,r21,100118b4 <__alt_data_end+0xf80118b4>
100118d0:	00800034 	movhi	r2,0
100118d4:	10800004 	addi	r2,r2,0
100118d8:	10000926 	beq	r2,zero,10011900 <__call_exitprocs+0xc4>
100118dc:	a0800117 	ldw	r2,4(r20)
100118e0:	1000301e 	bne	r2,zero,100119a4 <__call_exitprocs+0x168>
100118e4:	a0800017 	ldw	r2,0(r20)
100118e8:	10003226 	beq	r2,zero,100119b4 <__call_exitprocs+0x178>
100118ec:	a009883a 	mov	r4,r20
100118f0:	98800015 	stw	r2,0(r19)
100118f4:	00000000 	call	10000000 <__alt_mem_sdram>
100118f8:	9d000017 	ldw	r20,0(r19)
100118fc:	a03fe41e 	bne	r20,zero,10011890 <__alt_data_end+0xf8011890>
10011900:	dfc00a17 	ldw	ra,40(sp)
10011904:	df000917 	ldw	fp,36(sp)
10011908:	ddc00817 	ldw	r23,32(sp)
1001190c:	dd800717 	ldw	r22,28(sp)
10011910:	dd400617 	ldw	r21,24(sp)
10011914:	dd000517 	ldw	r20,20(sp)
10011918:	dcc00417 	ldw	r19,16(sp)
1001191c:	dc800317 	ldw	r18,12(sp)
10011920:	dc400217 	ldw	r17,8(sp)
10011924:	dc000117 	ldw	r16,4(sp)
10011928:	dec00b04 	addi	sp,sp,44
1001192c:	f800283a 	ret
10011930:	a0800117 	ldw	r2,4(r20)
10011934:	80c00017 	ldw	r3,0(r16)
10011938:	10bfffc4 	addi	r2,r2,-1
1001193c:	15c01426 	beq	r2,r23,10011990 <__call_exitprocs+0x154>
10011940:	80000015 	stw	zero,0(r16)
10011944:	183fde26 	beq	r3,zero,100118c0 <__alt_data_end+0xf80118c0>
10011948:	95c8983a 	sll	r4,r18,r23
1001194c:	a0806217 	ldw	r2,392(r20)
10011950:	a5800117 	ldw	r22,4(r20)
10011954:	2084703a 	and	r2,r4,r2
10011958:	10000b26 	beq	r2,zero,10011988 <__call_exitprocs+0x14c>
1001195c:	a0806317 	ldw	r2,396(r20)
10011960:	2088703a 	and	r4,r4,r2
10011964:	20000c1e 	bne	r4,zero,10011998 <__call_exitprocs+0x15c>
10011968:	89400017 	ldw	r5,0(r17)
1001196c:	d9000017 	ldw	r4,0(sp)
10011970:	183ee83a 	callr	r3
10011974:	a0800117 	ldw	r2,4(r20)
10011978:	15bfbf1e 	bne	r2,r22,10011878 <__alt_data_end+0xf8011878>
1001197c:	98800017 	ldw	r2,0(r19)
10011980:	153fcf26 	beq	r2,r20,100118c0 <__alt_data_end+0xf80118c0>
10011984:	003fbc06 	br	10011878 <__alt_data_end+0xf8011878>
10011988:	183ee83a 	callr	r3
1001198c:	003ff906 	br	10011974 <__alt_data_end+0xf8011974>
10011990:	a5c00115 	stw	r23,4(r20)
10011994:	003feb06 	br	10011944 <__alt_data_end+0xf8011944>
10011998:	89000017 	ldw	r4,0(r17)
1001199c:	183ee83a 	callr	r3
100119a0:	003ff406 	br	10011974 <__alt_data_end+0xf8011974>
100119a4:	a0800017 	ldw	r2,0(r20)
100119a8:	a027883a 	mov	r19,r20
100119ac:	1029883a 	mov	r20,r2
100119b0:	003fb606 	br	1001188c <__alt_data_end+0xf801188c>
100119b4:	0005883a 	mov	r2,zero
100119b8:	003ffb06 	br	100119a8 <__alt_data_end+0xf80119a8>

100119bc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
100119bc:	defffd04 	addi	sp,sp,-12
100119c0:	df000215 	stw	fp,8(sp)
100119c4:	df000204 	addi	fp,sp,8
100119c8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
100119cc:	0001883a 	nop
100119d0:	e0bfff17 	ldw	r2,-4(fp)
100119d4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
100119d8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
100119dc:	10000226 	beq	r2,zero,100119e8 <_exit+0x2c>
    ALT_SIM_FAIL();
100119e0:	002af070 	cmpltui	zero,zero,43969
100119e4:	00000106 	br	100119ec <_exit+0x30>
  } else {
    ALT_SIM_PASS();
100119e8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
100119ec:	003fff06 	br	100119ec <__alt_data_end+0xf80119ec>
